/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:50:06 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.io.SyncFailedException;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.charset.CharsetDecoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'Q';
      charArray0[2] = '1';
      charArray0[3] = 'Q';
      charArray0[4] = '.';
      charArray0[5] = '9';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 296, (-1699));
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      String string0 = "%:BJ0yx}oO%>yJ>Dhu";
      String string1 = "3j:&TO$xvv";
      Throwable throwable0 = null;
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      objectMapper0.convertValue((Object) jsonFactory0, class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string1, throwable0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, string0, (Throwable) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("No current event to copy", (String) null, 0);
      sQLTransientConnectionException0.setNextException(sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("|m&bm>&eW#Le");
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Unexpected IOException (of type %s): %s", sQLIntegrityConstraintViolationException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      jsonMappingException0.printStackTrace((PrintWriter) mockPrintWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionException0.printStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "property";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("property", "");
      JsonMappingException jsonMappingException0 = new JsonMappingException("property");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLRecoverableException0.getSuppressed();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "");
      jsonMappingException1._processor = (Closeable) null;
      sQLRecoverableException0.fillInStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "property");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException1.toString();
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) null, "com.fasterxml.jackson.databind.util.NameTransformer$1");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0, "com.fasterxml.jackson.databind.util.NameTransformer$1");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, "java.sql.SQLIntegrityConstraintViolationException[\"com.fasterxml.jackson.databind.util.NameTransformer$1\"]");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JsonLocation jsonLocation0 = new JsonLocation(jsonFactory0, 340L, 28, 34);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "H@G\"/", jsonLocation0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("0123456789ABCDEF", "H@G\"/", hashMap0, jsonMappingException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException1, (JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory0.configure(jsonFactory_Feature0, false);
      jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String string0 = "";
      MockIOException mockIOException0 = new MockIOException();
      SQLDataException sQLDataException0 = new SQLDataException("", "", mockIOException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      mockIOException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) null, "]");
      String string1 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 471);
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockThrowable mockThrowable0 = new MockThrowable("d2s;!ingIA$Pr_");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("d2s;!ingIA$Pr_");
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "d2s;!ingIA$Pr_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "[j?9zo?ALc<?JQbnt#V");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getPathReference();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "", (Throwable) jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonGeneratorDelegate0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException1.getPathReference();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      jsonMappingException0.getPathReference((StringBuilder) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.core.util.JsonGeneratorDelegate[?]", (Throwable) jsonMappingException1);
      JsonMappingException.from(jsonGenerator0, "", (Throwable) jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Y@.W}A1W3u");
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0, 1);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonParser jsonParser0 = null;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      String string0 = "d2s;!ingIA$Pr_";
      MockThrowable mockThrowable0 = new MockThrowable("d2s;!ingIA$Pr_");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("d2s;!ingIA$Pr_", "d2s;!ingIA$Pr_", 60, mockThrowable0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "d2s;!ingIA$Pr_", (Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(";}B/1O[@})c");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-549));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "Missing constructor (broken JDK (de)serialization?)");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("USE_GETTERS_AS_SETTERS");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, 836);
      jsonMappingException0.getMessage();
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) jsonMappingException0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{*- 6w(1%8taO*", "USE_GETTERS_AS_SETTERS", jsonMappingException1);
      JsonMappingException.from(jsonParser0, "USE_GETTERS_AS_SETTERS", (Throwable) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 21);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k@f hG:CUxi ;^&-@|O");
      coreXMLDeserializers_Std0.getValueType();
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s", "(y=Wsu{+[+cTG8}Fi");
      JsonMappingException jsonMappingException0 = new JsonMappingException("k@f hG:CUxi ;^&-@|O", jsonLocation0, invalidTypeIdException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, 21);
      ((JsonMappingException)invalidTypeIdException0)._buildMessage();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) objectMapper0, 41);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "");
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) null, "com.fasterxml.jackson.databind.util.NameTransformer$1");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0, "com.fasterxml.jackson.databind.util.NameTransformer$1");
      jsonMappingException_Reference0.getDescription();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      Float float0 = new Float((-1.0F));
      jsonMappingException_Reference0.setIndex(60);
      jsonMappingException_Reference0.setFieldName("H,a}aLdc,dH$w7TNhw");
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(valueNode0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(60);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null, sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = "D(E5%_<b>nZ^B\\HkoDO";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "D(E5%_<b>nZ^BHkoDO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Internal error: unknown key type ", (-569), jsonMappingException1);
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLInvalidAuthorizationSpecException0);
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-4745));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "", 2450, (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (Throwable) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (JsonMappingException.Reference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("qD>zQ )", jsonLocation0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      jsonLocation0.sourceDescription();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.setAttribute("UNKNOWN", jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      JsonMappingException jsonMappingException1 = new JsonMappingException((Closeable) null, "");
      jsonMappingException1.prependPath((Object) "", 2);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory1.enable(jsonGenerator_Feature0);
      JsonMappingException.from((JsonGenerator) null, "JSON");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      jsonMappingException0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonFactory1.disable(jsonParser_Feature0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("aq<1k1_M:6st1}z", false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)46;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((byte)46, class0, "?1|#QShUm");
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, 63);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonFactory0.enable(jsonGenerator_Feature0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis((-1029L));
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = 'I';
      charArray0[4] = 'Z';
      charArray0[5] = '6';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 60, 60);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("MISSING", "MISSING");
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) null, "com.fasterxml.jackson.databind.util.NameTransformer$1");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0, "com.fasterxml.jackson.databind.util.NameTransformer$1");
      jsonMappingException0._buildMessage();
      jsonMappingException_Reference0.getDescription();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      objectMapper0.readerFor(class0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.core.JsonGenerator", "com.fasterxml.jackson.databind.util.NameTransformer$1");
      JsonMappingException jsonMappingException1 = new JsonMappingException("Current context not Array but ");
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0, "");
      jsonMappingException_Reference1.setDescription("com.fasterxml.jackson.databind.util.NameTransformer$1");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "+4sRNTVJu^4*K,");
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0, "");
      jsonMappingException_Reference0.setDescription("");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("q2uER]", "Cannot pass null fieldName", 2450);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      jsonMappingException0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory1.enable(jsonGenerator_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonFactory0.disable(jsonParser_Feature0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("q2uER]", "q2uER]");
      JsonMappingException jsonMappingException0 = new JsonMappingException("q2uER]");
      jsonMappingException0.getPathReference();
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("q2uER]", "");
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.getFrom();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getStackTrace();
      jsonMappingException1.getCause();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory1.setInputDecorator(inputDecorator0);
      jsonMappingException0.getMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      jsonFactory2.createNonBlockingByteArrayParser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      jsonMappingException0.toString();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) byteArrayInputStream0, (int) (byte)41);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonFactory2.disable(jsonParser_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException.from((JsonParser) null, "`*-p_");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonSerializer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filteringParserDelegate0, 545);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) null, "com.fasterxml.jackson.databind.util.NameTransformer$1");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0, "com.fasterxml.jackson.databind.util.NameTransformer$1");
      jsonMappingException_Reference0.getDescription();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      Float float0 = new Float((-1.0F));
      jsonMappingException_Reference0.setIndex(60);
      jsonMappingException_Reference0.setFieldName("H,a}aLdc,dH$w7TNhw");
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(valueNode0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "java.sql.SQLIntegrityConstraintViolationException[\"com.fasterxml.jackson.databind.util.NameTransformer$1\"]");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.prependPath((Object) jsonMappingException1, "");
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[0];
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) simpleType0);
      simpleType0.toString();
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType1, typeBindings0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = arrayType0.getGenericSignature(stringBuilder0);
      jsonMappingException0.getPathReference(stringBuilder1);
      jsonMappingException0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLIntegrityConstraintViolationException) (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"\"]->UNKNOWN[\"com.fasterxml.jackson.databind.util.NameTransformer$1\"])");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedInputStream0, "V7DeK[xK?YMVE*");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("R", "}&IA3bgI}");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("}&IA3bgI}");
      jsonMappingException_Reference0.writeReplace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "}&IA3bgI}");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 0, 3879);
      JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonMappingException.from(jsonParser0, (String) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("property", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "property", (Throwable) sQLRecoverableException0);
      sQLRecoverableException0.getSuppressed();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "property");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "property", (Throwable) sQLRecoverableException0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0.toString();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0._appendPathDesc((StringBuilder) null);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.setFieldName("`eVhHuN&%PVX");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.writeReplace();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e?/:XN|Kk7e45kO");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonFactory2.disable(jsonParser_Feature0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("R", "}&IA3bgI}");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("R", "", 531, intArray0, sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", batchUpdateException0);
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("R", "}&IA3bgI}");
      jsonMappingException_Reference0.setDescription("+;l5");
      jsonMappingException_Reference0.setFieldName("ST$(OQqfr7P<SE@");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, 91);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "7O4ZR]{O");
      jsonMappingException_Reference0.setDescription("7O4ZR]{O");
      jsonMappingException_Reference0._from = (Object) "7O4ZR]{O";
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setFieldName("7O4ZR]{O");
      jsonMappingException_Reference0._fieldName = "7O4ZR]{O";
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getIndex();
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "7O4ZR]{O", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "sdVBDN#T?");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      String string0 = "property";
      String string1 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("property", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "property", (Throwable) sQLRecoverableException0);
      // Undeclared exception!
      try { 
        jsonMappingException0.initCause(sQLRecoverableException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLRecoverableException: property
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedOutputStream0, 1000);
      jsonMappingException_Reference0.setIndex(60);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setFieldName("com.fasterxml.jackson.databind.introspect.ObjectIdInfo");
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Afm+D");
      jsonMappingException0.getProcessor();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jsonMappingException_Reference0.writeReplace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int0 = 0;
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "aq<1k1_M:6st1}z";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("aq<1k1_M:6st1}z", true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte)46;
      mockFileOutputStream0.write(byteArray1);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      jsonMappingException_Reference0.getDescription();
      byteArray0[3] = (byte) (-63);
      try { 
        mockFileOutputStream0.write(byteArray0, (int) (byte) (-63), (-2438));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      int int0 = (-229);
      jsonMappingException_Reference0.setIndex((-229));
      int int1 = (-4745);
      jsonMappingException_Reference0.setIndex((-4745));
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.writeReplace();
      String string0 = "";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "l!/PGZ#,/\"4An", hashMap0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLTransientException0);
      // Undeclared exception!
      try { 
        sQLSyntaxErrorException0.initCause(sQLClientInfoException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLClientInfoException: 
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int[] intArray0 = new int[8];
      intArray0[0] = 93;
      intArray0[1] = 124;
      intArray0[2] = 124;
      intArray0[3] = 124;
      intArray0[4] = 124;
      intArray0[5] = 124;
      intArray0[6] = 124;
      intArray0[7] = 124;
      SQLDataException sQLDataException0 = new SQLDataException("m=}", (String) null, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("m=}", "", 124, intArray0, sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException(batchUpdateException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "", sQLDataException1);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.getPathReference();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      MockFile mockFile0 = new MockFile("t,b(4Iip=OaI=", "");
      String string0 = "com.fasterxml.jackson.core.Base64Variant";
      MockFile mockFile1 = new MockFile(mockFile0, "com.fasterxml.jackson.core.Base64Variant");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<DataInputStream> class0 = DataInputStream.class;
      deserializerFactoryConfig0.abstractTypeResolvers();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, (String) null);
      jsonMappingException0.prependPath((Object) null, (-1279));
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1279));
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "v=g6Ev";
      JsonMappingException jsonMappingException0 = new JsonMappingException("v=g6Ev");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0.clearLocation();
      jsonMappingException0._path = linkedList0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      linkedList0.add(jsonMappingException_Reference0);
      jsonMappingException0.getLocalizedMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string1 = "~ji{%XdWx";
      File file0 = MockFile.createTempFile("~ji{%XdWx", "");
      MockFile mockFile0 = new MockFile(file0, "GmO^^B,Zst");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.cfg.ConfigOverride", "com.fasterxml.jackson.databind.cfg.ConfigOverride");
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.cfg.ConfigOverride", sQLNonTransientConnectionException0);
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLDataException sQLDataException0 = new SQLDataException(": ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(": ", sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ": ", (Throwable) sQLIntegrityConstraintViolationException0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = simpleType0.getErasedSignature(stringBuilder0);
      jsonMappingException0._appendPathDesc(stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('{');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(93);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(byteArrayOutputStream1);
      JsonMappingException jsonMappingException0 = new JsonMappingException(printStream0, "&FDsf*Ezx5^BN.", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SerializerProvider serializerProvider0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 0);
      jsonMappingException_Reference0.toString();
      String string0 = "";
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class0);
      mapType0.withValueHandler("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")_g+87t", ")_g+87t", 1142);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) ")_g+87t", ")_g+87t");
      jsonMappingException0.prependPath((Object) ")_g+87t", 236);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 13, 236);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) jsonParserSequence0, "JSON");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }
}
