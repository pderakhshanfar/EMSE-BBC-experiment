/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:34:57 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.core.util.Separators;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.UnsupportedEncodingException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.HashMap;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Base64Alphabet length must be exactly 64 (was ");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Base64Alphabet length must be exactly 64 (was ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      objectMapper0.writeValue((DataOutput) dataOutputStream0, (Object) jsonFactory0);
      String string0 = "2[6p:xp-}SWR";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, string0);
      jsonMappingException0.getPathReference();
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createNonBlockingByteArrayParser();
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      jsonMappingException_Reference0.setIndex((-1063));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 16);
      MockThrowable mockThrowable0 = new MockThrowable("", sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "}N*A";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}N*A", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      mockPrintStream0.println(1701);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z9qfG?uNYwx");
      mockPrintStream0.print('l');
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "pq*`+t|qAB?!");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "Z9qfG?uNYwx", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLException sQLException0 = new SQLException();
      sQLInvalidAuthorizationSpecException0.setNextException(sQLException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "com.fasterxml.jackson.databind.deser.impl.CreatorCollector$StdTypeConstructor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createNonBlockingByteArrayParser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      jsonMappingException0.prependPath((Object) class0, "JSON");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("Cannot deserialize value of type `java.io.BufferedInputStream` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types (through reference chain: java.io.BufferedInputStream[\"JSON\"])", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("1z,} 2j");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) "1z,} 2j", "1z,} 2j");
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createNonBlockingByteArrayParser();
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonFactory1.disable(jsonParser_Feature0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("->");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Separators separators0 = new Separators('!', '~', '8');
      Separators separators1 = separators0.withObjectEntrySeparator('(');
      Separators.createDefaultInstance();
      separators1.withObjectEntrySeparator('f');
      MinimalPrettyPrinter minimalPrettyPrinter1 = minimalPrettyPrinter0.setSeparators(separators1);
      objectMapper0.writer((PrettyPrinter) minimalPrettyPrinter1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLTransactionRollbackException0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getPath();
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("u'<");
      jsonMappingException0.getPathReference((StringBuilder) null);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((Object) "u'<", "u'<");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("u'< (through reference chain: java.lang.String[\"u'<\"])", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 97);
      jsonMappingException1._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "Bj\"\"OcMa!6u|UB");
      jsonMappingException_Reference0.getDescription();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl1.invalidTypeIdException(resolvedRecursiveType0, "JSON", "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      invalidTypeIdException0.prependPath((JsonMappingException.Reference) null);
      StringBuilder stringBuilder0 = new StringBuilder("JSON");
      // Undeclared exception!
      try { 
        ((JsonMappingException)invalidTypeIdException0)._appendPathDesc(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("|dqU-21=*'aVzU7+` (", " (through reference chain: ");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer");
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      String string0 = "[lk8}~Y50q+";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "[lk8}~Y50q+");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<FilterOutputStream> class1 = FilterOutputStream.class;
      Class<JsonProcessingException> class2 = JsonProcessingException.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings1 = TypeBindings.create(class2, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings1, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      SimpleType simpleType0 = referenceType0.withValueHandler(jsonParser0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "JSON");
      StringBuilder stringBuilder1 = simpleType0.getErasedSignature(stringBuilder0);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getGenericSignature(stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      jsonFactory1.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) "", 93);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "JSON");
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory1);
      jsonMappingException_Reference0.getIndex();
      PipedReader pipedReader0 = new PipedReader(10);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) pipedWriter0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      jsonFactory0.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "JSON");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")JiY*;", ")JiY*;", 0);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      MockFile mockFile0 = new MockFile("JSON", "RZrOKYN1]");
      MockFile mockFile1 = new MockFile(mockFile0, ")JiY*;");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile1, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      jsonFactory2.createNonBlockingByteArrayParser();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "~X:Uf$6(wmp]V-,@Y G");
      JsonMappingException jsonMappingException0 = new JsonMappingException(filteringGeneratorDelegate0, "~X:Uf$6(wmp]V-,@Y G", sQLInvalidAuthorizationSpecException0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ~X:Uf$6(wmp]V-,@Y G", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      jsonFactory0.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "Lc+/G<Sn%ej@X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      jsonFactory0.createParser(charArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", ": ");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON", sQLTransientException0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l3*.R;~+e=K");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0, "JSON");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.prependPath((Object) sQLTransientException0, "l3*.R;~+e=K");
      assertEquals(0, sQLTransientException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      jsonFactory0.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "[lk8}~Y50q+");
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) "", "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._desc = "";
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      jsonFactory1.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "[lk8}~Y50q+");
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) "", "om.fasterxml.jackson.databind.JsonMappingException$Reference");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference1);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "[lk8}~Y50q+", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (JsonMappingException.Reference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0);
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "}ThL$g0<Xc");
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonMappingException0.getProcessor();
      assertNull(readerBasedJsonParser0.getLastClearedToken());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      jsonFactory1.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      jsonMappingException0.getProcessor();
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLException sQLException0 = new SQLException("$aOUARx6h@V`-~", "-8CJ?", 10, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("$aOUARx6h@V`-~", "-8CJ?", sQLException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "$aOUARx6h@V`-~", (Throwable) sQLTransientConnectionException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-8CJ?");
      PrintWriter printWriter0 = mockPrintWriter0.append('D');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sQLException0.printStackTrace(printWriter0);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("$aOUARx6h@V`-~");
      sQLTransientConnectionException0.fillInStackTrace();
      jsonMappingException_Reference0.getFrom();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) serializerProvider0, "1uC(YHp,XBQ7'");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = new JsonFactory();
      jsonFactory1.createNonBlockingByteArrayParser();
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'y';
      jsonFactory0.createParser(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'W';
      charArray1[1] = 'W';
      charArray1[2] = 'W';
      charArray1[3] = 'W';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 329, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonLocation jsonLocation0 = readerBasedJsonParser0.getCurrentLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, " (through reference chain: ", jsonLocation0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLException sQLException0 = new SQLException("", "JSON", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "", (Throwable) sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null, sQLException0);
      sQLException0.addSuppressed(batchUpdateException0);
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y7EOKo]U5", "y7EOKo]U5", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, "y7EOKo]U5");
      MockFile.createTempFile("y7EOKo]U5", ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid definition for property %s (of type %s): %s");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.prependPath((Object) null, "ALP`I5&q");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "Invalid definition for property %s (of type %s): %s", (Throwable) sQLInvalidAuthorizationSpecException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) null, 41);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0);
      Integer integer0 = new Integer((-1291));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) integer0, "lF:H4~4t)ie0Tl,2+:8");
      MockIOException mockIOException0 = new MockIOException((String) null, jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      String string0 = jsonMappingException1.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y7EOKo]U5", "y7EOKo]U5", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, "y7EOKo]U5");
      MockFile.createTempFile("y7EOKo]U5", ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid definition for property %s (of type %s): %s");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON", (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "NCTQ";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("", clientInfoStatus0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("NCTQ", "NCTQ", 14);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NCTQ", hashMap0, sQLTransientException0);
      sQLClientInfoException0.setNextException(sQLTransientException0);
      sQLClientInfoException0.printStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("NCTQ", (JsonLocation) null, sQLClientInfoException0);
      jsonMappingException0.getLocalizedMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<PushbackReader> class0 = PushbackReader.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      beanDeserializerBuilder0.getObjectIdReader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 536;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (-3044));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "vK@9:u y8;1^");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.prependPath((Object) defaultSerializerProvider_Impl0, 34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P{.I_T");
      jsonMappingException0._processor = (Closeable) mockPrintWriter0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[2] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 1);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) bufferedReader0, 50);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) jsonMappingException0._processor, 356);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      jsonFactory1.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "");
      StringBuilder stringBuilder0 = new StringBuilder("<@?yIDX5.GgK");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fasterxml.jackson.databind.JsonMappingException");
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("->", jsonLocation0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("->\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription((String) null);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName("");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "6ty/t7~G8");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "*zpG@77j9", (Throwable) jsonMappingException0);
      jsonMappingException0.getPath();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) jsonMappingException1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) jsonMappingException1);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapLikeType0, referenceType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(jsonMappingException0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withTypeHandler(pushbackInputStream0);
      CollectionLikeType collectionLikeType3 = collectionLikeType2.withStaticTyping();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = collectionLikeType3.getErasedSignature(stringBuilder0);
      jsonMappingException0.getPathReference(stringBuilder1);
      assertEquals("Ljava/lang/Object;UNKNOWN[?]", stringBuilder1.toString());
      assertEquals("Ljava/lang/Object;UNKNOWN[?]", stringBuilder0.toString());
      
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("UNKNOWN[?]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y7EOKo]U5", "y7EOKo]U5", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, "y7EOKo]U5");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0, "5f8L");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, referenceType0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      collectionLikeType0.withContentTypeHandler(jsonMappingException1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(jsonMappingException0);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withStaticTyping();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = referenceType0.getGenericSignature(stringBuilder0);
      collectionLikeType2.getErasedSignature(stringBuilder1);
      StringBuilder stringBuilder2 = new StringBuilder("tnOVCpK:;Yixy>;FBN");
      jsonMappingException0.getPathReference(stringBuilder2);
      assertEquals("tnOVCpK:;Yixy>;FBNjava.io.BufferedOutputStream[\"5f8L\"]->java.sql.SQLInvalidAuthorizationSpecException[\"y7EOKo]U5\"]", stringBuilder2.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      
      jsonMappingException_Reference0.setDescription((String) null);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName("");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "6ty/t7~G8");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "*zpG@77j9", (Throwable) jsonMappingException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException3 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) jsonMappingException2);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'm';
      charArray0[2] = 'k';
      charArray0[3] = 'M';
      charArray0[4] = 'i';
      charArray0[5] = 'f';
      charArray0[6] = '7';
      charArray0[7] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      BufferedReader bufferedReader0 = new BufferedReader(lineNumberReader0, 1000);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) bufferedReader0, 1000);
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JU?_[L9-XNc7o", "(XA");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "$A:wAs", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException_Reference0.setIndex(2160);
      assertEquals(2160, jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("$A:wAs\n at [Source: UNKNOWN; line: 1, column: 0]", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0);
      jsonMappingException_Reference0.setIndex(0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charArrayWriter0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, mockFileReader0, objectReader0, charsToNameCanonicalizer1, (char[]) null, 0, 0, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, (String) null);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.prependPath((Object) null, 2);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Hb5(>wIfw-a'm", 9);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "Hb5(>wIfw-a'm", 101);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("4+f)j=MYfISJG", "4+f)j=MYfISJG", "", (-279));
      stackTraceElementArray0[6] = stackTraceElement1;
      stackTraceElementArray0[7] = stackTraceElement0;
      stackTraceElementArray0[8] = stackTraceElement0;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) stackTraceElement0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.toString();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException.from((JsonGenerator) null, "`x?!d+9h/geWM(~>%");
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      boolean boolean0 = false;
      Class<BufferedReader> class1 = BufferedReader.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 0);
      // Undeclared exception!
      try { 
        coreXMLDeserializers_Std0.findBackReference("UNKNOWN[?]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot handle managed/back reference 'UNKNOWN[?]': type: value deserializer of type com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std does not support them
         //
         verifyException("com.fasterxml.jackson.databind.JsonDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      jsonMappingException_Reference0.setFieldName("3^");
      jsonMappingException_Reference0.setFieldName("w#30t$(Eh~Q(yzqV-g");
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0._index = 70;
      jsonMappingException_Reference0.writeReplace();
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertEquals("w#30t$(Eh~Q(yzqV-g", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.fillInStackTrace();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPath();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        mockFileReader0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-370), true, true, (-238), (-370));
      MockThrowable mockThrowable0 = new MockThrowable((String) null, dataTruncation0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("8}xQ=F?bw0x#2c/(F", "8}xQ=F?bw0x#2c/(F", (-370), mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("8}xQ=F?bw0x#2c/(F", sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("8}xQ=F?bw0x#2c/(F", "8}xQ=F?bw0x#2c/(F", 500, sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("8}xQ=F?bw0x#2c/(F", sQLDataException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pushbackInputStream0, "AnnotationIntrospector returned key deserializer definition of type ");
      String string0 = "unable to parse key as Class";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k2RD?%3L", "unable to parse key as Class", 126, jsonMappingException0);
      File file0 = MockFile.createTempFile("AnnotationIntrospector returned key deserializer definition of type ", "w/=tLo{hrt6");
      MockFile mockFile0 = new MockFile(file0, "k2RD?%3L");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "unable to parse key as Class");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // unable to parse key as Class
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("pE(K~ ewq+)jTi", 1033);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._index = 1033;
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName((String) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("pE(K~ ewq+)jTi", (-2535));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)73;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0, "JSON");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 0);
      jsonMappingException_Reference1._index = 0;
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._from = (Object) jsonMappingException_Reference1;
      jsonMappingException_Reference0.toString();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      // Undeclared exception!
      try { 
        coreXMLDeserializers_Std0.findBackReference("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot handle managed/back reference '': type: value deserializer of type com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std does not support them
         //
         verifyException("com.fasterxml.jackson.databind.JsonDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-91);
      byteArray0[8] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-91));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0);
      jsonMappingException_Reference0.setDescription(": ");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      JavaType javaType1 = referenceType0.getReferencedType();
      String string0 = "-dJ~m4<~bk?M9L!";
      defaultDeserializationContext_Impl0.missingTypeIdException(javaType1, "-dJ~m4<~bk?M9L!");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2930));
      Class<CharArrayWriter> class1 = CharArrayWriter.class;
      Class<ObjectInputStream> class2 = ObjectInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, (TypeBindings) null, javaType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(placeholderForType0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "-dJ~m4<~bk?M9L!");
      Class<Integer> class3 = Integer.class;
      CollectionType.construct(class3, typeBindings0, javaType0, javaTypeArray0, javaType1);
      // Undeclared exception!
      try { 
        collectionType1.getGenericSignature(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("e", "", (-283));
      SQLDataException sQLDataException0 = new SQLDataException("e", "e", (-283), sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "e", (Throwable) sQLDataException0);
      jsonMappingException0.clearLocation();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "vK@9:u y8;1^");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.prependPath((Object) defaultSerializerProvider_Impl0, 34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P{.I_T");
      jsonMappingException0._processor = (Closeable) mockPrintWriter0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, (-1995));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("If?A=0Fa0DsiB)F", "If?A=0Fa0DsiB)F", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("If?A=0Fa0DsiB)F", "If?A=0Fa0DsiB)F", "If?A=0Fa0DsiB)F", 101);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "If?A=0Fa0DsiB)F", "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = ",TF.6JiqL2";
      String string1 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",TF.6JiqL2", (String) null);
      sQLSyntaxErrorException0.fillInStackTrace();
      sQLSyntaxErrorException0.getLocalizedMessage();
      sQLSyntaxErrorException0.spliterator();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0);
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "");
      JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.JsonMappingException", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException_Reference0.setIndex((-2));
      assertEquals((-2), jsonMappingException_Reference0.getIndex());
  }
}
