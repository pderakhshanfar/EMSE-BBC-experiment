/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:04:14 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("(ws ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("(ws ");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      JsonMappingException jsonMappingException1 = null;
      try {
        jsonMappingException1 = new JsonMappingException(filteringParserDelegate0, "JYHad1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonParser jsonParser0 = null;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      String string1 = "|V)";
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserSequence0, "|V)", sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("9A");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, "9A");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0);
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "", (Throwable) sQLTimeoutException0);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) jsonParserSequence0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParser0, (-1411));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "JSON", (-1411));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      sQLNonTransientConnectionException0.initCause(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) bufferRecycler0, (-1607));
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException3, 2);
      JsonMappingException jsonMappingException5 = new JsonMappingException("JSON");
      jsonMappingException2.prependPath(jsonMappingException_Reference1);
      jsonMappingException2.prependPath(jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) bufferRecycler1, (-1411));
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) bufferRecycler0, "JSON");
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, (Object) jsonMappingException5, 2);
      jsonParser0.getValueAsString("JSON");
      jsonMappingException7.prependPath(jsonMappingException_Reference0);
      jsonMappingException4.getPath();
      // Undeclared exception!
      try { 
        jsonMappingException6.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("o", "o");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, "o");
      StringWriter stringWriter0 = new StringWriter(2);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) bufferedWriter0, 256);
      Integer integer0 = new Integer(91);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) integer0, 1024);
      jsonMappingException2.fillInStackTrace();
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      jsonMappingException2.getOriginalMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) bufferedWriter0, 91);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException3, "o");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonMappingException1, 91);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLWarning sQLWarning0 = new SQLWarning("JSON");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "LY@|U_\"c0H", (Throwable) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN");
      jsonMappingException0.fillInStackTrace();
      jsonMappingException0.getPathReference((StringBuilder) null);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(778);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 778);
      bufferedOutputStream0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      MockThrowable mockThrowable0 = new MockThrowable("N\"ANbt");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) objectOutputStream0, 0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, 2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 778);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) bufferedInputStream0, 40);
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException2.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("Zg^y");
      SQLException sQLException0 = new SQLException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "Cannot handle managed/back reference '%s': no back reference property found from type %s", (Throwable) sQLException0);
      JsonMappingException.from((DeserializationContext) null, "3WJAB!CcDr]vz+75", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", sQLSyntaxErrorException0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException1, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      JsonParser jsonParser0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Object object0 = new Object();
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, ")", (Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 91);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLInvalidAuthorizationSpecException0);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader(91);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("(was ", "(was ");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLRecoverableException0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, object0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "expected a digit for number exponent", 12);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("expected a digit for number exponent");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayBuilder0, charset0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      jsonFactory0.createGenerator((Writer) bufferedWriter0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("A1=Yj;W");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "expected a digit for number exponent", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("M9+rEc/Vyo#0'8L`%s");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("M9+rEc/Vyo#0'8L`%s", sQLDataException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "expected a digit for number exponent", 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[,;K$5 kSdCUzzL", "expected a digit for number exponent", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLNonTransientException0, 0);
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "[,;K$5 kSdCUzzL");
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      MockThrowable mockThrowable0 = new MockThrowable("j{E");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonFactory2.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      jsonMappingException0._buildMessage();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "$<wkRz");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "JSON");
      int int0 = 5;
      StringBuilder stringBuilder0 = new StringBuilder(5);
      stringBuilder0.append(false);
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException1._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "hg'");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getDescription();
      int[] intArray0 = new int[3];
      intArray0[0] = 54;
      intArray0[1] = 54;
      intArray0[2] = 54;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Cannot pass null fieldName");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", 54, intArray0, sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "", batchUpdateException0);
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '{';
      charArray0[2] = '<';
      charArray0[3] = 'x';
      charArray0[4] = 'U';
      charArray0[5] = 'J';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, ")", sQLTransientException0);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M9+rEc/Vyo#0'8L`%s", "expected a digit for number exponent", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLNonTransientException0, 0);
      jsonMappingException_Reference0.writeReplace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "M9+rEc/Vyo#0'8L`%s");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(789);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 789);
      bufferedOutputStream0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.util.NameTransformer$2", "hg'", (int[]) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("hg'");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.util.NameTransformer$2", batchUpdateException0);
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "com.fasterxml.jackson.databind.util.NameTransformer$2", 789);
      jsonMappingException0.toString();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackson.databind.util.NameTransformer$2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("eBJt:RDow%j&j^aGLzl", (-1529));
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(789);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 789);
      bufferedOutputStream0.flush();
      bufferedOutputStream0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayBuilder0);
      bufferedOutputStream0.write(2587);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      StringReader stringReader0 = new StringReader("?g'");
      batchUpdateException0.setNextException((SQLException) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) stringReader0, 1244);
      jsonMappingException0.toString();
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      jsonMappingException_Reference0.writeReplace();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3206);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedInputStream0, "message", jsonLocation0);
      SQLWarning sQLWarning0 = new SQLWarning("", "#l<0^0:UC*FtugK/Q_'", (byte) (-24), jsonMappingException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("->", sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("message", "message", 3206, sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("#l<0^0:UC*FtugK/Q_'", sQLInvalidAuthorizationSpecException0);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) null, "");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "_u%Q.-A{K";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("g+", "_u%Q.-A{K");
      JsonMappingException jsonMappingException0 = new JsonMappingException("_u%Q.-A{K", sQLRecoverableException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "zpsxLe\"S");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getPath();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, "g+", (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null KeyDeserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(789);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 789);
      bufferedOutputStream0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "com.fasterxml.jackson.databind.util.NameTransformer$2";
      String string1 = "hg'";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.util.NameTransformer$2", "hg'", (int[]) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("hg'");
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Class<Object> class0 = Object.class;
      try { 
        objectMapper0.readValue("", class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(789);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 789);
      bufferedOutputStream0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("[]", (byte) (-24));
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "[]", "[]");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultDeserializationContext_Impl0, (int) (byte) (-24));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(789);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 789);
      bufferedOutputStream0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0);
      bufferedOutputStream0.write(53);
      bufferedOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.util.NameTransformer$2", "hg'", (int[]) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) bufferedOutputStream0, 789);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator((String) null);
      jsonFactory1.createParser(" (through reference chain: ");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("xfni2\"s_YUU4");
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) null, 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException.from((JsonGenerator) null, "xfni2\"s_YUU4");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      MockThrowable mockThrowable0 = new MockThrowable("[]");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("[]", (byte) (-72));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) null, "[]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1.0));
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(beanDeserializerFactory0, doubleNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M9+rEc/Vyo#0'8L`%s", "expected a digit for number exponent", 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("M9+rEc/Vyo#0'8L`%s", sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "expected a digit for number exponent", 0);
      Integer integer0 = new Integer(1000);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "M9+rEc/Vyo#0'8L`%s", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer", 1000);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      jsonMappingException0.prependPath((Object) integer0, "','");
      jsonMappingException0.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      jsonFactory0.disable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      jsonFactory3.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Integer integer0 = new Integer(12000);
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(integer0, class0, "#V");
      jsonMappingException0.getProcessor();
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(789);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 789);
      bufferedOutputStream0.flush();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("->", "->", 87);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("->", sQLNonTransientException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, (JsonParser) null);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) jsonParserSequence0, 34);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "JSON", sQLSyntaxErrorException0);
      jsonMappingException0.toString();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator((String) null);
      jsonFactory3.createParser("A");
      jsonFactory3.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5541);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('I');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "JSON");
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter2);
      jsonMappingException0.prependPath((Object) bufferedWriter0, 242);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "A");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON", (Throwable) jsonMappingException1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      StringBuilder stringBuilder0 = new StringBuilder("email");
      jsonMappingException0.getPathReference(stringBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFrom();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) jsonMappingException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException1, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-48);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(bufferRecycler0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 116, byteArrayInputStream0, objectReader0, (ByteQuadsCanonicalizer) null, byteArray0, 0, 0, false);
      JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "UNKNOWN[?]");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException(" (one known property: \"", jsonLocation0);
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(" (one known property: \"");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 518);
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, typeBindings0, (Object) bufferedOutputStream0, (Object) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "R^T9gZ!\"/qefI!TI@i)");
      jsonMappingException_Reference0.setDescription("R^T9gZ!\"/qefI!TI@i)");
      jsonMappingException_Reference0.writeReplace();
      JsonGenerator jsonGenerator0 = null;
      Throwable throwable0 = null;
      JsonMappingException.from((JsonGenerator) null, "R^T9gZ!\"/qefI!TI@i)", (Throwable) null);
      String string0 = "@=&lx);\"Bu%f";
      String string1 = "METADATA_PROPERTY";
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1701));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1701
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.flushCachedSerializers();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      jsonMappingException0.getPath();
      jsonMappingException0.getProcessor();
      jsonMappingException0.toString();
      String string0 = "[]";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.JsonMappingException: ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "[]", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      String string0 = "";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(beanDeserializerFactory0, jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("");
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      JsonMappingException.from(jsonParser0, "HY97~?Xd/I^ guP");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      String string0 = "com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo";
      JsonMappingException jsonMappingException0 = new JsonMappingException(lineNumberReader0, "com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-11);
      String string1 = "I/!r@306_%KR;;PA$/=";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I/!r@306_%KR;;PA$/=");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      try { 
        mockFileOutputStream0.write(byteArray0, 240, 974);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "'DWmmD0zr", (byte)30);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLNonTransientException0);
      sQLNonTransientException0.printStackTrace();
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) "'DWmmD0zr", "7B");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)30;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "$sqzFlOL!aYeAoYL", (-276));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientException0);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) "", "W");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(789);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 789);
      bufferedOutputStream0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.util.NameTransformer$2", "hg'", (int[]) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) bufferedOutputStream0, 789);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("hg'");
      JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.util.NameTransformer$2", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0, 4217);
      jsonMappingException_Reference0.setIndex(2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(34);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      Class<StringReader> class1 = StringReader.class;
      TypeBindings.create(class1, (List<JavaType>) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      // Undeclared exception!
      try { 
        referenceType0.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.JsonMappingException", "Z~$_EJ8!={v9{tOi{", 0, sQLFeatureNotSupportedException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLFeatureNotSupportedException0, 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) jsonMappingException_Reference0, 0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "zN{y'rJ)|.]N81p", (Throwable) sQLTransientException0);
      jsonMappingException_Reference0.writeReplace();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1720);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal((-1066L));
      Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "Cannot construct instance of %s, problem: %s");
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      jsonMappingException_Reference0.writeReplace();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 31;
      Integer integer0 = new Integer(31);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      JsonLocation jsonLocation0 = new JsonLocation(jsonMappingException_Reference1, 31, (-2048), (-2048));
      jsonLocation0.sourceDescription();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      jsonMappingException_Reference1.setFieldName("(com.fasterxml.jackson.databind.JsonMappingException$Reference)");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, sQLSyntaxErrorException0);
      jsonMappingException0._buildMessage();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "java.lang.Integer[\"\"]");
      jsonMappingException1.prependPath(jsonMappingException_Reference1);
      jsonMappingException_Reference1.toString();
      jsonMappingException_Reference0.setDescription("java.lang.Integer[\"\"]");
      jsonMappingException_Reference0.getDescription();
      MockFile mockFile0 = new MockFile("java.lang.Integer[\"\"]", "GCKceP!z4ND");
      MockFile.createTempFile("#UjNK!/y]LDE&", "#UjNK!/y]LDE&", (File) mockFile0);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "oKcO~+z(");
      jsonMappingException0.getMessage();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
      byte[] byteArray0 = new byte[0];
      int int0 = 1194;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, bufferRecycler0.CHAR_TOKEN_BUFFER, objectReader0, mockPrintStream0, byteArray0, int0, boolean0);
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(characterEscapes0);
      String string0 = "PHo7";
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, string0);
      jsonMappingException1.getMessage();
      jsonMappingException1.getMessage();
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getMessage();
      jsonMappingException_Reference0.writeReplace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer(beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException1._buildMessage();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "8f(N9.eiq)1hW]ctk3\"");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Wt$0#k_x{", "]ARYhvA0~S", "]ARYhvA0~S", 41);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("8f(N9.eiq)1hW]ctk3\"", "", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("]ARYhvA0~S", "", "", 5245);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("8f(N9.eiq)1hW]ctk3\"", sQLSyntaxErrorException0);
      JsonMappingException.from(serializerProvider0, (String) null, (Throwable) sQLTimeoutException0);
      Throwable throwable0 = null;
      try { 
        MockURI.URI("8f(N9.eiq)1hW]ctk3\"", "", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 8f(N9.eiq)1hW]ctk3\":
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "";
      SQLException sQLException0 = new SQLException("");
      assertNotNull(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      
      int int0 = (-2618);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-2618), sQLException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals((-2618), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      sQLException0.addSuppressed(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      
      hashMap0.remove((Object) "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLException sQLException1 = (SQLException)sQLException0.fillInStackTrace();
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNotNull(sQLException1);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException1.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException1.toString());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("", sQLException1.getMessage());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) sQLInvalidAuthorizationSpecException0, "");
      assertSame(sQLException0, sQLException1);
      assertNotNull(jsonMappingException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals((-2618), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertSame(sQLException0, sQLException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals((-2618), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      String string1 = jsonMappingException0.getMessage();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.sql.SQLException:  (through reference chain: java.sql.SQLInvalidAuthorizationSpecException[\"\"])", string1);
      assertSame(sQLException0, sQLException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(string1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals((-2618), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      assertNotNull(jsonMappingException0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, "");
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotNull(jsonMappingException2);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      jsonMappingException1._processor = null;
      jsonMappingException_Reference0._index = 2;
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(2, jsonMappingException_Reference0.getIndex());
      
      String string2 = jsonMappingException_Reference0.getDescription();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("UNKNOWN[2]", string2);
      assertNotNull(string2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(2, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(2, jsonMappingException_Reference0.getIndex());
      
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals(2, int0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(2, jsonMappingException_Reference0.getIndex());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int1 = 4;
      jsonMappingException_Reference0.setFieldName("");
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals(2, jsonMappingException_Reference0.getIndex());
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, 2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("\"#nxv4=9V/0l;-%");
      assertNotNull(jsonMappingException0);
      
      StackTraceElement[] stackTraceElementArray0 = jsonMappingException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      LinkedList<JsonMappingException.Reference> linkedList0 = jsonMappingException0._path;
      assertNull(linkedList0);
      
      jsonMappingException0._path = null;
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNotNull(jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.contains(jsonMappingException_Reference0));
      assertTrue(list0.contains(jsonMappingException_Reference1));
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      jsonMappingException_Reference0.setDescription("C kQOI1Zkw");
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\"#nxv4=9V/0l;-%", false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      int int0 = 0;
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "expected a digit for number exponent", 0);
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("expected a digit for number exponent", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("M9+rEc/Vyo#0'8L`%s", sQLNonTransientException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("expected a digit for number exponent", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: M9+rEc/Vyo#0'8L`%s", sQLSyntaxErrorException0.toString());
      assertEquals("M9+rEc/Vyo#0'8L`%s", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) null, "");
      assertNotNull(jsonMappingException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("expected a digit for number exponent", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: M9+rEc/Vyo#0'8L`%s", sQLSyntaxErrorException0.toString());
      assertEquals("M9+rEc/Vyo#0'8L`%s", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
      assertNotNull(string0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer(beanProperty_Bogus0);
      assertNotNull(jsonSerializer0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) jsonMappingException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      String string1 = jsonMappingException_Reference0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("UNKNOWN[?]", string1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotNull(string1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string2 = jsonMappingException_Reference0.getFieldName();
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(string2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string3 = jsonMappingException1._buildMessage();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(string3);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotNull(jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException2);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotNull(jsonMappingException3);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      jsonMappingException_Reference0.setIndex(0);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setDescription((String) null);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._index = 1095;
      assertEquals(1095, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setDescription("IM&h`@yy>z");
      assertEquals(1095, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException_Reference1);
      assertEquals(1095, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals(1095, jsonMappingException_Reference1.getIndex());
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(object0);
      assertEquals(1095, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, ";Gd;O_Yc%8r}", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(";Gd;O_Yc%8r}", sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl1, " (through reference chain: ", (Throwable) sQLClientInfoException0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(";Gd;O_Yc%8r}", sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      Object object1 = jsonMappingException0.getProcessor();
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNull(object1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(";Gd;O_Yc%8r}", sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      String string0 = "";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedOutputStream0, "");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals("", jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      int int0 = 1128;
      jsonMappingException_Reference0.setIndex(1128);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertEquals(1128, jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.io.PipedOutputStream[\"\"]", string1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotNull(string1);
      assertEquals(1128, jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      Throwable throwable0 = null;
      JsonMappingException.Reference jsonMappingException_Reference2 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException_Reference2);
      assertEquals(1128, jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals(1128, jsonMappingException_Reference2.getIndex());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) mockPrintStream0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }
}
