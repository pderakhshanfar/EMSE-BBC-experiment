/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:46:22 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DecimalNode decimalNode0 = objectMapper0.valueToTree((Object) jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0._context;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, jsonFactory0.FORMAT_NAME_JSON);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DataFormatReaders.Match dataFormatReaders_Match0 = null;
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      objectMapper0.writeTree(jsonGenerator0, (JsonNode) decimalNode0);
      boolean boolean0 = false;
      objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, boolean0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.enable(jsonGenerator_Feature0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, jsonFactory0.FORMAT_NAME_JSON);
      jsonMappingException0.toString();
      jsonMappingException0.getLocalizedMessage();
      String string0 = "UNKNOWN";
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, string0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, string0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray1);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      String string0 = "SdUgT-?iH5*9";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientException0, "SdUgT-?iH5*9");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      sQLTransientException0.setNextException(sQLFeatureNotSupportedException0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2108, (-2663));
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(byteArrayInputStream0);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "JSON");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParser0, (-16711681));
      // Undeclared exception!
      try { 
        jsonMappingException1._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "JSON");
      byte[] byteArray0 = new byte[19];
      jsonFactory0.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      jsonFactory0.createParser(byteArray0);
      DataTruncation dataTruncation0 = new DataTruncation(4515, true, true, 1911, (-323));
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "JSON", 4515, dataTruncation0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) jsonFactory0, 967);
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      Class<JsonMappingException.Reference> class1 = JsonMappingException.Reference.class;
      InvalidFormatException invalidFormatException0 = InvalidFormatException.from((JsonParser) null, "M<##WW+lxScU,U5>", (Object) jsonMappingException0, (Class<?>) class1);
      String string0 = "";
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) class0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class1, 3554);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, jsonMappingException_Reference0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ")");
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-24);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (-567), 15);
      dataFormatReaders_Match0.createParserWithMatch();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "Ef&xz", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLDataException sQLDataException0 = new SQLDataException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      jsonMappingException1.toString();
      jsonMappingException1.getPathReference((StringBuilder) null);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLDataException) (through reference chain: UNKNOWN[?])", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getSerializerProvider();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedWriter0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('#');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)7;
      byteArray0[1] = (byte) (-51);
      byteArray0[4] = (byte) (-36);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, printStream0, byteArray0, 187, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(3973);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.append('q');
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0, "*xtl3R");
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, "");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "Uz<6)F", jsonLocation0);
      SQLWarning sQLWarning0 = new SQLWarning("_J:v\r4", "_J:v\r4", 34, jsonMappingException0);
      assertEquals(34, sQLWarning0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "Uz<6)F", jsonLocation0);
      SQLWarning sQLWarning0 = new SQLWarning("Uz<6)F", "Uz<6)F", 34, jsonMappingException0);
      assertEquals("Uz<6)F", sQLWarning0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(3975);
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0, "*xtl3R");
      jsonMappingException_Reference0.writeReplace();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "*xtl3R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.node.JsonNodeType");
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "", jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Throwable throwable0 = sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory2 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-96);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) jsonMappingException1);
      String string0 = jsonMappingException2.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: N/A", string0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      objectMapper0.reader((ContextAttributes) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("GRQEUyM-", "com.fasterxml.jackson.databind.node.JsonNodeType", (byte)0, jsonMappingException2);
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLIntegrityConstraintViolationException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath(throwable0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("I]#SDkz[2Haf,NIc\"C", "I]#SDkz[2Haf,NIc\"C");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "I]#SDkz[2Haf,NIc\"C", (Throwable) null);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('m');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) mockPrintWriter0, ">U6]");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) jsonMappingException0, ":ky)OK_Vc");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("org.evosuite.runtime.mock.java.io.MockPrintWriter[\">U6]\"]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "");
      SQLDataException sQLDataException0 = new SQLDataException("8q%n");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("I]#SDkz[2Haf,NIc\"C", "I]#SDkz[2Haf,NIc\"C");
      jsonMappingException_Reference0.getFieldName();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "I]#SDkz[2Haf,NIc\"C", (Throwable) null);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedReader0, "");
      StringBuilder stringBuilder0 = new StringBuilder(9);
      jsonMappingException0.getPathReference(stringBuilder0);
      assertEquals("java.io.PipedReader[\"\"]->java.lang.String[\"I]#SDkz[2Haf,NIc\"C\"]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i]-7K");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "_`mJj7\"Cm_]XD", (Throwable) jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1, 4);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "_`mJj7\"Cm_]XD", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.from((JsonParser) null, "com.fasterxml.jackson.databind.JsonMappingException[4]");
      String string0 = jsonMappingException2.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "I]#SDkz[2Haf,NIc\"C");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("jH", "com.fasterxml.jackson.databind.ext.Java7SupportImpl", (-1306));
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("[]");
      jsonMappingException0.prependPath((Object) "[map-like type; class %s, %s -> %s]", 2);
      jsonMappingException_Reference1.setFieldName("_i?qBadxh_H.(_eO!`u");
      jsonMappingException0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "I]#SDkz[2Haf,NIc\"C", "I]#SDkz[2Haf,NIc\"C");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException1.prependPath((Object) jsonMappingException0, (-1));
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath((Object) "", (-1));
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('m');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) mockPrintWriter0, "KL.:!jv&");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("I]#SDkz[2Haf,NIc\"C", "I]#SDkz[2Haf,NIc\"C");
      jsonMappingException_Reference0.getFieldName();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "I]#SDkz[2Haf,NIc\"C", (Throwable) null);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('m');
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      Integer.getInteger("Unrecognized inject value id type (%s), expecting String");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException1.prependPath((Object) jsonMappingException0, (-1));
      jsonMappingException_Reference0.setFieldName("");
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath((Object) "", (-1));
      String string1 = jsonMappingException1.getMessage();
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException):  (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[?])", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      String string0 = "k#ze&d9-<M><H^Z7P";
      int int0 = (-2146);
      SQLException sQLException0 = new SQLException("k#ze&d9-<M><H^Z7P", "k#ze&d9-<M><H^Z7P", (-2146));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "k#ze&d9-<M><H^Z7P", (Throwable) sQLException0);
      jsonMappingException0.getPath();
      jsonMappingException0.getPath();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("k#ze&d9-<M><H^Z7P", "zgPKv`b)G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"zgPKv`b)G\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "I]#SDkz[2Haf,NIc\"C");
      jsonMappingException_Reference0.getFieldName();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PipedWriter> class0 = PipedWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "nLo,pnBZ`#v7!pif#:");
      jsonMappingException_Reference0.toString();
      SQLDataException sQLDataException0 = new SQLDataException("jH");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.getProcessor();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "nLo,pnBZ`#v7!pif#:", (Throwable) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(34);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapLikeType0, "moduleVersion", "moduleVersion");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      jsonMappingException_Reference0.setDescription("t,R^>y u>S");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<UTF8StreamJsonParser> class1 = UTF8StreamJsonParser.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class1, "", "moduleVersion");
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("t,R^>y u>S", string0);
      
      SQLDataException sQLDataException0 = new SQLDataException("rE-'");
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "I]#SDkz[2Haf,NIc\"C");
      jsonMappingException_Reference0.getFieldName();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("jH", "com.fasterxml.jackson.databind.ext.Java7SupportImpl", (-1306));
      MockIOException mockIOException0 = new MockIOException("jH", sQLTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("I]#SDkz[2Haf,NIc\"C", "");
      String string0 = jsonMappingException_Reference1.getFieldName();
      assertNotNull(string0);
      
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "5)", (Throwable) mockIOException0);
      String string1 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: 5)", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      System.setCurrentTimeMillis(1243L);
      PipedInputStream pipedInputStream0 = new PipedInputStream(57343);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedOutputStream0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      jsonMappingException_Reference0.setDescription("]X)vVMN");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl1.weirdKeyException(class0, "", "ORDER_MAP_ENTRIES_BY_KEYS");
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("]X)vVMN", string0);
      
      SQLDataException sQLDataException0 = new SQLDataException("");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis(1243L);
      PipedInputStream pipedInputStream0 = new PipedInputStream(57343);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3}y.jVfn.%'9q7.Vi#v");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("3}y.jVfn.%'9q7.Vi#v", "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser");
      jsonMappingException_Reference0.setDescription("");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PipedWriter> class0 = PipedWriter.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.weirdKeyException(class0, "", "");
      jsonMappingException_Reference0.toString();
      SQLDataException sQLDataException0 = new SQLDataException("");
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(object0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Throwable throwable0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ")", (Throwable) null);
      jsonMappingException0.getSuppressed();
      int int0 = (-2842);
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1L), (-2842));
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      decimalNode0.asLong((-1667L));
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, ")", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      System.setCurrentTimeMillis(1243L);
      PipedInputStream pipedInputStream0 = new PipedInputStream(57343);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(decimalNode0, "");
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException jsonMappingException1 = new JsonMappingException(mockPrintStream0, "");
      jsonMappingException0.prependPath((Object) jsonMappingException1, (-1));
      jsonMappingException_Reference0.setFieldName("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Unexpected IOException (of type %s): %s", (Throwable) jsonMappingException1);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      try { 
        objectReader0.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      String string0 = "";
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) jsonMappingException1);
      List<JsonMappingException.Reference> list0 = jsonMappingException2.getPath();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(929);
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.setIndex(2443);
      jsonMappingException_Reference0.setIndex((-887));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "moduleVersion");
      jsonMappingException_Reference0.setDescription("]X)vVMN");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PipedWriter> class0 = PipedWriter.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind.MappingJsonFactory", "");
      jsonMappingException_Reference0.toString();
      SQLDataException sQLDataException0 = new SQLDataException("` 4J$I)6@'YBN\"!vd");
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertEquals((-887), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ")", (Throwable) null);
      jsonMappingException0.getSuppressed();
      BigDecimal bigDecimal0 = BigDecimal.valueOf(0L, (-2842));
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      decimalNode0.asLong(0L);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(decimalNode0);
      jsonMappingException0.getStackTrace();
      jsonMappingException_Reference0.getFieldName();
      Object object0 = jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getCause();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.prependPath(object0, 0);
      jsonMappingException_Reference0.setFieldName((String) null);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ) (through reference chain: com.fasterxml.jackson.databind.node.DecimalNode[0])", string0);
      
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, "U");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "");
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(was ", "(was ");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "(was ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("2{d}UH5+X`u,w");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("a%`Od=&f", hashMap0, sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("a%`Od=&f", "a%`Od=&f", 500, sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("a%`Od=&f", jsonLocation0, sQLIntegrityConstraintViolationException0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "a%`Od=&f");
      jsonMappingException0.getPathReference(stringBuilder0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonLocation0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte)40;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)15, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "QB[Re+X2X");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-3914);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, (-3914));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "hC@+KGk:;}";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "hC@+KGk:;}");
      jsonMappingException_Reference0.getDescription();
      String string1 = "(was ";
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("hC@+KGk:;}");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "JSON", (Throwable) sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException("&QQi`_CYp(&-QIB");
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) "(was ", 125);
      Throwable throwable0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 17, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) uTF8DataInputJsonParser0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "hC@+KGk:;}";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        jsonFactory0.createParser((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      jsonFactory0.createParser(byteArray0);
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      objectMapper0.disable(jsonParser_FeatureArray0);
      ObjectReader objectReader1 = new ObjectReader(objectReader0, (TokenFilter) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.isEnabled(jsonFactory_Feature0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1._context;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      jsonMappingException0._appendPathDesc((StringBuilder) null);
      jsonMappingException0._appendPathDesc((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.node.JsonNodeType");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.node.JsonNodeType\n at [Source: (byte[])\"\u0000\uFFFD\"; line: 1, column: 0]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ")", (Throwable) null);
      jsonMappingException0.getSuppressed();
      BigDecimal bigDecimal0 = BigDecimal.valueOf(0L, (-2842));
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      decimalNode0.asLong(0L);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(decimalNode0);
      jsonMappingException0.getStackTrace();
      jsonMappingException_Reference0.getFieldName();
      Object object0 = jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getCause();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.prependPath(object0, 0);
      jsonMappingException_Reference0.setFieldName((String) null);
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath((Object) deserializerFactoryConfig0, (-1702));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, 0);
      sequenceInputStream0.close();
      sequenceInputStream0.mark((byte) (-110));
      sequenceInputStream0.markSupported();
      jsonMappingException_Reference0._fieldName = "UWReDx/c>[";
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.getDescription();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "UNKNOWN");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      jsonMappingException0.prependPath((Object) pushbackInputStream0, "java.io.SequenceInputStream[\"UWReDx/c>[\"]");
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Class<FilterInputStream> class0 = FilterInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, (DataInput) null, objectReader0, byteQuadsCanonicalizer1, 110);
      JsonMappingException jsonMappingException0 = new JsonMappingException("`osi$5M7", (JsonLocation) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) uTF8DataInputJsonParser0, "com.fasterxml.jackson.databind.JsonMappingException$Reference", (Throwable) sQLSyntaxErrorException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      int int0 = (-3681);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3681));
      String string0 = "g^/#jU5)]*>";
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(placeholderForType0, "", "g^/#jU5)]*>");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(jsonMappingException0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.toString();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UNKNOWN[\"\"]");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) "", "");
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 802;
      intArray0[3] = 8233;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(was ", intArray0, jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) sQLNonTransientConnectionException0, 2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3517);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      Class<ReaderBasedJsonParser> class1 = ReaderBasedJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("");
      JavaType javaType0 = typeBindings1.findBoundType("");
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      // Undeclared exception!
      try { 
        CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1602);
      intArray0[1] = 97;
      intArray0[2] = (-419);
      intArray0[3] = 1000;
      intArray0[4] = 444;
      intArray0[5] = 4155;
      intArray0[6] = 2236;
      intArray0[7] = (-2104);
      intArray0[8] = 5441;
      MockIOException mockIOException0 = new MockIOException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" (through reference chain: ", intArray0, mockIOException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("root", "root", batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("root", "root", sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "Xz`b%PsrR#m)&");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = '5';
      charArray0[2] = '^';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0._buildMessage();
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) "", (Object) jsonFactory0);
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) arrayType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = arrayType0.getErasedSignature(stringBuilder0);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getErasedSignature(stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(" (through reference chain: ", (Throwable) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, " (through reference chain: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      String string0 = "h_+*1Q";
      jsonMappingException_Reference0.setFieldName("h_+*1Q");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "aE2o8";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@*_ih0ies7W", "aE2o8", 0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("@*_ih0ies7W", sQLInvalidAuthorizationSpecException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("aOpExavi:Dm$h*k");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) jsonFactory1;
      PrintStream printStream0 = mockPrintStream0.printf("aOpExavi:Dm$h*k", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      jsonFactory0.createGenerator((OutputStream) dataOutputStream0, jsonEncoding0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, "aE2o8", (Throwable) jsonMappingException0);
      jsonMappingException0.getLocalizedMessage();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      jsonMappingException1.prependPath((Object) mockFileInputStream0, "JSON");
      ObjectMapper objectMapper1 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      // Undeclared exception!
      try { 
        objectMapper1.treeAsTokens(arrayNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("wk.7=W:\u0003:-BtB");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      jsonFactory0.copy();
      String string0 = "&fAzU1\"";
      try { 
        MockURI.URI("&fAzU1\"", "E@QAt:Q`ANvJ", "&fAzU1\"", "jnjNREJ", "JSON");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: &fAzU1\"://E@QAt:Q%60ANv%7FJ&fAzU1%22?jnjNREJ#JSON
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(3973);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0, "*xtl3R");
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(929);
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.setIndex(2443);
      jsonMappingException_Reference0.setIndex((-887));
      jsonMappingException_Reference0.setDescription("]X)vVMN");
      assertEquals((-887), jsonMappingException_Reference0.getIndex());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PipedWriter> class0 = PipedWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, "->");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize Map key of type `java.io.PipedWriter` from String [N/A]: ->", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = ": ";
      JsonMappingException jsonMappingException0 = new JsonMappingException(": ");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(beanDeserializerFactory0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1290));
      // Undeclared exception!
      try { 
        placeholderForType0.withValueHandler(simpleValueInstantiators0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, "Invalid 'any-getter' annotation on method ");
      jsonMappingException_Reference0.getFieldName();
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("java.io.ByteArrayInputStream[\"Invalid 'any-getter' annotation on method \"]", string0);
      assertNotNull(string0);
      assertEquals("Invalid 'any-getter' annotation on method ", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = (-4363);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("{G:Z|_]0k#q;i", (-4363));
      jsonMappingException_Reference0.setDescription("{G:Z|_]0k#q;i");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex((-4363));
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("0", "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      MockFile mockFile1 = new MockFile("");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      jsonFactory2.disable(jsonFactory_Feature0);
      boolean boolean0 = true;
      mockFile1.setExecutable(true);
      try { 
        jsonFactory2.createGenerator((File) mockFile1, jsonEncoding1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFile mockFile0 = new MockFile("gHrG~s8U", "d#u5~tTenx");
      File file0 = MockFile.createTempFile("gHrG~s8U", "gHrG~s8U", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "d#u5~tTenx";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter1.format("d#u5~tTenx", objectArray0);
      mockPrintWriter1.println();
      Locale locale0 = Locale.ITALIAN;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      batchUpdateException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLDataException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(printWriter0, "a\"#-}.rw0Ls", sQLNonTransientException0);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, object0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription(")");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(")", string0);
  }
}
