/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:48:44 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("", 0L);
      ArrayNode arrayNode0 = objectNode1.putArray("Unresolved forward reference but no identity info: ");
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "fJ'`8t>1PZvoe_*?");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("fJ'`8t>1PZvoe_*?\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 965, objectReader0, byteArrayOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "e`");
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("e`", true);
      JsonMappingException jsonMappingException2 = new JsonMappingException(mockFileOutputStream0, "JSON", jsonMappingException1);
      JsonMappingException jsonMappingException3 = JsonMappingException.from(jsonParser0, "e`", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException4 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "");
      assertNotSame(jsonMappingException4, jsonMappingException3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) sQLRecoverableException0, 954);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory1.setOutputDecorator(outputDecorator0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false, "UNKNOWN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException("uri");
      Integer integer0 = new Integer((-167));
      StringReader stringReader0 = new StringReader("c+t!}(\"Qm6G6{K-");
      jsonMappingException0.prependPath((Object) stringReader0, (-167));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "n)h>/:&7<?,");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, (-2200));
      // Undeclared exception!
      try { 
        jsonMappingException2.prependPath((Object) jsonMappingException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 2183);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "`", 2183);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      try { 
        objectMapper0.writeValueAsString(jsonFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "", (Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UNKNOWN");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "UNKNOWN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "j]K4G` |z'", mockIOException0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "");
      jsonMappingException_Reference0.getDescription();
      SQLTransientException sQLTransientException0 = new SQLTransientException("(was ");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(380);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = placeholderForType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = jsonMappingException0.getPathReference(stringBuilder1);
      jsonMappingException0.getPathReference(stringBuilder2);
      assertEquals("$381UNKNOWN[\"\"]UNKNOWN[\"\"]", stringBuilder2.toString());
      assertEquals("$381UNKNOWN[\"\"]UNKNOWN[\"\"]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 965, objectReader0, byteArrayOutputStream0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, false);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonFactory_Feature1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory5.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) uTF8JsonGenerator0, 1021);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("com.fasterxml.jackson.core.json.UTF8JsonGenerator[1021]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 3474;
      intArray0[3] = 3474;
      intArray0[4] = 3474;
      intArray0[5] = 226;
      intArray0[6] = 10;
      intArray0[7] = 3474;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 10, intArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Incomplete surrogate pair: first char 0x";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Incomplete surrogate pair: first char 0x", 91);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("cs+S-XP-<RB$C/'ml");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 256);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedWriter0, "cs+S-XP-<RB$C/'ml");
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "JSON", jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonFactory0, "T/Cq@l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      Stack<JsonMappingException.Reference> stack0 = new Stack<JsonMappingException.Reference>();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("4_n/");
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'O';
      charArray0[2] = '{';
      charArray0[3] = 'm';
      charArray0[4] = '+';
      charArray0[5] = 'S';
      charArray0[6] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) charArrayReader0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) filteringParserDelegate0, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Do not know how to construct standard type id resolver for idType: ");
      int int0 = 3474;
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getStackTrace();
      jsonMappingException0.getMessage();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("MaX");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, ")");
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      JsonMappingException.fromUnexpectedIOE(mockIOException0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException.from(jsonParser0, ".T");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonGenerator0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Incomplete surrogate pair: first char 0x", "Incomplete surrogate pair: first char 0x", 91, intArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0);
      JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      List<JsonMappingException.Reference> list0 = new Stack<JsonMappingException.Reference>();
      jsonMappingException0.prependPath((Object) sQLRecoverableException0, 0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      int int0 = 3474;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", 3474);
      jsonMappingException0.getPath();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Incomplete surrogate pair: first char 0x", "Incomplete surrogate pair: first char 0x", 91, intArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0);
      batchUpdateException0.getUpdateCounts();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.sql.BatchUpdateException[?]", string0);
      assertNotNull(string0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      SQLTransientException sQLTransientException0 = new SQLTransientException(" (by deserializer of type ");
      JsonMappingException jsonMappingException0 = new JsonMappingException(")", jsonLocation0, sQLTransientException0);
      jsonMappingException0.getCause();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(25);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "A+D?iNEd}[", (JsonLocation) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getPath();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      jsonMappingException1.prependPath((Object) bufferedInputStream0, 32);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "cs+S-XP-<RB$C/'ml";
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "cs+S-XP-<RB$C/'ml");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, ")");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sequenceInputStream0, ")");
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonMappingException1.getProcessor();
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, ")");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getPath();
      jsonMappingException1.prependPath((Object) jsonGenerator0, 0);
      assertEquals(31, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 965, objectReader0, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "e`");
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, 965);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "!B$z2kf05-gtkJh~QE", 3);
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) ">P4", (-4115));
      JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "!B$z2kf05-gtkJh~QE", (Throwable) jsonMappingException1);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.from(jsonGenerator0, ")");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      String string0 = null;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 15);
      jsonMappingException0.prependPath((Object) "", 3466);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._desc = "";
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getIndex();
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.prependPath((Object) "", "");
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals(" (through reference chain: java.lang.String[\"\"])", string1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1), (InputStream) null, objectReader0, byteQuadsCanonicalizer0, byteArray0, 24, (-1969), false);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 965, objectReader0, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "e`");
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, 965);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      String string0 = "!B$z2kf05-gtkJh~QE";
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "!B$z2kf05-gtkJh~QE", 3);
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException1._path = linkedList0;
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException2, ": ");
      ObjectMapper objectMapper2 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, (String) null);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, (String) null);
      jsonMappingException1.toString();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(965, (-2239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._desc = "";
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getIndex();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.prependPath((Object) "", "");
      jsonMappingException0.getLocalizedMessage();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      objectMapper0.readerFor(class0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((Object) class0, 4211);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 249;
      intArray0[1] = 1350;
      intArray0[2] = (-1869);
      intArray0[3] = (-3160);
      intArray0[4] = 34;
      intArray0[5] = 3370;
      intArray0[6] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      batchUpdateException0.spliterator();
      batchUpdateException0.spliterator();
      batchUpdateException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "hJ@:;>-56^jfeH", "79pc]\"U-tf6~", 3370);
      stackTraceElementArray0[0] = stackTraceElement0;
      batchUpdateException0.setStackTrace(stackTraceElementArray0);
      batchUpdateException0.getStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("hJ@:;>-56^jfeH", batchUpdateException0);
      batchUpdateException0.getSuppressed();
      jsonMappingException0.getPathReference((StringBuilder) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      String string0 = jsonMappingException1.getMessage();
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): hJ@:;>-56^jfeH", string0);
      
      jsonMappingException1.initCause(jsonMappingException0);
      jsonMappingException0.getProcessor();
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
      
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("6");
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.getPathReference();
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("6", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNotNull(object0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      dupDetector0.child();
      dupDetector0.findLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("f/;:PvCTtx(/V3n\"OD0", (JsonLocation) null);
      String string0 = "";
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException0.toString();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      jsonFactory0.createParser((Reader) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonFactory0.configure(jsonParser_Feature0, true);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'C';
      charArray0[2] = '[';
      charArray0[3] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, "@(yDMl=^z+K", 0, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoException1.printStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@(yDMl=^z+K", sQLClientInfoException1);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayReader0, (String) null, sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "com.fasterxml.jackson.databind.deser.DeserializerFactory", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", (-133));
      sQLNonTransientException0.getSuppressed();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0, 0);
      jsonMappingException_Reference0._index = 63;
      jsonMappingException_Reference0.toString();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream1, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, objectMapper0, bufferedOutputStream0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(41, 30);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "j6IA|?UTyA?J7fpDW");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "v'hJ3LmN[Z";
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "v'hJ3LmN[Z");
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._buildMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Rh(9=ECL\"Eo,LJ8 ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      // Undeclared exception!
      try { 
        jsonFactory3.createGenerator((File) null, jsonEncoding0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = ",content=";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedOutputStream0, ",content=");
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._fieldName = "java.io.PipedOutputStream[\",content=\"]";
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1000);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._desc = "";
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getIndex();
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.prependPath((Object) "", "");
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals(" (through reference chain: java.lang.String[\"\"])", string1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1), (InputStream) null, objectReader0, byteQuadsCanonicalizer0, byteArray0, 24, (-1969), false);
      JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "Zy$VzU7", (Throwable) jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 0);
      jsonMappingException_Reference0.setFieldName("o#$6gCx");
      jsonMappingException_Reference0.getDescription();
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("java.lang.Object[\"o#$6gCx\"]", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("java.lang.Object[\"o#$6gCx\"]", 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.lang.Object[\"o#$6gCx\"]", "java.lang.Object[\"o#$6gCx\"]", (Throwable) null);
      sQLTransientException0.getLocalizedMessage();
      MockIOException mockIOException0 = new MockIOException(sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException0._path = null;
      jsonMappingException_Reference1.setDescription("java.lang.Object[\"o#$6gCx\"]");
      jsonMappingException_Reference1.setIndex(0);
      assertEquals(0, jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLTransientException0);
      sQLTransientException0.getSuppressed();
      sQLTransientException0.spliterator();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0._buildMessage();
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)88;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "uYf>P\"UHPImi,o");
      jsonMappingException0.prependPath((Object) "uYf>P\"UHPImi,o", 0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("uYf>P\"UHPImi,o\n at [Source: (byte[])\"\uFFFD\uFFFD\u0018\uFFFD\u0011\u0001IX\"; line: 1, column: 0] (through reference chain: java.lang.String[0])", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, ")");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.prependPath((Object) uTF8JsonGenerator0, 0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) sQLRecoverableException0, "#3e:.Y0V,w(1rz64");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(25);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "->");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("->", "->", jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) jsonMappingException0, 1);
      String string0 = "}4O";
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "->", (Throwable) sQLRecoverableException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException1.getLocalizedMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string1 = "<;Z2mH hW'5!";
      String string2 = "";
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      jsonMappingException_Reference0.getDescription();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("9Y", false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0);
      jsonMappingException_Reference0.getFieldName();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, (String) null);
      JsonMappingException.from(deserializationContext0, "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) "9Y", (-464));
      TypeReference<ByteArrayInputStream> typeReference0 = (TypeReference<ByteArrayInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, " entries");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectMapper0, byteQuadsCanonicalizer1, byteArray0, (byte) (-16), 767, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(uTF8StreamJsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getIndex();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("B1kF&2VUvn", "UNKNOWN[0]", 1023, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "UNKNOWN[0]", intArray0, sQLTimeoutException0);
      batchUpdateException0.getNextException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)0;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      Class<Throwable> class0 = Throwable.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, (String) null);
      ((JsonMappingException)mismatchedInputException0)._appendPathDesc((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.deser.std.MapDeserializer";
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.deser.std.MapDeserializer");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0);
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.deser.std.MapDeserializer");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 0);
      jsonMappingException_Reference1.getIndex();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(598);
      IOContext iOContext0 = new IOContext(bufferRecycler0, charArrayWriter0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(598);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 126, objectReader0, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1850);
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "m;I", (Throwable) sQLWarning0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("an,kaJ?'");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, (-766));
      JsonParser jsonParser0 = null;
      String string0 = "A~F";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      int int0 = 0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean1 = true;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        filteringParserDelegate0.getCodec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = '_';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, (ObjectCodec) null, byteArrayBuilder0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "", (Throwable) sQLTransientConnectionException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 838;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "%]p_)^D]BH][u", 4840, intArray0, sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) batchUpdateException0, (-677));
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "}4O", (Throwable) sQLTimeoutException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getLocalizedMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "<;Z2mH hW'5!");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException1.prependPath((Object) "(was java.sql.BatchUpdateException) (through reference chain: java.sql.BatchUpdateException[?])", "");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("u>Fe)#", "dL?g*", (-3253));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) sQLTransientConnectionException0);
      assertNotNull(jsonMappingException0);
  }
}
