/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 04:10:50 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      String string0 = "";
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      String string1 = "";
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      try { 
        objectMapper1.writeValueAsString(jsonFactory1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JsonParser jsonParser0 = null;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertNotNull(jsonParserDelegate0);
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      
      String string0 = "";
      String string1 = "J8@5'";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "J8@5'", (-939));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-939), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[]", "[]", (-939), sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-939), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-939), sQLSyntaxErrorException0.getErrorCode());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLSyntaxErrorException0);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-939), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-939), sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.fillInStackTrace();
      assertNotNull(sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-939), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-939), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException1.toString());
      assertEquals((-939), sQLSyntaxErrorException1.getErrorCode());
      assertEquals("[]", sQLSyntaxErrorException1.getMessage());
      assertEquals("[]", sQLSyntaxErrorException1.getSQLState());
      
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "", sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("wxthContentIncluio.");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.prependPath((Object) pipedInputStream0, "wxthContentIncluio.");
      assertEquals(0, pipedInputStream0.available());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.printStackTrace();
      assertSame(jsonMappingException0, jsonMappingException1);
      
      String string1 = jsonMappingException1.getMessage();
      assertEquals("wxthContentIncluio. (through reference chain: UNKNOWN[?]->UNKNOWN[?]->java.io.PipedInputStream[\"wxthContentIncluio.\"])", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      JsonMappingException jsonMappingException3 = defaultDeserializationContext_Impl0.weirdStringException("@!R-l)H*/9kw@A^F", class0, "4<l");
      assertNotNull(jsonMappingException3);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException4 = new JsonMappingException("UNKNOWN[?]");
      assertNotNull(jsonMappingException4);
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(class0, "UNKNOWN[?]");
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals("UNKNOWN[?]", jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      String string2 = jsonMappingException_Reference1.getDescription();
      assertEquals("java.io.ByteArrayOutputStream[\"UNKNOWN[?]\"]", string2);
      assertNotNull(string2);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertEquals("UNKNOWN[?]", jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<String> class0 = String.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      InvalidFormatException invalidFormatException0 = new InvalidFormatException((JsonParser) null, "gQzat]", "gQzat]", class0);
      assertNotNull(invalidFormatException0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "gQzat]", (Throwable) invalidFormatException0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      String string0 = invalidFormatException0.getMessage();
      assertEquals("gQzat]", string0);
      assertNotNull(string0);
      
      invalidFormatException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "gQzat]");
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertNotNull(jsonMappingException3);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      
      String string1 = jsonMappingException3.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): gQzat]", string1);
      assertNotNull(string1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException4 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "gQzat]");
      assertNotNull(jsonMappingException4);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      
      JsonMappingException jsonMappingException5 = JsonMappingException.from(deserializationContext0, "gQzat]");
      assertNotNull(jsonMappingException5);
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException4));
      assertNotSame(jsonMappingException5, jsonMappingException2);
      assertNotSame(jsonMappingException5, jsonMappingException0);
      assertNotSame(jsonMappingException5, jsonMappingException3);
      assertNotSame(jsonMappingException5, jsonMappingException1);
      assertNotSame(jsonMappingException5, jsonMappingException4);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      String string2 = jsonMappingException0.getMessage();
      assertEquals("gQzat]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      String string3 = jsonMappingException0._buildMessage();
      assertEquals("gQzat]", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException6 = JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException6);
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertNotSame(jsonMappingException6, jsonMappingException3);
      assertNotSame(jsonMappingException6, jsonMappingException5);
      assertNotSame(jsonMappingException6, jsonMappingException0);
      assertNotSame(jsonMappingException6, jsonMappingException4);
      assertNotSame(jsonMappingException6, jsonMappingException1);
      assertNotSame(jsonMappingException6, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException6);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException7 = JsonMappingException.from(deserializationContext0, "gQzat]");
      assertNotNull(jsonMappingException7);
      assertFalse(jsonMappingException7.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException7.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException7.equals((Object)jsonMappingException6));
      assertFalse(jsonMappingException7.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException7.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException7.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException7.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException7, jsonMappingException2);
      assertNotSame(jsonMappingException7, jsonMappingException5);
      assertNotSame(jsonMappingException7, jsonMappingException6);
      assertNotSame(jsonMappingException7, jsonMappingException4);
      assertNotSame(jsonMappingException7, jsonMappingException1);
      assertNotSame(jsonMappingException7, jsonMappingException3);
      assertNotSame(jsonMappingException7, jsonMappingException0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException8 = JsonMappingException.from(deserializationContext0, "->");
      assertNotNull(jsonMappingException8);
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException6));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException2));
      assertNotSame(jsonMappingException8, jsonMappingException6);
      assertNotSame(jsonMappingException8, jsonMappingException5);
      assertNotSame(jsonMappingException8, jsonMappingException4);
      assertNotSame(jsonMappingException8, jsonMappingException1);
      assertNotSame(jsonMappingException8, jsonMappingException0);
      assertNotSame(jsonMappingException8, jsonMappingException7);
      assertNotSame(jsonMappingException8, jsonMappingException3);
      assertNotSame(jsonMappingException8, jsonMappingException2);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException9 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException6, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException9);
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException8));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException8));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException6));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException8));
      assertSame(jsonMappingException6, jsonMappingException9);
      assertNotSame(jsonMappingException6, jsonMappingException3);
      assertNotSame(jsonMappingException6, jsonMappingException5);
      assertNotSame(jsonMappingException6, jsonMappingException0);
      assertNotSame(jsonMappingException6, jsonMappingException7);
      assertNotSame(jsonMappingException6, jsonMappingException4);
      assertNotSame(jsonMappingException6, jsonMappingException1);
      assertNotSame(jsonMappingException6, jsonMappingException2);
      assertNotSame(jsonMappingException6, jsonMappingException8);
      assertNotSame(jsonMappingException9, jsonMappingException1);
      assertSame(jsonMappingException9, jsonMappingException6);
      assertNotSame(jsonMappingException9, jsonMappingException8);
      assertNotSame(jsonMappingException9, jsonMappingException2);
      assertNotSame(jsonMappingException9, jsonMappingException4);
      assertNotSame(jsonMappingException9, jsonMappingException3);
      assertNotSame(jsonMappingException9, jsonMappingException0);
      assertNotSame(jsonMappingException9, jsonMappingException7);
      assertNotSame(jsonMappingException9, jsonMappingException5);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException7);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException6);
      assertNotSame(jsonMappingException0, jsonMappingException9);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException8);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException10 = JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException8);
      assertNotNull(jsonMappingException10);
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException6));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException8.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException6));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException8));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException5));
      assertNotSame(jsonMappingException8, jsonMappingException6);
      assertNotSame(jsonMappingException8, jsonMappingException5);
      assertNotSame(jsonMappingException8, jsonMappingException4);
      assertNotSame(jsonMappingException8, jsonMappingException1);
      assertNotSame(jsonMappingException8, jsonMappingException0);
      assertNotSame(jsonMappingException8, jsonMappingException7);
      assertNotSame(jsonMappingException8, jsonMappingException3);
      assertNotSame(jsonMappingException8, jsonMappingException9);
      assertNotSame(jsonMappingException8, jsonMappingException10);
      assertNotSame(jsonMappingException8, jsonMappingException2);
      assertNotSame(jsonMappingException10, jsonMappingException6);
      assertNotSame(jsonMappingException10, jsonMappingException7);
      assertNotSame(jsonMappingException10, jsonMappingException3);
      assertNotSame(jsonMappingException10, jsonMappingException0);
      assertNotSame(jsonMappingException10, jsonMappingException1);
      assertNotSame(jsonMappingException10, jsonMappingException4);
      assertNotSame(jsonMappingException10, jsonMappingException9);
      assertNotSame(jsonMappingException10, jsonMappingException8);
      assertNotSame(jsonMappingException10, jsonMappingException2);
      assertNotSame(jsonMappingException10, jsonMappingException5);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException11 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException6, (Object) "->", "");
      assertNotNull(jsonMappingException11);
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException8));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException10));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException6));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException10));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException8));
      assertFalse(jsonMappingException11.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException11.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException11.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException11.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException11.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException11.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException11.equals((Object)jsonMappingException8));
      assertFalse(jsonMappingException11.equals((Object)jsonMappingException10));
      assertFalse(jsonMappingException11.equals((Object)jsonMappingException2));
      assertSame(jsonMappingException6, jsonMappingException9);
      assertNotSame(jsonMappingException6, jsonMappingException3);
      assertNotSame(jsonMappingException6, jsonMappingException5);
      assertNotSame(jsonMappingException6, jsonMappingException0);
      assertNotSame(jsonMappingException6, jsonMappingException7);
      assertNotSame(jsonMappingException6, jsonMappingException4);
      assertNotSame(jsonMappingException6, jsonMappingException1);
      assertNotSame(jsonMappingException6, jsonMappingException2);
      assertNotSame(jsonMappingException6, jsonMappingException8);
      assertNotSame(jsonMappingException6, jsonMappingException10);
      assertSame(jsonMappingException6, jsonMappingException11);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException7);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException6);
      assertNotSame(jsonMappingException0, jsonMappingException9);
      assertNotSame(jsonMappingException0, jsonMappingException11);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(jsonMappingException0, jsonMappingException10);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertNotSame(jsonMappingException11, jsonMappingException5);
      assertNotSame(jsonMappingException11, jsonMappingException4);
      assertNotSame(jsonMappingException11, jsonMappingException7);
      assertNotSame(jsonMappingException11, jsonMappingException1);
      assertNotSame(jsonMappingException11, jsonMappingException3);
      assertNotSame(jsonMappingException11, jsonMappingException0);
      assertNotSame(jsonMappingException11, jsonMappingException8);
      assertNotSame(jsonMappingException11, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertNotSame(jsonMappingException11, jsonMappingException2);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        jsonMappingException6.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      assertNotNull(serializerProvider0);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, "IL||");
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, (String) null, (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, 224);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(224, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(224, jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException1, true);
      assertNotNull(iOContext0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1783, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1783, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotNull(readerBasedJsonParser1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1783, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(1783, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from((JsonParser) readerBasedJsonParser1, "E#26tw:j#V/F'@H:Ai+");
      assertNotNull(jsonMappingException3);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1783, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(1783, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')");
      assertFalse(boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')", sQLTimeoutException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "JSON", (Throwable) sQLTimeoutException0);
      assertNotNull(jsonMappingException0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')", sQLTimeoutException0.toString());
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("JSON", string0);
      assertNotNull(string0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')", sQLTimeoutException0.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')", sQLTimeoutException0.toString());
      
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("withContentInclusion");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath((Object) pipedInputStream0, "withContentInclusion");
      assertEquals(0, pipedInputStream0.available());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.printStackTrace();
      assertSame(jsonMappingException0, jsonMappingException1);
      
      String string2 = jsonMappingException1.getMessage();
      assertEquals("withContentInclusion (through reference chain: UNKNOWN[?]->UNKNOWN[?]->java.io.PipedInputStream[\"withContentInclusion\"])", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string3 = jsonMappingException1.getLocalizedMessage();
      assertEquals("withContentInclusion (through reference chain: UNKNOWN[?]->UNKNOWN[?]->java.io.PipedInputStream[\"withContentInclusion\"])", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      assertNotNull(mockFileOutputStream0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) mockFileOutputStream0, (-1183));
      assertNotNull(jsonMappingException3);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) "withContentInclusion (through reference chain: UNKNOWN[?]->UNKNOWN[?]->java.io.PipedInputStream[\"withContentInclusion\"])", "withContentInclusion");
      assertNotNull(jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      Throwable throwable0 = jsonMappingException4.initCause(jsonMappingException3);
      assertNotNull(throwable0);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("withContentInclusion", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: withContentInclusion", throwable0.toString());
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException4, "withContentInclusion");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("withContentInclusion");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.prependPath((Object) pipedInputStream0, "';ctors: ");
      assertEquals(0, pipedInputStream0.available());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string2 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string2);
      assertNotNull(string2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.printStackTrace();
      assertSame(jsonMappingException0, jsonMappingException1);
      
      String string3 = jsonMappingException1.getMessage();
      assertEquals("withContentInclusion (through reference chain: UNKNOWN[?]->UNKNOWN[?]->java.io.PipedInputStream[\"';ctors: \"])", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      pipedInputStream0.mark(1140);
      assertEquals(0, pipedInputStream0.available());
      
      String string4 = jsonMappingException1.getLocalizedMessage();
      assertEquals("withContentInclusion (through reference chain: UNKNOWN[?]->UNKNOWN[?]->java.io.PipedInputStream[\"';ctors: \"])", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNull(jsonParser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      assertNotNull(jsonParserSequence0);
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      assertNotNull(mockFileOutputStream0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) mockFileOutputStream0, (-1201));
      assertNotNull(jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) "withContentInclusion (through reference chain: UNKNOWN[?]->UNKNOWN[?]->java.io.PipedInputStream[\"';ctors: \"])", "';ctors: ");
      assertNotNull(jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      MockThrowable mockThrowable0 = new MockThrowable(jsonMappingException3);
      assertNotNull(mockThrowable0);
      
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException5 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException5);
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException4));
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(jsonMappingException5, jsonMappingException2);
      assertNotSame(jsonMappingException5, jsonMappingException1);
      assertNotSame(jsonMappingException5, jsonMappingException0);
      assertNotSame(jsonMappingException5, jsonMappingException3);
      assertNotSame(jsonMappingException5, jsonMappingException4);
      
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException6);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException5));
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException5);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException6);
      assertSame(jsonMappingException6, jsonMappingException3);
      assertSame(jsonMappingException6, jsonMappingException4);
      assertNotSame(jsonMappingException6, jsonMappingException5);
      assertSame(jsonMappingException6, jsonMappingException1);
      assertSame(jsonMappingException6, jsonMappingException2);
      assertSame(jsonMappingException6, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertNotNull(readerBasedJsonParser0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "JSON", (Throwable) null);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("JSON\n at [Source: (String)\"JSON\"; line: 1, column: 0]", string0);
      assertNotNull(string0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("n14");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(object0, "n14");
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("n14", jsonMappingException_Reference1.getFieldName());
      
      String string0 = jsonMappingException_Reference1.getFieldName();
      assertEquals("n14", string0);
      assertNotNull(string0);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("n14", jsonMappingException_Reference1.getFieldName());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3145);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, "'; ctors: ");
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex((-741));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-741), jsonMappingException_Reference0.getIndex());
      
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, jsonMappingException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-741), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      
      jsonMappingException1.printStackTrace();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-741), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      
      String string2 = jsonMappingException0.getMessage();
      assertEquals("n14 (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"'; ctors: \"])", string2);
      assertNotNull(string2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      JsonMappingException jsonMappingException2 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, (String) null);
      assertNotNull(jsonMappingException2);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string3 = jsonMappingException2.getLocalizedMessage();
      assertEquals("Cannot deserialize value of type `org.evosuite.runtime.mock.java.io.MockFileInputStream` from String [N/A]: null", string3);
      assertNotNull(string3);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException3);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-741), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) sQLDataException0);
      assertNotNull(jsonMappingException4);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertNotNull(jsonParserDelegate0);
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "com.fasterxml.jackson.databind.JsonMappingException$Reference", (Throwable) jsonMappingException3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("com.fasterxml.jackson.annotation.JsonTypeInfo$Id");
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8705, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "JSON");
      assertNotNull(jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8705, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8705, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "H6+", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("H6+", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0, "");
      assertNotNull(jsonMappingException_Reference0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "", (Throwable) null);
      assertNotNull(jsonMappingException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("g?Pg0n)4X~`(S7@BA", "", "", 9);
      assertNotNull(stackTraceElement0);
      assertEquals("", stackTraceElement0.getFileName());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals("g?Pg0n)4X~`(S7@BA", stackTraceElement0.getClassName());
      assertEquals("g?Pg0n)4X~`(S7@BA.(:9)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(9, stackTraceElement0.getLineNumber());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      assertEquals(1, stackTraceElementArray0.length);
      
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(jsonMappingException_Reference1, Integer.MAX_VALUE);
      assertNotNull(jsonMappingException_Reference2);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertEquals(Integer.MAX_VALUE, jsonMappingException_Reference2.getIndex());
      
      String string0 = jsonMappingException_Reference2.getDescription();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException$Reference[2147483647]", string0);
      assertNotNull(string0);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference2);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertEquals(Integer.MAX_VALUE, jsonMappingException_Reference2.getIndex());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<MockRandomAccessFile> class0 = MockRandomAccessFile.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer", class0, "");
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotNull(jsonFactory2);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)41;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory2.createParser(byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-92), (byte)2, (byte)56, (byte) (-73), (byte)41}, byteArray0);
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      
      Class<Object> class1 = Object.class;
      InvalidFormatException invalidFormatException0 = new InvalidFormatException(uTF8StreamJsonParser0, (String) null, deserializerFactoryConfig1, class1);
      assertNotNull(invalidFormatException0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(invalidFormatException0.equals((Object)jsonMappingException0));
      assertEquals(6, byteArray0.length);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-92), (byte)2, (byte)56, (byte) (-73), (byte)41}, byteArray0);
      
      String string1 = invalidFormatException0.toString();
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: N/A\n at [Source: UNKNOWN; line: 1, column: 0]", string1);
      assertNotNull(string1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(invalidFormatException0.equals((Object)jsonMappingException0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, byteArray0.length);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(invalidFormatException0, jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-92), (byte)2, (byte)56, (byte) (-73), (byte)41}, byteArray0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLSyntaxErrorException0);
      assertNotNull(batchUpdateException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLSyntaxErrorException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", batchUpdateException0.getMessage());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLSyntaxErrorException0, "z+Du|/'OQN6");
      assertNotNull(jsonMappingException_Reference0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("z+Du|/'OQN6", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setFieldName("z+Du|/'OQN6");
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("z+Du|/'OQN6", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("z+Du|/'OQN6", jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("(was java.sql.SQLSyntaxErrorException) (through reference chain: java.sql.SQLSyntaxErrorException[\"z+Du|/'OQN6\"])", string0);
      assertNotNull(string0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("z+Du|/'OQN6", jsonMappingException_Reference0.getFieldName());
      
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLSyntaxErrorException0, 0);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      jsonMappingException_Reference0.setIndex((-37));
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-37), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, sQLSyntaxErrorException0);
      assertNotNull(sQLDataException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-37), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.printStackTrace();
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-37), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("(was java.sql.SQLSyntaxErrorException) (through reference chain: java.sql.SQLSyntaxErrorException[?])", string0);
      assertNotNull(string0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-37), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "Hn>..LiQO6Fk4,!M");
      assertNotNull(jsonMappingException1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("(was java.sql.SQLSyntaxErrorException) (through reference chain: java.sql.SQLSyntaxErrorException[?])", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-37), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Hn>..LiQO6Fk4,!M", (Throwable) sQLSyntaxErrorException0);
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException3);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-37), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = jsonMappingException3.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertEquals(3, stackTraceElementArray0.length);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-37), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertNotNull(jsonMappingException4);
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null, (Throwable) jsonMappingException3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(")");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      ShortNode shortNode0 = new ShortNode((short) (-577));
      assertNotNull(shortNode0);
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isLong());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isDouble());
      assertEquals((-577.0), shortNode0.doubleValue(), 0.01);
      assertEquals((-577L), shortNode0.longValue());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isObject());
      assertNull(shortNode0.textValue());
      assertEquals((-577), shortNode0.intValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals((short) (-577), shortNode0.shortValue());
      assertFalse(shortNode0.isFloat());
      assertEquals((-577.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isInt());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath((Object) pipedInputStream0, " };J1KEsA6aYKiB");
      assertEquals(0, pipedInputStream0.available());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("'; ctors: ");
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      String string2 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string2);
      assertNotNull(string2);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException1.printStackTrace();
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string3 = jsonMappingException0.getMessage();
      assertEquals(") (through reference chain: java.lang.String[?]->java.io.PipedInputStream[\" };J1KEsA6aYKiB\"])", string3);
      assertNotNull(string3);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      pipedInputStream0.mark(414);
      assertEquals(0, pipedInputStream0.available());
      
      String string4 = jsonMappingException1.getLocalizedMessage();
      assertEquals("(was java.sql.SQLSyntaxErrorException) (through reference chain: UNKNOWN[?])", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference2 = null;
      try {
        jsonMappingException_Reference2 = new JsonMappingException.Reference(deserializerFactoryConfig0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      String string0 = "H6+";
      PipedInputStream pipedInputStream0 = new PipedInputStream(1051);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.mark(258);
      assertEquals(0, pipedInputStream0.available());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, ",;L6qE>{a:R\"tu", (JsonLocation) null);
      assertNotNull(jsonMappingException0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals(",;L6qE>{a:R\"tu", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, pipedInputStream0.available());
      
      String string2 = "Jx=q3#Mj1Q#AGq+Sw(";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "Jx=q3#Mj1Q#AGq+Sw(");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Jx=q3#Mj1Q#AGq+Sw(", jsonMappingException_Reference0.getFieldName());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8G?A`v5}amK'9cNE");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Un14", "Un14");
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("Un14", sQLNonTransientException0.getSQLState());
      assertEquals("Un14", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: Un14", sQLNonTransientException0.toString());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, (byte)0);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("java.lang.Object[0]", string0);
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      
      RawValue rawValue0 = new RawValue("+");
      assertNotNull(rawValue0);
      
      ObjectNode objectNode1 = objectNode0.putRawValue(")", rawValue0);
      assertNotNull(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isLong());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, ".$0ms^-f");
      assertNotNull(jsonMappingException0);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      JsonMappingException jsonMappingException1 = new JsonMappingException(byteArrayInputStream0, "");
      assertNotNull(jsonMappingException1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string1 = jsonMappingException1._buildMessage();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertNotNull(list0);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(list0.contains(jsonMappingException_Reference0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator((OutputDecorator) null);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser("Gnw");
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(9217, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      SQLException sQLException0 = new SQLException("&,4i", sQLTimeoutException0);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: &,4i", sQLException0.toString());
      assertEquals("&,4i", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: &,4i", sQLException0.toString());
      assertEquals("&,4i", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      jsonMappingException0.printStackTrace();
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: &,4i", sQLException0.toString());
      assertEquals("&,4i", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter0, (-3045));
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("", stringWriter0.toString());
      assertEquals((-3045), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("java.io.StringWriter[?]", string0);
      assertNotNull(string0);
      assertEquals("", stringWriter0.toString());
      assertEquals((-3045), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedWriter0, false);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string1 = "";
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "\"CUo}-m}");
      assertNotNull(invalidTypeIdException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(invalidTypeIdException0.getTypeId());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("", stringWriter0.toString());
      assertEquals((-3045), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        jsonMappingException1.prependPath((Object) "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("withContentInclusion");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setDescription("IwY@Gb]#r2!UpNdtsd");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      assertNotNull(byteArray0);
      assertEquals(8000, byteArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      
      iOContext1.releaseNameCopyBuffer((char[]) null);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("withContentInclusion");
      assertNotNull(mockPrintWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintWriter0);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonMappingException jsonMappingException1 = new JsonMappingException(pipedInputStream0, "", jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      
      PipedInputStream pipedInputStream1 = (PipedInputStream)jsonMappingException1.getProcessor();
      assertNotNull(pipedInputStream1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertSame(pipedInputStream0, pipedInputStream1);
      assertSame(pipedInputStream1, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, pipedInputStream1.available());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte)105, (byte)18, (byte)0, (byte)93, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, (byte)105);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte)105, (byte)18, (byte)0, (byte)93, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(105, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("java.io.ByteArrayInputStream[105]", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte)105, (byte)18, (byte)0, (byte)93, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(105, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      
      RawValue rawValue0 = new RawValue("java.io.ByteArrayInputStream[105]");
      assertNotNull(rawValue0);
      
      ObjectNode objectNode1 = objectNode0.putRawValue("java.io.ByteArrayInputStream[105]", rawValue0);
      assertNotNull(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      
      ObjectNode objectNode2 = objectNode1.put("java.io.ByteArrayInputStream[105]", (short) (byte)0);
      assertNotNull(objectNode2);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      
      ArrayNode arrayNode0 = objectNode2.putArray("java.io.ByteArrayInputStream[105]");
      assertNotNull(arrayNode0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertNotNull(dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) byteArrayInputStream0);
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(7, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte)105, (byte)18, (byte)0, (byte)93, (byte)0}, byteArray0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(7, byteArrayInputStream0.available());
      
      ObjectReader objectReader0 = dataFormatReaders_Match0.getReader();
      assertNull(objectReader0);
      assertEquals(7, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte)105, (byte)18, (byte)0, (byte)93, (byte)0}, byteArray0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(7, byteArrayInputStream0.available());
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      assertNotNull(jsonParser0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "java.io.ByteArrayInputStream[105]");
      assertNotNull(jsonMappingException0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("n14");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(object0, "n14");
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals("n14", jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      String string0 = jsonMappingException_Reference1.getFieldName();
      assertEquals("n14", string0);
      assertNotNull(string0);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertEquals("n14", jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3145);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, "'; ctors: ");
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, jsonMappingException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      
      jsonMappingException1.printStackTrace();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      
      String string2 = jsonMappingException0.getMessage();
      assertEquals("n14 (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"'; ctors: \"])", string2);
      assertNotNull(string2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      JsonMappingException jsonMappingException2 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, (String) null);
      assertNotNull(jsonMappingException2);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string3 = jsonMappingException2.getLocalizedMessage();
      assertEquals("Cannot deserialize value of type `org.evosuite.runtime.mock.java.io.MockFileInputStream` from String [N/A]: null", string3);
      assertNotNull(string3);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException3);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference1);
      assertNotNull(jsonMappingException4);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("n14", jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      StackTraceElement[] stackTraceElementArray0 = jsonMappingException4.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(3, stackTraceElementArray0.length);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("n14", jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLSyntaxErrorException0, 0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("java.sql.SQLSyntaxErrorException[0]", string0);
      assertNotNull(string0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      iOContext0.releaseNameCopyBuffer((char[]) null);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" (through reference chain: ");
      assertNotNull(mockPrintWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintWriter0);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(63, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(writerBasedJsonGenerator0, " (through reference chain: ", sQLSyntaxErrorException0);
      assertNotNull(jsonMappingException0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(63, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("Une#YWW}8fYhFD`");
      assertNotNull(mockIOException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "Une#YWW}8fYhFD`", 226, mockIOException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(226, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Une#YWW}8fYhFD`", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, (String) null, (Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLSyntaxErrorException0, 0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.sql.SQLSyntaxErrorException[0]", string0);
      assertNotNull(string0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("java.sql.SQLSyntaxErrorException[0]", string1);
      assertNotNull(string1);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.JsonMappingException$Reference", "QY");
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.JsonMappingException$Reference", sQLNonTransientException0.toString());
      assertEquals("QY", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException$Reference", sQLNonTransientException0.getMessage());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLSyntaxErrorException0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      assertNotNull(jsonMappingException_Reference0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException$Reference", jsonMappingException_Reference0.getFieldName());
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("o&oqOZ", (String) null, 1326);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("o&oqOZ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: o&oqOZ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1326, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("o&oqOZ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: o&oqOZ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1326, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      
      Throwable[] throwableArray0 = sQLIntegrityConstraintViolationException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals("o&oqOZ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: o&oqOZ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1326, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      sQLFeatureNotSupportedException0.setNextException(sQLIntegrityConstraintViolationException0);
      assertEquals("o&oqOZ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: o&oqOZ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1326, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedException0.addSuppressed(sQLTransientException0);
      assertEquals("o&oqOZ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: o&oqOZ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1326, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      String string0 = "";
      JsonLocation jsonLocation0 = new JsonLocation("", 0L, 0L, (-452), (-452));
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-452), jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-452), jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      
      String string1 = jsonLocation0.toString();
      assertEquals("[Source: (String)\"\"; line: -452, column: -452]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-452), jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-452), jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      
      String string2 = jsonLocation0.sourceDescription();
      assertEquals("(String)\"\"", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-452), jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-452), jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      
      String string3 = jsonLocation0.toString();
      assertEquals("[Source: (String)\"\"; line: -452, column: -452]", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-452), jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-452), jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      
      String string4 = jsonLocation0.toString();
      assertEquals("[Source: (String)\"\"; line: -452, column: -452]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-452), jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-452), jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-452), jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-452), jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-452), jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-452), jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLSyntaxErrorException0, (-22));
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-22), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("java.sql.SQLSyntaxErrorException[?]", string0);
      assertNotNull(string0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-22), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-22), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = new JsonMappingException("java.sql.SQLSyntaxErrorException[?]");
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException_Reference0, 19);
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-22), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      assertNotNull(jsonMappingException0);
      
      String string2 = jsonMappingException0._buildMessage();
      assertEquals("N/A", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = jsonMappingException0.getMessage();
      assertEquals("N/A", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "N/A", "VRMP.>]'Jt");
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      jsonMappingException_Reference0.setIndex(1);
      assertEquals(1, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string4 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: N/A (through reference chain: java.lang.String[\"VRMP.>]'Jt\"])", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("withContentInclusion");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription("IwY@Gb]#r2!UpNdtsd");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "");
      assertNotNull(invalidTypeIdException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(invalidTypeIdException0.getTypeId());
      
      InvalidTypeIdException invalidTypeIdException1 = (InvalidTypeIdException)JsonMappingException.wrapWithPath((Throwable) invalidTypeIdException0, jsonMappingException_Reference0);
      assertNotNull(invalidTypeIdException1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(invalidTypeIdException0, invalidTypeIdException1);
      assertSame(invalidTypeIdException1, invalidTypeIdException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(invalidTypeIdException0.getTypeId());
      assertNull(invalidTypeIdException1.getTypeId());
      
      jsonMappingException0._processor = (Closeable) pipedInputStream0;
      assertEquals(0, pipedInputStream0.available());
      
      jsonMappingException0.prependPath((Object) pipedInputStream0, "'; ctors: ");
      assertEquals(0, pipedInputStream0.available());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("IwY@Gb]#r2!UpNdtsd", string1);
      assertNotNull(string1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.printStackTrace();
      assertSame(jsonMappingException0, jsonMappingException1);
      
      String string2 = jsonMappingException1.getMessage();
      assertEquals("withContentInclusion (through reference chain: IwY@Gb]#r2!UpNdtsd->IwY@Gb]#r2!UpNdtsd->java.io.PipedInputStream[\"'; ctors: \"])", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string3 = jsonMappingException1.getLocalizedMessage();
      assertEquals("withContentInclusion (through reference chain: IwY@Gb]#r2!UpNdtsd->IwY@Gb]#r2!UpNdtsd->java.io.PipedInputStream[\"'; ctors: \"])", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonParser_Feature1);
      assertNotNull(jsonFactory4);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory5);
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory5.createNonBlockingByteArrayParser();
      assertNotNull(nonBlockingJsonParser0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonParser) nonBlockingJsonParser0, (String) null, (Throwable) sQLWarning0);
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      assertNotNull(jsonMappingException0);
      
      String string2 = jsonMappingException0._buildMessage();
      assertEquals("N/A", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory4 = jsonFactory0.disable(jsonParser_Feature1);
      assertNotNull(jsonFactory4);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      
      JsonFactory jsonFactory5 = jsonFactory2.enable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory5);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory5, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertNotNull(nonBlockingJsonParser0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) nonBlockingJsonParser0, "N/A", (Throwable) sQLWarning0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(lineNumberReader0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileReader0, "");
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "8Ax2!K0w", (Throwable) jsonMappingException0);
      jsonMappingException1.getProcessor();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider0, "");
      SQLTransientException sQLTransientException0 = new SQLTransientException(jsonMappingException2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionException0.setNextException(sQLTransientException0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLTransientException0.getMessage());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory_Feature0.enabledIn(1000);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference2 = (JsonMappingException.Reference)jsonMappingException_Reference1.writeReplace();
      List<JsonMappingException.Reference> list0 = jsonMappingException2.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference2));
      
      jsonMappingException1.getProcessor();
      JsonMappingException jsonMappingException4 = JsonMappingException.fromUnexpectedIOE(jsonMappingException3);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, (Object) jsonMappingException_Reference2, "");
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("+wi?7", "", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals("UNKNOWN[\"\"]", stringBuilder0.toString());
      
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("UNKNOWN[\"\"]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("X1vCv", ": ", (-1458));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "FAIL_ON_MISSING_CREATOR_PROPERTIES", (Throwable) sQLSyntaxErrorException0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(lineNumberReader0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileReader0, "");
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "8Ax2!K0w", (Throwable) jsonMappingException0);
      jsonMappingException1.getProcessor();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.toString();
      JsonMappingException.from(serializerProvider0, "", (Throwable) jsonMappingException2);
      jsonMappingException_Reference0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory2.enable(jsonFactory_Feature0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._desc = "Ub~&k_ItRN'42:";
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName("3D");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "3D");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "[]";
      objectArray0[1] = (Object) valueInstantiators_Base0;
      objectArray0[2] = (Object) fileDescriptor0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "[]", objectArray0);
      jsonMappingException0.printStackTrace(printWriter0);
      jsonMappingException0.getProcessor();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "mBi:(%I");
      jsonMappingException1.prependPath((Object) fileDescriptor0, 0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "8diQ;ka_]SZ", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, "d");
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-47);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[]", "8diQ;ka_]SZ", (-47), intArray0, jsonMappingException0);
      JsonMappingException jsonMappingException3 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) batchUpdateException0);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "`AR1zW5+]3}#od");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("`AR1zW5+]3}#od", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      String string0 = "True";
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "True");
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(lineNumberReader0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileReader0, "");
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "8Ax2!K0w", (Throwable) jsonMappingException0);
      jsonMappingException1.getProcessor();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider0, "");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException3 = JsonMappingException.from(serializerProvider0, "", (Throwable) jsonMappingException2);
      jsonMappingException_Reference0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference1);
      jsonMappingException4.printStackTrace();
      jsonMappingException2.getMessage();
      jsonMappingException0.getLocalizedMessage();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      String string1 = jsonMappingException2.getMessage();
      assertEquals("", string1);
      
      String string2 = jsonMappingException4.getPathReference();
      assertEquals("java.io.LineNumberReader[?]", string2);
      
      jsonMappingException_Reference0.setDescription("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory_Feature0, "R- WRr,1");
      jsonMappingException_Reference0._fieldName = "Unrecognized character escape ";
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      JsonFactory.Feature.collectDefaults();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.core.JsonFactory$Feature[\"Unrecognized character escape \"]", "R- WRr,1");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransientConnectionException0);
      sQLTransientConnectionException0.setNextException(sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      jsonFactory_Feature0.enabledIn(41);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.getPath();
      jsonMappingException0.getProcessor();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) sQLTransientException0, "com.fasterxml.jackson.core.JsonFactory$Feature[\"Unrecognized character escape \"]");
      assertEquals("Unrecognized character escape ", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      jsonMappingException0._buildMessage();
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) null, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = new JsonMappingException((String) null);
      jsonMappingException_Reference0.setIndex(1);
      assertEquals(1, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("withContentInclusion");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.setDescription("IwY@Gb]#r2!UpNdtsd");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      jsonMappingException0._processor = (Closeable) pipedInputStream0;
      jsonMappingException0.prependPath((Object) pipedInputStream0, "'; ctors: ");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.printStackTrace();
      jsonMappingException2.getMessage();
      jsonMappingException2.getLocalizedMessage();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      String string0 = jsonMappingException3.getMessage();
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): withContentInclusion (through reference chain: IwY@Gb]#r2!UpNdtsd->IwY@Gb]#r2!UpNdtsd->java.io.PipedInputStream[\"'; ctors: \"])", string0);
      
      jsonMappingException0.getPathReference();
      jsonMappingException_Reference0.setDescription("withContentInclusion");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      String string0 = "";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      jsonMappingException0.getPathReference();
      int int0 = 2;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, 2);
      jsonMappingException_Reference0.setIndex(2);
      int int1 = 3603;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, defaultSerializerProvider_Impl0, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      objectMapper0.reader(deserializationFeature0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 47;
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("kVS", "kVS", 47, sQLWarning0);
      sQLRecoverableException0.spliterator();
      String string0 = "";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0, "");
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        sQLRecoverableException0.initCause((Throwable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with a null
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      jsonMappingException0._buildMessage();
      jsonMappingException0.getMessage();
      jsonMappingException_Reference0.setIndex(1);
      assertEquals(1, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileReader0);
      jsonMappingException_Reference0.getFieldName();
      String string0 = " (through reference chain: ";
      String string1 = "LS_}d-ntNV";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.exc.PropertyBindingException", (JsonLocation) null);
      jsonMappingException0._buildMessage();
      ByteArrayBuilder byteArrayBuilder0 = null;
      try {
        byteArrayBuilder0 = new ByteArrayBuilder((-247));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0, 0);
      jsonMappingException_Reference0.getFrom();
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 64);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) pipedInputStream0);
      dataFormatReaders_Match0.getReader();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "02q/]]dB2pe");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ul&pOOZ&H*6:q'gF^", "Ul&pOOZ&H*6:q'gF^", sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("Ul&pOOZ&H*6:q'gF^", sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Ul&pOOZ&H*6:q'gF^", "Ul&pOOZ&H*6:q'gF^", 0, sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Ul&pOOZ&H*6:q'gF^", (Throwable) jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "y[@$7M'(Kp]|+(A";
      JsonMappingException jsonMappingException0 = new JsonMappingException("y[@$7M'(Kp]|+(A");
      jsonMappingException0.clearLocation();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("y[@$7M'(Kp]|+(A", "y[@$7M'(Kp]|+(A");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // y[@$7M'(Kp]|+(A
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("->", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("C8", sQLTransactionRollbackException0);
      sQLTransientConnectionException1.setNextException(sQLTransactionRollbackException0);
      sQLTransientConnectionException1.printStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("RV*AO)687|2~i.Vi)|`", sQLTransientConnectionException1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "->", "->");
      sQLTransientConnectionException1.setNextException(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "RV*AO)687|2~i.Vi)|`");
      jsonMappingException1.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException1, 91);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.setDescription("+v");
      jsonMappingException_Reference0.getIndex();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException1);
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider0, "C8", (Throwable) sQLNonTransientException0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip(0L);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, 2026);
      jsonMappingException_Reference0.setDescription("mV,@@Y8gE");
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals(2026, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLSyntaxErrorException0, 0);
      jsonMappingException_Reference0.toString();
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "java.sql.SQLSyntaxErrorException[0]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(232);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(93);
      jsonMappingException_Reference0._index = 232;
      jsonMappingException_Reference0.getIndex();
      String string0 = "9&r17";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("9&r17", "9&r17");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 9&r17
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("yl]YM~g$e", 0L, 0L, (-2584), 0);
      jsonLocation0.toString();
      jsonLocation0.toString();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "yl]YM~g$e");
      JsonMappingException jsonMappingException0 = new JsonMappingException("yl]YM~g$e", jsonLocation0, sQLSyntaxErrorException0);
  }
}
