/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:40:00 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.MinguoEra;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " (through reference chain: ");
      JsonMappingException jsonMappingException0 = new JsonMappingException(" (through reference chain: ");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getMessage();
      jsonMappingException0.fillInStackTrace();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) " (through reference chain: ", "%(nN");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, "hostnam");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      System.setCurrentTimeMillis(2673L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "AS", false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)34;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (-1685), (byte)0, false);
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      objectMapper0.convertValue((Object) uTF8StreamJsonParser0, class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      FloatNode floatNode0 = new FloatNode((-422.07544F));
      BigInteger bigInteger0 = floatNode0.bigIntegerValue();
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "com.fasterxml.jackson.databind.JsonMappingException");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException$Reference[?]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RTbs6");
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<StringWriter> class0 = StringWriter.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      HashMap<JsonParserDelegate, TypeIdResolver> hashMap0 = new HashMap<JsonParserDelegate, TypeIdResolver>();
      objectReader0.withAttributes(hashMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReaderBasedJsonParser> class1 = ReaderBasedJsonParser.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      hashMap0.put(jsonParserSequence0, classNameIdResolver0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParserSequence0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) class0, (-1273));
      jsonMappingException0.getMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper0, "F");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.printStackTrace();
      jsonMappingException0.getPathReference();
      booleanNode0.isBoolean();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jsonMappingException_Reference0._from = (Object) hashMap0;
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, "+");
      String string0 = jsonMappingException1.toString();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException$Reference\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"+\"]->com.fasterxml.jackson.databind.ObjectMapper[\"F\"]->java.io.StringWriter[?])", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stdKeyDeserializers0, "");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = new JsonMappingException("UNKNOWN[?]");
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) deserializerFactoryConfig0, 2270);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, jsonMappingException_Reference0);
      Object object0 = new Object();
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, object0, "UNKNOWN[?]");
      jsonMappingException6.prependPath(jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<StringWriter> class0 = StringWriter.class;
      defaultDeserializationContext0.weirdKeyException(class0, "+ cR~bQ>U<Jv?", "");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "UNKNOWN[?]", (Throwable) jsonMappingException1);
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException0, 2270);
      // Undeclared exception!
      try { 
        jsonMappingException7.prependPath((Object) defaultDeserializationContext0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stdKeyDeserializers0, "");
      int int0 = 2262;
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "HzevHt>$u\"[";
      JsonMappingException jsonMappingException0 = new JsonMappingException("HzevHt>$u\"[");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("HzevHt>$u\"[");
      JsonMappingException jsonMappingException1 = new JsonMappingException("HzevHt>$u\"[");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("HzevHt>$u\"[", "HzevHt>$u\"[");
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonMappingException1, 854);
      // Undeclared exception!
      try { 
        jsonMappingException3._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object object0 = new Object();
      Class<MinguoEra> class0 = MinguoEra.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(object0, class0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "m*\\Sg$W5-7#`@K";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "m*Sg$W5-7#`@K");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stdKeyDeserializers0, "m*Sg$W5-7#`@K");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UNKNOWN[?]");
      int int0 = 2228;
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException_Reference1._desc = "m*Sg$W5-7#`@K";
      JsonMappingException jsonMappingException2 = new JsonMappingException("m*Sg$W5-7#`@K");
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      jsonMappingException3.prependPath(jsonMappingException_Reference1);
      jsonMappingException_Reference1._index = 2228;
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException3.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("qNeKoVX$AJ");
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) booleanNode0, 2704);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException");
      TreeSet<ObjectReader> treeSet0 = new TreeSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(treeSet0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)105;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      dataFormatReaders_Match0.createParserWithMatch();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Could not find creator property with name '%s' (known Creator properties: %s)");
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, jsonLocation0, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "*@pxaJi40C]7HW@[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[3];
      jsonFactory0.createParser(charArray0, (-1953), (-1953));
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.clearLocation();
      jsonMappingException0.getMessage();
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("qNW8eKoVX$AJ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("UNKNOWN[0]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-1622));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException_Reference1.toString();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON", (Throwable) jsonMappingException1);
      jsonMappingException2.prependPath(jsonMappingException_Reference1);
      Throwable throwable0 = null;
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      jsonMappingException2._buildMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) booleanNode0, "UNKNOWN[?]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.JsonMappingException$Reference", 1683);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.toString();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedReader pipedReader0 = new PipedReader();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedReader0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, objectMapper0, pipedOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 56319;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = (-1876);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException$Reference (through reference chain: java.lang.String[1683])", "com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException$Reference (through reference chain: java.lang.String[1683])", (-2749), intArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, (String) null, (Throwable) batchUpdateException0);
      jsonMappingException1.getMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "";
      SQLException sQLException0 = new SQLException("i1eG =,,", "i1eG =,,", (-2464));
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLWarning0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) sQLSyntaxErrorException0);
      jsonMappingException0._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) "", "char[]");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("{a}J*lW`X");
      mockIOException0.toString();
      mockIOException0.printStackTrace();
      mockIOException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransientException sQLTransientException0 = new SQLTransientException("w", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("6|Up(B%RsV=%wQtX", ")1L^fr/8", 63, sQLTransientException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m9|bdD[iC");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("6|Up(B%RsV=%wQtX", (-7280));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      jsonMappingException0.getLocalizedMessage();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "vdcaZi");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "m9|bdD[iC", (Throwable) mockIOException0);
      jsonMappingException0._buildMessage();
      StringWriter stringWriter0 = new StringWriter();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stringWriter0, "{a}J*lW`X");
      StringBuilder stringBuilder0 = jsonMappingException1.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "m*Sg$W5-7#`@K");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stdKeyDeserializers0, "m*Sg$W5-7#`@K");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("", 2228);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) stdKeyDeserializers0, 2228);
      jsonMappingException2.toString();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "m*Sg$W5-7#`@K");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-1622));
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[?]", string0);
      assertEquals((-1622), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "'Nmvp", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("{a}J*lW`X");
      mockIOException0.getLocalizedMessage();
      mockIOException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("6|Up(B%RsV=%wQtX", "{a}J*lW`X", 63, sQLTransientException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6|Up(B%RsV=%wQtX");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      int[] intArray0 = new int[6];
      intArray0[0] = 4358;
      intArray0[1] = (-4510);
      intArray0[2] = 658;
      intArray0[3] = 241;
      intArray0[4] = 1737;
      intArray0[5] = 16;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonLocation jsonLocation0 = new JsonLocation(beanDeserializerFactory0, 16, 4358, 16);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, (String) null, jsonLocation0);
      jsonLocation0.sourceDescription();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" (through reference chain: ", "line.separator", intArray0, sQLInvalidAuthorizationSpecException0);
      jsonLocation0.sourceDescription();
      batchUpdateException0.printStackTrace();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null, (Throwable) batchUpdateException0);
      jsonMappingException1.getMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "P'^71");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("{a}J*lW`X");
      mockIOException0.printStackTrace();
      mockIOException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("DEFAULT", ")1L^fr/8", (-696));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "DEFAULT", sQLRecoverableException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("DEFAULT", (-696));
      assertEquals((-696), jsonMappingException_Reference1.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com>fasterxml.jackson.data*ind.JQonMappi[g7xceptionReferece");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-1588));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1588), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("{a}J*lW`X");
      mockIOException0.printStackTrace();
      mockIOException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{a}J*lW`X");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("6|Up(B%RsV=%wQtX", "6|Up(B%RsV=%wQtX", 63, sQLTransientException0);
      sQLTransientException0.setNextException(sQLTransactionRollbackException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLTransactionRollbackException0, (-7280));
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.deser.std.UUIDDeserializer", "J(9<\"g<dD-&JnJIA", 21);
      SQLException sQLException0 = new SQLException("lIM\"gkX#L.eX;~BmV#:", "com.fasterxml.jackson.databind.deser.std.UUIDDeserializer", sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) "J(9<\"g<dD-&JnJIA", "qF@sA4k)wmOur ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "qF@sA4k)wmOur ");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      JsonMappingException.from(jsonParser0, "JSON");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("lIM\"gkX#L.eX;~BmV#: (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"qF@sA4k)wmOur \"]->java.lang.String[\"qF@sA4k)wmOur \"])", string0);
      
      JsonMappingException.from((JsonParser) null, "qF@sA4k)wmOur ", (Throwable) sQLTransientException0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, (-3915), 256);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, ")", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonParser0, "dd>yPgSN)_I+");
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      jsonFactory1.setRootValueSeparator("JSON");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedReader0, "r");
      jsonMappingException_Reference0.setDescription("[]");
      JsonMappingException jsonMappingException0 = new JsonMappingException("U!H?*KI5^zMb1Ws~'");
      BufferedReader bufferedReader1 = new BufferedReader(mockFileReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader1, 83);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(lineNumberReader0, 16);
      jsonMappingException_Reference1.getDescription();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser jsonParser0 = jsonFactory1.createParser("LPrTKe");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      JsonMappingException jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "->");
      jsonMappingException0.getProcessor();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "LPrTKe", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("JSON");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) pipedReader0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", "DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS", 2, hashMap0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) mockThrowable0);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("JSON\n at [Source: (PipedReader); line: 1, column: 0]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "m*>S>g$W5-7#5@K");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stdKeyDeserializers0, "m*>S>g$W5-7#5@K");
      assertSame(jsonMappingException0, jsonMappingException1);
      
      StringBuilder stringBuilder0 = new StringBuilder(4023);
      jsonMappingException1.getPathReference(stringBuilder0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider0, "m*>S>g$W5-7#5@K");
      assertNotSame(jsonMappingException2, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) pipedReader0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", "DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS", 2, hashMap0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLClientInfoException0);
      sQLClientInfoException0.getStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) mockThrowable0);
      StringBuilder stringBuilder0 = new StringBuilder(".V:'~pF");
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals(".V:'~pF", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "m*>S>g$W5-7#5@K");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) sQLTransientConnectionException0);
      jsonMappingException0.getLocalizedMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<LineNumberReader> class0 = LineNumberReader.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1._context;
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "''");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "m*>S>g$W5-7#5@K");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = null;
      SQLWarning sQLWarning0 = new SQLWarning("fR^BWJVr");
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 4003, sQLWarning0);
      sQLTransientException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      jsonMappingException0.fillInStackTrace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string1 = "WI/D_qx$<EHO#y";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "WI/D_qx$<EHO#y", (Throwable) sQLFeatureNotSupportedException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4003);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StringBuilder stringBuilder0 = new StringBuilder(2662);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getErasedSignature(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) pipedReader0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", "DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS", 2, hashMap0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) mockThrowable0);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException(" (through reference chain: ", "|`Oq>Gio|l", 16);
      sQLTransientException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" (through reference chain: ");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("", jsonMappingException0);
      sQLNonTransientConnectionException0.setNextException(sQLTransientException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) " (through reference chain: ", 16);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException2, 16);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[16]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      bigInteger0.shiftRight(127);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      bigIntegerNode0.isPojo();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ": ");
      jsonMappingException0.getLocalizedMessage();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      jsonMappingException0.prependPath((Object) bigIntegerNode0, (-2330));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParser0, (-2330));
      jsonMappingException_Reference0.getIndex();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultDeserializationContext0, ": ");
      assertSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, (String) null);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String [N/A]: null", string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonMappingException.from((JsonGenerator) null, "Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.io.MockFileWriter` from String [N/A]: null", (Throwable) sQLTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      valueInstantiators_Base0.findValueInstantiator((DeserializationConfig) null, basicBeanDescription0, (ValueInstantiator) null);
      Long long0 = new Long(3083L);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(long0, class0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      jsonMappingException0.getMessage();
      jsonMappingException0.getLocalizedMessage();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "Cannot deserialize value of type `java.lang.Integer` from number 3083: com.fasterxml.jackson.databind.JsonMappingException$Reference", (Throwable) jsonMappingException0);
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = 'L';
      charArray0[2] = 'A';
      charArray0[3] = ']';
      charArray0[4] = '@';
      charArray0[5] = 'd';
      charArray0[6] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) charArrayReader0, 0);
      assertSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "ysE!Wm#Zlv,X");
      jsonMappingException_Reference0.setDescription("ysE!Wm#Zlv,X");
      String string0 = jsonMappingException_Reference0.toString();
      Object object1 = jsonMappingException_Reference0.getFrom();
      assertNotNull(object1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ysE!Wm#Zlv,X");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      Class<CharArrayReader>[] classArray0 = (Class<CharArrayReader>[]) Array.newInstance(Class.class, 5);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      classArray0[0] = class0;
      Class<CharArrayReader> class1 = CharArrayReader.class;
      classArray0[1] = class1;
      Class<CharArrayReader> class2 = CharArrayReader.class;
      classArray0[2] = class2;
      Class<CharArrayReader> class3 = CharArrayReader.class;
      classArray0[3] = class3;
      Class<CharArrayReader> class4 = CharArrayReader.class;
      classArray0[4] = class4;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "ysE!Wm#Zlv,X", (Throwable) sQLRecoverableException0);
      String string1 = jsonMappingException0._buildMessage();
      assertTrue(string1.equals((Object)string0));
      
      String string2 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ysE!Wm#Zlv,X", string2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "ysE!Wm#Zlv,X");
      jsonMappingException_Reference0.setDescription("ysE!Wm#Zlv,X");
      JsonMappingException jsonMappingException0 = new JsonMappingException("ysE!Wm#Zlv,X");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException0, 62);
      assertEquals(62, jsonMappingException_Reference1.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("ysE!Wm#Zlv,X", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "ysE!Wm#Zlv,X");
      jsonMappingException_Reference0.setDescription("ysE!Wm#Zlv,X");
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFrom();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<CharArrayReader>[] classArray0 = (Class<CharArrayReader>[]) Array.newInstance(Class.class, 5);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      classArray0[0] = class0;
      Class<CharArrayReader> class1 = CharArrayReader.class;
      classArray0[1] = class1;
      Class<CharArrayReader> class2 = CharArrayReader.class;
      classArray0[2] = class2;
      Class<CharArrayReader> class3 = CharArrayReader.class;
      classArray0[3] = class3;
      Class<CharArrayReader> class4 = CharArrayReader.class;
      classArray0[4] = class4;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findMethod("ysE!Wm#Zlv,X", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      bigIntegerNode0.isPojo();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ": ");
      jsonMappingException0.getLocalizedMessage();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.getSchema();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException(" (through reference chain: ", "|`Oq>Gio|l", 16);
      sQLTransientException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("", jsonMappingException0);
      sQLNonTransientConnectionException0.setNextException(sQLTransientException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLNonTransientConnectionException0, "");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.toString();
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, 16);
      jsonMappingException_Reference1.setIndex((-2188));
      assertEquals((-2188), jsonMappingException_Reference1.getIndex());
      
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals(" (through reference chain: java.sql.SQLNonTransientConnectionException[\"\"])", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(41);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "]6RWzie@?eAgwOHUL");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("]6RWzie@?eAgwOHUL", class0, (String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayOutputStream0);
      String string0 = "Missing creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES` enabled";
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "Missing creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES` enabled");
      jsonMappingException0.initCause(jsonMappingException1);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      jsonMappingException0.getPath();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      TypeBindings typeBindings0 = null;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) mapLikeType0;
      javaTypeArray0[2] = (JavaType) mapLikeType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) mapLikeType0;
      javaTypeArray0[5] = (JavaType) mapLikeType0;
      MockFile mockFile0 = new MockFile("Missing creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES` enabled");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 3692;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3692);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/ah'8'Z^{MA", "/ah'8'Z^{MA");
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "/ah'8'Z^{MA", sQLRecoverableException0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("/ah'8'Z^{MA", "/ah'8'Z^{MA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"/ah'8'Z^{MA\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '*';
      charArray0[2] = '~';
      charArray0[3] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayReader0, 748);
      jsonMappingException_Reference0.setIndex((-1589));
      jsonMappingException_Reference0.getIndex();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("{a}J*lW`X");
      mockIOException0.printStackTrace();
      mockIOException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("6|Up(B%RsV=%wQtX", ")1L^fr/8", 63, sQLTransientException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m9|bdD[iC");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("6|Up(B%RsV=%wQtX", (-7280));
      assertEquals((-7280), jsonMappingException_Reference1.getIndex());
      
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("{a}J*lW`X");
      mockIOException0.printStackTrace();
      mockIOException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) jsonMappingException_Reference0, 63);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = "G`H8S{!t&o{6b";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "G`H8S{!t&o{6b", (Throwable) sQLRecoverableException0);
      int int0 = (-1353);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1353
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "{a}J*lW`X";
      MockIOException mockIOException0 = new MockIOException("{a}J*lW`X");
      mockIOException0.printStackTrace();
      mockIOException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._index = 63;
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("fR^BWJVr");
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 4003, sQLWarning0);
      sQLTransientException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      jsonMappingException0.fillInStackTrace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = "WI/D_qx$<EHO#y";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "WI/D_qx$<EHO#y", (Throwable) sQLFeatureNotSupportedException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4003);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StringBuilder stringBuilder0 = new StringBuilder(2662);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getErasedSignature(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      jsonMappingException_Reference0._fieldName = "Ea+;";
      jsonMappingException_Reference0.toString();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.abstractTypeResolvers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(">(;p", (JsonLocation) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "[TokenBuffer: ", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.setFieldName("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(bufferedInputStream0);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pushbackInputStream0, (-1247));
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "(gDc|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"(gDc|\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "]`]OB !d-`a9";
      JsonFactory jsonFactory0 = new JsonFactory();
      int int0 = (-1809);
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, (-1809), (-1809));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, false);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("]`]OB !d-`a9", jsonLocation0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParser0, "]`]OB !d-`a9");
      jsonMappingException_Reference0.getDescription();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("]`]OB !d-`a9");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "HR#\"x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jsonMappingException_Reference0.setFieldName("HR#\"x");
      pipedOutputStream0.flush();
      pipedOutputStream0.flush();
      jsonMappingException_Reference0._from = (Object) pipedOutputStream0;
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      String string0 = "AVNmeG^*`bP1n`i.yy";
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "AVNmeG^*`bP1n`i.yy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      jsonMappingException_Reference0.setIndex(3803);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "key deserializer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1533;
      longArray0[1] = (long) 1533;
      longArray0[2] = (long) 1533;
      longArray0[3] = (long) 1533;
      longArray0[4] = (long) 1533;
      longArray0[5] = (long) 1533;
      longArray0[6] = (long) 1533;
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", "=N/-#8'yGPg 23%", 1533);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("=N/-#8'yGPg 23%", (String) null, 1533, longArray0, sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "=N/-#8'yGPg 23%", (Throwable) batchUpdateException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "Invalid 'any-setter' annotation on field '%s': type is not instance of java.util.Map");
      JsonMappingException jsonMappingException1 = new JsonMappingException("2hH{up?a{~*S<O", jsonMappingException0);
      jsonMappingException1.toString();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Invalid 'any-setter' annotation on field '%s': type is not instance of java.util.Map", "");
      jsonMappingException_Reference0.setIndex(0);
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      MockFile mockFile0 = new MockFile(";:<P");
      File file0 = MockFile.createTempFile("Invalid 'any-setter' annotation on field '%s': type is not instance of java.util.Map", "", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, Integer.MIN_VALUE, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 0);
      jsonMappingException2.prependPath((Object) uTF8DataInputJsonParser0, "");
      assertFalse(uTF8DataInputJsonParser0.isClosed());
  }
}
