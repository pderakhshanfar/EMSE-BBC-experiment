/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 00:45:51 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonReadContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.DateTimeException;
import java.time.chrono.HijrahEra;
import java.time.temporal.TemporalQuery;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFile mockFile0 = new MockFile("Rt%p<5|l");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.release();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(451);
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, objectMapper0, byteQuadsCanonicalizer1, (byte[]) null, (-987), 2, false);
      objectMapper0.writeValue((DataOutput) dataOutputStream0, (Object) uTF8StreamJsonParser0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Collection<ObjectReader> collection0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, bufferRecycler0.CHAR_CONCAT_BUFFER, mockFileReader0, objectMapper0, charsToNameCanonicalizer0);
      mockFileReader0.reset();
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      uTF8StreamJsonParser0.setSchema(formatSchema0);
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(collection0);
      int int0 = 440;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, bufferRecycler0.BYTE_READ_IO_BUFFER, int0);
      dataFormatReaders_Match0.createParserWithMatch();
      String string0 = "";
      JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, string0, (Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory2.createParser("");
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "JSON");
      jsonMappingException0.getCause();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getLocalizedMessage();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(2364L);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      String string0 = "[]";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "[]");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) byteArrayOutputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(valueInstantiators_Base0, class0);
      jsonMappingException0.getPath();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "F`|X");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("F`|X", 0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException1.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", (-2897));
      Throwable throwable0 = sQLException0.fillInStackTrace();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JsonMappingException.wrapWithPath(throwable0, (Object) bufferedInputStream0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.faserxml.jackson.databindutilViewMatche", "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonParser jsonParser0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("need JSON String that contains type id (for subtype of ", (String) null, 10);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, (String) null, (Throwable) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonParser jsonParser0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      JsonParserSequence.createFlattened(false, (JsonParser) filteringParserDelegate0, (JsonParser) filteringParserDelegate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      String string0 = null;
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, (String) null, sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1000);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(inputStreamReader0, "w9};}BF0%(=LW", sQLTransactionRollbackException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, "w9};}BF0%(=LW");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 1000);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException2, "w9};}BF0%(=LW");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      Integer integer0 = new Integer(3893);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      StringReader stringReader0 = new StringReader("");
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(stringReader0, "");
      jsonMappingException_Reference2.getDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "java.io.StringReader[\"\"]", (JsonLocation) null);
      DataTruncation dataTruncation0 = new DataTruncation(147, true, true, 1, (-4022), jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) dataTruncation0, jsonMappingException_Reference2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", (-2897));
      Throwable throwable0 = sQLException0.fillInStackTrace();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath(throwable0, (Object) bufferedInputStream0, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", ": ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
      JsonMappingException jsonMappingException1 = new JsonMappingException("");
      jsonMappingException1.getMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      System.setCurrentTimeMillis((-2897));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("com.fasterxml.jackson.databind.util.ViewMatcher");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonFactory0.disable(jsonParser_Feature0);
      jsonFactory0.copy();
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      try { 
        jsonFactory2.createParser((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(1502L);
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      SQLWarning sQLWarning0 = new SQLWarning(": ", sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException(sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLDataException1, ": ");
      jsonMappingException0._buildMessage();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      jsonMappingException0.getPathReference(stringBuilder0);
      SQLDataException sQLDataException2 = new SQLDataException(": ", ":  (through reference chain: java.sql.SQLDataException[\": \"])");
      jsonMappingException0.getOriginalMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLDataException2, 725);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("->");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) filteringParserDelegate0, (JsonParser) filteringParserDelegate0);
      Integer integer0 = new Integer(65534);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0, "");
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", (-2897));
      Throwable throwable0 = sQLException0.fillInStackTrace();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath(throwable0, (Object) bufferedInputStream0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", ": ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "com.fasterxml.jackson.databind.util.ViewMatcher", "com.fasterxml.jackson.databind.util.ViewMatcher");
      jsonMappingException2.getMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      System.setCurrentTimeMillis((-2897));
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonParser jsonParser0 = jsonFactory3.createParser((InputStream) null);
      JsonMappingException.from(jsonParser0, (String) null, (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = "F%W";
      String string1 = null;
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "UNNOvN";
      Throwable throwable0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UNNOvN", "UNNOvN", (Throwable) null);
      sQLRecoverableException0.fillInStackTrace();
      sQLRecoverableException0.getSuppressed();
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      String string1 = "com.fasterxml.jackson.databind.JsonMappingException";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", (-2897));
      Throwable throwable0 = sQLException0.fillInStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(throwable0, "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      deserializerFactoryConfig0.keyDeserializers();
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(deserializerFactoryConfig0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference1);
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "F%W");
      StringWriter stringWriter0 = new StringWriter();
      jsonMappingException0._processor = (Closeable) stringWriter0;
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UNKNOWN", "UNKNOWN", (Throwable) null);
      sQLRecoverableException0.getSuppressed();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 91);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) bufferedInputStream0, "=p KZF)gZ!/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "F%W");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 2582);
      jsonMappingException_Reference0.getDescription();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(jsonMappingException0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "F%W", (Throwable) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", (-2897));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("(was ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      Throwable throwable0 = sQLException0.fillInStackTrace();
      JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) sQLException0, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) sQLException0, "com.fasterxml.jackson.databind.util.ViewMatcher");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(was ");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockPrintWriter0, "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
      JsonMappingException.from((JsonParser) null, "(was ", throwable0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<BufferedWriter> class0 = BufferedWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("com.fasterxml.jackson.databind.JsonMappingException$Reference", class0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) beanDeserializerFactory0, 41);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "#?2vym2", (Throwable) jsonMappingException0);
      jsonMappingException2.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "#?2vym2", "#?2vym2");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "#?2vym2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Cannot parse date \"%s\", problem: %s");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getIndex();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      jsonMappingException_Reference0.setDescription("Cannot parse date \"%s\", problem: %s");
      StringReader stringReader0 = new StringReader("UNKNOWN[?]");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stringReader0, "Cannot parse date \"%s\", problem: %s");
      jsonMappingException1.getMessage();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", 357);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getDescription();
      System.setCurrentTimeMillis((-3355L));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "UNKNOWN[?]");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      Class<String> class0 = String.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      Class<JsonParserDelegate> class1 = JsonParserDelegate.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      CollectionType collectionType1 = collectionType0.withValueHandler(typeBindings0);
      StringReader stringReader0 = new StringReader("V}Ir$z1");
      CollectionLikeType collectionLikeType0 = collectionType1.withContentTypeHandler(stringReader0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(collectionType0);
      int int0 = 91;
      StringBuilder stringBuilder0 = new StringBuilder(91);
      StringBuilder stringBuilder1 = collectionLikeType1.getGenericSignature(stringBuilder0);
      jsonMappingException1._appendPathDesc(stringBuilder1);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "V}Ir$z1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", (-2897));
      sQLException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) sQLException0, "com.fasterxml.jackson.databind.util.ViewMatcher");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(was ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) mockPrintWriter0, "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("", (-658));
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException jsonMappingException0 = new JsonMappingException("_kp[sVk5Ldx>aK)~f7f");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getCause();
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException1._path = linkedList0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonMappingException jsonMappingException2 = new JsonMappingException("_kp[sVk5Ldx>aK)~f7f", (Throwable) null);
      jsonMappingException1.getPathReference((StringBuilder) null);
      jsonMappingException1.getPathReference((StringBuilder) null);
      JsonMappingException.from((JsonParser) null, "_kp[sVk5Ldx>aK)~f7f");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("5Kt9]d=l=oo5ZBniWUh");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "5Kt9]d=l=oo5ZBniWUh";
      PrintStream printStream0 = mockPrintStream0.format("j8y}4&j]XpOEFQ7", objectArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(printStream0, "5Kt9]d=l=oo5ZBniWUh");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("j8y}4&j]XpOEFQ7");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(printStream0);
      JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UNKNOWN", "UNKNOWN", (Throwable) null);
      sQLRecoverableException0.fillInStackTrace();
      sQLRecoverableException0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, "=p KZF)gZ!/");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("UNKNOWN");
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      deserializerFactoryConfig0.keyDeserializers();
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UNKNOWN", "UNKNOWN", (Throwable) null);
      sQLRecoverableException0.fillInStackTrace();
      sQLRecoverableException0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, "=p KZF)gZ!/");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      deserializerFactoryConfig0.keyDeserializers();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "_kp[sVk5Ldx>aK)~f7f";
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "_kp[sVk5Ldx>aK)~f7f");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getCause();
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException1._path = linkedList0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "_kp[sVk5Ldx>aK)~f7f");
      StringBuilder stringBuilder0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2357, 2357);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, " (through reference 2hain: ");
      jsonMappingException_Reference0.setIndex((-1288));
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory0.disable(jsonParser_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      defaultDeserializationContext_Impl0.getConfig();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'X';
      charArray0[2] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 2184);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)84, lineNumberReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 128, 8, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature1);
      Class<DataInputStream> class0 = DataInputStream.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl1.wrongTokenException(jsonParser0, class0, jsonToken0, " (through reference 2hain: ");
      JsonMappingException jsonMappingException1 = new JsonMappingException("mYb`g;Ew'X.]))c'bF", jsonMappingException0);
      jsonMappingException1.getPathReference();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UNKNOWN", "UNKNOWN", (Throwable) null);
      sQLRecoverableException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, "=p KZF)gZ!/");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("UNKNOWN");
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      deserializerFactoryConfig0.keyDeserializers();
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      jsonMappingException_Reference0._from = (Object) class0;
      jsonMappingException_Reference0.setFieldName("WSbRHW'!kNz}InM4n");
      jsonMappingException0._buildMessage();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 2400, jsonMappingException0);
      jsonMappingException0.prependPath((Object) sQLTransientException0, "|,R;yme*Ie;GZ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      objectMapper1.disable(deserializationFeature0);
      SQLException sQLException0 = new SQLException("RulSEFX#2");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockIOException0);
      objectMapper1.canSerialize(class0, atomicReference0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      SQLWarning sQLWarning1 = new SQLWarning("");
      sQLWarning1.getLocalizedMessage();
      sQLWarning1.setNextWarning(sQLWarning0);
      sQLWarning0.spliterator();
      sQLWarning0.setNextWarning(sQLWarning1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException0._buildMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockIOException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1);
      jsonMappingException_Reference0.toString();
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.toString();
      jsonMappingException1.getPath();
      jsonMappingException_Reference1.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      objectMapper1.disable(deserializationFeature0);
      SQLException sQLException0 = new SQLException("RulSEFX#2");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockIOException0);
      objectMapper1.canSerialize(class0, atomicReference0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      SQLWarning sQLWarning1 = new SQLWarning("");
      sQLWarning1.getLocalizedMessage();
      sQLWarning1.setNextWarning(sQLWarning0);
      sQLWarning0.spliterator();
      sQLWarning0.setNextWarning(sQLWarning1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException0._buildMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockIOException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException1.getPath();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPath();
      JsonMappingException.from((JsonParser) null, "");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      objectMapper1.disable(deserializationFeature0);
      SQLException sQLException0 = new SQLException("RulSEFX#2");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockIOException0);
      objectMapper1.canSerialize(class0, atomicReference0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      SQLWarning sQLWarning1 = new SQLWarning("");
      sQLWarning1.getLocalizedMessage();
      sQLWarning1.setNextWarning(sQLWarning0);
      sQLWarning0.spliterator();
      sQLWarning0.setNextWarning(sQLWarning1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException0._buildMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockIOException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getIndex();
      JsonMappingException jsonMappingException2 = (JsonMappingException)jsonMappingException_Reference0.getFrom();
      // Undeclared exception!
      try { 
        jsonMappingException2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer", (-2897));
      sQLException0.fillInStackTrace();
      JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) sQLException0, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) sQLException0, "com.fasterxml.jackson.databind.util.ViewMatcher");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(was ");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockPrintWriter0, "com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[]");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class0 = Object.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, ".Ek`jG>#c}AhRR", "[]");
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(invalidFormatException0);
      InvalidFormatException invalidFormatException1 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFrom();
      // Undeclared exception!
      try { 
        invalidFormatException1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      objectMapper1.disable(deserializationFeature0);
      SQLException sQLException0 = new SQLException("RulSEFX#2");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      objectMapper1.getSerializerProviderInstance();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockIOException0);
      objectMapper1.canSerialize(class0, atomicReference0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      SQLWarning sQLWarning1 = new SQLWarning("");
      sQLWarning1.getLocalizedMessage();
      sQLWarning1.setNextWarning(sQLWarning0);
      sQLWarning0.spliterator();
      sQLWarning0.setNextWarning(sQLWarning1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException0._buildMessage();
      jsonMappingException0.clearLocation();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockIOException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.toString();
      jsonMappingException1.getPath();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPath();
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "6\",ho)(\\";
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "6\",ho)(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(79, 685.679F);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("=,hMZTZ2G", "=,hMZTZ2G", hashMap0);
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) sQLClientInfoException0, 79);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(hashMap0, 79);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      String string0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, (String) null);
      jsonMappingException0.getPath();
      jsonMappingException0.getLocalizedMessage();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      try { 
        pipedReader0.mark(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)54;
      byte byte0 = (byte)84;
      byteArray0[3] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2352, 2352);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, " (through reference chain: ");
      jsonMappingException_Reference0.setIndex((-1288));
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory0.disable(jsonParser_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = null;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig1 = null;
      try {
        deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("PHTCXw ", "PHTCXw ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("PHTCXw ", "PHTCXw ", (-1), sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "BeanAsArraySerializer for ", (Throwable) sQLTransientConnectionException0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(jsonMappingException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("PHTCXw ", ">Hqm5\"C&--[", "Q^%7gt4Xu!R3qe~P", 1025);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(">Hqm5\"C&--[", "PHTCXw ", " (through reference chain: ", (-1));
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl1.invalidTypeIdException(javaType0, "fhI0W:-f[c", ">Hqm5\"C&--[");
      ((JsonMappingException)invalidTypeIdException0)._buildMessage();
      jsonMappingException0.getMessage();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " (through reference chain: ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonMappingException.from((JsonGenerator) uTF8JsonGenerator1, "d 6)6ttyj_E");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      jsonMappingException0.toString();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("com.fasterxml.jackson.core.io.DataOutputAsStream");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'K';
      charArray0[2] = 'S';
      charArray0[3] = 'i';
      charArray0[4] = '}';
      charArray0[5] = '[';
      // Undeclared exception!
      try { 
        jsonFactory3.createParser(charArray0, 500, 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(",", (JsonLocation) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "M(0j_LT`$3FaxZ,");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("\u2028", sQLTransactionRollbackException0);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._buildMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(2w)iWSOQt0e\"", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      JsonMappingException.from(jsonGenerator0, "\u2028");
      StringReader stringReader0 = new StringReader("JSON");
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      stringReader0.read(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 1296);
      lineNumberReader0.ready();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(lineNumberReader0);
      jsonMappingException_Reference0.setFieldName("JSON");
      stringReader0.read();
      JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      StringWriter stringWriter0 = new StringWriter();
      jsonMappingException_Reference0._from = (Object) stringWriter0;
      jsonMappingException_Reference0.getFrom();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 8000);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      String string0 = null;
      JsonMappingException.from((JsonGenerator) null, (String) null);
      Object object0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        HijrahEra.of(0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid era: 0
         //
         verifyException("java.time.chrono.HijrahEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "- ],CqsOnI]1\\uI9";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("E", string0, 0);
      sQLRecoverableException0.printStackTrace();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "E", (Throwable) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("NON_ABSENT");
      jsonMappingException_Reference0._fieldName = "NON_ABSENT";
      jsonMappingException_Reference0._fieldName = "NON_ABSENT";
      jsonMappingException_Reference0.setFieldName("NON_ABSENT");
      jsonMappingException_Reference0._fieldName = "NON_ABSENT";
      String string0 = "";
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayList> class0 = ArrayList.class;
      Class<Object> class1 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionType0);
      CollectionType collectionType2 = collectionType1.withContentTypeHandler(class1);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.createCollectionLikeDeserializer(defaultDeserializationContext0, collectionType2, (BeanDescription) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._fieldName = ",content=";
      jsonMappingException_Reference0.toString();
      int int0 = 2568;
      jsonMappingException_Reference0._index = (-1500);
      int[] intArray0 = new int[6];
      intArray0[0] = 2568;
      intArray0[1] = 2568;
      intArray0[2] = 2568;
      intArray0[3] = 2568;
      intArray0[4] = 2568;
      intArray0[5] = 2568;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      Throwable throwable0 = batchUpdateException0.fillInStackTrace();
      jsonMappingException_Reference0._from = (Object) batchUpdateException0;
      batchUpdateException0.getUpdateCounts();
      jsonMappingException_Reference0.setFieldName("please use getAnnotations/ hasAnnotation to check for Annotations");
      // Undeclared exception!
      try { 
        batchUpdateException0.initCause(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-causation not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "Zbe";
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getIndex();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      TypeReference<String> typeReference0 = (TypeReference<String>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("z1I\"%$/3O[", (-2070L), (-1552L), 0, 0);
      jsonLocation0.toString();
      SQLTransientException sQLTransientException0 = new SQLTransientException("[CY'5*", "[CY'5*");
      JsonMappingException jsonMappingException0 = new JsonMappingException("z1I\"%$/3O[", jsonLocation0, sQLTransientException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("nQ=y|QcJhvG#\"7ILA", jsonMappingException0);
      jsonMappingException1.clearLocation();
      jsonMappingException1.prependPath((Object) sQLTransientException0, 500);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-91);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (int) (byte)66, (-2673));
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) jsonParserDelegate0, (int) (byte) (-91));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      objectMapper1.disable(deserializationFeature0);
      SQLException sQLException0 = new SQLException("RulSEFX#2");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockIOException0);
      objectMapper1.canSerialize(class0, atomicReference0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      SQLWarning sQLWarning1 = new SQLWarning("");
      sQLWarning1.getLocalizedMessage();
      sQLWarning1.setNextWarning(sQLWarning0);
      sQLWarning0.spliterator();
      sQLWarning0.setNextWarning(sQLWarning1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException0._buildMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockIOException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.toString();
      jsonMappingException1.getPath();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "F%W");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "F%W");
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactoryConfig0, true);
      PipedReader pipedReader0 = new PipedReader(3);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1621);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-26), lineNumberReader0, objectReader0, charsToNameCanonicalizer1, (char[]) null, 34, (-911), true);
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, "JSON");
      jsonMappingException0.toString();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      Class<Throwable> class0 = Throwable.class;
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.traverse();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "JSON", (Throwable) sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, ".x|g=;V#FJe+7", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`o{{QCW-&J^");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "->", (Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 91;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(",i", ",i", 91);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("bG1U2PFlXy", "SDQN.JS1q`x(0@Wv");
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.initCause(sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("SDQN.JS1q`x(0@Wv", sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("SDQN.JS1q`x(0@Wv", "SDQN.JS1q`x(0@Wv", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "SDQN.JS1q`x(0@Wv", (Throwable) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      String string0 = "Non-standard token '";
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGeneratorDelegate0, "Non-standard token '");
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'a';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeString(charArray0, 1139, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 959;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 959);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      jsonFactory3.createParser("JSON");
      String string0 = "";
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 7921, 959);
      jsonMappingException_Reference0.setFieldName("JSON");
      dataTruncation0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        dataTruncation0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      jsonReadContext0.createChildObjectContext(1, 1);
      JsonLocation jsonLocation0 = jsonReadContext0.getStartLocation("=B");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("h4\"Aa1]9FT^9");
      JsonMappingException jsonMappingException0 = new JsonMappingException("=B", jsonLocation0, sQLIntegrityConstraintViolationException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      typeFactory0.constructRawMapType(class0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("v", "UNKNOWN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"UNKNOWN\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "UNKNOWN";
      Throwable throwable0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UNKNOWN", "UNKNOWN", (Throwable) null);
      sQLRecoverableException0.fillInStackTrace();
      sQLRecoverableException0.getSuppressed();
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, "=p KZF)gZ!/");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("UNKNOWN");
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      deserializerFactoryConfig0.keyDeserializers();
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      jsonMappingException_Reference0._from = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadDefinition((Class<?>) class0, "UNKNOWN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) filteringParserDelegate0, (JsonParser) filteringParserDelegate0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "tQO9pS7F8Az0f=]-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Cannot parse date \"%s\", problem: %s");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getIndex();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "com.fasterxml.jackson.databind.JsonMappingException[?]", (Throwable) jsonMappingException0);
  }
}
