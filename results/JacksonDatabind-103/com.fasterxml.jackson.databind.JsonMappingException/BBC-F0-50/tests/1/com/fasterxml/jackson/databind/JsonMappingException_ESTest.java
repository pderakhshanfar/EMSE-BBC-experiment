/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 00:43:10 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.time.format.ResolverStyle;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("URI", "URI");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("URI", sQLTimeoutException0.getMessage());
      assertEquals("URI", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: URI", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) "URI", "URI");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("URI", sQLTimeoutException0.getMessage());
      assertEquals("URI", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: URI", sQLTimeoutException0.toString());
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility");
      assertNotNull(jsonMappingException0);
      
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) linkedList0, 15);
      assertEquals(0, linkedList0.size());
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) pipedOutputStream0, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) null, 15);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException0);
      
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertSame(jsonMappingException5, jsonMappingException2);
      
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(string0);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException5);
      
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException_Reference0, 15);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException6);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException6, jsonMappingException5);
      assertSame(jsonMappingException6, jsonMappingException1);
      assertSame(jsonMappingException6, jsonMappingException2);
      assertSame(jsonMappingException6, jsonMappingException0);
      assertSame(jsonMappingException6, jsonMappingException3);
      assertSame(jsonMappingException6, jsonMappingException4);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) pipedReader0, 15);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException4);
      
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException7, (Object) jsonMappingException4, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])");
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException4, jsonMappingException7);
      assertSame(jsonMappingException4, jsonMappingException6);
      assertSame(jsonMappingException4, jsonMappingException5);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException8);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertSame(jsonMappingException7, jsonMappingException8);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException8, jsonMappingException1);
      assertSame(jsonMappingException8, jsonMappingException4);
      assertSame(jsonMappingException8, jsonMappingException6);
      assertSame(jsonMappingException8, jsonMappingException0);
      assertSame(jsonMappingException8, jsonMappingException7);
      assertSame(jsonMappingException8, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException5);
      assertSame(jsonMappingException8, jsonMappingException3);
      
      JsonMappingException jsonMappingException9 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) pipedReader0, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException8);
      assertSame(jsonMappingException9, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException4);
      assertSame(jsonMappingException9, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException6);
      assertSame(jsonMappingException9, jsonMappingException1);
      assertSame(jsonMappingException9, jsonMappingException7);
      assertSame(jsonMappingException9, jsonMappingException2);
      assertSame(jsonMappingException9, jsonMappingException3);
      
      jsonMappingException9.prependPath((Object) null, 15);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException8);
      assertSame(jsonMappingException9, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException4);
      assertSame(jsonMappingException9, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException6);
      assertSame(jsonMappingException9, jsonMappingException1);
      assertSame(jsonMappingException9, jsonMappingException7);
      assertSame(jsonMappingException9, jsonMappingException2);
      assertSame(jsonMappingException9, jsonMappingException3);
      
      JsonMappingException jsonMappingException10 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException10);
      assertSame(jsonMappingException10, jsonMappingException3);
      assertSame(jsonMappingException10, jsonMappingException2);
      assertSame(jsonMappingException10, jsonMappingException7);
      assertSame(jsonMappingException10, jsonMappingException8);
      assertSame(jsonMappingException10, jsonMappingException4);
      assertSame(jsonMappingException10, jsonMappingException0);
      assertSame(jsonMappingException10, jsonMappingException1);
      assertSame(jsonMappingException10, jsonMappingException5);
      assertSame(jsonMappingException10, jsonMappingException6);
      assertSame(jsonMappingException10, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException9);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertFalse(string1.equals((Object)string0));
      assertEquals("UNKNOWN[?]", string1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string1);
      
      JsonMappingException jsonMappingException11 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility", "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException11);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException9);
      
      JsonMappingException jsonMappingException12 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException11, (Object) pipedOutputStream0, 15);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException12);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException12, jsonMappingException0);
      assertSame(jsonMappingException12, jsonMappingException1);
      assertSame(jsonMappingException12, jsonMappingException5);
      assertSame(jsonMappingException12, jsonMappingException3);
      assertSame(jsonMappingException12, jsonMappingException7);
      assertSame(jsonMappingException12, jsonMappingException10);
      assertSame(jsonMappingException12, jsonMappingException2);
      assertSame(jsonMappingException12, jsonMappingException8);
      assertSame(jsonMappingException12, jsonMappingException9);
      assertSame(jsonMappingException12, jsonMappingException11);
      assertSame(jsonMappingException12, jsonMappingException4);
      assertSame(jsonMappingException12, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException11);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException12);
      assertSame(jsonMappingException3, jsonMappingException9);
      
      JsonMappingException jsonMappingException13 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException10, (Object) jsonMappingException11, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility");
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException13);
      assertSame(jsonMappingException10, jsonMappingException3);
      assertSame(jsonMappingException10, jsonMappingException2);
      assertSame(jsonMappingException10, jsonMappingException8);
      assertSame(jsonMappingException10, jsonMappingException4);
      assertSame(jsonMappingException10, jsonMappingException0);
      assertSame(jsonMappingException10, jsonMappingException1);
      assertSame(jsonMappingException10, jsonMappingException6);
      assertSame(jsonMappingException10, jsonMappingException9);
      assertSame(jsonMappingException10, jsonMappingException13);
      assertSame(jsonMappingException10, jsonMappingException7);
      assertSame(jsonMappingException10, jsonMappingException5);
      assertSame(jsonMappingException10, jsonMappingException11);
      assertSame(jsonMappingException10, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException12);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException13);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException13, jsonMappingException1);
      assertSame(jsonMappingException13, jsonMappingException4);
      assertSame(jsonMappingException13, jsonMappingException0);
      assertSame(jsonMappingException13, jsonMappingException6);
      assertSame(jsonMappingException13, jsonMappingException3);
      assertSame(jsonMappingException13, jsonMappingException9);
      assertSame(jsonMappingException13, jsonMappingException5);
      assertSame(jsonMappingException13, jsonMappingException7);
      assertSame(jsonMappingException13, jsonMappingException10);
      assertSame(jsonMappingException13, jsonMappingException11);
      assertSame(jsonMappingException13, jsonMappingException2);
      assertSame(jsonMappingException13, jsonMappingException8);
      assertSame(jsonMappingException13, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException13);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException11);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException13);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException12);
      
      Throwable[] throwableArray0 = jsonMappingException13.getSuppressed();
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertSame(jsonMappingException10, jsonMappingException3);
      assertSame(jsonMappingException10, jsonMappingException2);
      assertSame(jsonMappingException10, jsonMappingException8);
      assertSame(jsonMappingException10, jsonMappingException4);
      assertSame(jsonMappingException10, jsonMappingException0);
      assertSame(jsonMappingException10, jsonMappingException1);
      assertSame(jsonMappingException10, jsonMappingException6);
      assertSame(jsonMappingException10, jsonMappingException9);
      assertSame(jsonMappingException10, jsonMappingException13);
      assertSame(jsonMappingException10, jsonMappingException7);
      assertSame(jsonMappingException10, jsonMappingException5);
      assertSame(jsonMappingException10, jsonMappingException11);
      assertSame(jsonMappingException10, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException12);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException13);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException13, jsonMappingException1);
      assertSame(jsonMappingException13, jsonMappingException4);
      assertSame(jsonMappingException13, jsonMappingException0);
      assertSame(jsonMappingException13, jsonMappingException6);
      assertSame(jsonMappingException13, jsonMappingException3);
      assertSame(jsonMappingException13, jsonMappingException9);
      assertSame(jsonMappingException13, jsonMappingException5);
      assertSame(jsonMappingException13, jsonMappingException7);
      assertSame(jsonMappingException13, jsonMappingException10);
      assertSame(jsonMappingException13, jsonMappingException11);
      assertSame(jsonMappingException13, jsonMappingException2);
      assertSame(jsonMappingException13, jsonMappingException8);
      assertSame(jsonMappingException13, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException13);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException11);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException13);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException12);
      
      JsonMappingException jsonMappingException14 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException11, (Object) null, 15);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException12);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException13);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException14);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException14);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException14);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException13);
      assertSame(jsonMappingException14, jsonMappingException2);
      assertSame(jsonMappingException14, jsonMappingException8);
      assertSame(jsonMappingException14, jsonMappingException5);
      assertSame(jsonMappingException14, jsonMappingException3);
      assertSame(jsonMappingException14, jsonMappingException12);
      assertSame(jsonMappingException14, jsonMappingException11);
      assertSame(jsonMappingException14, jsonMappingException10);
      assertSame(jsonMappingException14, jsonMappingException6);
      assertSame(jsonMappingException14, jsonMappingException0);
      assertSame(jsonMappingException14, jsonMappingException7);
      assertSame(jsonMappingException14, jsonMappingException9);
      assertSame(jsonMappingException14, jsonMappingException1);
      assertSame(jsonMappingException14, jsonMappingException4);
      assertSame(jsonMappingException14, jsonMappingException13);
      assertSame(jsonMappingException3, jsonMappingException14);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException11);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException13);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException12);
      
      jsonMappingException2.prependPath((Object) null, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException14);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException14);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException13);
      
      JsonMappingException jsonMappingException15 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException9, (Object) jsonMappingException_Reference0, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])");
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException15);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException14);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException15, jsonMappingException2);
      assertSame(jsonMappingException15, jsonMappingException3);
      assertSame(jsonMappingException15, jsonMappingException8);
      assertSame(jsonMappingException15, jsonMappingException14);
      assertSame(jsonMappingException15, jsonMappingException12);
      assertSame(jsonMappingException15, jsonMappingException5);
      assertSame(jsonMappingException15, jsonMappingException11);
      assertSame(jsonMappingException15, jsonMappingException13);
      assertSame(jsonMappingException15, jsonMappingException10);
      assertSame(jsonMappingException15, jsonMappingException7);
      assertSame(jsonMappingException15, jsonMappingException0);
      assertSame(jsonMappingException15, jsonMappingException4);
      assertSame(jsonMappingException15, jsonMappingException1);
      assertSame(jsonMappingException15, jsonMappingException6);
      assertSame(jsonMappingException15, jsonMappingException9);
      assertSame(jsonMappingException9, jsonMappingException12);
      assertSame(jsonMappingException9, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException4);
      assertSame(jsonMappingException9, jsonMappingException6);
      assertSame(jsonMappingException9, jsonMappingException1);
      assertSame(jsonMappingException9, jsonMappingException7);
      assertSame(jsonMappingException9, jsonMappingException3);
      assertSame(jsonMappingException9, jsonMappingException11);
      assertSame(jsonMappingException9, jsonMappingException8);
      assertSame(jsonMappingException9, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException15);
      assertSame(jsonMappingException9, jsonMappingException2);
      assertSame(jsonMappingException9, jsonMappingException13);
      assertSame(jsonMappingException9, jsonMappingException10);
      assertSame(jsonMappingException9, jsonMappingException14);
      
      jsonMappingException15.prependPath(jsonMappingException_Reference0);
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException15);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException14);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException15, jsonMappingException2);
      assertSame(jsonMappingException15, jsonMappingException3);
      assertSame(jsonMappingException15, jsonMappingException8);
      assertSame(jsonMappingException15, jsonMappingException14);
      assertSame(jsonMappingException15, jsonMappingException12);
      assertSame(jsonMappingException15, jsonMappingException5);
      assertSame(jsonMappingException15, jsonMappingException11);
      assertSame(jsonMappingException15, jsonMappingException13);
      assertSame(jsonMappingException15, jsonMappingException10);
      assertSame(jsonMappingException15, jsonMappingException7);
      assertSame(jsonMappingException15, jsonMappingException0);
      assertSame(jsonMappingException15, jsonMappingException4);
      assertSame(jsonMappingException15, jsonMappingException1);
      assertSame(jsonMappingException15, jsonMappingException6);
      assertSame(jsonMappingException15, jsonMappingException9);
      assertSame(jsonMappingException9, jsonMappingException12);
      assertSame(jsonMappingException9, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException4);
      assertSame(jsonMappingException9, jsonMappingException6);
      assertSame(jsonMappingException9, jsonMappingException1);
      assertSame(jsonMappingException9, jsonMappingException7);
      assertSame(jsonMappingException9, jsonMappingException3);
      assertSame(jsonMappingException9, jsonMappingException11);
      assertSame(jsonMappingException9, jsonMappingException8);
      assertSame(jsonMappingException9, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException15);
      assertSame(jsonMappingException9, jsonMappingException2);
      assertSame(jsonMappingException9, jsonMappingException13);
      assertSame(jsonMappingException9, jsonMappingException10);
      assertSame(jsonMappingException9, jsonMappingException14);
      
      JsonMappingException jsonMappingException16 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException16);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException16);
      assertSame(jsonMappingException4, jsonMappingException7);
      assertSame(jsonMappingException4, jsonMappingException9);
      assertSame(jsonMappingException4, jsonMappingException6);
      assertSame(jsonMappingException4, jsonMappingException13);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException15);
      assertSame(jsonMappingException4, jsonMappingException11);
      assertSame(jsonMappingException4, jsonMappingException12);
      assertSame(jsonMappingException4, jsonMappingException5);
      assertSame(jsonMappingException4, jsonMappingException10);
      assertSame(jsonMappingException4, jsonMappingException16);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException8);
      assertSame(jsonMappingException4, jsonMappingException14);
      assertSame(jsonMappingException16, jsonMappingException13);
      assertSame(jsonMappingException16, jsonMappingException10);
      assertSame(jsonMappingException16, jsonMappingException6);
      assertSame(jsonMappingException16, jsonMappingException7);
      assertSame(jsonMappingException16, jsonMappingException5);
      assertSame(jsonMappingException16, jsonMappingException12);
      assertSame(jsonMappingException16, jsonMappingException8);
      assertSame(jsonMappingException16, jsonMappingException3);
      assertSame(jsonMappingException16, jsonMappingException2);
      assertSame(jsonMappingException16, jsonMappingException14);
      assertSame(jsonMappingException16, jsonMappingException11);
      assertSame(jsonMappingException16, jsonMappingException15);
      assertSame(jsonMappingException16, jsonMappingException4);
      assertSame(jsonMappingException16, jsonMappingException9);
      assertSame(jsonMappingException16, jsonMappingException0);
      assertSame(jsonMappingException16, jsonMappingException1);
      
      JsonMappingException jsonMappingException17 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])", "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException17);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException17);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException16);
      assertSame(jsonMappingException5, jsonMappingException16);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException13);
      assertSame(jsonMappingException5, jsonMappingException12);
      assertSame(jsonMappingException5, jsonMappingException6);
      assertSame(jsonMappingException5, jsonMappingException15);
      assertSame(jsonMappingException5, jsonMappingException10);
      assertSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException8);
      assertSame(jsonMappingException5, jsonMappingException14);
      assertSame(jsonMappingException5, jsonMappingException11);
      assertSame(jsonMappingException5, jsonMappingException9);
      assertSame(jsonMappingException5, jsonMappingException7);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertSame(jsonMappingException5, jsonMappingException17);
      assertSame(jsonMappingException17, jsonMappingException4);
      assertSame(jsonMappingException17, jsonMappingException0);
      assertSame(jsonMappingException17, jsonMappingException12);
      assertSame(jsonMappingException17, jsonMappingException15);
      assertSame(jsonMappingException17, jsonMappingException10);
      assertSame(jsonMappingException17, jsonMappingException16);
      assertSame(jsonMappingException17, jsonMappingException14);
      assertSame(jsonMappingException17, jsonMappingException11);
      assertSame(jsonMappingException17, jsonMappingException2);
      assertSame(jsonMappingException17, jsonMappingException8);
      assertSame(jsonMappingException17, jsonMappingException9);
      assertSame(jsonMappingException17, jsonMappingException5);
      assertSame(jsonMappingException17, jsonMappingException7);
      assertSame(jsonMappingException17, jsonMappingException13);
      assertSame(jsonMappingException17, jsonMappingException3);
      assertSame(jsonMappingException17, jsonMappingException6);
      assertSame(jsonMappingException17, jsonMappingException1);
      
      jsonMappingException12.prependPath(jsonMappingException_Reference0);
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException17);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException16);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException12);
      assertSame(jsonMappingException11, jsonMappingException17);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException15);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException13);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException14);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertSame(jsonMappingException11, jsonMappingException16);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException17);
      assertSame(jsonMappingException1, jsonMappingException15);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException14);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException16);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException12, jsonMappingException0);
      assertSame(jsonMappingException12, jsonMappingException17);
      assertSame(jsonMappingException12, jsonMappingException16);
      assertSame(jsonMappingException12, jsonMappingException1);
      assertSame(jsonMappingException12, jsonMappingException10);
      assertSame(jsonMappingException12, jsonMappingException11);
      assertSame(jsonMappingException12, jsonMappingException5);
      assertSame(jsonMappingException12, jsonMappingException3);
      assertSame(jsonMappingException12, jsonMappingException7);
      assertSame(jsonMappingException12, jsonMappingException2);
      assertSame(jsonMappingException12, jsonMappingException8);
      assertSame(jsonMappingException12, jsonMappingException14);
      assertSame(jsonMappingException12, jsonMappingException15);
      assertSame(jsonMappingException12, jsonMappingException9);
      assertSame(jsonMappingException12, jsonMappingException4);
      assertSame(jsonMappingException12, jsonMappingException13);
      assertSame(jsonMappingException12, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException17);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException16);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException14);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException13);
      assertSame(jsonMappingException2, jsonMappingException15);
      assertSame(jsonMappingException3, jsonMappingException14);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException11);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException15);
      assertSame(jsonMappingException3, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException13);
      assertSame(jsonMappingException3, jsonMappingException16);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException17);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException12);
      
      jsonMappingException11.prependPath(jsonMappingException_Reference0);
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException17);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException16);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException12);
      assertSame(jsonMappingException11, jsonMappingException17);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException15);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException13);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException14);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertSame(jsonMappingException11, jsonMappingException16);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException17);
      assertSame(jsonMappingException1, jsonMappingException15);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException14);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException16);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException17);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException16);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException14);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException13);
      assertSame(jsonMappingException2, jsonMappingException15);
      assertSame(jsonMappingException3, jsonMappingException14);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException11);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException15);
      assertSame(jsonMappingException3, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException13);
      assertSame(jsonMappingException3, jsonMappingException16);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException17);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException12);
      
      JsonMappingException jsonMappingException18 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException_Reference0, 15);
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException18);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException18);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException17);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException16);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException17);
      assertSame(jsonMappingException1, jsonMappingException15);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException14);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException16);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException18);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException18, jsonMappingException13);
      assertSame(jsonMappingException18, jsonMappingException10);
      assertSame(jsonMappingException18, jsonMappingException7);
      assertSame(jsonMappingException18, jsonMappingException0);
      assertSame(jsonMappingException18, jsonMappingException5);
      assertSame(jsonMappingException18, jsonMappingException16);
      assertSame(jsonMappingException18, jsonMappingException17);
      assertSame(jsonMappingException18, jsonMappingException11);
      assertSame(jsonMappingException18, jsonMappingException12);
      assertSame(jsonMappingException18, jsonMappingException3);
      assertSame(jsonMappingException18, jsonMappingException2);
      assertSame(jsonMappingException18, jsonMappingException8);
      assertSame(jsonMappingException18, jsonMappingException14);
      assertSame(jsonMappingException18, jsonMappingException1);
      assertSame(jsonMappingException18, jsonMappingException4);
      assertSame(jsonMappingException18, jsonMappingException9);
      assertSame(jsonMappingException18, jsonMappingException6);
      assertSame(jsonMappingException18, jsonMappingException15);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      JsonMappingException jsonMappingException19 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException9, (Object) pipedWriter0, "(qY]t~L+cGhDGL+2t/");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException19);
      assertSame(jsonMappingException19, jsonMappingException13);
      assertSame(jsonMappingException19, jsonMappingException10);
      assertSame(jsonMappingException19, jsonMappingException16);
      assertSame(jsonMappingException19, jsonMappingException6);
      assertSame(jsonMappingException19, jsonMappingException9);
      assertSame(jsonMappingException19, jsonMappingException0);
      assertSame(jsonMappingException19, jsonMappingException12);
      assertSame(jsonMappingException19, jsonMappingException1);
      assertSame(jsonMappingException19, jsonMappingException7);
      assertSame(jsonMappingException19, jsonMappingException18);
      assertSame(jsonMappingException19, jsonMappingException17);
      assertSame(jsonMappingException19, jsonMappingException2);
      assertSame(jsonMappingException19, jsonMappingException15);
      assertSame(jsonMappingException19, jsonMappingException3);
      assertSame(jsonMappingException19, jsonMappingException11);
      assertSame(jsonMappingException19, jsonMappingException5);
      assertSame(jsonMappingException19, jsonMappingException4);
      assertSame(jsonMappingException19, jsonMappingException8);
      assertSame(jsonMappingException19, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException19);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException18);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException17);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException16);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertSame(jsonMappingException1, jsonMappingException17);
      assertSame(jsonMappingException1, jsonMappingException15);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException14);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException16);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException19);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException18);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException9, jsonMappingException12);
      assertSame(jsonMappingException9, jsonMappingException17);
      assertSame(jsonMappingException9, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException4);
      assertSame(jsonMappingException9, jsonMappingException16);
      assertSame(jsonMappingException9, jsonMappingException6);
      assertSame(jsonMappingException9, jsonMappingException1);
      assertSame(jsonMappingException9, jsonMappingException7);
      assertSame(jsonMappingException9, jsonMappingException3);
      assertSame(jsonMappingException9, jsonMappingException18);
      assertSame(jsonMappingException9, jsonMappingException19);
      assertSame(jsonMappingException9, jsonMappingException11);
      assertSame(jsonMappingException9, jsonMappingException8);
      assertSame(jsonMappingException9, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException15);
      assertSame(jsonMappingException9, jsonMappingException2);
      assertSame(jsonMappingException9, jsonMappingException13);
      assertSame(jsonMappingException9, jsonMappingException10);
      assertSame(jsonMappingException9, jsonMappingException14);
      
      jsonMappingException17.prependPath(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException0, jsonMappingException19);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException18);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException17);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException15);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException16);
      assertSame(jsonMappingException5, jsonMappingException16);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException13);
      assertSame(jsonMappingException5, jsonMappingException12);
      assertSame(jsonMappingException5, jsonMappingException6);
      assertSame(jsonMappingException5, jsonMappingException15);
      assertSame(jsonMappingException5, jsonMappingException10);
      assertSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException8);
      assertSame(jsonMappingException5, jsonMappingException14);
      assertSame(jsonMappingException5, jsonMappingException11);
      assertSame(jsonMappingException5, jsonMappingException18);
      assertSame(jsonMappingException5, jsonMappingException9);
      assertSame(jsonMappingException5, jsonMappingException7);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException19);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertSame(jsonMappingException5, jsonMappingException17);
      assertSame(jsonMappingException17, jsonMappingException4);
      assertSame(jsonMappingException17, jsonMappingException0);
      assertSame(jsonMappingException17, jsonMappingException12);
      assertSame(jsonMappingException17, jsonMappingException15);
      assertSame(jsonMappingException17, jsonMappingException10);
      assertSame(jsonMappingException17, jsonMappingException16);
      assertSame(jsonMappingException17, jsonMappingException14);
      assertSame(jsonMappingException17, jsonMappingException11);
      assertSame(jsonMappingException17, jsonMappingException2);
      assertSame(jsonMappingException17, jsonMappingException8);
      assertSame(jsonMappingException17, jsonMappingException19);
      assertSame(jsonMappingException17, jsonMappingException9);
      assertSame(jsonMappingException17, jsonMappingException5);
      assertSame(jsonMappingException17, jsonMappingException7);
      assertSame(jsonMappingException17, jsonMappingException18);
      assertSame(jsonMappingException17, jsonMappingException13);
      assertSame(jsonMappingException17, jsonMappingException3);
      assertSame(jsonMappingException17, jsonMappingException6);
      assertSame(jsonMappingException17, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "Q5,El>");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility");
      assertNotNull(jsonMappingException0);
      
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) linkedList0, 15);
      assertEquals(0, linkedList0.size());
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) pipedOutputStream0, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) null, 15);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException0);
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException3);
      
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException0);
      
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(string0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException_Reference0, 15);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertSame(jsonMappingException5, jsonMappingException6);
      assertSame(jsonMappingException6, jsonMappingException3);
      assertSame(jsonMappingException6, jsonMappingException4);
      assertSame(jsonMappingException6, jsonMappingException0);
      assertSame(jsonMappingException6, jsonMappingException5);
      assertSame(jsonMappingException6, jsonMappingException1);
      assertSame(jsonMappingException6, jsonMappingException2);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) pipedReader0, 15);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException2);
      
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException7, (Object) jsonMappingException4, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])");
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException4, jsonMappingException5);
      assertSame(jsonMappingException4, jsonMappingException7);
      assertSame(jsonMappingException4, jsonMappingException6);
      assertSame(jsonMappingException4, jsonMappingException8);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertSame(jsonMappingException7, jsonMappingException8);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException7);
      assertSame(jsonMappingException8, jsonMappingException1);
      assertSame(jsonMappingException8, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException6);
      assertSame(jsonMappingException8, jsonMappingException5);
      assertSame(jsonMappingException8, jsonMappingException3);
      assertSame(jsonMappingException8, jsonMappingException0);
      assertSame(jsonMappingException8, jsonMappingException4);
      
      JsonMappingException jsonMappingException9 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) pipedReader0, "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException4);
      assertSame(jsonMappingException9, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException2);
      assertSame(jsonMappingException9, jsonMappingException6);
      assertSame(jsonMappingException9, jsonMappingException8);
      assertSame(jsonMappingException9, jsonMappingException1);
      assertSame(jsonMappingException9, jsonMappingException3);
      assertSame(jsonMappingException9, jsonMappingException7);
      
      jsonMappingException9.prependPath((Object) null, 15);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException4);
      assertSame(jsonMappingException9, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException2);
      assertSame(jsonMappingException9, jsonMappingException6);
      assertSame(jsonMappingException9, jsonMappingException8);
      assertSame(jsonMappingException9, jsonMappingException1);
      assertSame(jsonMappingException9, jsonMappingException3);
      assertSame(jsonMappingException9, jsonMappingException7);
      
      JsonMappingException jsonMappingException10 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      assertEquals(0, linkedList0.size());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException10);
      assertSame(jsonMappingException10, jsonMappingException4);
      assertSame(jsonMappingException10, jsonMappingException7);
      assertSame(jsonMappingException10, jsonMappingException0);
      assertSame(jsonMappingException10, jsonMappingException3);
      assertSame(jsonMappingException10, jsonMappingException2);
      assertSame(jsonMappingException10, jsonMappingException6);
      assertSame(jsonMappingException10, jsonMappingException5);
      assertSame(jsonMappingException10, jsonMappingException8);
      assertSame(jsonMappingException10, jsonMappingException1);
      assertSame(jsonMappingException10, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException7);
      
      JsonMappingException jsonMappingException11 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility", "com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->UNKNOWN[15]->java.io.PipedOutputStream[\"com.fasterxml.jakso.annotation.JsonAutoDetect$Visbility\"]->java.util.LinkedList[15])");
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException10);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException11);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException10);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException11);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 15);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      try { 
        objectMapper1.writeValueAsString(objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "$f7";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("$f7", " Y)`Ez7");
      assertEquals("java.sql.SQLFeatureNotSupportedException: $f7", sQLFeatureNotSupportedException0.toString());
      assertEquals("$f7", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" Y)`Ez7", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: $f7", sQLFeatureNotSupportedException0.toString());
      assertEquals("$f7", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" Y)`Ez7", sQLFeatureNotSupportedException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, (-2581));
      assertEquals("java.sql.SQLFeatureNotSupportedException: $f7", sQLFeatureNotSupportedException0.toString());
      assertEquals("$f7", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" Y)`Ez7", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.8);
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isArray());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertNull(doubleNode0.textValue());
      assertEquals(0.8F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.isDouble());
      assertEquals(0.8, doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0, doubleNode0.intValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertNotNull(doubleNode0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) doubleNode0, "");
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isArray());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertNull(doubleNode0.textValue());
      assertEquals(0.8F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.isDouble());
      assertEquals(0.8, doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0, doubleNode0.intValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isArray());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertNull(doubleNode0.textValue());
      assertEquals(0.8F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.isDouble());
      assertEquals(0.8, doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0, doubleNode0.intValue());
      assertEquals((short)0, doubleNode0.shortValue());
      
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.isNaN());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(8193, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonParserDelegate0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) jsonParserDelegate0, "JSON");
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.isNaN());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(8193, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory1);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.isNaN());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(8193, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonMappingException1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.isNaN());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(8193, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      File file0 = MockFile.createTempFile("1]3B^?7k4Gj", "F@xR&[<dHLJD", (File) null);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("1]3B^?7k4Gj0F@xR&[<dHLJD", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/1]3B^?7k4Gj0F@xR&[<dHLJD", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      assertNotNull(mockFileOutputStream0);
      
      JsonLocation jsonLocation0 = new JsonLocation(mockFileOutputStream0, 1L, 0L, (-956), (-956));
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("1]3B^?7k4Gj0F@xR&[<dHLJD", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/1]3B^?7k4Gj0F@xR&[<dHLJD", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals((-956), jsonLocation0.getLineNr());
      assertEquals((-956), jsonLocation0.getColumnNr());
      assertEquals(1L, jsonLocation0.getByteOffset());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertNotNull(jsonLocation0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "F@xR&[<dHLJD", jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility");
      assertNotNull(jsonMappingException0);
      
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) linkedList0, 14);
      assertEquals(0, linkedList0.size());
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JsonMappingException jsonMappingException2 = new JsonMappingException("com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException2);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) null, 14);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      
      JsonMappingException jsonMappingException4 = JsonMappingException.fromUnexpectedIOE(jsonMappingException3);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException4);
      assertNotSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException4);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, "TR%q#=<;R");
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException3));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertNotSame(jsonMappingException5, jsonMappingException4);
      assertNotSame(jsonMappingException5, jsonMappingException2);
      assertNotSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException0);
      
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException6.equals((Object)jsonMappingException3));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException6, jsonMappingException2);
      assertNotSame(jsonMappingException6, jsonMappingException4);
      assertSame(jsonMappingException6, jsonMappingException5);
      assertSame(jsonMappingException6, jsonMappingException0);
      assertNotSame(jsonMappingException6, jsonMappingException3);
      assertSame(jsonMappingException6, jsonMappingException1);
      
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException3));
      assertEquals("com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"TR%q#=<;R\"]->java.util.LinkedList[14])", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(jsonMappingException_Reference1));
      assertNotNull(string0);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertNotNull(jsonParserDelegate0);
      
      JsonParserDelegate jsonParserDelegate1 = new JsonParserDelegate(jsonParserDelegate0);
      assertFalse(jsonParserDelegate1.equals((Object)jsonParserDelegate0));
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(0, jsonParserDelegate1.getFormatFeatures());
      assertFalse(jsonParserDelegate1.canParseAsync());
      assertNotNull(jsonParserDelegate1);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "a-jGqWf+@]\"7S,:J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      jsonMappingException0.prependPath((Object) class0, "Qs@o{\"WP");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("K{eMl}E9o83&wJD/3OF");
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) "K{eMl}E9o83&wJD/3OF", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      String string0 = jsonMappingException0._buildMessage();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      jsonMappingException0.prependPath((Object) "", 157);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      JsonMappingException jsonMappingException2 = new JsonMappingException("");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertNotNull(jsonMappingException2);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath((Object) "", "I");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNotNull(filteringParserDelegate0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "I", (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("K{eMl}E9o83&wJD/3OF");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      jsonMappingException0.prependPath((Object) "K{eMl}E9o83&wJD/3OF", "K{eMl}E9o83&wJD/3OF");
      assertSame(jsonMappingException0, jsonMappingException1);
      
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNotNull(readerBasedJsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237151376, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "IDQeR7", sQLFeatureNotSupportedException0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals("IDQeR7\n at [Source: UNKNOWN; line: 1, column: 0]", string0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(string0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "4kNIx:[KpfADiV%", (Throwable) sQLFeatureNotSupportedException0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "hm5");
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237151376, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, "Vn\"'DcB-", (Throwable) null);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: Vn\"'DcB-", string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(string0);
      
      String string1 = jsonMappingException0.getMessage();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Vn\"'DcB-", string1);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(string1);
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jsonMappingException0.getProcessor();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter1.size());
      assertEquals("", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "Vn\"'DcB-", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1000;
      intArray0[1] = 1000;
      intArray0[2] = (-4025);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1000, 1000, (-4025)}, intArray0);
      assertEquals(3, intArray0.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {1000, 1000, (-4025)}, intArray0);
      assertEquals(3, intArray0.length);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLInvalidAuthorizationSpecException0);
      assertNotNull(jsonMappingException0);
      assertArrayEquals(new int[] {1000, 1000, (-4025)}, intArray0);
      assertEquals(3, intArray0.length);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(string0);
      assertArrayEquals(new int[] {1000, 1000, (-4025)}, intArray0);
      assertEquals(3, intArray0.length);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "ESCAPE_NON_ASCII");
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, batchUpdateException0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(iOContext0);
      assertArrayEquals(new int[] {1000, 1000, (-4025)}, intArray0);
      assertEquals(3, intArray0.length);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(iOContext1);
      assertArrayEquals(new int[] {1000, 1000, (-4025)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = null;
      try {
        byteArrayBuilder0 = new ByteArrayBuilder((-4025));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UNKNOWN", "UNKNOWN", 0);
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "UNKNOWN", "q[hs5N=I9d>YVs", 0);
      assertEquals("UNKNOWN", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("q[hs5N=I9d>YVs", stackTraceElement0.getFileName());
      assertEquals("", stackTraceElement0.getClassName());
      assertEquals(".UNKNOWN(q[hs5N=I9d>YVs:0)", stackTraceElement0.toString());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("]ZgR#iB.", "", "(was ", 0);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("(was ", stackTraceElement1.getFileName());
      assertEquals("", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("]ZgR#iB.", stackTraceElement1.getClassName());
      assertEquals("]ZgR#iB..((was :0)", stackTraceElement1.toString());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StackTraceElement stackTraceElement2 = new StackTraceElement("zGj_,eo:$", "cI_V8w:D'/", "zGj_,eo:$", (-3980));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertEquals("zGj_,eo:$", stackTraceElement2.getFileName());
      assertEquals("cI_V8w:D'/", stackTraceElement2.getMethodName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals((-3980), stackTraceElement2.getLineNumber());
      assertEquals("zGj_,eo:$.cI_V8w:D'/(zGj_,eo:$)", stackTraceElement2.toString());
      assertEquals("zGj_,eo:$", stackTraceElement2.getClassName());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("_7.", "zGj_,eo:$", "(was ", 0);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertEquals(0, stackTraceElement3.getLineNumber());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("zGj_,eo:$", stackTraceElement3.getMethodName());
      assertEquals("_7..zGj_,eo:$((was :0)", stackTraceElement3.toString());
      assertEquals("_7.", stackTraceElement3.getClassName());
      assertEquals("(was ", stackTraceElement3.getFileName());
      assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("y9zSc$8._//H", "_7.", "]ZgR#iB.", (-3980));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("]ZgR#iB.", stackTraceElement4.getFileName());
      assertEquals("_7.", stackTraceElement4.getMethodName());
      assertEquals((-3980), stackTraceElement4.getLineNumber());
      assertEquals("y9zSc$8._//H", stackTraceElement4.getClassName());
      assertEquals("y9zSc$8._//H._7.(]ZgR#iB.)", stackTraceElement4.toString());
      assertNotNull(stackTraceElement4);
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "", "y9zSc$8._//H", (-3980));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertEquals("y9zSc$8._//H", stackTraceElement5.getFileName());
      assertEquals("", stackTraceElement5.getMethodName());
      assertEquals(".(y9zSc$8._//H)", stackTraceElement5.toString());
      assertEquals((-3980), stackTraceElement5.getLineNumber());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertEquals("", stackTraceElement5.getClassName());
      assertNotNull(stackTraceElement5);
      
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(6, stackTraceElementArray0.length);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 0);
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      jsonMappingException0.prependPath((Object) stringReader0, 0);
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN (through reference chain: java.io.StringReader[0]->java.sql.SQLFeatureNotSupportedException[0])", string0);
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("UNKNOWN", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLNonTransientConnectionException: UNKNOWN", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) list0, 14);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = (JsonMappingException.Reference)jsonMappingException_Reference1.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertNotNull(jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference1, "TR%q#=<;R");
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException0);
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException3);
      
      String string0 = jsonMappingException2.getLocalizedMessage();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertEquals("com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility (through reference chain: UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"TR%q#=<;R\"]->java.util.Collections$EmptyList[14])", string0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(jsonMappingException_Reference0));
      assertNotNull(string0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      
      System.setCurrentTimeMillis(14);
      JsonMappingException jsonMappingException5 = new JsonMappingException("");
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException5);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      
      MockIOException mockIOException0 = new MockIOException("");
      assertNotNull(mockIOException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) hashMap0, 1000);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jsonMappingException0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNotNull(arrayNode0);
      
      NumericNode numericNode0 = arrayNode0.numberNode(1000);
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(1000.0F, numericNode0.floatValue(), 0.01F);
      assertEquals(1000L, numericNode0.longValue());
      assertTrue(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(1000.0, numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.isMissingNode());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(0, numericNode0.size());
      assertEquals(1000, numericNode0.intValue());
      assertNull(numericNode0.textValue());
      assertEquals((short)1000, numericNode0.shortValue());
      assertNotNull(numericNode0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper1);
      
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(numericNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(1000.0F, numericNode0.floatValue(), 0.01F);
      assertEquals(1000L, numericNode0.longValue());
      assertTrue(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(1000.0, numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.isMissingNode());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(0, numericNode0.size());
      assertEquals(1000, numericNode0.intValue());
      assertNull(numericNode0.textValue());
      assertEquals((short)1000, numericNode0.shortValue());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentName());
      assertNotNull(jsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "");
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(1000.0F, numericNode0.floatValue(), 0.01F);
      assertEquals(1000L, numericNode0.longValue());
      assertTrue(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(1000.0, numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.isMissingNode());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(0, numericNode0.size());
      assertEquals(1000, numericNode0.intValue());
      assertNull(numericNode0.textValue());
      assertEquals((short)1000, numericNode0.shortValue());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentName());
      assertNotNull(jsonMappingException1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonParser0, ": class expects ");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(1000.0F, numericNode0.floatValue(), 0.01F);
      assertEquals(1000L, numericNode0.longValue());
      assertTrue(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(1000.0, numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.isMissingNode());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(0, numericNode0.size());
      assertEquals(1000, numericNode0.intValue());
      assertNull(numericNode0.textValue());
      assertEquals((short)1000, numericNode0.shortValue());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentName());
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      StringBuilder stringBuilder0 = jsonMappingException2.getPathReference((StringBuilder) null);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(1000.0F, numericNode0.floatValue(), 0.01F);
      assertEquals(1000L, numericNode0.longValue());
      assertTrue(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(1000.0, numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.isMissingNode());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(0, numericNode0.size());
      assertEquals(1000, numericNode0.intValue());
      assertNull(numericNode0.textValue());
      assertEquals((short)1000, numericNode0.shortValue());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentName());
      assertNull(stringBuilder0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      String string1 = jsonMappingException1.getLocalizedMessage();
      assertFalse(string1.equals((Object)string0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("\n at [Source: UNKNOWN; line: -1, column: -1]", string1);
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(1000.0F, numericNode0.floatValue(), 0.01F);
      assertEquals(1000L, numericNode0.longValue());
      assertTrue(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(1000.0, numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.isMissingNode());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(0, numericNode0.size());
      assertEquals(1000, numericNode0.intValue());
      assertNull(numericNode0.textValue());
      assertEquals((short)1000, numericNode0.shortValue());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentName());
      assertNotNull(string1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 0L, (-952), (-952));
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-952), jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-952), jsonLocation0.getColumnNr());
      assertNotNull(jsonLocation0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, sQLRecoverableException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("\n at [Source: UNKNOWN; line: -952, column: -952]", string0);
      assertEquals((-952), jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-952), jsonLocation0.getColumnNr());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      assertNotNull(serializerProvider0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "(was ");
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("(was ", string0);
      assertNotNull(string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0._index = 1531;
      assertEquals(1531, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertFalse(string1.equals((Object)string0));
      assertEquals("UNKNOWN[1531]", string1);
      assertEquals(1531, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string1);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, 1531);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(arrayNode0);
      
      NumericNode numericNode0 = arrayNode0.numberNode(1531);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(1531.0F, numericNode0.floatValue(), 0.01F);
      assertEquals((short)1531, numericNode0.shortValue());
      assertFalse(numericNode0.isMissingNode());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isArray());
      assertFalse(numericNode0.isLong());
      assertEquals(1531L, numericNode0.longValue());
      assertFalse(numericNode0.isDouble());
      assertEquals(1531.0, numericNode0.doubleValue(), 0.01);
      assertTrue(numericNode0.canConvertToLong());
      assertNull(numericNode0.textValue());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.isShort());
      assertEquals(1531, numericNode0.intValue());
      assertTrue(numericNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertFalse(numericNode0.isObject());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isBigInteger());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isNaN());
      assertNotNull(numericNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNotNull(jsonParser0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonParser0, "(was ");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from(jsonParser0, "");
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNotNull(jsonMappingException3);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("u");
      assertNotNull(jsonMappingException0);
      
      StackTraceElement[] stackTraceElementArray0 = jsonMappingException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("u", string0);
      assertNotNull(string0);
      
      String string1 = jsonMappingException0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: u", string1);
      assertNotNull(string1);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "B4Y{G:`f;5TaWKg");
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      String string2 = jsonMappingException1._buildMessage();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("u (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"B4Y{G:`f;5TaWKg\"])", string2);
      assertNotNull(string2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      Throwable[] throwableArray0 = jsonMappingException1.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      StackTraceElement[] stackTraceElementArray1 = jsonMappingException1.getStackTrace();
      assertNotNull(stackTraceElementArray1);
      assertEquals(3, stackTraceElementArray1.length);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(stackTraceElementArray1, stackTraceElementArray0);
      
      System.setCurrentTimeMillis(0L);
      String string3 = jsonMappingException0._buildMessage();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("u (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"B4Y{G:`f;5TaWKg\"])", string3);
      assertNotNull(string3);
      assertSame(jsonMappingException0, jsonMappingException1);
      
      String string4 = jsonMappingException0.getPathReference();
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[\"B4Y{G:`f;5TaWKg\"]", string4);
      assertNotNull(string4);
      assertSame(jsonMappingException0, jsonMappingException1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 91;
      intArray0[1] = (-1);
      intArray0[2] = (-1048);
      intArray0[3] = 98;
      intArray0[4] = (-485);
      intArray0[5] = (-175);
      intArray0[6] = (-65);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {91, (-1), (-1048), 98, (-485), (-175), (-65)}, intArray0);
      assertEquals(7, intArray0.length);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0, "u (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"B4Y{G:`f;5TaWKg\"])");
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("u (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"B4Y{G:`f;5TaWKg\"])", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      assertArrayEquals(new int[] {91, (-1), (-1048), 98, (-485), (-175), (-65)}, intArray0);
      assertEquals(7, intArray0.length);
      
      String string5 = jsonMappingException_Reference0.getDescription();
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("java.sql.BatchUpdateException[\"u (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"B4Y{G:`f;5TaWKg\"])\"]", string5);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("u (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"B4Y{G:`f;5TaWKg\"])", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string5);
      assertArrayEquals(new int[] {91, (-1), (-1048), 98, (-485), (-175), (-65)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNotNull(readerBasedJsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237085840, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("c}fE.M,p&ZCynd8J~", "c}fE.M,p&ZCynd8J~", (-3));
      assertEquals("c}fE.M,p&ZCynd8J~", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("c}fE.M,p&ZCynd8J~", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals((-3), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: c}fE.M,p&ZCynd8J~", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("c}fE.M,p&ZCynd8J~", "IDQecR7", (-1), sQLFeatureNotSupportedException0);
      assertEquals("c}fE.M,p&ZCynd8J~", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("c}fE.M,p&ZCynd8J~", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals((-3), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: c}fE.M,p&ZCynd8J~", sQLFeatureNotSupportedException0.toString());
      assertEquals("IDQecR7", sQLNonTransientException0.getSQLState());
      assertEquals("c}fE.M,p&ZCynd8J~", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: c}fE.M,p&ZCynd8J~", sQLNonTransientException0.toString());
      assertEquals((-1), sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl");
      assertEquals("java.sql.SQLTransientException: com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (JsonMappingException.Reference) null);
      assertEquals("java.sql.SQLTransientException: com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl", sQLTransientException0.getMessage());
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = ")";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) list0, 14);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      String string0 = jsonMappingException1.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: java.util.Collections$EmptyList[14])", string0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(string0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = (JsonMappingException.Reference)jsonMappingException_Reference1.writeReplace();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNotNull(jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setFieldName(">&$$C\"kUl^-f9");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(">&$$C\"kUl^-f9", jsonMappingException_Reference0.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      
      JsonMappingException.Reference jsonMappingException_Reference3 = new JsonMappingException.Reference();
      assertFalse(jsonMappingException_Reference3.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference3.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference3.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference3.getIndex());
      assertNull(jsonMappingException_Reference3.getFieldName());
      assertNotNull(jsonMappingException_Reference3);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("I", false);
      assertNotNull(mockFileWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      assertNotNull(bufferedWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference4 = new JsonMappingException.Reference(bufferedWriter0, 2276);
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference3));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference1));
      assertEquals(2276, jsonMappingException_Reference4.getIndex());
      assertNull(jsonMappingException_Reference4.getFieldName());
      assertNotNull(jsonMappingException_Reference4);
      
      jsonMappingException1.prependPath(jsonMappingException_Reference4);
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference3));
      assertFalse(jsonMappingException_Reference4.equals((Object)jsonMappingException_Reference1));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(2276, jsonMappingException_Reference4.getIndex());
      assertNull(jsonMappingException_Reference4.getFieldName());
      assertFalse(list0.contains(jsonMappingException_Reference3));
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException_Reference4, jsonMappingException_Reference2);
      assertNotSame(jsonMappingException_Reference4, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference4, jsonMappingException_Reference3);
      assertNotSame(jsonMappingException_Reference4, jsonMappingException_Reference1);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) ">&$$C\"kUl^-f9", 14);
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) list0, 14);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      String string0 = jsonMappingException1.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: java.util.Collections$EmptyList[14])", string0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(string0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertNotNull(jsonMappingException_Reference2);
      
      jsonMappingException_Reference2.setDescription("com.fasterxml.jackson.databind.JsonMappingException$Reference");
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference3 = (JsonMappingException.Reference)jsonMappingException_Reference2.writeReplace();
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference3.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference3.equals((Object)jsonMappingException_Reference1));
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference3.getIndex());
      assertNull(jsonMappingException_Reference3.getFieldName());
      assertNotNull(jsonMappingException_Reference3);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference3);
      assertNotSame(jsonMappingException_Reference3, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference3, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference3, jsonMappingException_Reference2);
      
      jsonMappingException_Reference2.setFieldName("");
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference3);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) ">&$$C\"kUl^-f9", "TR%q#=<;R");
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(jsonMappingException_Reference3));
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference2);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertFalse(list0.contains(jsonMappingException_Reference3));
      assertNotNull(jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference3);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: java.util.Collections$EmptyList[14])");
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: java.util.Collections$EmptyList[14])", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      jsonMappingException2._appendPathDesc(stringBuilder0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: java.util.Collections$EmptyList[14])com.fasterxml.jackson.databind.JsonMappingException$Reference->java.lang.String[\"TR%q#=<;R\"]->java.util.Collections$EmptyList[14]", stringBuilder0.toString());
      assertFalse(list0.contains(jsonMappingException_Reference3));
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNotNull(readerBasedJsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237085840, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setDescription((String) null);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      jsonMappingException_Reference0.setFieldName("");
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, ") now exceeds maximum, ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      assertNotNull(serializerProvider0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "(was ");
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("(was ", string0);
      assertNotNull(string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("(was ");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0._index = 1531;
      assertEquals(1531, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang.String[1531]", string1);
      assertEquals(1531, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string1);
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLException sQLException0 = new SQLException();
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0, sQLException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      int int0 = 1;
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null, 0, 1);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("n", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("n", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      Throwable throwable0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, (String) null, (Throwable) null);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 14);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", jsonMappingException1);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertEquals("", string0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(string0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", (-2030));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-1448));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertEquals((-1448), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "#m+pE";
      MockIOException mockIOException0 = new MockIOException("#m+pE");
      assertNotNull(mockIOException0);
      
      mockIOException0.printStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.clearLocation();
      String string1 = mockIOException0.getMessage();
      assertTrue(string1.equals((Object)string0));
      assertEquals("#m+pE", string1);
      assertNotNull(string1);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setFieldName("[KdE");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("[KdE", jsonMappingException_Reference0.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      String string2 = jsonMappingException0._buildMessage();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): #m+pE", string2);
      assertNotNull(string2);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = null;
      try {
        jsonMappingException_Reference2 = new JsonMappingException.Reference("#m+pE", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNotNull(readerBasedJsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(237085840, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext0);
      
      String string0 = "IDQecR7";
      String string1 = "c}fE.M,p&ZCynd8J~";
      int int0 = (-1);
      String string2 = "!jJo $JY*|esB?Uu";
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "IDQecR7";
      objectArray0[3] = (Object) readerBasedJsonParser0;
      objectArray0[4] = (Object) readerBasedJsonParser0;
      objectArray0[5] = (Object) "!jJo $JY*|esB?Uu";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "IDQecR7";
      objectArray0[8] = (Object) readerBasedJsonParser0;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken((Class<?>) class0, jsonToken0, (JsonParser) readerBasedJsonParser0, "!jJo $JY*|esB?Uu", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // !jJo $JY*|esB?Uu
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      List<JsonMappingException.Reference> list0 = new Vector<JsonMappingException.Reference>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 14);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: java.lang.String[14])", string0);
      assertNotNull(string0);
      assertSame(jsonMappingException0, jsonMappingException1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)34;
      byteArray0[3] = (byte) (-18);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setIndex((byte)34);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(34, jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(34, jsonMappingException_Reference0.getIndex());
      assertEquals(34, jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setFieldName("");
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals(34, jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException1, "Cannot pass null KeyDeserializers");
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) jsonMappingException2);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(jsonMappingException3);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      String string1 = jsonMappingException3._buildMessage();
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException3));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("");
      assertNotNull(mockIOException0);
      
      mockIOException0.printStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.clearLocation();
      String string0 = mockIOException0.getMessage();
      assertEquals("", string0);
      assertNotNull(string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setFieldName("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      String string1 = jsonMappingException0._buildMessage();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): ", string1);
      assertNotNull(string1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(object0, "");
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNotNull(jsonMappingException_Reference2);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference2, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8000);
      assertNotNull(bufferedReader0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      MockFile mockFile0 = new MockFile("!@;K*gH`+Z", "!@;K*gH`+Z");
      assertNotNull(mockFile0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProvider();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "a");
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("CwGdu", "5t9f^/Se4s$h#jU", 3);
      assertEquals("CwGdu", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: CwGdu", sQLSyntaxErrorException0.toString());
      assertEquals(3, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("5t9f^/Se4s$h#jU", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException jsonMappingException2 = new JsonMappingException(bufferedReader0, "a", sQLSyntaxErrorException0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertNotNull(jsonMappingException2);
      
      String string2 = jsonMappingException2.getLocalizedMessage();
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("a", string2);
      assertEquals("CwGdu", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: CwGdu", sQLSyntaxErrorException0.toString());
      assertEquals(3, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("5t9f^/Se4s$h#jU", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(string2);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Object> class0 = Object.class;
      Iterable<KeyDeserializers> iterable0 = deserializerFactoryConfig0.keyDeserializers();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(iterable0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      String string0 = jsonMappingException0.getPathReference();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals("", string0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(string0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON", (Throwable) jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = iOContext0.allocConcatBuffer();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(charArray0);
      assertEquals(4000, charArray0.length);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNotNull(readerBasedJsonParser0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("&", "&", 0);
      assertEquals("&", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("&", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: &", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("&", "IDQecR7", (-1), sQLFeatureNotSupportedException0);
      assertEquals("&", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("&", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: &", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals((-1), sQLNonTransientException0.getErrorCode());
      assertEquals("&", sQLNonTransientException0.getMessage());
      assertEquals("IDQecR7", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: &", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("IDQecR7", (JsonLocation) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("CPR5GjPug9r;<w)#Oj");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("java.lang.String[?]", string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertNotNull(serializerProvider0);
      assertNotSame(objectMapper1, objectMapper0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator");
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertNotNull(jsonMappingException0);
      assertNotSame(objectMapper1, objectMapper0);
      
      jsonMappingException0.clearLocation();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertNotSame(objectMapper1, objectMapper0);
      
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_IntSequenceGenerator0);
      
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(jsonMappingException_Reference0);
      assertEquals((-1), (int)integer0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertNotNull(integer0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(integer0, (-1583));
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertEquals((-1583), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("");
      assertNotNull(mockIOException0);
      
      mockIOException0.printStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.clearLocation();
      String string0 = mockIOException0.getMessage();
      assertEquals("", string0);
      assertNotNull(string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setFieldName("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      String string1 = jsonMappingException0._buildMessage();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): ", string1);
      assertNotNull(string1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(object0, "");
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNotNull(jsonMappingException_Reference2);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference2, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8000);
      assertNotNull(bufferedReader0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(objectMapper1);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertNotNull(charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, bufferedReader0, objectMapper1, charsToNameCanonicalizer1);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(32, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(32, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNotNull(readerBasedJsonParser1);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) readerBasedJsonParser1, ".q^+B# QA?o}]$]Zv$T");
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(32, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(32, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(32, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(32, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      String string2 = jsonMappingException1.getPathReference();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("UNKNOWN[?]", string2);
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(32, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(32, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNotNull(string2);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setDescription("Cannot override _nullSerializer: had a %s, trying to set to %s");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setFieldName("cML/L4");
      assertEquals("cML/L4", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("Cannot override _nullSerializer: had a %s, trying to set to %s", string0);
      assertEquals("cML/L4", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("v05X", "Cannot override _nullSerializer: had a %s, trying to set to %s", intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: v05X", batchUpdateException0.toString());
      assertEquals("Cannot override _nullSerializer: had a %s, trying to set to %s", batchUpdateException0.getSQLState());
      assertEquals("v05X", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      jsonMappingException0.prependPath((Object) batchUpdateException0, "sf");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: v05X", batchUpdateException0.toString());
      assertEquals("Cannot override _nullSerializer: had a %s, trying to set to %s", batchUpdateException0.getSQLState());
      assertEquals("v05X", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("cML/L4");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Cannot override _nullSerializer: had a %s, trying to set to %s";
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      mockPrintStream0.print(1114111);
      PrintStream printStream0 = mockPrintStream0.format("cML/L4", objectArray0);
      assertNotNull(printStream0);
      assertEquals(2, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      
      batchUpdateException0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: v05X", batchUpdateException0.toString());
      assertEquals("Cannot override _nullSerializer: had a %s, trying to set to %s", batchUpdateException0.getSQLState());
      assertEquals("v05X", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertSame(mockPrintStream0, printStream0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "Cannot refine serialization type %s into %s; types not related", (Throwable) batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: v05X", batchUpdateException0.toString());
      assertEquals("Cannot override _nullSerializer: had a %s, trying to set to %s", batchUpdateException0.getSQLState());
      assertEquals("v05X", batchUpdateException0.getMessage());
      assertNotNull(jsonMappingException1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals("cML/L4", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("cML/L4", jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException0.prependPath((Object) "", "latb9I)Oa9^@h[%vO");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Cannot refine serialization type %s into %s; types not related");
      assertEquals("Cannot refine serialization type %s into %s; types not related", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("Cannot refine serialization type %s into %s; types not relatedjava.lang.String[\"latb9I)Oa9^@h[%vO\"]->java.sql.BatchUpdateException[\"sf\"]", stringBuilder0.toString());
      assertEquals("Cannot refine serialization type %s into %s; types not relatedjava.lang.String[\"latb9I)Oa9^@h[%vO\"]->java.sql.BatchUpdateException[\"sf\"]", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-1), (byte) (-65), (byte)63, (byte) (-1), (byte)51, (byte)85, (byte) (-45), (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, "");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      String string0 = jsonMappingException0.toString();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize Map key of type `java.io.ByteArrayOutputStream` from String [N/A]: ", string0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(string0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      assertEquals(ResolverStyle.LENIENT, resolverStyle0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) resolverStyle0, "com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize Map key of type `java.io.ByteArrayOutputStream` from String [N/A]: ");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      String string1 = jsonMappingException1.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize Map key of type `java.io.ByteArrayOutputStream` from String [N/A]:  (through reference chain: java.time.format.ResolverStyle[\"com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize Map key of type `java.io.ByteArrayOutputStream` from String [N/A]: \"])", string1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(string1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      Throwable throwable0 = jsonMappingException1.initCause(jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals("Cannot deserialize Map key of type `java.io.ByteArrayOutputStream` from String [N/A]: ", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot deserialize Map key of type `java.io.ByteArrayOutputStream` from String [N/A]: ", throwable0.toString());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      String string2 = jsonMappingException1.toString();
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize Map key of type `java.io.ByteArrayOutputStream` from String [N/A]:  (through reference chain: java.time.format.ResolverStyle[\"com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize Map key of type `java.io.ByteArrayOutputStream` from String [N/A]: \"])", string2);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(string2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "N>a :OUzT|KF");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException2);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      Object object0 = jsonMappingException0.getProcessor();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(object0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("");
      mockIOException0.printStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException0.clearLocation();
      mockIOException0.getMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName("");
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): ", string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(object0, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference1, false);
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 8000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, bufferedReader0, objectMapper1, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, ".q^+B# QA?o}]$]Zv$T");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLException sQLException0 = new SQLException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0, sQLException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLException0);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) hashMap0, (-1448));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLException sQLException0 = new SQLException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0, sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) mockPrintStream0, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "3:Ha\\";
      int int0 = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("3:Ha", "e0@A3,kQvPO.", 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransactionRollbackException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "3:Ha", 269, mockThrowable0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, sQLTimeoutException0);
      jsonMappingException0.addSuppressed(sQLTransientException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "");
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(269);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Vn\"'DcB-");
      jsonMappingException0.getMessage();
      JsonMappingException jsonMappingException1 = new JsonMappingException("Vn\"'DcB-", jsonMappingException0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      int int0 = (-29);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-29));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("Cannot override _nullSerializer: had a %s, trying to set to %s");
      jsonMappingException_Reference0.setFieldName("cML/L4");
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "");
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("v05X", "Cannot override _nullSerializer: had a %s, trying to set to %s", intArray0);
      jsonMappingException0.prependPath((Object) batchUpdateException0, "sf");
      MockPrintStream mockPrintStream0 = new MockPrintStream("cML/L4");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Cannot override _nullSerializer: had a %s, trying to set to %s";
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      mockPrintStream0.format("cML/L4", objectArray0);
      batchUpdateException0.printStackTrace((PrintStream) mockPrintStream0);
      JsonMappingException.from((JsonParser) null, "Cannot refine serialization type %s into %s; types not related", (Throwable) batchUpdateException0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.prependPath((Object) "", "latb9I)Oa9^@h[%vO");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "CPR5GjPug9r;<w)#Oj";
      jsonMappingException_Reference0.toString();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "CPR5GjPug9r;<w)#Oj");
      StringBuilder stringBuilder0 = new StringBuilder("z1;(@");
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getIndex();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 35, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsDouble();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "N_aWe6Y12", "", (-3110));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", ") does not override copy(); it has to", "", 3);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "N_aWe6Y12", "N_aWe6Y12", 33);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("com.fasterxml.jackson.databind.JsonMappingException$Reference", "[]", "RGFT|Uo/CInW(", 35);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "", " should not get visited", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("array", "", " has no property name annotation; must have name when multiple-parameter constructor annotated as Creator", 2017);
      stackTraceElementArray0[5] = stackTraceElement5;
      jsonMappingException1.setStackTrace(stackTraceElementArray0);
      jsonMappingException0.getLocalizedMessage();
      String string0 = jsonMappingException1.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: \n at [Source: UNKNOWN; line: 1, column: 0] (through reference chain: UNKNOWN[?])", string0);
      
      jsonMappingException0.getMessage();
      jsonMappingException0.getPath();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 14);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: java.lang.String[14])", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-18);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0._buildMessage();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException1, "");
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) dataOutputStream0);
      JsonMappingException.from(jsonGenerator0, "", (Throwable) jsonMappingException1);
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory2.disable(jsonFactory_Feature0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader0);
      File file0 = MockFile.createTempFile("JSON", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", ",<");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "0X+qMH$ps$~=aM";
      objectArray0[1] = (Object) ",<";
      objectArray0[2] = (Object) inputDecorator0;
      objectArray0[3] = (Object) jsonFactory2;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) objectMapper0;
      objectArray0[6] = (Object) "0X+qMH$ps$~=aM";
      objectArray0[7] = (Object) ",<";
      mockPrintStream0.printf(locale0, "JSON", objectArray0);
      sQLTimeoutException0.printStackTrace((PrintStream) mockPrintStream0);
      JsonMappingException.from(jsonGenerator0, "0X+qMH$ps$~=aM", (Throwable) sQLTimeoutException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(locale0, 0);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = MockFile.createTempFile("L,f", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      jsonMappingException_Reference0._from = (Object) dataInputStream1;
      JsonMappingException jsonMappingException0 = new JsonMappingException(dataInputStream0, (String) null);
      IOContext iOContext0 = null;
      int int0 = 0;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Throwable throwable0 = null;
      int int0 = (-74);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("c}fE.M,p&ZCynd8J~", "!jJo $JY*|esB?Uu", 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("c}fE.M,p&ZCynd8J~", "IDQecR7", (-1), sQLFeatureNotSupportedException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectReader0, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "IDQecR7", (Throwable) jsonMappingException0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("v#gTzxgyl)z+IW", "v#gTzxgyl)z+IW", "v#gTzxgyl)z+IW", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("v#gTzxgyl)z+IW", "^v", "^v", 1939);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement(" (no error message provided)", " (no error message provided)", "com.fasterxml.jackson.databind.JsonMappingException", 201);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement(" (no error message provided)", "com.fasterxml.jackson.databind.JsonMappingException", "com.fasterxml.jackson.databind.JsonMappingException", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, (-691));
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        placeholderForType0.getErasedSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      mockIOException0.getStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      jsonMappingException0._buildMessage();
      String string0 = "NUMBER";
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) mockIOException0, "NUMBER");
      jsonMappingException_Reference0.getFrom();
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) jsonMappingException0, "Iw7");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "`fAH8U!d";
      jsonMappingException_Reference0.getIndex();
      String string0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      String string1 = "ai)tduC8";
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "ai)tduC8");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      JsonFactory jsonFactory0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, (String) null, (String) null, 1648);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UNKNOWN", "UNKNOWN", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "UNKNOWN", "q[hs5N=I9d>YVs", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("]ZgR#iB.", "", "(was ", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("zGj_,eo:$", "cI_V8w:D'/", "zGj_,eo:$", (-3980));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("_7.", "zGj_,eo:$", "(was ", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("y9zSc$8._//H", "_7.", "]ZgR#iB.", (-3980));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "", "y9zSc$8._//H", (-3980));
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, 0);
      StringReader stringReader0 = new StringReader("");
      jsonMappingException0.prependPath((Object) stringReader0, 0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getPath();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 14);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: java.lang.String[14])", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)20, (byte)0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pushbackInputStream0, (byte)36);
      jsonMappingException_Reference0.writeReplace();
      assertEquals(36, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, (String) null, (Throwable) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class0 = Object.class;
      deserializerFactoryConfig0.keyDeserializers();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types", (-485));
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.String[?]", string1);
      assertNotNull(string1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      MockFile mockFile0 = new MockFile("Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException.from(jsonGenerator0, "Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.lang.String[?]", "java.lang.String[?]", 0);
      JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (JsonMappingException.Reference) null);
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.writeReplace();
      assertEquals((-485), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "->:}SN+NgM4c&", (Throwable) sQLTransientException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "IuOYF[9],*6ZZ";
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("IuOYF[9],*6ZZ");
      int int0 = 448;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 448;
      longArray0[1] = (long) 448;
      longArray0[2] = (long) 448;
      longArray0[3] = (long) 448;
      longArray0[4] = (long) 448;
      longArray0[5] = (long) 448;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("IuOYF[9],*6ZZ", "Pb\"OH@H=~L.1MPq", 448, longArray0, sQLDataException0);
      batchUpdateException0.getSuppressed();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "zmd_b;X?";
      JsonMappingException jsonMappingException0 = new JsonMappingException("zmd_b;X?");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(39);
      Class<Object> class0 = Object.class;
      Class<MockFileWriter> class1 = MockFileWriter.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class org.evosuite.runtime.mock.java.io.MockFileWriter with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "DOUBLE");
      assertNotNull(jsonMappingException0);
  }
}
