/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 00:44:55 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      sQLDataException0.spliterator();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) sQLDataException0, "");
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) dataInputStream0, (int) (byte)0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException1, (int) (byte)0);
      jsonMappingException2.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      jsonMappingException3.prependPath((Object) " (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[0]->java.io.DataInputStream[0])", 3);
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, (int) (byte)0);
      jsonMappingException3.prependPath(jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) " (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[0]->java.io.DataInputStream[0])", " (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[0]->java.io.DataInputStream[0])");
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException4._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockFileReader> class0 = MockFileReader.class;
      Class<JsonProcessingException> class1 = JsonProcessingException.class;
      Class<JsonParserSequence> class2 = JsonParserSequence.class;
      typeFactory0.constructArrayType(class2);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      Class<String> class3 = String.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      Class<ReaderBasedJsonParser> class4 = ReaderBasedJsonParser.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class4, "Unsuitable method (");
      jsonMappingException_Reference0.getDescription();
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, javaTypeArray0);
      Object object0 = new Object();
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0, object0, (Object) defaultDeserializationContext0);
      // Undeclared exception!
      try { 
        arrayType0.getGenericSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = null;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "ga;e;=qynyM2.K$?", (-1210));
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "5{^{<&=FYq!*c", (Throwable) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "UNKNOWN");
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1330), (Reader) null, objectReader0, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      readerBasedJsonParser0.nextIntValue((-1330));
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "[field ");
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      SimpleBeanPropertyFilter simpleBeanPropertyFilter0 = SimpleBeanPropertyFilter.serializeAll();
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.setDefaultFilter(simpleBeanPropertyFilter0);
      SimpleFilterProvider simpleFilterProvider2 = simpleFilterProvider1.setDefaultFilter((PropertyFilter) simpleBeanPropertyFilter0);
      String string0 = "com.fasterxml.jackson.core.JsonParser$Feature";
      SimpleBeanPropertyFilter simpleBeanPropertyFilter1 = SimpleBeanPropertyFilter.filterOutAllExcept((Set<String>) null);
      SimpleFilterProvider simpleFilterProvider3 = simpleFilterProvider2.addFilter("com.fasterxml.jackson.core.JsonParser$Feature", (PropertyFilter) simpleBeanPropertyFilter1);
      boolean boolean1 = false;
      SimpleFilterProvider simpleFilterProvider4 = simpleFilterProvider3.setFailOnUnknownId(false);
      objectMapper0.writer((FilterProvider) simpleFilterProvider4);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (JsonMappingException.Reference) null);
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "Unexpected IOException (of type %s): %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "9,J3$;Ph5]SR=0:");
      SQLDataException sQLDataException0 = new SQLDataException("9,J3$;Ph5]SR=0:");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = "|DuX8;2`qwwCVl38";
      MockPrintStream mockPrintStream0 = new MockPrintStream("|DuX8;2`qwwCVl38");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper0, mockPrintStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      DataTruncation dataTruncation0 = new DataTruncation(3083, false, true, 57343, 1997);
      dataTruncation0.getNextWarning();
      JsonMappingException.from(jsonGenerator0, "|DuX8;2`qwwCVl38", (Throwable) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) integer0, "|DuX8;2`qwwCVl38");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DataTruncation dataTruncation0 = new DataTruncation(95, false, false, (-264), 20);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) dataTruncation0, (JsonMappingException.Reference) null);
      jsonMappingException0.getCause();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(959);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      PrintStream printStream0 = mockPrintStream0.append('.');
      JsonMappingException jsonMappingException1 = new JsonMappingException(printStream0, "");
      jsonMappingException1.getPathReference((StringBuilder) null);
      jsonMappingException1.getMessage();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      List<JsonNode> list0 = objectNode0.findValues("com.fasterxml.jackson.databind.JsonMappingException$Reference", (List<JsonNode>) stack0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, list0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(object0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-195), false, false, 1634, (-195));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1634);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonNodeFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      filteringParserDelegate0.releaseBuffered((OutputStream) pipedOutputStream0);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Unexpected IOException (of type %s): %s", jsonLocation0, dataTruncation0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataTruncation dataTruncation0 = new DataTruncation(95, false, true, 91, 96);
      JsonMappingException.wrapWithPath((Throwable) dataTruncation0, (JsonMappingException.Reference) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature1);
      StringWriter stringWriter0 = new StringWriter(1171);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) stringWriter0);
      JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) dataTruncation0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON", (Throwable) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("->");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "->", "Trying to re-set self reference; old value = ");
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$7");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "Trying to re-set self reference; old value = ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("fka oUE9S2m,B:");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fka oUE9S2m,B:", "", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) "Trying to re-set self reference; old value = ", "Trying to re-set self reference; old value = ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) "Trying to re-set self reference; old value = ", 1001);
      jsonMappingException2.getLocalizedMessage();
      // Undeclared exception!
      try { 
        jsonMappingException1.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer", "");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 0, (int) (byte) (-14));
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      jsonParserSequence0.getValueAsBoolean(false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "(was ", sQLTransientException0);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DataTruncation dataTruncation0 = new DataTruncation(1000, true, false, 60000, (-2194));
      JsonMappingException jsonMappingException0 = new JsonMappingException("Failed to find default constructor of class ");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException.from(jsonParser0, "X~", (Throwable) jsonMappingException0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, ": ");
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer", (Throwable) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)23;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SQLWarning sQLWarning0 = new SQLWarning(")T90=]nr)yfA9`.", ")T90=]nr)yfA9`.");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")T90=]nr)yfA9`.", "ALLOW_TRAILING_COMMA", (byte) (-7), sQLWarning0);
      dataInputStream0.available();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(dataInputStream0, "ALLOW_TRAILING_COMMA", sQLTransientException0);
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, (byte)78);
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "JSON");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "");
      jsonMappingException0.printStackTrace();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(87);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = placeholderForType0.getErasedSignature(stringBuilder0);
      jsonMappingException0.getPathReference(stringBuilder1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty");
      jsonMappingException1.getPathReference(stringBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) bigInteger0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 0, (int) (byte) (-14));
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      String string0 = "ZJi";
      jsonParserSequence0.getValueAsBoolean(false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0, "ZJi");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Nulls nulls0 = Nulls.SET;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      int int0 = 3665;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) jsonMappingException_Reference0, 3665);
      jsonMappingException0.getLocalizedMessage();
      Class<DataOutputStream> class0 = DataOutputStream.class;
      InvalidFormatException.from((JsonParser) jsonParserSequence0, "JSON", (Object) beanDeserializerFactory1, (Class<?>) class0);
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(charArrayReader0, (byte) (-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Failed to construct BeanSerializer for %s: (%s) %s");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      jsonFactory2.configure(jsonParser_Feature0, false);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      jsonMappingException0._buildMessage();
      Integer integer0 = new Integer((-1721));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, 517);
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, ")2#");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 0, (int) (byte) (-14));
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0, "JSON");
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.writeReplace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON", "_d`a#Enootl");
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) dataInputStream0, 3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("`yW5)Y;8", "Unexpected IOException (of type %s): %s", jsonMappingException0);
      SQLDataException sQLDataException0 = new SQLDataException("_d`a#Enootl", "", sQLTransientException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException1.getMessage();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis((-359L));
      DataTruncation dataTruncation0 = new DataTruncation(95, false, false, (-264), (-195));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) dataTruncation0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Unexpected IOException (of type %s): %s");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, false);
      JsonParser jsonParser0 = jsonFactory3.createParser((InputStream) null);
      JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      jsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "Unexpected IOException (of type %s): %s", 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(4074);
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("AoT5eQ?5=", "9+j3MS", "9+j3MS", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("9+j3MS", "9+j3MS", "AoT5eQ?5=", 4074);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("AoT5eQ?5=", "AoT5eQ?5=", "Y&R'jTN0ot/SCwI-M ", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("AoT5eQ?5=", "N_{", "", 2497);
      stackTraceElementArray0[3] = stackTraceElement3;
      jsonMappingException_Reference0.writeReplace();
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "Cannot refine serialization type %s into %s; types not related", "", 2497);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("java.lang", "com.fasterxml.jackson.databind.node.MissingNode", "DaCH[@eR_Yn", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "X\"-Rc| H35A%");
      jsonMappingException0.getPath();
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("->");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "->", "Trying to re-set self reference; old value = ");
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) dataInputStream0, 2223);
      jsonMappingException0.getLocalizedMessage();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jsonMappingException0.prependPath((Object) sequenceInputStream0, "->");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(byteArrayInputStream0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "->");
      StringBuilder stringBuilder1 = referenceType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = referenceType1.getGenericSignature(stringBuilder1);
      jsonMappingException1._appendPathDesc(stringBuilder2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "Trying to re-set self reference; old value = ", (Throwable) jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "\"G");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "\"G", "\"G");
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'R';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = 'V';
      charArray0[5] = '3';
      charArray0[6] = 'R';
      charArray0[7] = '3';
      charArray0[8] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 1);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = new JsonMappingException(byteArrayBuilder0, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, "");
      jsonMappingException0.prependPath((Object) "", "Not enough content available for `skipChildren()`: non-blocking parser? (%s)");
      jsonMappingException0.toString();
      List<JsonMappingException.Reference> list0 = new ArrayList<JsonMappingException.Reference>();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getDescription();
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      // Undeclared exception!
      try { 
        bigIntegerNode0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "\"G");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "\"G", "\"G");
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'R';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = 'V';
      charArray0[5] = '3';
      charArray0[6] = 'R';
      charArray0[7] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) bufferedOutputStream0, 1);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = new JsonMappingException(byteArrayBuilder0, "(was java.sql.SQLSyntaxErrorException) (through reference chain: java.io.BufferedOutputStream[1]->java.lang.String[\"\"G\"])");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "\"G");
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException1.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "\"G");
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'R';
      charArray0[2] = '3';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      sQLSyntaxErrorException0.fillInStackTrace();
      charArrayReader0.markSupported();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) jsonMappingException0, 1);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException1.prependPath((Object) charArrayReader0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "\"G");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "\"G", "\"G");
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'R';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = 'V';
      charArray0[5] = '3';
      charArray0[6] = 'R';
      charArray0[7] = '3';
      charArray0[8] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 1);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException2 = new JsonMappingException(byteArrayBuilder0, (String) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(4074);
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("AoT5eQ?5=", "9+j3MS", "9+j3MS", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("9+j3MS", "9+j3MS", "AoT5eQ?5=", 4074);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("AoT5eQ?5=", "AoT5eQ?5=", "Y&R'jTN0ot/SCwI-M ", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("AoT5eQ?5=", "N_{", "", 2497);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "Cannot refine serialization type %s into %s; types not related", "", 2497);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("java.lang", "com.fasterxml.jackson.databind.node.MissingNode", "DaCH[@eR_Yn", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("com.fasterxml.jackson.databind.node.MissingNode", "Y&R'jTN0ot/SCwI-M ", "9+j3MS", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("9+j3MS", mockThrowable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(4074);
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("AoT5eQ?5=", "9+j3MS", "9+j3MS", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("9+j3MS", "9+j3MS", "AoT5eQ?5=", 4074);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("AoT5eQ?5=", "AoT5eQ?5=", "Y&R'jTN0ot/SCwI-M ", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("AoT5eQ?5=", "N_{", "", 2497);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "Cannot refine serialization type %s into %s; types not related", "", 2497);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("java.lang", "com.fasterxml.jackson.databind.node.MissingNode", "DaCH[@eR_Yn", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("com.fasterxml.jackson.databind.node.MissingNode", "Y&R'jTN0ot/SCwI-M ", "9+j3MS", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("9+j3MS", mockThrowable0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("java.lang");
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(4074);
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("AoT5eQ?5=", "9+j3MS", "9+j3MS", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("9+j3MS", "9+j3MS", "AoT5eQ?5=", 4074);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("AoT5eQ?5=", "AoT5eQ?5=", "Y&R'jTN0ot/SCwI-M ", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("AoT5eQ?5=", "N_{", "", 2497);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "Cannot refine serialization type %s into %s; types not related", "", 2497);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("java.lang", "com.fasterxml.jackson.databind.node.MissingNode", "DaCH[@eR_Yn", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("com.fasterxml.jackson.databind.node.MissingNode", "Y&R'jTN0ot/SCwI-M ", "9+j3MS", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("9+j3MS", mockThrowable0);
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "\"G");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "\"G", "\"G");
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'R';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = 'V';
      charArray0[5] = '3';
      charArray0[6] = 'R';
      charArray0[7] = '3';
      charArray0[8] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 1);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = new JsonMappingException(byteArrayBuilder0, (String) null);
      jsonMappingException1.prependPath((Object) charArrayReader0, "");
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      jsonMappingException0._processor = (Closeable) null;
      jsonMappingException0.toString();
      jsonMappingException0.toString();
      jsonMappingException0.toString();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 1906);
      bufferedOutputStream0.close();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0, 108);
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      jsonMappingException0.getPathReference();
      jsonMappingException0.getPath();
      SQLDataException sQLDataException0 = new SQLDataException("tr2'k5R", "tr2'k5R", 1906, jsonMappingException0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 26);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) pushbackInputStream0, 1187);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(4092);
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("AoT5eQ?5=", "9+j3MS", "9+j3MS", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("9+j3MS", "9+j3MS", "AoT5eQ?5=", 4092);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("AoT5eQ?5=", "AoT5eQ?5=", "Y&R'jTN0ot/SCwI-M ", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      MockPrintStream mockPrintStream0 = new MockPrintStream("w8*$sP}<!Vp7C");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeLong((-2147483603L));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Y&R'jTN0ot/SCwI-M ", "N_{", (Map<String, ClientInfoStatus>) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) sQLClientInfoException0, "SORT_PROPERTIES_ALPHABETICALLY");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException_Reference0.setIndex(0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "SORT_PROPERTIES_ALPHABETICALLY", (Throwable) mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileReader0, (-1619));
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getFieldName();
      DataTruncation dataTruncation0 = new DataTruncation(3597, false, true, 1, (-1619));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3597);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      dataOutputStream0.writeLong((-208L));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jsonMappingException_Reference0.setIndex((-128));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) dataTruncation0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("->");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "->", "->");
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'R';
      charArray0[2] = 'Q';
      charArray0[4] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) charArrayReader0, (-2526));
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.prependPath((Object) "->", ": ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(": ", (-2526));
      jsonMappingException_Reference0.getFrom();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null, (Throwable) jsonMappingException0);
      String string0 = "|jb=8F#VRk`{";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1, "|jb=8F#VRk`{");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.getProcessor();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null, (Throwable) jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      DeserializationConfig deserializationConfig0 = null;
      try {
        deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, simpleMixInResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Unexpected IOException (of type %s): %s");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, true);
      JsonParser jsonParser0 = jsonFactory3.createParser((InputStream) null);
      JsonMappingException.from(jsonParser0, "JSON");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 339;
      intArray0[1] = 981;
      intArray0[2] = (-3481);
      intArray0[3] = (-186);
      intArray0[4] = 0;
      intArray0[5] = 1051;
      intArray0[6] = 0;
      intArray0[7] = 1041;
      intArray0[8] = (-871);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", ">]u491o!K~`yrg", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLTimeoutException0);
      batchUpdateException0.getNextException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "|0zxfpiYpM>)xdh/");
      jsonMappingException0.getProcessor();
      jsonMappingException0.toString();
      jsonMappingException0.toString();
      jsonMappingException0.toString();
      StringReader stringReader0 = new StringReader("dcNW5JMuGMhTd+\"j");
      CharBuffer charBuffer0 = null;
      // Undeclared exception!
      try { 
        stringReader0.read((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "Amq!fX{/4g}G{{");
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.setIndex(1);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, "Amq!fX{/4g}G{{");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      // Undeclared exception!
      try { 
        jsonFactory3.createParser((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Closeable closeable0 = null;
      String string0 = "igD:j>Ii";
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.nextLongValue(0L);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "igD:j>Ii", jsonLocation0);
      String string1 = "Oru";
      JsonMappingException.from((JsonGenerator) null, "Oru", (Throwable) jsonMappingException0);
      MockFile mockFile0 = new MockFile("pKF /Dgfnx", "JSON");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "33N$[$~O0$@");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 33N$[$~O0$@
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      jsonFactory3.copy();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) pipedOutputStream0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", "JSON");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLRecoverableException0);
      JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(2000);
      jsonMappingException_Reference0._fieldName = "V";
      jsonMappingException_Reference0.getFieldName();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("V", (Map<String, ClientInfoStatus>) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser1, "V", (Throwable) sQLClientInfoException0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription("V");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, " (through reference chain: ", (Throwable) sQLClientInfoException0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '+';
      charArray0[2] = 's';
      charArray0[3] = 'U';
      charArray0[4] = 'J';
      charArray0[5] = '\\';
      charArray0[6] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 138);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) charArrayReader0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("JsonSerializer of type ", (String) null, (int[]) null, sQLRecoverableException0);
      JsonMappingException.from(jsonParser0, "Kx9a", (Throwable) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "ml$pO!jMg+!f|$s`k2";
      JsonMappingException jsonMappingException0 = new JsonMappingException("ml$pO!jMg+!f|$s`k2");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      boolean boolean0 = false;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      jsonMappingException0._path = null;
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "JSON", (Throwable) jsonMappingException0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException1.getPath();
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext1, "");
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      defaultDeserializationContext_Impl0.getConfig();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.createInstance((DeserializationConfig) null, jsonParser0, (InjectableValues) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 0);
      String string0 = ";&gFN,1";
      jsonMappingException_Reference0.setFieldName(";&gFN,1");
      Object object1 = jsonMappingException_Reference0.writeReplace();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(object1);
      JsonMappingException jsonMappingException0 = new JsonMappingException(";&gFN,1", jsonLocation0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, (-1873));
      jsonMappingException1.getPath();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.readValues((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._desc = "Null passed for `valueType` of `findValueSerializer()`";
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getFieldName();
      DataTruncation dataTruncation0 = new DataTruncation(2583, false, false, 2583, 3597);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(41);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      dataOutputStream0.writeLong((-2147483648L));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) dataTruncation0, (Object) dataOutputStream0, "(S8pA%U[%eaFl==D");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException_Reference0.setIndex((-128));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFile mockFile0 = new MockFile("->");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext((TokenFilter) null);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(mockFile0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(printWriter0, "->", jsonLocation0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      String string0 = "";
      StackTraceElement stackTraceElement0 = new StackTraceElement("tweXRGWmvsdxHkS~O%", "", "->", 500);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string1 = "Cannot handle managed/back reference '";
      String string2 = null;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "Cannot handle managed/back reference '", (String) null, 33);
      stackTraceElementArray0[1] = stackTraceElement1;
      String string3 = "i_OI\\";
      StackTraceElement stackTraceElement2 = new StackTraceElement("Cannot handle managed/back reference '", "i_OI", "no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = null;
      try {
        stackTraceElement3 = new StackTraceElement((String) null, "", "", 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(91);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, 60000);
      jsonMappingException_Reference0.setFieldName(": was expecting closing quote for a string value");
      jsonMappingException_Reference0.setFieldName((String) null);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getIndex();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockFileReader> class0 = MockFileReader.class;
      Class<JsonProcessingException> class1 = JsonProcessingException.class;
      Class<JsonParserSequence> class2 = JsonParserSequence.class;
      typeFactory0.constructArrayType(class2);
      typeFactory0.constructCollectionLikeType(class0, class1);
      Class<String> class3 = String.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      Class<ReaderBasedJsonParser> class4 = ReaderBasedJsonParser.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PipedReader> class0 = PipedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, " =K&!0Vr[:~P57s1", " =K&!0Vr[:~P57s1");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.prependPath((Object) " =K&!0Vr[:~P57s1", 2238);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "H=Ys/pqRA]", (Throwable) jsonMappingException0);
      jsonMappingException1.getMessage();
      jsonMappingException0.prependPath((Object) class0, "");
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException3 = JsonMappingException.from(serializerProvider0, "(E+]4,A>z", (Throwable) jsonMappingException0);
      jsonMappingException2.prependPath((Object) jsonMappingException3, 0);
      jsonMappingException2.getCause();
      defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, (String) null);
      JsonMappingException.from((JsonParser) null, "p7~9m", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.setDescription("Os\"=HV];EzOr]sS'\"9<");
      jsonMappingException0.getLocalizedMessage();
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("->");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "->", "Trying to re-set self reference; old value = ");
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'R';
      charArray0[2] = 'Q';
      charArray0[3] = '3';
      charArray0[4] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) charArrayReader0, (-2526));
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("-> (through reference chain: java.io.CharArrayReader[?]->java.lang.String[\"Trying to re-set self reference; old value = \"])", string0);
      
      jsonMappingException0.prependPath((Object) "->", ": ");
      assertSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0, 0);
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper1._mixIns;
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();
      DeserializationConfig deserializationConfig0 = null;
      try {
        deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, simpleMixInResolver1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }
}
