/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 05:13:39 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.HashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0._index = 0;
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[0]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, "Y");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      PipedReader pipedReader0 = new PipedReader(3);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-160), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-3761), (-160), true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) jsonParserSequence0, "");
      jsonMappingException0.prependPath((Object) jsonMappingException0, "com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonMappingException0.getProcessor();
      assertFalse(readerBasedJsonParser0.canParseAsync());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.core.util.TextBuffer");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("W? Tzq4w5p6", sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind.JsonMappingException", "com.fasterxml.jackson.databind.deser.SettableAnyProperty");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "j\"=");
      StringBuilder stringBuilder0 = new StringBuilder(507);
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLIntegrityConstraintViolationException) (through reference chain: UNKNOWN[?])", (Throwable) jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "UNKNOWN[?]", "~azr\"6&)-&ymc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "N~pB");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "(was ");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("m(*chL5,[.].");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, 258);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "(was ");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "E)pHvSUk:e", (Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, (String) null, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("i");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "i");
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0, (-24));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-24), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 3, (-1));
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "JSON", jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2467);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedReader0, "");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[?]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "N~pB");
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayReader0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "N~pB");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.CharArrayReader[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "(was ");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, 258);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("(was java.sql.SQLIntegrityConstraintViolationException) (through reference chain: java.sql.SQLIntegrityConstraintViolationException[258])", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "(was ");
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "JSON");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) pipedInputStream0, (-1623));
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("JSON (through reference chain: java.io.PipedInputStream[?])", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) "", 1000);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) jsonParserDelegate0, (JsonParser) jsonParserDelegate0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0, (-1677));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder("o'");
      jsonMappingException0.getPathReference(stringBuilder0);
      assertEquals("o'com.fasterxml.jackson.core.util.JsonParserSequence[?]->java.lang.String[1000]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "", sQLIntegrityConstraintViolationException0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<HashSet> class0 = HashSet.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, 128);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.util.HashSet[128]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "", sQLIntegrityConstraintViolationException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) jsonParserDelegate0, (JsonParser) jsonParserDelegate0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "i/uQ]1t%C5VU<$hrc{\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileInputStream0, "", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("DEFAULT_TYPING", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "(was ");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was ", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "^FeY@S-NN_Q?b", (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "SY[*HaB/9<dxu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("SJuu#]JXcASN'W&", "SJuu#]JXcASN'W&", 73, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      jsonMappingException0.getProcessor();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, ": ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "(was ");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "(was ", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 1L, 63, 63);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("FV ~`^DP<UzZ*C7u)", "com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations", 51);
      MockThrowable mockThrowable0 = new MockThrowable("=t_6=~", sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations", jsonLocation0, mockThrowable0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations\n at [Source: UNKNOWN; line: 63, column: 63]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1460);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      jsonMappingException0.prependPath((Object) dataOutputStream0, 1460);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("W? Tzq4w5p6");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[\"W? Tzq4w5p6\"]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, ")");
      jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2467);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0, 63);
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals(63, jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0);
      jsonMappingException_Reference0.setIndex((-1279));
      assertEquals((-1279), jsonMappingException_Reference0.getIndex());
  }
}
