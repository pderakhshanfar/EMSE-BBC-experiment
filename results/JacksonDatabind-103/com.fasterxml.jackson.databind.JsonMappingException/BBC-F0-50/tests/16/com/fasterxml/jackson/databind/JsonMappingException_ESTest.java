/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 05:17:23 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      InvalidFormatException invalidFormatException0 = InvalidFormatException.from(jsonParser0, "", (Object) objectMapper0, (Class<?>) class0);
      JsonMappingException.fromUnexpectedIOE(invalidFormatException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("CiUPhUy", "CiUPhUy");
      SQLTransientException sQLTransientException0 = new SQLTransientException("CiUPhUy", "CiUPhUy", 1000, sQLDataException0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1000);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0);
      sQLTransientException0.getStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-24);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)32, (int) (byte) (-24));
      dataFormatReaders_Match0.createParserWithMatch();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "", (Throwable) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<DataOutputStream> class0 = DataOutputStream.class;
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: java.io.DataOutputStream[\"\"])");
      jsonMappingException1.toString();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      MockThrowable mockThrowable0 = new MockThrowable("", jsonMappingException0);
      Stack<ObjectInputStream> stack0 = new Stack<ObjectInputStream>();
      Enumeration<ObjectInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) sequenceInputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      jsonMappingException0.toString();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(6000);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null, sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLException sQLException0 = new SQLException("", "JSON", 23);
      sQLException0.printStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLException sQLException0 = new SQLException("", "JSON", 23);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      sQLException0.initCause(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLException sQLException0 = new SQLException("", "JSON", 23);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (JsonMappingException.Reference) null);
      jsonMappingException0.getPath();
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory0);
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.writeReplace();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      int int0 = 1981;
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, 1981);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      jsonMappingException_Reference0.getDescription();
      bufferedOutputStream0.close();
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(2147483647L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(34);
      SQLDataException sQLDataException0 = new SQLDataException("G2", "");
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "G2", sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayBuilder0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      sQLDataException0.addSuppressed(jsonMappingException0);
      sQLDataException0.getStackTrace();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, 0);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      sQLDataException0.fillInStackTrace();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("G2");
      JsonMappingException jsonMappingException3 = JsonMappingException.from(jsonParser0, "|6%y~s[Md3");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(sQLDataException0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory4 = jsonFactory3.setCharacterEscapes(jsonpCharacterEscapes0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(byte[].class) , anyInt() , anyInt());
      JsonFactory jsonFactory5 = jsonFactory4.setInputDecorator(inputDecorator0);
      JsonFactory jsonFactory6 = jsonFactory5.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-53);
      JsonParser jsonParser0 = jsonFactory6.createParser(byteArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      SQLException sQLException0 = new SQLException("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) jsonParserSequence0, "JSON", (Throwable) sQLException0);
      jsonMappingException0.getPathReference();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.JsonMappingException");
      jsonMappingException1.getPath();
      jsonMappingException1.getPathReference();
      jsonMappingException1.getProcessor();
      JsonMappingException.from(jsonParser0, "`)IBZvLIcpxZ-zG", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0);
      SQLException sQLException0 = new SQLException("", "", 93);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException_Reference1.getDescription();
      jsonMappingException0.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "\"zdMNo~Wc8JD)n", 2029);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLNonTransientException0);
      jsonMappingException0.getStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(172);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      jsonMappingException1.getPathReference();
      jsonMappingException1.toString();
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" to ", sQLRecoverableException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      sQLTransientConnectionException0.printStackTrace();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" to ");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator(" to ");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLException sQLException0 = new SQLException("", "", 2799);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException("V");
      JsonFactory jsonFactory0 = new JsonFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0, 526);
      MockFileReader mockFileReader1 = new MockFileReader(fileDescriptor0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) mockFileReader1);
      JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, (String) null);
      jsonMappingException1.printStackTrace();
      jsonMappingException1.getPathReference();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) mockFileReader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0);
      jsonMappingException_Reference0.writeReplace();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      jsonMappingException_Reference0.setFieldName("<kxS,HRK~bS");
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = deserializationContext0.weirdStringException("<kxS,HRK~bS", class0, "/kIR\"9@(T");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(19);
      StringBuilder stringBuilder0 = new StringBuilder(93);
      StringBuilder stringBuilder1 = placeholderForType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = placeholderForType0.getErasedSignature(stringBuilder1);
      jsonMappingException0.getPathReference(stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 336;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 336);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`PX2O");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`PX2O", "`PX2O", (-1784));
      SQLException sQLException0 = new SQLException("`PX2O", "", (-771));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException((String) null, "", (-3166));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`PX2O");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLNonTransientConnectionException0);
      jsonMappingException0.getStackTrace();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pipedOutputStream0);
      jsonMappingException_Reference1.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException1, jsonMappingException_Reference0);
      jsonMappingException1.getOriginalMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      jsonMappingException2.getPathReference();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" to ", sQLRecoverableException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      sQLTransientConnectionException0.printStackTrace();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" to ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.writeReplace();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, " to ", (Throwable) sQLRecoverableException0);
      PipedWriter pipedWriter1 = new PipedWriter();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedWriter1, 34);
      StringBuilder stringBuilder0 = new StringBuilder(34);
      jsonMappingException1._appendPathDesc(stringBuilder0);
      JsonParser jsonParser0 = null;
      String string0 = "com.fasterxml.jackson.databind.JsonMappingException";
      Class<Object> class0 = Object.class;
      InvalidFormatException invalidFormatException0 = InvalidFormatException.from((JsonParser) null, "com.fasterxml.jackson.databind.JsonMappingException", (Object) " to ", (Class<?>) class0);
      invalidFormatException0.toString();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<HashMap> class1 = HashMap.class;
      Class<StringReader> class2 = StringReader.class;
      Class<Throwable> class3 = Throwable.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructMapType(class1, class2, class3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 780733255 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1212779860) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonMappingException jsonMappingException0 = new JsonMappingException("ryCZ$/.JM@");
      jsonMappingException0.getLocalizedMessage();
      MockFile mockFile0 = new MockFile("->", "com.fasterxml.jackson.databind.node.BooleanNode");
      MockFile mockFile1 = new MockFile(mockFile0, "com.fasterxml.jackson.databind.node.BooleanNode");
      File file0 = MockFile.createTempFile("ryCZ$/.JM@", "ryCZ$/.JM@", (File) mockFile1);
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      jsonMappingException0.prependPath((Object) mockFileReader0, " (through reference chain: ");
      jsonMappingException0.getLocalizedMessage();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`PX2O", "`PX2O", (-1784));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "`PX2O", (Throwable) sQLNonTransientException0);
      jsonMappingException0.getStackTrace();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl1, "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[?]");
      jsonMappingException1.getMessage();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = "Unexpected IOException (of type %s): %s";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.io.SequenceInputStream[?]", "->", 396);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "java.io.SequenceInputStream[?]", (Throwable) sQLNonTransientException0);
      jsonMappingException0.getStackTrace();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pipedWriter0);
      jsonMappingException_Reference1.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1000);
      arrayNode0.traverse((ObjectCodec) objectMapper0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
      jsonMappingException1.getPathReference();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`PX2O", "`PX2O", (-1784));
      SQLException sQLException0 = new SQLException("`PX2O", "", (-771));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLException0);
      jsonMappingException_Reference1.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.getPathReference();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Unexpected IOException (of type %s): %s");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonInclude_Include0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("key serializer");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("FZ9EXuZ.", "key serializer", 1, sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("FZ9EXuZ.");
      JsonMappingException jsonMappingException1 = new JsonMappingException(mockFileOutputStream0, "Unexpected IOException (of type %s): %s");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.writeReplace();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "/`{b4YBa7;K8]~wK5`L", (Throwable) sQLTransactionRollbackException0);
      jsonMappingException_Reference0.setFieldName("Unexpected IOException (of type %s): %s");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = "Unexpected IOException (of type %s): %s";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.io.SequenceInputStream[?]", "->", 396);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "java.io.SequenceInputStream[?]", (Throwable) sQLNonTransientException0);
      jsonMappingException0.getStackTrace();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pipedWriter0);
      jsonMappingException_Reference1.getDescription();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1000);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<BufferedWriter> class0 = BufferedWriter.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) arrayType0, jsonToken0, "JSON");
      jsonMappingException1.getPathReference();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" to ", sQLRecoverableException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      sQLTransientConnectionException0.printStackTrace();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" to ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0, 3851);
      jsonMappingException_Reference0.toString();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", (String) null);
      jsonMappingException0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)82;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      JsonMappingException.from(jsonParser0, "", (Throwable) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(beanDeserializerFactory0);
      SQLException sQLException0 = new SQLException("", "GN/`}.9rEL _", (-771));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "\"zdMNo~Wc8JD)n", 2029);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLNonTransientException0);
      jsonMappingException0.getStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      jsonMappingException1.getPathReference();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`PX2O", "`PX2O", (-1784));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "`PX2O", (Throwable) sQLNonTransientException0);
      jsonMappingException0.getStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLNonTransientException0, 2799);
      jsonMappingException_Reference1.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 38;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataTruncation dataTruncation0 = new DataTruncation(38, true, true, 38, 3374);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("a!%vx|S81j-Ax 2k", "a!%vx|S81j-Ax 2k", dataTruncation0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0, "a!%vx|S81j-Ax 2k");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException0.toString();
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) fileSystemHandling0, 3374);
      jsonMappingException0.getPath();
      dataTruncation0.getParameter();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "a!%vx|S81j-Ax 2k", (Throwable) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" to ", sQLRecoverableException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      sQLTransientConnectionException0.printStackTrace();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0);
      Class<MockPrintWriter> class0 = MockPrintWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(jsonMappingException_Reference0, class0);
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = null;
      Object object0 = new Object();
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(object0, class0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector", (Throwable) jsonMappingException0);
      jsonMappingException0.getPath();
      jsonMappingException1.getMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot find a deserializer for type ", (String) null, jsonMappingException0);
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      JsonLocation jsonLocation0 = new JsonLocation("_JSwTJ(U2B}", 4195L, 5, 4815);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, "_JSwTJ(U2B}", jsonLocation0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0, 2924);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pushbackReader0, 2924);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializerFactoryConfig0, jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",S'8pZkn ]Ci", (Throwable) null);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put(",S'8pZkn ]Ci", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(",S'8pZkn ]Ci", ",S'8pZkn ]Ci", hashMap0, sQLSyntaxErrorException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("$|\"U_qo,-J4g", "$|\"U_qo,-J4g", 10, map0, sQLSyntaxErrorException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("$|\"U_qo,-J4g", "rp?Fy7$V");
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException1, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) jsonMappingException0);
      jsonMappingException1.toString();
      Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      dataFormatReaders_Match0.createParserWithMatch();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "Cannot pass null fieldName");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`PX2O", "`PX2O", (-1784));
      SQLException sQLException0 = new SQLException("`PX2O", "", (-771));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) mockFileReader0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "`PX2O");
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0);
      String string0 = "Unexpected IOException (of type %s): %s";
      String string1 = "";
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.getFrom();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "Unexpected IOException (of type %s): %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`PX2O", "`PX2O", (-1784));
      assertEquals("`PX2O", sQLNonTransientException0.getMessage());
      assertEquals((-1784), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: `PX2O", sQLNonTransientException0.toString());
      assertEquals("`PX2O", sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "`PX2O", (Throwable) sQLNonTransientException0);
      assertEquals("`PX2O", sQLNonTransientException0.getMessage());
      assertEquals((-1784), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: `PX2O", sQLNonTransientException0.toString());
      assertEquals("`PX2O", sQLNonTransientException0.getSQLState());
      assertNotNull(jsonMappingException0);
      
      StackTraceElement[] stackTraceElementArray0 = jsonMappingException0.getStackTrace();
      assertEquals("`PX2O", sQLNonTransientException0.getMessage());
      assertEquals((-1784), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: `PX2O", sQLNonTransientException0.toString());
      assertEquals("`PX2O", sQLNonTransientException0.getSQLState());
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("`PX2O", jsonMappingException0);
      assertEquals("`PX2O", sQLNonTransientException0.getMessage());
      assertEquals((-1784), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: `PX2O", sQLNonTransientException0.toString());
      assertEquals("`PX2O", sQLNonTransientException0.getSQLState());
      assertEquals("`PX2O", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: `PX2O", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("|");
      assertNotNull(mockFileWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory1.createGenerator((DataOutput) dataOutputStream0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertNotNull(uTF8JsonGenerator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "JSON");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertNotNull(jsonMappingException1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      assertEquals("java.io.SequenceInputStream[?]", string0);
      
      jsonMappingException_Reference0._fieldName = "Unexpected IOException (of type %s): %s";
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Unexpected IOException (of type %s): %s", jsonMappingException_Reference0.getFieldName());
      
      String string1 = "";
      jsonMappingException_Reference0.setDescription("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Unexpected IOException (of type %s): %s", jsonMappingException_Reference0.getFieldName());
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Unexpected IOException (of type %s): %s", jsonMappingException_Reference0.getFieldName());
      assertNotNull(object0);
      assertSame(sequenceInputStream0, object0);
      assertSame(object0, sequenceInputStream0);
      
      jsonMappingException_Reference0.setFieldName("Unexpected IOException (of type %s): %s");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Unexpected IOException (of type %s): %s", jsonMappingException_Reference0.getFieldName());
      assertSame(sequenceInputStream0, object0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-2172);
      intArray0[2] = 200;
      intArray0[3] = 25;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1, (-2172), 200, 25}, intArray0);
      assertEquals(4, intArray0.length);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) null, " W)e$2k^\"F3Xk");
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(jsonMappingException0);
      assertArrayEquals(new int[] {1, (-2172), 200, 25}, intArray0);
      assertEquals(4, intArray0.length);
      
      String string2 = jsonMappingException0._buildMessage();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(string2);
      assertEquals("(was java.sql.BatchUpdateException) (through reference chain: UNKNOWN[\" W)e$2k^\"F3Xk\"])", string2);
      assertArrayEquals(new int[] {1, (-2172), 200, 25}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      assertEquals("java.lang.Object[\"\"]", string0);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNotNull(string1);
      assertEquals("java.lang.Object[\"\"]", string1);
      
      JsonLocation jsonLocation0 = new JsonLocation("", 2072L, 0, 0);
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      String string2 = jsonLocation0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertNotNull(string2);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("[Source: (String)\"\"; line: 0, column: 0]", string2);
      
      String string3 = jsonLocation0.toString();
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertNotNull(string3);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("[Source: (String)\"\"; line: 0, column: 0]", string3);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      String string4 = jsonLocation0.toString();
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertNotNull(string4);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("[Source: (String)\"\"; line: 0, column: 0]", string4);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonLocation0, "[Source: (String)\"\"; line: 0, column: 0]");
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      Throwable throwable0 = jsonMappingException1.initCause(jsonMappingException0);
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", throwable0.toString());
      assertEquals("", throwable0.getMessage());
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      String string5 = jsonMappingException0.getPathReference();
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertNotNull(string5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("com.fasterxml.jackson.core.JsonLocation[\"[Source: (String)\"\"; line: 0, column: 0]\"]", string5);
      
      jsonMappingException_Reference0.setDescription("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setIndex((-1588));
      assertEquals((-1588), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      String string6 = jsonMappingException0.toString();
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertNotNull(string6);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: \n at [Source: (String)\"\"; line: 0, column: 0] (through reference chain: com.fasterxml.jackson.core.JsonLocation[\"[Source: (String)\"\"; line: 0, column: 0]\"])", string6);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JsonLocation jsonLocation0 = new JsonLocation("com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap", 0, 684, (-2493));
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals(684, jsonLocation0.getLineNr());
      assertEquals((-2493), jsonLocation0.getColumnNr());
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      String string0 = jsonLocation0.toString();
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals(684, jsonLocation0.getLineNr());
      assertEquals((-2493), jsonLocation0.getColumnNr());
      assertNotNull(string0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("[Source: (String)\"com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap\"; line: 684, column: -2493]", string0);
      
      String string1 = jsonLocation0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals(684, jsonLocation0.getLineNr());
      assertEquals((-2493), jsonLocation0.getColumnNr());
      assertNotNull(string1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("[Source: (String)\"com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap\"; line: 684, column: -2493]", string1);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("Failed to parse type '%s' (remaining: '%s'): %s", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "[Source: (String)\"com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap\"; line: 684, column: -2493]", "y0h4ej}2w,/s\u0001h=;R");
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals(684, jsonLocation0.getLineNr());
      assertEquals((-2493), jsonLocation0.getColumnNr());
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setDescription("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setIndex((-1588));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1588), jsonMappingException_Reference0.getIndex());
      
      String string2 = jsonMappingException_Reference0.getFieldName();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1588), jsonMappingException_Reference0.getIndex());
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "");
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("java.lang.Object[\"\"]", string0);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string1);
      assertEquals("java.lang.Object[\"\"]", string1);
      
      SQLDataException sQLDataException0 = new SQLDataException("4d,Nsk", "");
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 4d,Nsk", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("4d,Nsk", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 4d,Nsk", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("4d,Nsk", sQLDataException0.getMessage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 4d,Nsk", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLDataException: 4d,Nsk", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.Object[\"\"]", "4d,Nsk", (-1041), sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 4d,Nsk", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("4d,Nsk", sQLDataException0.getMessage());
      assertEquals((-1041), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("4d,Nsk", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.lang.Object[\"\"]", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.lang.Object[\"\"]", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("b5<Z{a>^80y&%H[X#6C", sQLSyntaxErrorException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 4d,Nsk", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("4d,Nsk", sQLDataException0.getMessage());
      assertEquals((-1041), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("4d,Nsk", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.lang.Object[\"\"]", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.lang.Object[\"\"]", sQLSyntaxErrorException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("b5<Z{a>^80y&%H[X#6C", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: b5<Z{a>^80y&%H[X#6C", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Throwable[] throwableArray0 = sQLIntegrityConstraintViolationException0.getSuppressed();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 4d,Nsk", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("4d,Nsk", sQLDataException0.getMessage());
      assertEquals((-1041), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("4d,Nsk", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.lang.Object[\"\"]", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.lang.Object[\"\"]", sQLSyntaxErrorException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("b5<Z{a>^80y&%H[X#6C", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: b5<Z{a>^80y&%H[X#6C", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      
      String string2 = jsonMappingException_Reference1.getFieldName();
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(string2);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      String string3 = jsonMappingException_Reference1.getDescription();
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(string3);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertEquals("UNKNOWN[?]", string3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLDataException sQLDataException0 = new SQLDataException("Failed to parse type '%s' (remaining: '%s'): %s", "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap");
      assertEquals("java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLDataException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap", sQLDataException0.getSQLState());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Failed to parse type '%s' (remaining: '%s'): %s", "Failed to parse type '%s' (remaining: '%s'): %s", 806, sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap", sQLDataException0.getSQLState());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLClientInfoException0.getMessage());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0.toString());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0.getMessage());
      assertEquals(806, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap", sQLDataException0.getSQLState());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLClientInfoException0.getMessage());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0.toString());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0.getMessage());
      assertEquals(806, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to parse type '%s' (remaining: '%s'): %s", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("Failed to parse type '%s' (remaining: '%s'): %s", sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(string0);
      
      String string1 = jsonMappingException0._buildMessage();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLDataException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap", sQLDataException0.getSQLState());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: Failed to parse type '%s' (remaining: '%s'): %s", sQLClientInfoException0.getMessage());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0.toString());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLSyntaxErrorException0.getMessage());
      assertEquals(806, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to parse type '%s' (remaining: '%s'): %s", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(string1);
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.core.io.SerializedString", (Throwable) null);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(serializerProvider0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "com.fasterxml.jackson.core.io.SerializedString");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonMappingException1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      StringBuilder stringBuilder0 = jsonMappingException1.getPathReference((StringBuilder) null);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNull(stringBuilder0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" to ", sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException:  to ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" to ", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      sQLTransientConnectionException0.printStackTrace();
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException:  to ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" to ", sQLTransientConnectionException0.getMessage());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" to ");
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException:  to ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" to ", sQLTransientConnectionException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException:  to ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(" to ", sQLTransientConnectionException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, " to ", (Throwable) sQLRecoverableException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      jsonMappingException_Reference0.setFieldName("YZZ'a;in?0@U`FFO,");
      assertEquals("YZZ'a;in?0@U`FFO,", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(objectMapper0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(javaType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(objectReader0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(407);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertNotNull(byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectReader0, byteQuadsCanonicalizer1, byteArray0, (-1), 1383, true);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      assertEquals(1, jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertNotNull(jsonLocation0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "", jsonLocation0);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(jsonMappingException0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, jsonLocation0.getLineNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      assertEquals(1, jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      SQLWarning sQLWarning0 = new SQLWarning("UNKNOWN", "Numeric value (%s) out of range of long (%d - %s)", 708);
      assertEquals("java.sql.SQLWarning: UNKNOWN", sQLWarning0.toString());
      assertEquals("Numeric value (%s) out of range of long (%d - %s)", sQLWarning0.getSQLState());
      assertEquals(708, sQLWarning0.getErrorCode());
      assertEquals("UNKNOWN", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("Q#a1Ozl7%", (JsonLocation) null, sQLWarning0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectMapper0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertNotNull(objectReader0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(407);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertNotNull(byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectReader0, byteQuadsCanonicalizer1, byteArray0, (-1), 1383, true);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(1, jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      assertEquals(1, jsonLocation0.getLineNr());
      assertNotNull(jsonLocation0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "", jsonLocation0);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(jsonMappingException0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "JSON", (Throwable) jsonMappingException0);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(1, jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getByteOffset());
      assertEquals(1, jsonLocation0.getLineNr());
      assertNotNull(jsonMappingException1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl2);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl2.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer", (String) null, (-1652));
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals((-1652), sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "K", (-1652), sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals((-1652), sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("K", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals((-1652), sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals((-1652), sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("K", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals((-1652), sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 806;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Failed to parse type '%s' (remaining: '%s'): %s", "Failed to parse type '%s' (remaining: '%s'): %s");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      assertEquals("java.lang.String[\"Failed to parse type '%s' (remaining: '%s'): %s\"]", string0);
      
      jsonMappingException_Reference0.setDescription("a|v,0XyRL");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", jsonMappingException_Reference0.getFieldName());
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertFalse(object0.equals((Object)string0));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", jsonMappingException_Reference0.getFieldName());
      assertNotNull(object0);
      assertEquals("Failed to parse type '%s' (remaining: '%s'): %s", object0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("java.io.SequenceInputStream[?]", string0);
      
      jsonMappingException_Reference0._fieldName = "Unexpected IOException (of type %s): %s";
      assertEquals("Unexpected IOException (of type %s): %s", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = "";
      jsonMappingException_Reference0.setDescription("");
      assertEquals("Unexpected IOException (of type %s): %s", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertEquals("Unexpected IOException (of type %s): %s", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(object0);
      assertSame(sequenceInputStream0, object0);
      assertSame(object0, sequenceInputStream0);
      
      jsonMappingException_Reference0.setFieldName("Unexpected IOException (of type %s): %s");
      assertEquals("Unexpected IOException (of type %s): %s", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertSame(sequenceInputStream0, object0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = "0[4gL1+kzXt";
      jsonMappingException_Reference0._from = (Object) pipedInputStream0;
      assertEquals(0, pipedInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription("0[4gL1+kzXt");
      assertEquals(0, pipedInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      PipedInputStream pipedInputStream1 = (PipedInputStream)jsonMappingException_Reference0.getFrom();
      assertEquals(0, pipedInputStream0.available());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedInputStream1);
      assertSame(pipedInputStream0, pipedInputStream1);
      assertSame(pipedInputStream1, pipedInputStream0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, 0, objectReader0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getPathReference();
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("java.sql.SQLRecoverableException[?]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('_');
      assertEquals(1, charArrayWriter0.size());
      assertEquals("_", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("_", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      assertNotNull(mockPrintWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("_", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("_", charArrayWriter1.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals(1, charArrayWriter0.size());
      assertEquals("_", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("_", charArrayWriter1.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals((-1), int0);
      
      charArrayWriter0.flush();
      assertEquals(1, charArrayWriter0.size());
      assertEquals("_", charArrayWriter0.toString());
      assertSame(charArrayWriter0, charArrayWriter1);
      
      mockPrintWriter0.println((-1));
      assertEquals("_-1\n", charArrayWriter0.toString());
      assertEquals(4, charArrayWriter0.size());
      assertEquals(4, charArrayWriter1.size());
      assertEquals("_-1\n", charArrayWriter1.toString());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("S");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      assertEquals("java.lang.Object[\"\"]", string0);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNotNull(string1);
      assertEquals("java.lang.Object[\"\"]", string1);
      
      JsonLocation jsonLocation0 = new JsonLocation("", 2072L, 0, 0);
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      String string2 = jsonLocation0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertNotNull(string2);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("[Source: (String)\"\"; line: 0, column: 0]", string2);
      
      String string3 = jsonLocation0.toString();
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertNotNull(string3);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("[Source: (String)\"\"; line: 0, column: 0]", string3);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonLocation0, "[Source: (String)\"\"; line: 0, column: 0]");
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      String string4 = jsonMappingException0.getPathReference();
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(2072L, jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertNotNull(string4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("com.fasterxml.jackson.core.JsonLocation[\"[Source: (String)\"\"; line: 0, column: 0]\"]", string4);
      
      jsonMappingException_Reference0.setDescription("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setIndex((-1588));
      assertEquals((-1588), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0._from = (Object) jsonMappingException_Reference1;
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertEquals("UNKNOWN[?]", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNotNull(jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0._fieldName = null;
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      Throwable throwable0 = mockThrowable0.fillInStackTrace();
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNotNull(throwable0);
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "W#Eu27i4|qo:^>3loj^", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNotNull(jsonMappingException0);
      assertSame(mockThrowable0, throwable0);
      
      jsonMappingException0.prependPath((Object) mockThrowable0, 667);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertSame(mockThrowable0, throwable0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "W#Eu27i4|qo:^>3loj^");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1, 1177);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(1177, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setFieldName(" (through reference chain: ");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(" (through reference chain: ", jsonMappingException_Reference0.getFieldName());
      assertEquals(1177, jsonMappingException_Reference0.getIndex());
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      jsonMappingException_Reference0.setDescription("o@vH}:~c9gSs[K7j");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(" (through reference chain: ", jsonMappingException_Reference0.getFieldName());
      assertEquals(1177, jsonMappingException_Reference0.getIndex());
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      jsonMappingException_Reference0.setDescription("o@vH}:~c9gSs[K7j");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(" (through reference chain: ", jsonMappingException_Reference0.getFieldName());
      assertEquals(1177, jsonMappingException_Reference0.getIndex());
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      String string0 = jsonMappingException1.getPathReference();
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(string0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals("", string0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertEquals(" (through reference chain: ", jsonMappingException_Reference0.getFieldName());
      assertEquals(1177, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from((JsonParser) null, "Unexpected IOException (of type %s): %s");
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException3);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UNKNOWN");
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: UNKNOWN", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("UNKNOWN", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, object0, 708);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: UNKNOWN", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("UNKNOWN", sQLTransactionRollbackException0.getMessage());
      assertNotNull(jsonMappingException0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdStringException("UNKNOWN", class0, "Y+Hb4|m1KVN");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      Object object1 = jsonMappingException1.getProcessor();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(object1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, ")g_m_");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      Object object0 = jsonMappingException0.getProcessor();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(object0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(4, byteArrayBuilder0.size());
      assertNotNull(objectOutputStream0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      String string1 = jsonMappingException0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string1);
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Include0);
      
      // Undeclared exception!
      try { 
        JsonInclude.Include.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.annotation.JsonInclude.Include.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "";
      MockIOException mockIOException0 = new MockIOException("GEe2cX0");
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      assertEquals(JsonInclude.Include.CUSTOM, jsonInclude_Include0);
      
      String string0 = "Vt\\=k0z\\Y/XA_AH\"*";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonInclude_Include0, "Vt=k0zY/XA_AH\"*");
      assertEquals("Vt=k0zY/XA_AH\"*", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      int int0 = 1114111;
      jsonMappingException_Reference0.setIndex(1114111);
      assertEquals("Vt=k0zY/XA_AH\"*", jsonMappingException_Reference0.getFieldName());
      assertEquals(1114111, jsonMappingException_Reference0.getIndex());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<CharArrayReader> class0 = CharArrayReader.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "Vt=k0zY/XA_AH\"*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UNKNOWN");
      Object object0 = new Object();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, object0, 708);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "Y+Hb4|m1KVN", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLTransientConnectionException0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "->");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-96);
      int int0 = (-1530);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-1530));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, (byte)0);
      String string0 = "";
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException_Reference0.setDescription((String) null);
      jsonMappingException_Reference0.toString();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`PX2O", "`PX2O", (-1784));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "`PX2O", (Throwable) sQLNonTransientException0);
      jsonMappingException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("`PX2O", jsonMappingException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      sQLTransientConnectionException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.writeReplace();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "`PX2O", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.setFieldName("<kxS,HRK~bS");
      assertEquals("<kxS,HRK~bS", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }
}
