/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:31:17 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.String[0]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "P,BF?I");
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "mir?,P#FcX-6YE");
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[7];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonMappingException1.getProcessor();
      assertNull(readerBasedJsonParser0.getLastClearedToken());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "l+bQ8x");
      StringBuilder stringBuilder0 = new StringBuilder(22);
      jsonMappingException0.getPathReference(stringBuilder0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException[\"l+bQ8x\"]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) filterOutputStream0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4Z{~KJJ;}-m", "", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "OTVxcO#6}8", (Throwable) sQLRecoverableException0);
      jsonMappingException0.prependPath((Object) jsonGenerator0, "JSON");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("com.fasterxml.jackson.core.json.UTF8JsonGenerator[\"JSON\"]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("&O>u=A&XE!L", "&O>u=A&XE!L", 0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "&O>u=A&XE!L", (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "-UW");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) sQLTransactionRollbackException0, 754);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[9];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6/X", "~v");
      JsonMappingException jsonMappingException0 = new JsonMappingException("~v", (JsonLocation) null, sQLInvalidAuthorizationSpecException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(")");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "'v#!Y|m!t}U:Hs?", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(91);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) placeholderForType0, 5202);
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[7];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) jsonParser0, "6HWsHqd18z87Q");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) "", "%4T:6qxBPj_84");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, "UNKNOWN");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 1321);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "", sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "", sQLNonTransientException0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(")", (-2813));
      jsonMappingException_Reference0.getDescription();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.lang.String[?]", string0);
      assertEquals((-2813), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileReader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) "fV^4~OsJCmzO}YvKl", "('true', false' or 'null')");
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6/X", "~v");
      JsonMappingException jsonMappingException0 = new JsonMappingException("~v", (JsonLocation) null, sQLInvalidAuthorizationSpecException0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".Lo#.?$l", false);
      jsonMappingException0.prependPath((Object) mockFileOutputStream0, 502);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) list0, 2037);
      String string0 = jsonMappingException1.getMessage();
      assertEquals("~v (through reference chain: java.util.Collections$EmptyList[2037]->org.evosuite.runtime.mock.java.io.MockFileOutputStream[502])", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(")");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "@u{moo%O]+2pn6");
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedOutputStream0, "`fEo6I2s~:Ys=G");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "java.io.PipedOutputStream[\"`fEo6I2s~:Ys=G\"]", sQLSyntaxErrorException0);
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException(")GK)9uwUsl?|9d~Sq#,");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'): found multiple explicit names: ", "'): found multiple explicit names: ", sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, ":NqLDA@X,85`f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedOutputStream0, "`fEo6I2s~:Ys=G");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.io.PipedOutputStream[\"`fEo6I2s~:Ys=G\"]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, (-2813));
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-2813), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("java.io.CharArrayWriter[?]", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 4004);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[4004]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) "", "%4T:6qxBPj_84");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      StringBuilder stringBuilder0 = jsonMappingException1.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(objectOutputStream0, "", (JsonLocation) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 4004);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException1._buildMessage();
      assertEquals(" (through reference chain: UNKNOWN[4004])", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|;jU{yU{^n2", "UNKNOWN", (-2847));
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLTimeoutException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(")");
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(")");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: )", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "<L\"*97\n6]", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, ";)p^pfW", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(")");
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, ")");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2057), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)0, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "p{/0y5Co<v0t");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(")");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("from-int");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("2JdswANA!]X");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("->", "->");
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N?mDD`G1G@P)1dS(");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0);
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(93);
      assertEquals(93, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6/X", "~v");
      JsonMappingException jsonMappingException0 = new JsonMappingException("~v", (JsonLocation) null, sQLInvalidAuthorizationSpecException0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".Lo#.?$l", false);
      jsonMappingException0.prependPath((Object) mockFileOutputStream0, 502);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("~v (through reference chain: org.evosuite.runtime.mock.java.io.MockFileOutputStream[502])", string0);
  }
}
