/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 22:03:42 GMT 2020
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.deser.impl.ValueInjector", "Cannot pass null fieldName");
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, sQLWarning0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 41);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[41]", string0);
      
      String string1 = jsonMappingException_Reference0.getFieldName();
      assertNull(string1);
      assertEquals(41, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setDescription("2ni}zyo_!PgZbLpaWR");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "gx>7+08Hs@)~TFb?AW");
      StringBuilder stringBuilder0 = new StringBuilder(11);
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      MockFile mockFile0 = new MockFile(";W!yije'u", ":e[");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFile0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (JavaType) null, jsonToken0, ";W!yije'u");
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)jsonMappingException0.getProcessor();
      assertFalse(readerBasedJsonParser1.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("Q", " (through reference chain: ");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) " (through reference chain: ", "JSON");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.lang.String[\"JSON\"]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, "");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("??HPvKN}z", "??HPvKN}z");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "??HPvKN}z", (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("q[gofTl\",r", "q[gofTl\",r");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, "q[gofTl\",r");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("q[gofTl\",r (through reference chain: java.sql.SQLTransientException[\"q[gofTl\",r\"])", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("d/9@Y.\"ce}3Cv6I#G");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "", sQLIntegrityConstraintViolationException0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonFactory0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException_Reference0, 180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("|@");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("q[goWTfl\",G");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException(")5$-$b\":SWG'Vs6^CgO", "short", (-3391));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, ">VwW|O9CFjel+<{", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "-&D%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[go9fTl\"", "[go9fTl\"");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, "[go9fTl\"");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, "");
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("R[rCxx]?4U44z", true);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) mockFileOutputStream0, "yA>Qkz");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("R[rCxx]?4U44z", "");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("q[goWTfl\",G");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockThrowable0);
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("l*f.d3mNH");
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "com.fasterxml.jackson.databind.introspect.AnnotatedMethod$Serialization", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("q[goWTfl\",G");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      MismatchedInputException mismatchedInputException0 = MismatchedInputException.from((JsonParser) null, class0, "yaA`4omo]#=n=");
      List<JsonMappingException.Reference> list0 = mismatchedInputException0.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("host-name", "host-name");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, "host-name");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[go9fTl\"", "[go9fTl\"");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, "[go9fTl\"");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "mhb!F@O|s)j<$", 132);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "need JSON String that contains type id (for subtype of ", (Throwable) sQLDataException0);
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, "");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.io.ByteArrayInputStream[\"\"]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("java.lang.Throwable[?]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("3412", (String) null, 22);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) jsonMappingException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("]");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "AR", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("/4", (JsonLocation) null);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("/4", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[go9fTl\"", "[go9fTl\"");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, "[go9fTl\"");
      jsonMappingException0.prependPath((Object) null, "[go9fTl\"");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("d/9@Y.\"ce}3Cv6I#G");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "", sQLIntegrityConstraintViolationException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLWarning0, 1464);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLWarning) (through reference chain: java.sql.SQLWarning[1464])", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("6dJaS");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "6dJaS", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "G46v41zBY-3_3");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      Class<PipedReader> class0 = PipedReader.class;
      InvalidFormatException invalidFormatException0 = InvalidFormatException.from(jsonParser0, "UNKNOWN", (Object) jsonFactory0, (Class<?>) class0);
      JsonLocation jsonLocation0 = invalidFormatException0.getLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, invalidFormatException0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, "~");
      jsonMappingException0.prependPath((Object) "~", (-188));
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("q[goWTfl\",G");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, "");
      jsonMappingException_Reference0.setFieldName("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserDelegate0, 0);
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      jsonMappingException_Reference0.writeReplace();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.Object[?]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }
}
