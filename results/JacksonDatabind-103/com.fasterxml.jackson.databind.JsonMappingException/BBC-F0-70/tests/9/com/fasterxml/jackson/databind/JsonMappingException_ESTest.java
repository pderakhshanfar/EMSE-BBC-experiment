/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:30:12 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.net.URLStreamHandler;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte) (-65);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory1);
      BigDecimal bigDecimal0 = new BigDecimal(2.2250738585072014E-308);
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "'V Hz1V3#FK-@l");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "'V Hz1V3#FK-@l", (Throwable) jsonMappingException0);
      System.setCurrentTimeMillis(0L);
      jsonMappingException1.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "'V Hz1V3#FK-@l");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("java.lang.Object[\"'V Hz1V3#FK-@l\"]", string0);
      
      Random.setNextRandom(818);
      String string1 = jsonMappingException1.getLocalizedMessage();
      assertEquals("'V Hz1V3#FK-@l", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory3.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)63;
      byte byte0 = (byte)37;
      File file0 = MockFile.createTempFile("Sub-class %s (of class %s) must override method '%s'", "JSON");
      objectMapper0.writeValue(file0, (Object) jsonFactory2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "p|`S4p2':CIR<\"%w$m";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("p|`S4p2':CIR<\"%w$m", "p|`S4p2':CIR<\"%w$m");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "p|`S4p2':CIR<\"%w$m");
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      jsonMappingException3._buildMessage();
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException6, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException7, jsonMappingException_Reference0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jsonMappingException0.getMessage();
      jsonMappingException6.prependPath((Object) pipedOutputStream0, "p|`S4p2':CIR<\"%w$m");
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonMappingException4, "p|`S4p2':CIR<\"%w$m (through reference chain: UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.databind.JsonMappingException[\"p|`S4p2':CIR<\"%w$m\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?])");
      jsonMappingException8.clearLocation();
      JsonMappingException jsonMappingException9 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException9._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "p|`S4p2':CIR<\"%w$m";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("p|`S4p2':CIR<\"%w$m", "p|`S4p2':CIR<\"%w$m");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "p|`S4p2':CIR<\"%w$m");
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      int int0 = (-651);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      jsonMappingException6.prependPath((Object) pipedWriter0, (-651));
      jsonMappingException3._buildMessage();
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException7, jsonMappingException_Reference0);
      LongNode longNode0 = new LongNode((-651));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) longNode0, (-651));
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException8.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "?M;3m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(beanDeserializerFactory0, 54);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, ")<x-BKF", (Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      Class<BufferedWriter> class0 = BufferedWriter.class;
      defaultSerializerProvider_Impl1.getUnknownTypeSerializer(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) sQLClientInfoException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      String string0 = ": ";
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, ": ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I\"K", (String) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLRecoverableException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0);
      sQLClientInfoException1.addSuppressed(sQLClientInfoException0);
      sQLRecoverableException0.setNextException(sQLClientInfoException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)5;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (int) (byte)0, (int) (byte)40);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(51);
      placeholderForType0.actualType();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "JSON");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("Unexpected token (null), expected VALUE_NUMBER_FLOAT: JSON\n at [Source: (byte[])\"\u0000(\u0017d\uFFFD\u0005\"; line: 1, column: 0]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "Can not currently override name during filtering read";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Can not currently override name during filtering read", "Can not currently override name during filtering read");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "");
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) null, 34);
      // Undeclared exception!
      try { 
        jsonMappingException2.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, (String) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", (-3285));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException0.getProcessor();
      jsonMappingException0.getMessage();
      stringBuilder0.append('4');
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, ":)6Q/~M:b}aN^AD");
      jsonMappingException0.getPathReference(stringBuilder0);
      assertEquals("java.lang.String[?]4java.lang.String[?]", stringBuilder0.toString());
      
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): (was java.sql.SQLFeatureNotSupportedException) (through reference chain: java.lang.String[?])", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      objectMapper0.getDeserializationContext();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PipedWriter> class0 = PipedWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("JSON", class0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 13);
      jsonMappingException_Reference0.getFieldName();
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(resolvedRecursiveType0, 0);
      resolvedRecursiveType0.withHandlersFrom(resolvedRecursiveType0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackson.databind.type.ResolvedRecursiveType[0]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Can not currently override name during filtering read", "Can not currently override name during filtering read");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "CanTnot currently override name during filternngread";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("CanTnot currently override name during filternngread", "CanTnot currently override name during filternngread");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("U8sU6+=,j'Wyjx&Ut", " (through reference chain: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Failed auto-detect: could not read more than ");
      PrintStream printStream0 = mockPrintStream0.format("7uG", (Object[]) null);
      sQLRecoverableException0.printStackTrace(printStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeBindings.emptyBindings();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, ")", (Throwable) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileReader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "(was ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("M", "M", intArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "BLS\"F_gG>", batchUpdateException0);
      jsonMappingException0.prependPath((Object) batchUpdateException0, (-1));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "BLS\"F_gG>");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "p|i.85");
      JsonMappingException jsonMappingException0 = new JsonMappingException("[uqEyknq)gxV8", (JsonLocation) null, sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", jsonMappingException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 3, sQLFeatureNotSupportedException0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*N,%S:JH{b+o`DZ@y", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.type.WritableTypeId");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException.from((JsonParser) null, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0, "hwmkk\"Twa5?)'i?jNNC");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException1.getPathReference();
      System.setCurrentTimeMillis(3);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "q0");
      assertNotSame(jsonMappingException2, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeBindings.emptyBindings();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, "[]", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(resolvedRecursiveType0, 0);
      resolvedRecursiveType0.withHandlersFrom(resolvedRecursiveType0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "k7ViJ*QF<'Bcs", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      jsonMappingException2._buildMessage();
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) defaultSerializerProvider_Impl0, 975);
      assertSame(jsonMappingException3, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile(": ");
      MockFile mockFile1 = new MockFile(mockFile0, "2s/KxpwvU6eB`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("2s/KxpwvU6eB`", "6qU`\"(&5\" qPUWP", 0);
      MockIOException mockIOException0 = new MockIOException((String) null, sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jFv");
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, "[]", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(resolvedRecursiveType0, 0);
      resolvedRecursiveType0.withHandlersFrom(resolvedRecursiveType0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "k7ViJ*QF<'Bcs", (Throwable) jsonMappingException0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.databind.type.ResolvedRecursiveType[0]", string0);
      assertNotNull(string0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException2);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile(": ");
      MockFile mockFile1 = new MockFile(mockFile0, "2s/KxpwvU6eB`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "");
      jsonMappingException_Reference0.getDescription();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "LLP#.7etX%");
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedReader0, (String) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "6qU`\"(&5\" qPUWP", 2064);
      assertSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile(": ");
      MockFile mockFile1 = new MockFile(mockFile0, "2s/KxpwvU6eB`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("2s/KxpwvU6eB`", "6qU`\"(&5\" qPUWP", 0);
      mockFile1.setLastModified(0);
      MockIOException mockIOException0 = new MockIOException((String) null, sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedWriter0, "2s/KxpwvU6eB`", mockIOException0);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, ": ", (Throwable) sQLRecoverableException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      mockIOException0.toString();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) mockIOException0, "HwaTqB3+BroC5Uw@j");
      System.setCurrentTimeMillis((-1103L));
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, "[]", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(resolvedRecursiveType0, 0);
      resolvedRecursiveType0.withHandlersFrom(resolvedRecursiveType0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "k7ViJ*QF<'Bcs", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) resolvedRecursiveType0, (-781));
      jsonMappingException2.getProcessor();
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("com.fasterxml.jackson.databind.type.ResolvedRecursiveType[0]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", (-3285));
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, ":)6Q/~M:b}aN^AD");
      jsonMappingException_Reference0._fieldName = "";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!jAKMA:.TkFv8<k~", "t5/I8S", 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!jAKMA:.TkFv8<k~", "!jAKMA:.TkFv8<k~", 0, sQLSyntaxErrorException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLIntegrityConstraintViolationException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLClientInfoException1, "t5/I8S");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "^Wx4UcTK");
      jsonMappingException0.getProcessor();
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeBindings.emptyBindings();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 819);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getType();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      jsonMappingException_Reference1.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "uo'HPafq4(g\te>");
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", (-3285));
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) inputStreamReader0, (int) (byte)34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "");
      jsonMappingException0._buildMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "\"2yRQib{}:", (Throwable) jsonMappingException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-17);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-85);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("IW");
      JsonMappingException jsonMappingException0 = new JsonMappingException("IW");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, "[]", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(resolvedRecursiveType0, 0);
      resolvedRecursiveType0.withHandlersFrom(resolvedRecursiveType0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "k7ViJ*QF<'Bcs", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile(": ");
      MockFile mockFile1 = new MockFile(mockFile0, "2s/KxpwvU6eB`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      String string0 = "6qU`\"(&5\" qPUWP";
      String string1 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeBindings.emptyBindings();
      JsonMappingException jsonMappingException0 = new JsonMappingException("http://javax.xml.XMLConstants/feature/secure-processing", (JsonLocation) null);
      jsonMappingException0.getMessage();
      String string0 = jsonMappingException0.getMessage();
      assertEquals("http://javax.xml.XMLConstants/feature/secure-processing", string0);
      
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
      StringWriter stringWriter0 = new StringWriter();
      MockFile mockFile0 = new MockFile("http://javax.xml.XMLConstants/feature/secure-processing", "http://javax.xml.XMLConstants/feature/secure-processing");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, "UNKNOWN");
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.DataOutputStream[\"UNKNOWN\"]", string1);
      assertNotNull(string1);
      
      jsonMappingException_Reference0.getFieldName();
      assertEquals("UNKNOWN", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setFieldName((String) null);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, ")", (Throwable) sQLRecoverableException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "withResolved", (-3709));
      assertSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile(": ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(": ", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "2s/KxpwvU6eB`", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, "2s/KxpwvU6eB`");
      System.setCurrentTimeMillis((-1103L));
      jsonMappingException0.getMessage();
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      assertSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-85);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      DupDetector dupDetector1 = dupDetector0.child();
      dupDetector1.findLocation();
      byteArrayInputStream0.read();
      dupDetector0.findLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, "->", (JsonLocation) null);
      jsonMappingException0.getPath();
      dupDetector1.findLocation();
      String string0 = "IW";
      jsonMappingException0.prependPath((Object) dupDetector0, "IW");
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "->", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1fm/H\"vg{>(QsX01kB@", "zAO{](3,@%", 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'}_O&@k~rhy6XTKy@", "zAO{](3,@%", sQLNonTransientConnectionException0);
      sQLTimeoutException0.setNextException(sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("1fm/H\"vg{>(QsX01kB@", "1fm/H\"vg{>(QsX01kB@", sQLTimeoutException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      Throwable throwable0 = sQLDataException0.fillInStackTrace();
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      sQLDataException0.setNextException(sQLNonTransientConnectionException0);
      JsonMappingException.wrapWithPath(throwable0, jsonMappingException_Reference0);
      jsonMappingException0.toString();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("'}_O&@k~rhy6XTKy@", "", 0, "1fm/H\"vg{>(QsX01kB@", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "A<d.zqnnz", jsonMappingException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("[]", jsonMappingException0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 63);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0, "TY+/2ksKX");
      jsonMappingException_Reference0.getFrom();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException_Reference1.toString();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "UNKNOWN[?]", (Throwable) jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "");
      JsonMappingException jsonMappingException0 = new JsonMappingException("?KZj'sXq", (Throwable) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, "~to");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.valueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "tQekZ, lx=rl@K]");
      invalidFormatException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(deserializerFactoryConfig0, 21);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._desc = "";
      jsonMappingException_Reference0.getFrom();
      Object object0 = new Object();
      invalidFormatException0.prependPath(object0, " y/A");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(21);
      Class<PipedReader> class1 = PipedReader.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      StringBuilder stringBuilder0 = new StringBuilder(21);
      StringBuilder stringBuilder1 = referenceType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = placeholderForType0.getErasedSignature(stringBuilder1);
      ((JsonMappingException)invalidFormatException0)._appendPathDesc(stringBuilder2);
      assertEquals("Ljava/io/PipedReader;$22java.lang.Object[\" y/A\"]", stringBuilder2.toString());
      assertEquals("Ljava/io/PipedReader;$22java.lang.Object[\" y/A\"]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")", "com.fasterxml.jackson.databind.JsonMappingException");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "R*hgFsHY3", (Throwable) sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "", jsonMappingException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("withResolved", sQLIntegrityConstraintViolationException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(beanDeserializerFactory0, "Unexpected IOException (of type %s): %s");
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[\"Unexpected IOException (of type %s): %s\"]", (Throwable) jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      String string0 = "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer";
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer");
      int int0 = 12;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 12);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) jsonMappingException_Reference0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) jsonMappingException_Reference0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer";
      objectArray0[6] = (Object) list0;
      objectArray0[7] = (Object) jsonMappingException_Reference0;
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("W|Tl3rdA!8|", objectArray0);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(printStream0, false, "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<PipedReader> class0 = PipedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "not a valid representation: %s", "");
      jsonMappingException0.printStackTrace();
      jsonMappingException0.getMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      jsonMappingException1.getSuppressed();
      jsonMappingException0.getPath();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFile mockFile0 = new MockFile(": ");
      MockFile mockFile1 = new MockFile(mockFile0, "2s/KxpwvU6eB`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("2s/KxpwvU6eB`", "6qU`\"(&5\" qPUWP", 0);
      MockIOException mockIOException0 = new MockIOException((String) null, sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedWriter0, "2s/KxpwvU6eB`", mockIOException0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "4Z?d'to";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "4Z?d'to");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "4Z?d'to");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "JSON", (Throwable) jsonMappingException0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      Class<OutputStreamWriter> class1 = OutputStreamWriter.class;
      TypeBindings typeBindings0 = null;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-56);
      byteArrayBuilder0.write(byteArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, "->");
      jsonMappingException_Reference0._desc = "->";
      objectOutputStream0.close();
      jsonMappingException_Reference0.setIndex(3);
      jsonMappingException_Reference0.toString();
      assertEquals(3, jsonMappingException_Reference0.getIndex());
      
      byteArrayBuilder0.write((-4094));
      jsonMappingException_Reference0.setIndex((-1));
      jsonMappingException_Reference0.getFrom();
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("->", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (-629));
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.core.filter.TokenFilter", jsonLocation0, sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      MockIOException mockIOException0 = new MockIOException("=m+~@l/301K-p8|");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("' (code ", "' (code ", 0, longArray0, mockIOException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Z$`LjsFP~xJFm?n.", batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "rWAfm=_fDb", (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SerializerProvider serializerProvider0 = null;
      String string0 = null;
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("f#EMbaDewqI", sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) null, (-2586));
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "tzGsFX$^>VH#Gt");
      jsonMappingException0.prependPath((Object) "tzGsFX$^>VH#Gt", "");
      JsonMappingException.from((JsonParser) null, "");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory4);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializerProvider0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.PrettyPrinter");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Can not currently override name during filtering read", "Can not currently override name during filtering read");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "Can not currently override name during filtering read", jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1277, objectReader0, byteArrayBuilder0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "_q(MT!KIHax[*\"$d");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("5 ", "|iSA)k1UJbu", mockIOException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("=jrGVtd_(f!FJf", "", (int[]) null, sQLSyntaxErrorException0);
      batchUpdateException0.getNextException();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "", "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("7TgWwL", (JsonLocation) null);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getMessage();
      String string0 = jsonMappingException0.getMessage();
      assertEquals("7TgWwL", string0);
      
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
      StringWriter stringWriter0 = new StringWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter0, "7TgWwL");
      String string1 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string1);
      
      jsonMappingException_Reference0.setFieldName("7TgWwL");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, (String) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, "JSON");
      assertSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonParser) null, "/8E%{6LNwjC", (Throwable) jsonMappingException1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException3 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      assertNotSame(jsonMappingException3, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-85);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      DupDetector dupDetector1 = dupDetector0.child();
      dupDetector1.findLocation();
      byteArrayInputStream0.read();
      dupDetector0.findLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, "->", (JsonLocation) null);
      jsonMappingException0.getPath();
      dupDetector1.findLocation();
      String string0 = "IW";
      jsonMappingException0.prependPath((Object) dupDetector0, "IW");
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "->", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "JE|E7>{'7pQ&\"\\d:+Hi";
      StringReader stringReader0 = new StringReader("JE|E7>{'7pQ&\"d:+Hi");
      int int0 = 55296;
      stringReader0.close();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, 55296);
      jsonMappingException_Reference0.setDescription("JE|E7>{'7pQ&\"d:+Hi");
      jsonMappingException_Reference0._desc = "JE|E7>{'7pQ&\"d:+Hi";
      jsonMappingException_Reference0.getIndex();
      try { 
        stringReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("' (");
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("' (", "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.ser.PropertyBuilder", (Throwable) sQLTransactionRollbackException0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'Z';
      charArray0[2] = '=';
      charArray0[3] = '4';
      charArray0[4] = '?';
      charArray0[5] = 'x';
      jsonFactory2.createParser(charArray0, 4064, 4064);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      jsonMappingException0.prependPath((Object) filteringParserDelegate0, "com.fasterxml.jackson.databind.ser.PropertyBuilder");
      JsonMappingException.from((JsonParser) filteringParserDelegate0, "' (");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "JSON");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(", array size ");
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SdY)XWQE?X99C.A n");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper0, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "' (");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("MrRs");
      jsonMappingException_Reference0.setFieldName("G[%Z");
      jsonMappingException_Reference0.getDescription();
      String string0 = "7VCKk\\7";
      jsonMappingException_Reference0.setFieldName("7VCKk\u0007");
      jsonMappingException_Reference0.writeReplace();
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
