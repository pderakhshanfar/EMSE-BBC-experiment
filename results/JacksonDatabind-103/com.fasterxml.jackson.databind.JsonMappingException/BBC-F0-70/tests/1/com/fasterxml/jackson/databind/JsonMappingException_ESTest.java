/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:20:32 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonParser jsonParser0 = null;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) filteringParserDelegate0, (JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserSequence0, ".u!4=>HBo?4w[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "*>:`;}iW&|T";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("*>:`;}iW&|T");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, "*>:`;}iW&|T");
      Object object0 = new Object();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, "*>:`;}iW&|T");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("*>:`;}iW&|T", "*>:`;}iW&|T");
      int int0 = 12;
      jsonMappingException0.prependPath(object0, 12);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, "*>:`;}iW&|T");
      jsonMappingException2.getSuppressed();
      jsonMappingException_Reference0.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      Object object1 = new Object();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jsonMappingException0.prependPath((Object) charArrayWriter0, "*>:`;}iW&|T");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException3.prependPath((Object) "*>:`;}iW&|T", "java.lang.String[\"*>:`;}iW&|T\"]");
      // Undeclared exception!
      try { 
        jsonMappingException3._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("*>:Z;}iY&|T");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, "*>:Z;}iY&|T");
      Object object0 = new Object();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, "*>:Z;}iY&|T");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createParser("JSON");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2823);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, "JSON");
      jsonMappingException0.prependPath((Object) charArrayWriter0, ":@7O}0gjMb|Xw4!! d");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      jsonMappingException1.prependPath((Object) jsonMappingException0, ":@7O}0gjMb|Xw4!! d");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      jsonMappingException0.getStackTrace();
      System.setCurrentTimeMillis(0L);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException3.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Unexpected IOException (of type %s): %s");
      String string0 = ">1? p}HC8p^5o";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">1? p}HC8p^5o");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "Unexpected IOException (of type %s): %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createParser("JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Not enough content available for `skipChildren()`: non-blocking parser? (%s)", 478);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Not enough content available for `skipChildren()`: non-blocking parser? (%s)", sQLTimeoutException0);
      MockThrowable mockThrowable0 = new MockThrowable("JSON", sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getMessage();
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException2.prependPath((Object) jsonMappingException1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, 93, 93);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "com.fasterxml.jackson.databind.introspect.TypeResolutioContext$Bsic", jsonLocation0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")'&HZ8~:y\"Oa2p]\"Q8 ", "88|EE", 93, jsonMappingException0);
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "com.fasterxml.jackson.databind.introspect.TypeResolutioContext$Bsic", sQLTimeoutException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLWarning0, (-1444));
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonGenerator jsonGenerator0 = null;
      String string0 = "J";
      String string1 = "@cc4/c$L";
      String string2 = "com.fasterxml.jackson.databind.jsonschema.JsonSchema";
      int int0 = 1921;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "Numeric value (%s) out of range of int (%d - %s)");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(jsonMappingException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "com.fasterxml.jackson.databind.jsonschema.JsonSchema", (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, 93, 93);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.enable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser(" (through reference chain: ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" (through reference chain: ", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLClientInfoException1);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "zD&+\"@o6'B#m", sQLIntegrityConstraintViolationException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getPath();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(was ");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, "(was ");
      Object object0 = new Object();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, "(was ");
      jsonMappingException0._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, (String) null);
      jsonMappingException_Reference0.getDescription();
      Object object1 = new Object();
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      int int0 = JsonMappingException.MAX_REFS_TO_LIST;
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException1.getMessage();
      jsonMappingException1.getProcessor();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Throwable throwable0 = null;
      Integer integer0 = new Integer(955);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) integer0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "8+D}a.)(XvY", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getStackTrace();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, true);
      JsonParser jsonParser0 = jsonFactory3.createParser("c");
      JsonMappingException.from(jsonParser0, "8+D}a.)(XvY", (Throwable) sQLIntegrityConstraintViolationException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("RU[h40OpqbJ@v#LyX", "RU[h40OpqbJ@v#LyX");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
      JsonMappingException jsonMappingException2 = new JsonMappingException((Closeable) null, "RU[h40OpqbJ@v#LyX");
      jsonMappingException0.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setOutputDecorator(outputDecorator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      jsonMappingException0.getMessage();
      jsonMappingException0.getProcessor();
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("m},#&", "9BK:^");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "m},#&", (Throwable) sQLFeatureNotSupportedException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "Cannot construct instance of %s (no Creators, like default construct, exist): %s", "");
      jsonMappingException0.getProcessor();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(jsonParser0, deserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getStackTrace();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      jsonMappingException_Reference0.writeReplace();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getStackTrace();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("4y");
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "8+D}a.)(XvY", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getStackTrace();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "8+D}a.)(XvY", "b>e9?<k75(g6\",Z2a");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, (byte)41);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.getPathReference((StringBuilder) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(63);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)41, objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 422, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonMappingException.from(jsonGenerator0, "", (Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Object object0 = new Object();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      jsonFactory1.createParser(charArray0, (-2344), 4);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2344), sequenceInputStream0, objectReader0, byteQuadsCanonicalizer0, byteArray0, (-1112), 145, true);
      JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "JSON");
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0, 0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLNonTransientConnectionException0, 97);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(was ");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, "(was ");
      Object object0 = new Object();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, "(was ");
      jsonMappingException0._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, (String) null);
      jsonMappingException_Reference0.getDescription();
      Object object1 = new Object();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException_Reference0.setIndex((-1));
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, object0, 2);
      jsonMappingException3.getPath();
      jsonMappingException1.getLocalizedMessage();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("o[h}WD\u0007J", "");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(jsonMappingException_Reference0, class0);
      sQLNonTransientConnectionException0.initCause(jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "o[h}WD\u0007J", (Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference", (JsonLocation) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference", (JsonLocation) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.disable(jsonFactory_Feature0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "");
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'i';
      charArray0[2] = '+';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 83, 83);
      JsonMappingException.from(jsonParser0, "q;M{Tv95vJfI!e?");
      jsonMappingException1.getPath();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "8+D}a.)(XvY", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getStackTrace();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Object object0 = new Object();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("_LLXw(E*9)8:D^u0");
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException1.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException_Reference1.setIndex(13);
      jsonMappingException_Reference0.getFieldName();
      File file0 = MockFile.createTempFile("JSON", "JSON");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      int int0 = (-679);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.setDescription("");
      sQLTransientException0.spliterator();
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0.getPathReference(stringBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException_Reference0.setIndex(256);
      jsonMappingException_Reference0.getFieldName();
      File file0 = MockFile.createTempFile("Parameter #0 type for factory method (", ")5V8=+Ni+eWzy&i");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      jsonMappingException0.prependPath((Object) mockFileWriter0, 256);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, "");
      Object object0 = new Object();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, "");
      jsonMappingException0._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException_Reference0.setIndex((-2100));
      jsonMappingException_Reference0.getFieldName();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "UNKNOWN[?]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("UNKNOWN");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription("Y?%%y9e<Cun3SUe");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y?%%y9e<Cun3SUe");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 1931);
      jsonMappingException_Reference1._index = 1931;
      jsonMappingException_Reference1.writeReplace();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference1.setIndex(1931);
      jsonMappingException_Reference0.setDescription("^y6+$F");
      jsonMappingException_Reference1.toString();
      jsonMappingException_Reference1._desc = "r_l\"b>p@z3%";
      jsonMappingException_Reference1.getFrom();
      jsonMappingException_Reference0.setDescription("DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("SPlsNy9b.zvlZ", " (through reference chain: ", (Throwable) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) pipedInputStream0, 1028);
      jsonMappingException0.prependPath((Object) "DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s", "");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", (String) null);
      jsonMappingException0.getProcessor();
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 11);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, "");
      char[] charArray0 = new char[0];
      jsonMappingException0.fillInStackTrace();
      jsonMappingException0._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException_Reference0.setIndex((-2100));
      jsonMappingException_Reference0.getFieldName();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "UNKNOWN[?]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 39);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedInputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setFieldName("W{9t@+/L'd");
      jsonMappingException_Reference0.setDescription("Unexpected IOException (of type %s): %s");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      jsonFactory2.createParser("m},#&");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("JSON", "=+9wHgU0-1", (int[]) null, sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON", batchUpdateException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("JSON");
      jsonMappingException1.getPathReference();
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '';
      charArray0[2] = 'J';
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLFeatureNotSupportedException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setDescription("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, "");
      int int0 = (-1601);
      jsonMappingException_Reference1.setIndex((-1601));
      jsonMappingException_Reference1.getFieldName();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setIndex(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2048;
      intArray0[3] = 2048;
      intArray0[4] = 0;
      intArray0[5] = 2048;
      intArray0[6] = 2048;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      batchUpdateException0.getNextException();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 890);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) jsonMappingException_Reference1, 0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setDescription("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException0.toString();
      jsonMappingException0.getMessage();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.getPath();
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "8+D}a.)(XvY", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getStackTrace();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(jsonMappingException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientException1);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException1, jsonMappingException_Reference0);
      jsonMappingException_Reference0.setDescription("8+D}a.)(XvY");
      sQLTransientException0.spliterator();
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException1.getPathReference(stringBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      objectMapper1.configure(jsonParser_Feature1, true);
      ObjectMapper objectMapper2 = new ObjectMapper();
      ObjectMapper objectMapper3 = new ObjectMapper(objectMapper2);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "8+D}a.)(XvY", (Throwable) sQLTransientException1);
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "JSON");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setIndex(0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      String string0 = "D{wmoj'";
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("D{wmoj'", "[]", 0, sQLNonTransientException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.configure(jsonFactory_Feature0, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLException sQLException0 = new SQLException((String) null, (String) null, (-1172), (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) sQLException0);
      jsonMappingException0._appendPathDesc((StringBuilder) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (-1172));
      jsonMappingException_Reference0.getFieldName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "-TSyA8x");
      jsonMappingException1.toString();
      jsonMappingException0.getMessage();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "5WKb");
      jsonMappingException0.getPathReference();
      StringReader stringReader0 = new StringReader("");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stringReader0, "5WKb");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      CharsToNameCanonicalizer.createRoot();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0, "String \"%s\"");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setDescription("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      jsonMappingException0.getLocalizedMessage();
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(object0, "\"f3no");
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(jsonMappingException_Reference1, 2);
      jsonMappingException_Reference1.setFieldName("");
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "8+D}a.)(XvY", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getStackTrace();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "8+D}a.)(XvY", (Throwable) sQLTransientException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "JSON");
      jsonMappingException1.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 1722);
      jsonMappingException_Reference0.setFieldName("8+D}a.)(XvY");
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "8+D}a.)(XvY");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLException sQLException0 = new SQLException((String) null, (String) null, (-1172), (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) sQLException0);
      jsonMappingException0._appendPathDesc((StringBuilder) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (-1172));
      jsonMappingException_Reference0.getFieldName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 3, 0, false);
      readerBasedJsonParser0.getLastClearedToken();
      JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) null, 76);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.pWe");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, 0);
      jsonMappingException_Reference0._fieldName = "(ZmTSOlZl[K%p";
      jsonMappingException_Reference0._desc = "(ZmTSOlZl[K%p";
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFrom();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("r.W'7WA;*M", "r.W'7WA;*M", (-845));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(ZmTSOlZl[K%p");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) jsonMappingException_Reference0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      dataOutputStream0.writeLong(0);
      dataOutputStream0.writeUTF("1njc|GYhL");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) dataOutputStream0, (-845));
      jsonMappingException_Reference1.setIndex(0);
      jsonMappingException0.getPathReference();
      jsonMappingException0.getProcessor();
      jsonMappingException0.getProcessor();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "r.W'7WA;*M");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      // Undeclared exception!
      try { 
        typeFactory0.constructArrayType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RGFO(Z");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) mockPrintWriter0, (-1750));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1641);
      intArray0[1] = 0;
      intArray0[2] = 2048;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      batchUpdateException0.getNextException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 32767);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "Conflicting setter definitions for property \"%s\": %s vs %s";
      jsonMappingException_Reference0.setDescription("Conflicting setter definitions for property \"%s\": %s vs %s");
      jsonMappingException_Reference0.setFieldName("com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty");
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.getDescription();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.setDescription("");
      sQLTransientException0.spliterator();
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0.getPathReference(stringBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      objectMapper0.configure(jsonParser_Feature0, true);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "L>!", (Throwable) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("mRSx<g{\"hwQw.sj", "com.fasterxml.jackson.databind.cfg.ConfigOverride", (-32), hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("P%jsmO%9;{-", "P%jsmO%9;{-", (-32), sQLClientInfoException0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) byteArrayOutputStream0, (-32));
      Integer integer0 = new Integer((-879));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "com.fasterxml.jackson.databind.cfg.ConfigOverride");
      jsonMappingException_Reference0.setIndex((-879));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "ba^Vd");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException0.getStackTrace();
      jsonMappingException_Reference0.setIndex(18);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "ba^Vd");
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionException0.fillInStackTrace();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, "");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, 2196, 2196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("S_^yR");
      jsonMappingException0.getOriginalMessage();
      JsonMappingException jsonMappingException1 = new JsonMappingException("S_^yR", jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(jsonMappingException1);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.getOriginalMessage();
      String string0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) jsonMappingException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("UNKNOWN");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription("Y?%%y9e<Cun3SUe");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 1931);
      jsonMappingException_Reference1._index = 1931;
      jsonMappingException_Reference1.writeReplace();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference1.setIndex(1931);
      jsonMappingException_Reference0.setDescription("^y6+$F");
      jsonMappingException_Reference1.toString();
      jsonMappingException_Reference1._desc = "r_l\"b>p@z3%";
      jsonMappingException_Reference1.getFrom();
      jsonMappingException_Reference0.setDescription("DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("SPlsNy9b.zvlZ", " (through reference chain: ", (Throwable) null);
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      Class<JsonParserDelegate> class1 = JsonParserDelegate.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertNotNull(simpleType0);
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null, (Object) null, (Object) defaultSerializerProvider_Impl0);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertNotNull(arrayType0);
      
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) arrayType0);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasHandlers());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withValueHandler((Object) null);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasHandlers());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertNotNull(mapType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType1.equals((Object)mapType0));
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType1, simpleType0);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasHandlers());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertNotNull(referenceType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException(referenceType0, "UNKNOWN[?]", (String) null);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasHandlers());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals("UNKNOWN[?]", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      
      String string1 = invalidTypeIdException0.toString();
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasHandlers());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals("UNKNOWN[?]", invalidTypeIdException0.getTypeId());
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'UNKNOWN[?]' as a subtype of [reference type, class com.fasterxml.jackson.core.JsonProcessingException<com.fasterxml.jackson.core.util.JsonParserDelegate><[simple type, class com.fasterxml.jackson.core.util.JsonParserDelegate]>]", string1);
      assertNotNull(string1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setFieldName("PROPERTY");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("PROPERTY", jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("PROPERTY", jsonMappingException_Reference0.getFieldName());
      assertEquals("UNKNOWN[\"PROPERTY\"]", string0);
      assertNotNull(string0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      String string1 = "EncH]s_=jR";
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.findValueInstantiator(defaultDeserializationContext_Impl0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 39);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(bufferedInputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertFalse(fileDescriptor0.valid());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("java.io.BufferedInputStream[?]", string0);
      assertNotNull(string0);
      
      jsonMappingException_Reference0.setFieldName("W{9t@+/L'd");
      assertFalse(fileDescriptor0.valid());
      assertEquals("W{9t@+/L'd", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription("Unexpected IOException (of type %s): %s");
      assertFalse(fileDescriptor0.valid());
      assertEquals("W{9t@+/L'd", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser("m},#&");
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON");
      assertEquals("java.sql.SQLFeatureNotSupportedException: JSON", sQLFeatureNotSupportedException0.toString());
      assertEquals("JSON", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("JSON", "=+9wHgU0-1", (int[]) null, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: JSON", sQLFeatureNotSupportedException0.toString());
      assertEquals("JSON", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JSON", batchUpdateException0.getMessage());
      assertEquals("=+9wHgU0-1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: JSON", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON", batchUpdateException0);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "W{9t@+/L'd", (Throwable) jsonMappingException0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals("java.sql.SQLFeatureNotSupportedException: JSON", sQLFeatureNotSupportedException0.toString());
      assertEquals("JSON", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JSON", batchUpdateException0.getMessage());
      assertEquals("=+9wHgU0-1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: JSON", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      String string1 = jsonMappingException1.getPathReference();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals("java.sql.SQLFeatureNotSupportedException: JSON", sQLFeatureNotSupportedException0.toString());
      assertEquals("JSON", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JSON", batchUpdateException0.getMessage());
      assertEquals("=+9wHgU0-1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: JSON", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '';
      charArray0[2] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'F', '', 'J'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertEquals(3, charArray0.length);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'F', '', 'J'}, charArray0);
      
      jsonMappingException0.prependPath((Object) lineNumberReader0, 39);
      assertEquals(3, charArray0.length);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("java.sql.SQLFeatureNotSupportedException: JSON", sQLFeatureNotSupportedException0.toString());
      assertEquals("JSON", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JSON", batchUpdateException0.getMessage());
      assertEquals("=+9wHgU0-1", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: JSON", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertArrayEquals(new char[] {'F', '', 'J'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("savBw:oz-% fI|LlP", true);
      assertNotNull(mockFileWriter0);
      
      Writer writer0 = mockFileWriter0.append((CharSequence) "savBw:oz-% fI|LlP");
      assertNotNull(writer0);
      assertSame(mockFileWriter0, writer0);
      assertSame(writer0, mockFileWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0, 913);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(913, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, (-2421));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(913, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-2421), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      
      jsonMappingException_Reference1.setIndex((-882));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(913, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-882), jsonMappingException_Reference1.getIndex());
      assertSame(mockFileWriter0, writer0);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      
      jsonMappingException_Reference0.setIndex(913);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(913, jsonMappingException_Reference0.getIndex());
      assertSame(mockFileWriter0, writer0);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "5WKb");
      jsonMappingException0.getPathReference();
      StringReader stringReader0 = new StringReader("");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stringReader0, "5WKb");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((Writer) null);
      JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) jsonMappingException1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null);
      ObjectReader objectReader0 = objectMapper0._newReader(deserializationConfig1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectReader0, charsToNameCanonicalizer0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "'!/(+@R");
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "kUWz$*x[Z<", 0);
      String string0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      sQLIntegrityConstraintViolationException0.spliterator();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<InputStreamReader> class0 = InputStreamReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, "*5_~xR\"Kg/anUCE<*");
      sQLIntegrityConstraintViolationException0.initCause(jsonMappingException0);
      Class<MockFileWriter> class1 = MockFileWriter.class;
      defaultDeserializationContext_Impl0.weirdStringException((String) null, class1, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "withFilterId";
      JsonLocation jsonLocation0 = JsonLocation.NA;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Cannot deserialize instance of %s out of %s token", jsonLocation0, sQLFeatureNotSupportedException0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("FAIL_ON_NUMBERS_FOR_ENUMS", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", (String) null);
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = 'G';
      charArray0[2] = '^';
      charArray0[3] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayReader0);
      charArrayReader0.skip(2273L);
      int int0 = 95;
      jsonMappingException_Reference0.setIndex(95);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "&P|";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
