/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:35:27 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PipedWriter> class0 = PipedWriter.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",Xsm}?/tW~Cc(YJ/I");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, 910);
      Object object0 = jsonMappingException_Reference0.writeReplace();
      MockFile mockFile0 = new MockFile("JSON", ",Xsm}?");
      objectMapper0.writeValue((File) mockFile0, object0);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("3;>.S<R}>H-6s~RdJY");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) "3;>.S<R}>H-6s~RdJY", "3;>.S<R}>H-6s~RdJY");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonMappingException jsonMappingException2 = new JsonMappingException(byteArrayBuilder0, "3;>.S<R}>H-6s~RdJY", jsonMappingException1);
      jsonMappingException2.addSuppressed(jsonMappingException1);
      jsonMappingException2.getMessage();
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper();
      Class<PipedWriter> class0 = PipedWriter.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)3;
      ObjectMapper objectMapper2 = new ObjectMapper();
      objectMapper2.readerFor((JavaType) null);
      POJONode pOJONode0 = new POJONode((Object) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) pOJONode0, (int) (byte)89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.setIndex((-102));
      // Undeclared exception!
      try { 
        jsonMappingException1.prependPath((Object) "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("9");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      jsonMappingException_Reference0._desc = "";
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      jsonLocation0.toString();
      JsonMappingException jsonMappingException1 = new JsonMappingException(filteringParserDelegate0, "UNKNOWN", jsonLocation0);
      jsonMappingException1._buildMessage();
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
      
      JsonMappingException.from((JsonParser) null, "");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, ": ");
      JsonMappingException.from((JsonParser) filteringParserDelegate0, "`bg:4[N");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException2);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.toString();
      jsonLocation0.sourceDescription();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      jsonLocation0.toString();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "' of class ", jsonLocation0);
      jsonMappingException0._buildMessage();
      jsonMappingException0._buildMessage();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "zkmvfsq");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonLocation0, "");
      JsonMappingException jsonMappingException3 = JsonMappingException.from((JsonParser) null, ")");
      assertNotSame(jsonMappingException3, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("l)Z+.UO_K5:pWi");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "l)Z+.UO_K5:pWi");
      int[] intArray0 = new int[4];
      intArray0[0] = 787;
      intArray0[1] = 2;
      intArray0[2] = (-799);
      intArray0[3] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("l)Z+.UO_K5:pWi", "l)Z+.UO_K5:pWi", intArray0);
      MockIOException mockIOException0 = new MockIOException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Unexpected IOException (of type %s): %s", "(was ", (-799), jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      jsonMappingException0.toString();
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory1.disable(jsonFactory_Feature0);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(binaryNode0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", (Throwable) null);
      Integer integer0 = new Integer(130);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, 7);
      jsonMappingException_Reference0.getFrom();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper();
      Class<PipedWriter> class0 = PipedWriter.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",Xsm}?/tW~Cc(YJ/I");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      jsonMappingException_Reference0.writeReplace();
      MockFile mockFile0 = new MockFile(",Xsm}?", "tW~Cc(YJ/I");
      objectMapper0.writeValue((File) mockFile0, (Object) objectMapper1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)26;
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(binaryNode0);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeFactory0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Cannot find a deserializer for non-concrete Collection type ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 93, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures((byte) (-79), (-3263));
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      jsonMappingException0.getProcessor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParser_Feature0, "(was ");
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "JSON", (Throwable) jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1536);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      MockFile mockFile0 = new MockFile(".-e\"YoC7inFH");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) jsonMappingException1);
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): ", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonFactory0, 1536);
      String string1 = jsonMappingException_Reference1.getDescription();
      assertEquals("com.fasterxml.jackson.core.JsonFactory[1536]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory1.disable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException2 = new JsonMappingException(jsonParser0, "", jsonMappingException1);
      String string0 = jsonMappingException1.toString();
      String string1 = jsonMappingException2.getPathReference();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("=.g,v'%6tqR", (Throwable) null);
      sQLWarning0.spliterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "=.g,v'%6tqR");
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.setNextException(sQLInvalidAuthorizationSpecException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("=.g,v'%6tqR", 1000);
      jsonMappingException_Reference0.setDescription("=.g,v'%6tqR");
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      jsonMappingException0.toString();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, "com.fasterxml.jackson.databind.JsonMappingException: =.g,v'%6tqR (through reference chain: =.g,v'%6tqR)", (Throwable) sQLWarning0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      jsonFactory0.setCodec(objectMapper0);
      SQLDataException sQLDataException1 = new SQLDataException(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("java.sql.SQLDataException: com.fasterxml.jackson.databind.JsonMappingException: ", sQLDataException0.toString());
      
      jsonMappingException0._buildMessage();
      String string0 = jsonMappingException_Reference1.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)26;
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      objectMapper0.treeAsTokens(binaryNode0);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeFactory0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Cannot find a deserializer for non-concrete Collection type ");
      CharsToNameCanonicalizer.createRoot();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.node.POJONode", "JSON");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      String string0 = "KI'a<O wc@}1h4";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLDataException0.getMessage());
      
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[\"\"]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      JsonMappingException.from(jsonParser0, "$L)5gaU", (Throwable) sQLDataException0);
      assertEquals("java.sql.SQLDataException: com.fasterxml.jackson.databind.JsonMappingException: ", sQLDataException0.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@[/)Z", "KEb-?{ZCbEbRgz.B$");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "@[/)Z", (Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1536);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "", sQLFeatureNotSupportedException0);
      jsonMappingException0.prependPath((Object) sQLFeatureNotSupportedException0, "Trying to re-set self reference; old value = ");
      assertNull(sQLFeatureNotSupportedException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", (-917));
      JsonLocation jsonLocation0 = new JsonLocation(jsonMappingException_Reference0, (-917), (-917), (-917), (-730));
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      JavaType javaType0 = null;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.String with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[4];
      jsonNodeFactory0.binaryNode(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(mockFileWriter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON", jsonLocation0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: JSON\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException0._buildMessage();
      assertEquals("JSON\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: UNKNOWN[?]->UNKNOWN[?])", string1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory1.disable(jsonFactory_Feature0);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(binaryNode0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", (Throwable) null);
      JsonMappingException.from(jsonParser0, "true", (Throwable) sQLRecoverableException0);
      Integer integer0 = new Integer(130);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, 7);
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNotNull(object0);
      assertEquals(7, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: com.fasterxml.jackson.databind.JsonMappingException: ", sQLDataException0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1536);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "");
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("=.g,v'%6tqR", (Throwable) null);
      sQLWarning0.spliterator();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("=.g,v'%6tqR", 1000);
      jsonMappingException_Reference0.setDescription("=.g,v'%6tqR");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      jsonMappingException0.toString();
      jsonMappingException0.getPath();
      StringBuilder stringBuilder0 = new StringBuilder(1506);
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals("=.g,v'%6tqR", stringBuilder0.toString());
      assertEquals(1000, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("9");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "9");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, "KI'a<O wc@}1h4", (Throwable) jsonMappingException1);
      String string0 = jsonMappingException2.getLocalizedMessage();
      assertEquals("KI'a<O wc@}1h4", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string1 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string1);
      assertEquals("UNKNOWN[?]", string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      jsonMappingException_Reference0.setIndex(1536);
      jsonMappingException_Reference0.getDescription();
      assertEquals(1536, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(binaryNode0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) sQLRecoverableException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<PipedWriter> class0 = PipedWriter.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ",Xsm}?");
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ,Xsm}?", sQLDataException0.getMessage());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("JSON");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonParser0, "UNKNOWN[?]");
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("|+Z#<");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      mockPrintStream1.println(true);
      mockPrintStream1.println((-16842752));
      mockPrintStream1.print((-16842752));
      mockPrintStream0.checkError();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintStream1);
      JsonMappingException jsonMappingException0 = new JsonMappingException("|+Z#<");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "|+Z#<");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1536);
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLFeatureNotSupportedException0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1536);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) pushbackInputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("(was ");
      jsonMappingException_Reference0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper();
      Class<PipedWriter> class0 = PipedWriter.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",Xsm}?/tW~Cc(YJ/I");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl1.missingTypeIdException((JavaType) null, "$y");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "kbbdg{)(}_O%r#bXb|", (Throwable) sQLWarning0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("kbbdg{)(}_O%r#bXb|", string0);
      
      jsonMappingException0.getPathReference();
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0);
      jsonMappingException_Reference0.setFieldName("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("|+Z#<");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      mockPrintStream1.println(true);
      mockPrintStream1.print((-16842752));
      mockPrintStream0.checkError();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintStream1);
      jsonMappingException_Reference0.setIndex((-388));
      jsonMappingException_Reference0.getDescription();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler("org.evosuite.runtime.mock.java.io.MockPrintStream[?]");
      SimpleType simpleType0 = referenceType1.withTypeHandler(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType0, "|+Z#<", "org.evosuite.runtime.mock.java.io.MockPrintStream[?]");
      JsonMappingException jsonMappingException1 = new JsonMappingException("|+Z#<", jsonLocation0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(lineNumberReader0, 499);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(499, jsonMappingException_Reference0.getIndex());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 499);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(bufferedOutputStream0, 499);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      jsonMappingException_Reference1.getIndex();
      MockIOException mockIOException0 = new MockIOException("J9~y(P-1j");
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(lineNumberReader0, 499);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "08\"60");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DataInputStream> class0 = DataInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      Throwable throwable0 = null;
      jsonMappingException0.initCause((Throwable) null);
      jsonMappingException0.getPathReference();
      JavaType[] javaTypeArray0 = new JavaType[7];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      typeFactory0.constructMapType(class1, class0, class0);
      JsonParser jsonParser0 = null;
      // Undeclared exception!
      try { 
        JsonParserSequence.createFlattened(true, (JsonParser) null, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "");
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLDataException0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLDataException0.getMessage());
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("YJe'", "l", intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("YJe'", "");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.getProcessor();
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("YJe' (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[\"\"]->com.fasterxml.jackson.databind.JsonMappingException[\"\"])", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("=.g,v'%6tqR", (Throwable) null);
      sQLWarning0.spliterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=.g,v'%6tqR", (String) null, 0);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      sQLWarning0.setNextException(sQLInvalidAuthorizationSpecException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("=.g,v'%6tqR", 1000);
      jsonMappingException_Reference0.setDescription("=.g,v'%6tqR");
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      assertEquals(1000, jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: =.g,v'%6tqR (through reference chain: =.g,v'%6tqR)", string0);
      assertEquals(1000, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      objectMapper0.treeAsTokens(binaryNode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      File file0 = MockFile.createTempFile("6A8XWtgc", "L=7");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      jsonFactory0.createGenerator(file0, jsonEncoding0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('0');
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter1, "JSON");
      DataTruncation dataTruncation0 = new DataTruncation(4346, true, true, (byte)26, 147);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) dataTruncation0, (Object) jsonFactory1, (-1449));
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<PipedWriter> class0 = PipedWriter.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ",Xsm}?");
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("JSON");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext1.allocReadIOBuffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonMappingException.from(jsonParser0, "UNKNOWN[?]");
      String string0 = jsonMappingException1.getMessage();
      assertEquals("JSON (through reference chain: UNKNOWN[?])", string0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ,Xsm}?", sQLDataException0.getMessage());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      String string0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException(pushbackInputStream0, (String) null);
      pushbackInputStream0.available();
      jsonMappingException0.getPath();
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.RuntimeJsonMappingException", "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "Unexpected IOException (of type %s): %s");
      objectMapper0.writeValue((File) mockFile0, (Object) jsonMappingException1);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      jsonNodeFactory0.binaryNode((byte[]) null);
      // Undeclared exception!
      try { 
        objectMapper0.treeAsTokens((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)34;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.deser.DeserializationProblemHandler", "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler");
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException.from((JsonGenerator) null, "-S%Cvwg", (Throwable) sQLSyntaxErrorException0);
      jsonNodeFactory0.binaryNode(byteArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (Throwable) null);
      assertNull(sQLRecoverableException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1536);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "PaK", sQLRecoverableException0);
      StringBuilder stringBuilder0 = new StringBuilder(80);
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: N/A", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pushbackInputStream0, (String) null);
      pushbackInputStream0.available();
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      pipedInputStream0.close();
      jsonMappingException1._buildMessage();
      Object object0 = new Object();
      try { 
        pushbackInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0._index = 91;
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[91]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<PipedWriter> class0 = PipedWriter.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(",Xsm}?", "JSON");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(binaryNode0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) sQLRecoverableException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "5^?ucK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._desc = "";
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.toString();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("E9", "E9");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "3QdG7t6F$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = true;
      DataTruncation dataTruncation0 = new DataTruncation((-3808), true, true, (-3808), (-3808));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, dataTruncation0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintStream) mockPrintStream1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) sQLInvalidAuthorizationSpecException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, (-3808));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (-9999));
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "", (Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(beanDeserializerFactory0, "|-Ve9)+T5");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(jsonMappingException_Reference0, "|-Ve9)+T5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLException sQLException0 = new SQLException("QCMb7%:yz[$KFBH|`", "QCMb7%:yz[$KFBH|`", 1000);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 593);
      byteArrayBuilder0.appendThreeBytes(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeBytes("QCMb7%:yz[$KFBH|`");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) objectOutputStream0, "QCMb7%:yz[$KFBH|`");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "QCMb7%:yz[$KFBH|`");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileReader0);
      jsonMappingException_Reference0.setDescription("QCMb7%:yz[$KFBH|`");
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      jsonMappingException0.prependPath((Object) lineNumberReader0, 41);
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("-dS<00", "-t&E!s/%)kvw", 2);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "-dS<00", (Throwable) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "Access to deprecated filters not supported", (Throwable) sQLFeatureNotSupportedException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "?rlK\"qRjEs UEq0_,G");
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (Throwable) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(jsonMappingException0);
      jsonMappingException0.addSuppressed(sQLNonTransientException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._desc = null;
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators((ValueInstantiators) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      String string0 = "";
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "");
      mockPrintWriter0.append((CharSequence) "");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      StringBuilder stringBuilder0 = new StringBuilder(91);
      mockPrintWriter0.println(0);
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      stringBuilder1.codePoints();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(41, (Object) stringWriter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 41
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("@,YunrE]Z%H~tU.bv");
      StringBuilder stringBuilder0 = new StringBuilder("@,YunrE]Z%H~tU.bv");
      double double0 = 2128.3;
      stringBuilder0.append((-483.6F));
      // Undeclared exception!
      try { 
        stringBuilder0.insert(340, 0.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 340
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(": ");
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TypeReference<ReaderBasedJsonParser> typeReference0 = (TypeReference<ReaderBasedJsonParser>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 115);
      sQLTimeoutException0.getSuppressed();
      mockIOException0.addSuppressed(sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException0.getProcessor();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLTimeoutException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, bufferedReader0, objectReader0, (CharsToNameCanonicalizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("|+Z#<");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      mockPrintStream0.checkError();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintStream1);
      jsonMappingException_Reference0.setIndex((-388));
      jsonMappingException_Reference0.getDescription();
      assertEquals((-388), jsonMappingException_Reference0.getIndex());
  }
}
