/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 23:57:17 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "cj0Y9pa$V}/";
      MockFile mockFile1 = new MockFile(mockFile0, "cj0Y9pa$V}/");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "cj0Y9pa$V}/");
      ObjectMapper objectMapper0 = new ObjectMapper();
      try { 
        objectMapper0.valueToTree((Object) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absolute\"])
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) mockIOException0, "");
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = null;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      Throwable throwable0 = null;
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, (String) null, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      MockIOException mockIOException0 = new MockIOException("");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.traverse();
      MockThrowable mockThrowable0 = new MockThrowable("Ixzu[(C\"(\"");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockThrowable0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Ixzu[(C\"(\"", "Ixzu[(C\"(\"", 49, sQLSyntaxErrorException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(arrayNode0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON", (Throwable) sQLSyntaxErrorException0);
      jsonMappingException0._buildMessage();
      jsonMappingException0._buildMessage();
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      SQLException sQLException0 = new SQLException("Ixzu[(C\"(\"", "};5#$>dD[");
      JsonMappingException.wrapWithPath((Throwable) sQLException0, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      MissingNode.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">Ra--Pem^>>fV{x&5y");
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) jsonNodeFactory0, 31);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "R:fE<*JV`fb$$~3S3", (Throwable) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLRecoverableException0);
      jsonMappingException_Reference1.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("BjGee", (JsonLocation) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("BjGee");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLRecoverableException0);
      jsonMappingException0.getMessage();
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer.getInteger("kQc{8Y");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      MockIOException mockIOException0 = new MockIOException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) mockIOException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      jsonMappingException0.getPathReference((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("h|", "h|", 4201);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, 4201);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTransactionRollbackException0, 4201);
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      jsonMappingException0.clearLocation();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0);
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "|B&h'\\uu%\"nZ1PF";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0, "");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, string0, (Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0);
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringBuilder stringBuilder0 = new StringBuilder();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "Ud .Z?_yR", "N!y}X");
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "uU>Cyzjp-Eg\"xi");
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-2250), (-2250));
      objectReader0._considerFilter(jsonParser0, false);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, (-2250));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer.getInteger("1j jF^");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0, "expected closing END_OBJECT after type information and deserialized value");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(bufferedOutputStream0, 581);
      jsonMappingException_Reference1.getDescription();
      jsonMappingException_Reference1.getDescription();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "com.fasterxml.jackson.core.io.InputDecorator", (Throwable) null);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      StringWriter stringWriter0 = new StringWriter(2);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedWriter0, "p,e1o");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(bufferRecycler0, "");
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", mockThrowable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference1);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLInvalidAuthorizationSpecException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      jsonMappingException_Reference0.setFieldName("< mlk#A)");
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer.getInteger("1j jF^");
      String string0 = "6y";
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      String string1 = "";
      MockIOException mockIOException0 = new MockIOException("");
      JsonMappingException.from(jsonParser0, "6y", (Throwable) mockIOException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string2 = "";
      Object[] objectArray0 = new Object[0];
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) mockIOException0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      SQLException sQLException0 = new SQLException("", "", 38);
      MockIOException mockIOException0 = new MockIOException("", sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 262144, mockIOException0);
      MockIOException mockIOException1 = new MockIOException(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("e<D]r", mockIOException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) sQLTransientConnectionException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) jsonMappingException1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(38);
      Class<Throwable> class0 = Throwable.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Throwable with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer.getInteger("1j jF^");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "6y");
      jsonMappingException_Reference0.setFieldName("1j jF^");
      assertEquals("1j jF^", jsonMappingException_Reference0.getFieldName());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "1j jF^", false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BufferedReader> class0 = BufferedReader.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 2, dataInputStream0, objectReader0, (ByteQuadsCanonicalizer) null, 1);
      Class<FilterOutputStream> class1 = FilterOutputStream.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8DataInputJsonParser0, (Class<?>) class1, jsonToken0, "6y");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "1j jF\\^";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[]");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-99);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Integer.getInteger("1j jF^");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      MockIOException mockIOException0 = new MockIOException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "6y", (Throwable) mockIOException0);
      jsonNodeFactory0.numberNode(352.42583);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      jsonMappingException0.getProcessor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[]");
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(mockFileOutputStream0, "[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 0, 0);
      objectReader0._considerFilter(jsonParser0, false);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Unexpected IOException (of type %s): %s", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonNodeFactory0, "=/L(\"w=Irnjy]2ByM");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.spliterator();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) sQLRecoverableException0, "UM\"6~C4X-");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UM\"6~C4X-", "UM\"6~C4X-", 16, jsonMappingException0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jsonMappingException0.addSuppressed(sQLTransactionRollbackException0);
      StackTraceElement[] stackTraceElementArray0 = jsonMappingException0.getStackTrace();
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, "no long/Long-argument constructor/factory method to deserialize from Number value (%s)");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, "UM\"6~C4X-");
      jsonMappingException2.setStackTrace(stackTraceElementArray0);
      jsonMappingException0.getOriginalMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1, "(was java.sql.SQLRecoverableException) (through reference chain: java.sql.SQLRecoverableException[\"UM\"6~C4X-\"])");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException0, 16);
      jsonMappingException_Reference0._from = (Object) jsonMappingException_Reference1;
      jsonMappingException_Reference0.getDescription();
      jsonMappingException1.printStackTrace();
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) "(was java.sql.SQLRecoverableException)", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("844C3 rahRXdkb@s9m!", "844C3 rahRXdkb@s9m!", (-1884));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException_Reference0.getFieldName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) pushbackInputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0, "expected closing END_OBJECT after type information and deserialized value");
      String string0 = "";
      String string1 = null;
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 0, 0);
      SQLException sQLException0 = new SQLException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "JSON", (-987), sQLException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON", sQLTransientConnectionException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0, 0);
      jsonMappingException_Reference0.getDescription();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonLocation jsonLocation0 = jsonParserDelegate0.getCurrentLocation();
      JsonMappingException jsonMappingException1 = new JsonMappingException(pipedWriter0, "", jsonLocation0);
      jsonMappingException1.toString();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JQu", (Throwable) jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ud .Z?_yR", "Ud .Z?_yR", 4175);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) "Ud .Z?_yR", 4175);
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals("java.lang.String[4175]", stringBuilder0.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.sql.SQLTransactionRollbackException[?]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer.getInteger("1j jF^");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0, "expected closing END_OBJECT after type information and deserialized value");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      jsonMappingException_Reference1.writeReplace();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", mockThrowable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference1);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      String string0 = jsonMappingException_Reference1.getFieldName();
      assertEquals("", string0);
      assertNotNull(string0);
      
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "expected closing END_OBJECT after type information and deserialized value");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals(2, list0.size());
      
      String string1 = jsonMappingException0.getPathReference();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException[\"expected closing END_OBJECT after type information and deserialized value\"]->com.fasterxml.jackson.databind.JsonMappingException$Reference[\"\"]", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer.getInteger("1j jF^");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0, "expected closing END_OBJECT after type information and deserialized value");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      jsonMappingException_Reference1.writeReplace();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", mockThrowable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference1);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      String string0 = jsonMappingException_Reference1.getFieldName();
      assertEquals("", string0);
      assertNotNull(string0);
      
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "expected closing END_OBJECT after type information and deserialized value");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(2, list0.size());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "n>");
      List<JsonMappingException.Reference> list1 = jsonMappingException1.getPath();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("fl.O}YEXkG");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) mockFileOutputStream0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "fl.O}YEXkG");
      mockFileOutputStream0.release();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("3|sdxT1BF,", (Map<String, ClientInfoStatus>) null, sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, ";)O<", sQLClientInfoException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("fl.O}YEXkG", 10);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.toString();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(pipedInputStream0, "3|sdxT1BF,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer.getInteger("1j jF^");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("1j jF^", "", (-3217));
      SQLWarning sQLWarning0 = new SQLWarning("1j jF^", "", sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("1j jF^", "1j jF^", hashMap0, sQLWarning0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("k9x;peBv%v", true);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) mockFileWriter0, (-3217));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      jsonMappingException0.printStackTrace((PrintWriter) mockPrintWriter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "", (Throwable) sQLClientInfoException0);
      jsonMappingException1.getLocalizedMessage();
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("1j jF^ (through reference chain: org.evosuite.runtime.mock.java.io.MockFileWriter[?])", string0);
      
      MockIOException mockIOException0 = new MockIOException("k9x;peBv%v", jsonMappingException0);
      JsonMappingException.fromUnexpectedIOE(mockIOException0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.isEmpty());
      
      String string1 = jsonMappingException1._buildMessage();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer.getInteger("1j jF^");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLException sQLException0 = new SQLException(sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cannot pass null fieldName", "rw)H", 3962);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Cannot pass null fieldName");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0, "ALLOW_SINGLE_QUOTES");
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals("ALLOW_SINGLE_QUOTES", string0);
      
      jsonMappingException0.prependPath((Object) mockFileWriter0, "|P");
      jsonMappingException1.getPath();
      jsonMappingException1.getProcessor();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 2566);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      // Undeclared exception!
      try { 
        jsonMappingException1.printStackTrace((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer.getInteger("1j jF^");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("uZl?*zQYIzt m", "1j jF^", 31);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "~K{ghKN]D&Ag003", (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("UTF32_LE", "UTF32_LE", sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("UTF32_LE", "P[4_?qYY", 123, sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException1, (Object) sQLNonTransientConnectionException0, "UTF32_LE");
      jsonMappingException0.fillInStackTrace();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.valueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "P[4_?qYY", (Throwable) sQLIntegrityConstraintViolationException1);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, "Cannot construct SimpleType for a Collection (class: ", (Throwable) sQLFeatureNotSupportedException0);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      jsonMappingException1.prependPath((Object) mockFileInputStream0, 123);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      jsonMappingException_Reference0.setDescription(": ");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertEquals(": ", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("UTF32_LE", "UTF32_LE", sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("UTF32_LE", "P[4_?qYY", 123, sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException1, (Object) sQLNonTransientConnectionException0, "UTF32_LE");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "P[4_?qYY", (Throwable) sQLIntegrityConstraintViolationException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("844C3 rahRXdkb@s9m!", "844C3 rahRXdkb@s9m!", (-1884));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      Throwable throwable0 = sQLFeatureNotSupportedException0.fillInStackTrace();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (-1884), 0);
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      JsonMappingException.from(jsonParser1, "");
      JsonMappingException.from((JsonParser) null, "844C3 rahRXdkb@s9m!", (Throwable) jsonMappingException0);
      JsonMappingException.wrapWithPath(throwable0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, "844C3 rahRXdkb@s9m!");
      jsonMappingException_Reference0.setIndex((-463));
      assertEquals((-463), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("844C3 rahRXdkb@s9m!", "844C3 rahRXdkb@s9m!", (-1884));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      Throwable throwable0 = sQLFeatureNotSupportedException0.fillInStackTrace();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) throwable0, (-1884));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      jsonMappingException1.printStackTrace((PrintWriter) mockPrintWriter0);
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): 844C3 rahRXdkb@s9m! (through reference chain: UNKNOWN[?])", string0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("844C3 rahRXdkb@s9m! (through reference chain: java.sql.SQLFeatureNotSupportedException[?]->UNKNOWN[?])", string1);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(jsonMappingException2);
      jsonMappingException3.getPath();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("844C3 rahRXdkb@s9m!", "844C3 rahRXdkb@s9m!", (-1884));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[0];
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory1, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectReader0, byteQuadsCanonicalizer0, byteArray0, 1943, 1058, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8StreamJsonParser0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ObjectMapper objectMapper1 = new ObjectMapper();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, 33, dataInputStream0, objectMapper0, (ByteQuadsCanonicalizer) null, 2);
      JsonLocation jsonLocation0 = uTF8DataInputJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException2 = new JsonMappingException(uTF8DataInputJsonParser0, "BqJY8*e~*yT~-0", jsonLocation0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 0, 0);
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      String string0 = "";
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.AbstractTypeResolver", (Throwable) jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(jsonParser1, jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "'H5V#>za";
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)13;
      byte byte1 = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, (byte)125, dataInputStream0, objectMapper0, (ByteQuadsCanonicalizer) null, 152);
      JsonLocation jsonLocation0 = uTF8DataInputJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "'H5V#>za", jsonLocation0);
      jsonMappingException0.getMessage();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "'H5V#>za");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"'H5V#>za\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, (byte)125, dataInputStream0, objectMapper0, (ByteQuadsCanonicalizer) null, 152);
      JsonLocation jsonLocation0 = uTF8DataInputJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "'H5V#>za", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "g]5+;x w";
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "g]5+;x w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "com.fasterxml.jackson.databind.JsonMappingException");
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      textStyle0.asNormal();
      TextStyle.values();
      jsonMappingException0.prependPath((Object) textStyle0, "com.fasterxml.jackson.databind.JsonMappingException");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(simpleAbstractTypeResolver0, ",");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, (-217), (-217));
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "UNKNOWN");
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackson.databind.deser.BeanDeserializerBase");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.FULL;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(textStyle0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.time.format.TextStyle[?]", string0);
      assertNotNull(string0);
      
      jsonMappingException_Reference0.getFrom();
      int[] intArray0 = new int[2];
      textStyle0.asStandalone();
      intArray0[0] = 70;
      intArray0[1] = 4;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", ":~Fr<P@6W", intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      sQLTransientConnectionException0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) jsonMappingException_Reference0, 0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.isEmpty());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-2599));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, (-2599));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "{UDb]9O'!*SF^@@Ot$K");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[0]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      bufferedInputStream0.available();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedInputStream0, 255);
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNotNull(object0);
      assertEquals(255, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("^zskv@Vn7jXlV", "^zskv@Vn7jXlV", (-4363));
      SQLWarning sQLWarning0 = new SQLWarning("^zskv@Vn7jXlV", sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLInvalidAuthorizationSpecException0, (-4363));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      jsonMappingException0.printStackTrace((PrintWriter) mockPrintWriter0);
      jsonMappingException0.getLocalizedMessage();
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("^zskv@Vn7jXlV (through reference chain: java.sql.SQLInvalidAuthorizationSpecException[?])", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, "");
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setFieldName("");
      MockIOException mockIOException0 = new MockIOException("o(%0XcP");
      JsonMappingException.fromUnexpectedIOE(mockIOException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)51;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1, (byte)51, (byte)51);
      byteArrayInputStream1.close();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute((Object) null, byteArrayInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.writeReplace();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3470);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("com.fasterxml.jackson.databind.JsonMappingException$Reference", (-3231L), 1466, 1466);
      MockIOException mockIOException0 = new MockIOException("(6}z<}nn-k+86");
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference", jsonLocation0, mockIOException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "(6}z<}nn-k+86");
      jsonMappingException0.getPath();
      jsonMappingException0.toString();
      jsonMappingException0._buildMessage();
      jsonMappingException1.getPathReference();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1910));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-2501);
      JsonLocation jsonLocation0 = new JsonLocation("", 0L, (-2501), 0);
      DataTruncation dataTruncation0 = new DataTruncation((-2501), true, false, 4000, 0);
      dataTruncation0.getNextWarning();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, (Throwable) null);
      jsonLocation0.toString();
      String string0 = "";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      invalidFormatException0.prependPath((Object) beanDeserializerFactory0, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) invalidFormatException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null, (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "8vQy GpZ;g:REB");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "8vQy GpZ;g:REB");
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'M';
      charArray0[2] = 'E';
      charArray0[3] = '\"';
      stringBuilder0.insert(0, charArray0, 0, 0);
      jsonMappingException0.getPathReference(stringBuilder0);
      StringReader stringReader0 = new StringReader("8vQy GpZ;g:REB");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, 41);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals(41, int0);
      
      jsonMappingException_Reference0.writeReplace();
      assertEquals(41, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("844C3 rahRXdkb@s9m!", "844C3 rahRXdkb@s9m!", (-1884));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (-1884), 0);
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      JsonMappingException.from(jsonParser1, "");
      JsonMappingException.from((JsonParser) null, "844C3 rahRXdkb@s9m!", (Throwable) jsonMappingException0);
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, "844C3 rahRXdkb@s9m!");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 256);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      jsonMappingException0.getStackTrace();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.getCause();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      jsonMappingException0.getPath();
      jsonMappingException_Reference0.getFieldName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 256);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<ArrayDeque> class0 = ArrayDeque.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        typeFactory1.constructCollectionType((Class<? extends Collection>) class0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1151170407) return null for type $1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.deser.UnresolvedForwardReference";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "com.fasterxml.jackson.databind.deser.UnresolvedForwardReference");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      sQLWarning0.spliterator();
      pipedInputStream0.mark(0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedOutputStream0, 1674);
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null KeyDeserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }
}
