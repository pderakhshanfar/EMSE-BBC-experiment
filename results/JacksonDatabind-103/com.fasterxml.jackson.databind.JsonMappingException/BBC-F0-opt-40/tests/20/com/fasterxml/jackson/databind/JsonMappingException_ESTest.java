/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:49:25 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.temporal.ChronoField;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(769);
      jsonMappingException_Reference0._index = 769;
      jsonMappingException_Reference0.toString();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "o$");
      jsonMappingException0.getLocalizedMessage();
      System.setCurrentTimeMillis(0L);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "UNKNOWN[\"\"]", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) "", "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(91);
      Class<UTF8StreamJsonParser> class1 = UTF8StreamJsonParser.class;
      try { 
        objectMapper0.convertValue((Object) objectReader0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectReader[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"])
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2971);
      intArray0[1] = (-843);
      intArray0[2] = 448;
      intArray0[3] = 2;
      intArray0[4] = (-48);
      intArray0[5] = 91;
      intArray0[6] = 330;
      intArray0[7] = 460;
      SQLException sQLException0 = new SQLException((String) null, (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException1, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "(was ", "");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      jsonMappingException_Reference0.getDescription();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, (String) null, (Throwable) jsonMappingException0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "Unexpected IOException of type %s): %s", "Unexpected IOException of type %s): %s");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      String string0 = "";
      int int0 = 29;
      boolean boolean0 = false;
      int int1 = 2234;
      int int2 = (-13);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserSequence0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("rU)ycH#");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("rU)ycH#");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer", 181);
      jsonMappingException1.getMessage();
      jsonMappingException1.prependPath((Object) defaultDeserializationContext_Impl0, (-988));
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, (-988));
      Stack<JsonMappingException.Reference> stack0 = new Stack<JsonMappingException.Reference>();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      jsonMappingException0.prependPath((Object) chronoField0, "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      jsonMappingException_Reference0.setIndex((-988));
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("PeAQ#|Ijz5", "UNKNOWN[?]");
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) defaultDeserializationContext_Impl0, "");
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) "UNKNOWN[?]", "");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      ChronoField chronoField1 = ChronoField.PROLEPTIC_MONTH;
      StringReader stringReader0 = new StringReader("PeAQ#|Ijz5");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) stringReader0, (-988));
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) null, "no suitable creator method found to deserialize from Number value (%s)");
      // Undeclared exception!
      try { 
        jsonMappingException4.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Stack<JsonMappingException.Reference> stack0 = new Stack<JsonMappingException.Reference>();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      jsonMappingException_Reference0.setIndex((-988));
      jsonMappingException_Reference0._desc = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("PeAQ#|Ijz5", (String) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ChronoField chronoField1 = ChronoField.PROLEPTIC_MONTH;
      IOContext iOContext0 = new IOContext(bufferRecycler0, chronoField1, false);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLNonTransientException0);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "Q", "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer", (-3805));
      jsonMappingException1.getMessage();
      jsonMappingException1.prependPath((Object) defaultDeserializationContext_Impl0, (-988));
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, (-988));
      Stack<JsonMappingException.Reference> stack0 = new Stack<JsonMappingException.Reference>();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      jsonMappingException0.prependPath((Object) chronoField0, "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      jsonMappingException_Reference0.setIndex((-3425));
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.ser.impl.IteratorSerializer", "Cannot deserialize Map key of type `java.io.CharArrayReader` from String \"Q\": com.fasterxml.jackson.databind.ser.impl.IteratorSerializer (through reference chain: java.lang.String[?])");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) stack0, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) null, "PeAQ#|Ijz5");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "Cannot deserialize Map key of type `java.io.CharArrayReader` from String \"Q\": com.fasterxml.jackson.databind.ser.impl.IteratorSerializer (through reference chain: java.lang.String[?])");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer", 181);
      jsonMappingException1.getMessage();
      jsonMappingException1.prependPath((Object) defaultDeserializationContext_Impl0, (-988));
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, (-988));
      Stack<JsonMappingException.Reference> stack0 = new Stack<JsonMappingException.Reference>();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      jsonMappingException0.prependPath((Object) chronoField0, "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      jsonMappingException_Reference0.setIndex((-988));
      jsonMappingException_Reference0._desc = null;
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("PeAQ#|Ijz5", "");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) bufferRecycler0, "PeAQ#|Ijz5");
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      jsonMappingException2.getPath();
      jsonMappingException2.getLocalizedMessage();
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException2.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Stack<JsonMappingException.Reference> stack0 = new Stack<JsonMappingException.Reference>();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Qc");
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      jsonMappingException_Reference0.setIndex((-988));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("x", "*`u@k&>");
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("MODIFIED-FOR-URL", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonParser jsonParser0 = null;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      String string0 = "oP";
      int[] intArray0 = new int[1];
      int int0 = 4096;
      intArray0[0] = 4096;
      SQLWarning sQLWarning0 = new SQLWarning("mk6a1`ZFjJH0p", "mk6a1`ZFjJH0p");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("dc4$_ByE=DZ7Mb~$^g", "dc4$_ByE=DZ7Mb~$^g", intArray0, sQLWarning0);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserSequence0, "dc4$_ByE=DZ7Mb~$^g", batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("no default no-arguments constructor found", true);
      mockFileOutputStream0.release();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      tokenFilterContext0.pathAsPointer(true);
      tokenFilterContext0.skipParentChecks();
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation("no default no-arguments constructor found");
      mockFileOutputStream0.release();
      mockFileOutputStream0.release();
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "no default no-arguments constructor found", jsonLocation0);
      jsonMappingException0.getPath();
      mockFileOutputStream0.flush();
      mockFileOutputStream0.getChannel();
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonLocation0, 1000);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getProcessor();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte) (-14);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(true, (JsonParser) jsonParserSequence0, jsonParser0);
      jsonParserSequence1.skipChildren();
      JsonParser jsonParser1 = jsonFactory0.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser1, "JSON", (Throwable) sQLTransientException0);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLDataException sQLDataException0 = new SQLDataException("", "JSON", 2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null, (Throwable) sQLTransientException0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2031);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "", sQLTransientException0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer", 181);
      jsonMappingException1.getMessage();
      jsonMappingException1.prependPath((Object) defaultDeserializationContext_Impl0, (-1003));
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, (-1003));
      Stack<JsonMappingException.Reference> stack0 = new Stack<JsonMappingException.Reference>();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex((-1003));
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StackTraceElement stackTraceElement0 = new StackTraceElement("0lE", "Cannot deserialize Map key of type `java.io.CharArrayReader` from String \"\": com.fasterxml.jackson.databind.ser.impl.IteratorSerializer (through reference chain: java.lang.String[181])", "", 1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) bufferRecycler0, "");
      defaultDeserializationContext_Impl0.getParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "", (Throwable) jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      Class<CharArrayReader> class0 = CharArrayReader.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "T", "T");
      int int0 = 181;
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) deserializers_Base0, 181);
      jsonMappingException1.getMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = null;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, true, false);
      InvalidFormatException invalidFormatException0 = new InvalidFormatException(jsonParser0, "", filteringParserDelegate0, class0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = "";
      String string1 = "<\\CbX\"";
      int int0 = 3047;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.INSTANT_SECONDS;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(chronoField0, "R");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jsonMappingException_Reference0._index = (-2948);
      jsonMappingException_Reference0.getDescription();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      LongNode longNode0 = new LongNode(0L);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) longNode0, (int) (byte)13);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("(was java.sql.SQLFeatureNotSupportedException) (through reference chain: com.fasterxml.jackson.databind.node.LongNode[13])", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)25;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N5");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "9;2Dk(\"%QU8^([78V");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9;2Dk(\"%QU8^([78V", "N5");
      PipedReader pipedReader0 = new PipedReader(2);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) pipedReader0, "9;2Dk(\"%QU8^([78V");
      jsonMappingException0.getMessage();
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.from((JsonParser) null, "9;2Dk(\"%QU8^([78V");
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "1PL\"&}WSj";
      JsonLocation jsonLocation0 = new JsonLocation("1PL\"&}WSj", (-848), (-848), 41, 41);
      JsonMappingException jsonMappingException0 = new JsonMappingException("1PL\"&}WSj", jsonLocation0);
      jsonLocation0.toString();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("1PL\"&}WSj", "", (-848), jsonMappingException0);
      jsonLocation0.sourceDescription();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonLocation0, 869);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-82);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.skipChildren();
      JsonMappingException.from(jsonParser1, "V(0||#`r@", (Throwable) jsonMappingException0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("irRjFd5xXE^A~jU");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "'", "irRjFd5xXE^A~jU");
      jsonMappingException0._buildMessage();
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("irRjFd5xXE^A~jU");
      Object object0 = new Object();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, object0, "");
      StringBuilder stringBuilder0 = new StringBuilder(1000);
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      jsonMappingException0.getPathReference(stringBuilder1);
      assertEquals("java.lang.Object[\"\"]java.lang.Object[\"\"]", stringBuilder1.toString());
      assertEquals("java.lang.Object[\"\"]java.lang.Object[\"\"]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "LopHGF=o";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string1 = "";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("LopHGF=o", "", hashMap0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "LopHGF=o", (Throwable) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("irRjFd5xXE^A~jU", "irRjFd5xXE^A~jU");
      Object object0 = new Object();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      jsonParserSequence0.nextToken();
      JsonMappingException.from((JsonGenerator) null, "]");
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "r2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) class0, (-2524));
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("");
      File file0 = MockFile.createTempFile("vKP^BUM", "wO6");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      JsonMappingException.from(jsonGenerator0, "@n4T8=F)p^#4qy)Ks3", (Throwable) sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "@n4T8=F)p^#4qy)Ks3");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("@n4T8=F)p^#4qy)Ks3", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getFieldName();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(2, list0.size());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("oOkUh?N", (JsonLocation) null);
      jsonMappingException0.getMessage();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jsonMappingException0.getLocalizedMessage();
      System.setCurrentTimeMillis((-4371L));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = "0`";
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PipedWriter pipedWriter0 = new PipedWriter();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 10;
      longArray0[4] = (long) 10;
      MockIOException mockIOException0 = new MockIOException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("2->mje8GDy:fiCJU", "2->mje8GDy:fiCJU", 10, longArray0, mockIOException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, ",Er0RSgZ<.Zn!G", 10, batchUpdateException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, ",Er0RSgZ<.Zn!G", sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value", "com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value");
      jsonMappingException0.fillInStackTrace();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      Object object0 = new Object();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 108);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "$CTj", 63);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("$CTj", "mTw-s9Ok&22w(", "mTw-s9Ok&22w(", 91);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("$CTj", "[]", "", 2003);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("$CTj", "mTw-s9Ok&22w(", "", 2003);
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) pipedOutputStream0, "E(5K`2%vr*6Ce");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "UNKNOWN[?]", "", (-3670));
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "UNKNOWN[?]", (-3670));
      jsonMappingException0.getPath();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, 181);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("DO", "DO", 380, hashMap0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("DO", (-2686));
      jsonMappingException_Reference0.getDescription();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 380);
      StackTraceElement stackTraceElement1 = new StackTraceElement("cannot deserialize from Object value (no delegate- or property-based Creator)", "[no message for ", "L=HVc ,3f,UP#n0B67+", 380);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("sI+^5oFK|_y)", "DO", (String) null, 1676);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      jsonMappingException0.getProcessor();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "[no message for ", (Throwable) jsonMappingException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("DO (through reference chain: java.lang.String[?])", string0);
      assertEquals((-2686), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      String string0 = "";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer", 181);
      jsonMappingException1.getMessage();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      int int0 = (-1003);
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, (-1003));
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(1714);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(deserializerFactory0, 181);
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer", 181);
      jsonMappingException1.getMessage();
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      jsonMappingException0.prependPath((Object) list0, 181);
      jsonMappingException0.getPathReference();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "java.util.Collections$UnmodifiableList[181]->java.lang.String[181]");
      assertNotNull(jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "com.fasterxml.jackson.databind.ser.impl.IteratorSerializer");
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.ser.impl.IteratorSerializer", "w:ec) ", "[no message for ", 65599);
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "w:ec) ", 65599);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.ser.impl.IteratorSerializer", "w:ec) ");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, 2);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl1, "`MP8CQM|'iiIX");
      Object object0 = jsonMappingException1.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 380, hashMap0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", (-2686));
      jsonMappingException_Reference0.getDescription();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 380);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("cannot deserialize from Object value (no delegate- or property-based Creator)", "[no message for ", "L=HVc ,3f,UP#n0B67+", 380);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("sI+^5oFK|_y)", "", "%Oe_9", 1676);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      jsonMappingException0.getProcessor();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "[no message for ", (Throwable) jsonMappingException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("(was java.sql.SQLClientInfoException) (through reference chain: java.lang.String[?])", string0);
      assertEquals((-2686), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      JsonMappingException.from((JsonParser) null, "o((:V%f`1{,%38m}G[7", (Throwable) sQLWarning0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M0l5", "");
      JsonMappingException.from((JsonParser) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, ")");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) serializerProvider0, 4000);
      jsonMappingException0.getMessage();
      List<JsonMappingException.Reference> list0 = new Stack<JsonMappingException.Reference>();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference1.getFieldName();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      String string0 = jsonMappingException1._buildMessage();
      assertEquals(") (through reference chain: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[4000])", string0);
      
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("H6{/7", "com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLDataException0);
      StringReader stringReader0 = new StringReader("' (code ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 63);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pushbackReader0, 63);
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      pushbackReader0.read();
      lineNumberReader1.markSupported();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(lineNumberReader1);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      LineNumberReader lineNumberReader2 = new LineNumberReader(lineNumberReader1);
      jsonMappingException0.prependPath((Object) lineNumberReader2, " (through reference chain: ");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory2.configure(jsonFactory_Feature0, true);
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("H6{/7", "com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      hashMap1.put("H6{/7", clientInfoStatus0);
      int int0 = 63;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "|PEw2R.MdqGtx>Z", 63, hashMap0);
      int int1 = (-2686);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("|PEw2R.MdqGtx>Z", 91);
      jsonMappingException_Reference0.getDescription();
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator", "swC`@-\"5o]cr'1D", "java.lang.String[91]", 65535);
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "L=HVc ,3f,UP#n0B67+", 91);
      String string0 = "\n";
      StackTraceElement stackTraceElement2 = null;
      try {
        stackTraceElement2 = new StackTraceElement("Fg", (String) null, "\n", 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-189), objectMapper0, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(")", "Unexpected IOException (of type %s): %s", (-806));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(")", "valueOf", sQLTransactionRollbackException0);
      SQLException sQLException0 = new SQLException(sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) sQLException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLException sQLException0 = new SQLException("", "o((:V%f`1{,%38m}G[7", 2);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "o((:V%f`1{,%38m}G[7", (Throwable) sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("o((:V%f`1{,%38m}G[7", jsonMappingException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransactionRollbackException0);
      sQLTransientException0.getStackTrace();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "o((:V%f`1{,%38m}G[7", (Throwable) sQLTransientException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) defaultDeserializationContext_Impl0, "");
      String string0 = "M0l5";
      String string1 = "";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M0l5", "");
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) "o((:V%f`1{,%38m}G[7", "");
      JsonMappingException.from((JsonParser) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1000;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      // Undeclared exception!
      try { 
        filteringParserDelegate0.getCodec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      jsonMappingException0.toString();
      jsonMappingException0.getCause();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      int int0 = 413;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(413);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeBindings typeBindings0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setFieldName("n./jk?Q~\"r(HzGOU+");
      jsonMappingException_Reference0.getFieldName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-70);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      String string0 = ")";
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, ")");
      JsonMappingException jsonMappingException1 = new JsonMappingException(")");
      jsonMappingException0.getMessage();
      jsonMappingException0.getPath();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, jsonMappingException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 4000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0._index = 853;
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[\"\"]", string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "o$");
      jsonMappingException0.getLocalizedMessage();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonParser jsonParser0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "9IrjzroY>gyPx+iPx");
      String string0 = ")";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, ")");
      int int0 = 43;
      jsonMappingException_Reference0.setIndex(43);
      String string1 = "Cannot pass null fieldName";
      jsonMappingException_Reference0.setDescription("Cannot pass null fieldName");
      jsonMappingException0._buildMessage();
      jsonMappingException0.getProcessor();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("BvCKp?EY5(Nc(", ")");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // )
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "no default no-arguments constructor found";
      JsonLocation jsonLocation0 = JsonLocation.NA;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("no default no-arguments constructor found", "no default no-arguments constructor found");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("no default no-arguments constructor found", hashMap0, sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(34, true, false, 34, 34, sQLClientInfoException0);
      dataTruncation0.getNextWarning();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) byteArrayOutputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s9jTu");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "s9jTu", (Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-264));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -264
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 380;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String string0 = null;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 380, hashMap0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", (-2686));
      jsonMappingException_Reference0.getDescription();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      String string1 = "";
      String string2 = "";
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 380);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string3 = "[no message for ";
      StackTraceElement stackTraceElement1 = new StackTraceElement("cannot deserialize from Object value (no delegate- or property-based Creator)", "[no message for ", "L=HVc ,3f,UP#n0B67+", 380);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = null;
      try {
        stackTraceElement2 = new StackTraceElement("", (String) null, "", 1676);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "^&j0s?k>7Jmf_w5NAg<", 34);
      JsonMappingException jsonMappingException0 = new JsonMappingException("^&j0s?k>7Jmf_w5NAg<", (JsonLocation) null, sQLIntegrityConstraintViolationException0);
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      jsonMappingException0.prependPath((Object) pushbackReader0, 34);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("z*9", hashMap0, sQLTimeoutException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      int int0 = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("z*9", "com.fasterxml.jackson.databind.deser.impl.PropertyValue$Map", 0, sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("z*9", "z*9", map0, sQLInvalidAuthorizationSpecException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("", clientInfoStatus0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("z*9", sQLClientInfoException1);
      jsonMappingException0.toString();
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.deser.impl.PropertyValue$Map", "");
      sQLClientInfoException0.getStackTrace();
      jsonMappingException_Reference0._desc = "";
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException0.toString();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.setAttribute("z*9", jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, ")");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) serializerProvider0, 4000);
      jsonMappingException0.getMessage();
      jsonMappingException0.getPath();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, jsonMappingException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1994);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 4000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("H6{/7", "com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLDataException0);
      StringReader stringReader0 = new StringReader("' (code ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 63);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pushbackReader0, 63);
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      pushbackReader0.read();
      lineNumberReader1.markSupported();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(lineNumberReader1);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      LineNumberReader lineNumberReader2 = new LineNumberReader(lineNumberReader1);
      jsonMappingException0.prependPath((Object) lineNumberReader2, " (through reference chain: ");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[3] = 'c';
      charArray0[4] = ';';
      charArray0[5] = 'h';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, ")%dciV6c7j");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      String string0 = "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator";
      Throwable throwable0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", (Throwable) null);
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string1 = "";
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0, 2);
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pushbackReader0, (ObjectCodec) null, (CharsToNameCanonicalizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      Object object0 = new Object();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) hashMap0, "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'v';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonMappingException.from((JsonParser) jsonParserSequence0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value", "com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value");
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'l';
      charArray0[2] = 'Y';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) jsonParserSequence0, " (through reference chain: ");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.util.StdDateFormat");
      int int0 = 91;
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 91);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(91);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(1255);
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.toString();
      JsonMappingException.from((JsonParser) null, (String) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, "com.fasterxml.jackson.databind.JsonMappingException[91]");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._fieldName = "G";
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(192);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLTransientException sQLTransientException0 = new SQLTransientException("valueOf");
      SQLDataException sQLDataException0 = new SQLDataException("valueOf", "valueOf");
      sQLTransientException0.initCause(sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "valueOf", (Throwable) sQLTransientException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<MockPrintWriter> class0 = MockPrintWriter.class;
      defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "valueOf");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "valueOf", (Throwable) sQLDataException0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("valueOf", string0);
      
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 0);
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("java.lang.Object[0]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.JsonMappingException$Reference";
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException$Reference");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("irRjFd5xXE^A~jU");
      Object object0 = new Object();
      JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, object0, "");
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('<');
      jsonMappingException0._appendPathDesc(stringBuilder0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      try { 
        pipedOutputStream0.write(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String string0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) pipedReader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0);
      String string0 = "FfN#(Ng";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "MCj]i6'vN", false);
      int int0 = 494;
      InputStream inputStream0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-16);
      int int1 = (-3271);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("OVERRIDE_PUBLIC_ACCESS_MODIFIERS");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) jsonMappingException0);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class0 = Integer.class;
      objectMapper0.configOverride(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      objectMapper0.enable(deserializationFeature0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "T \"IU2_a7^m+'!u#(A%");
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "T \"IU2_a7^m+'!u#(A%", (Throwable) jsonMappingException0);
      jsonMappingException0.getProcessor();
      jsonMappingException0.toString();
      // Undeclared exception!
      try { 
        objectMapper1.readerForUpdating((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = ".";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(".", ".");
      int int0 = (-3187);
      jsonMappingException_Reference0.setIndex((-3187));
      jsonMappingException_Reference0.setDescription("OR;/5 3,u");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._desc = "0V5A";
      jsonMappingException_Reference0.toString();
      SerializerProvider serializerProvider0 = null;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.JsonMappingException$Reference", intArray0);
      jsonMappingException_Reference0.setDescription("@fZ'ayr7");
      // Undeclared exception!
      try { 
        batchUpdateException0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }
}
