/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:26:30 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Spliterator;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      Class<PipedInputStream> class0 = PipedInputStream.class;
      MismatchedInputException mismatchedInputException0 = MismatchedInputException.from((JsonParser) null, class0, "");
      SQLWarning sQLWarning0 = new SQLWarning("", "->", mismatchedInputException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "", (Throwable) sQLWarning0);
      jsonMappingException0.getMessage();
      mismatchedInputException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) sQLDataException0, "");
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, " (through reference chain: ");
      jsonMappingException0.prependPath((Object) " (through reference chain: ", " (through reference chain: ");
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath((Object) " (through reference chain: ", " (through reference chain: ");
      jsonMappingException0.getMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\" (through reference chain: \"]->java.sql.SQLTransientConnectionException[\" (through reference chain: \"])");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException1.prependPath((Object) "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\" (through reference chain: \"]->java.sql.SQLTransientConnectionException[\" (through reference chain: \"])", "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\" (through reference chain: \"]->java.sql.SQLTransientConnectionException[\" (through reference chain: \"])");
      jsonMappingException0.prependPath((Object) "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\" (through reference chain: \"]->java.sql.SQLTransientConnectionException[\" (through reference chain: \"])", 2);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, "No fallback setter/field defined for creator property '");
      jsonMappingException0.prependPath((Object) "No fallback setter/field defined for creator property '", "No fallback setter/field defined for creator property '");
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath((Object) "No fallback setter/field defined for creator property '", "No fallback setter/field defined for creator property '");
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"No fallback setter/field defined for creator property '\"]->java.sql.SQLTransientConnectionException[\"No fallback setter/field defined for creator property '\"])");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, 6);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 15711167;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" (through reference chain: ", sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("S'PZZ", "S'PZZ", 15711167, sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLDataException0, "S'PZZ");
      jsonMappingException0.getPathReference();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getPath();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "java.sql.SQLDataException[\"S'PZZ\"]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, "wocb?1r*E(Jiy(M+");
      jsonMappingException0.prependPath((Object) "wocb?1r*E(Jiy(M+", "wocb?1r*E(Jiy(M+");
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath((Object) "wocb?1r*E(Jiy(M+", "wocb?1r*E(Jiy(M+");
      jsonMappingException0.getMessage();
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"wocb?1r*E(Jiy(M+\"]->java.lang.String[\"wocb?1r*E(Jiy(M+\"]->java.sql.SQLTransientConnectionException[\"wocb?1r*E(Jiy(M+\"])", "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"wocb?1r*E(Jiy(M+\"]->java.sql.SQLTransientConnectionException[\"wocb?1r*E(Jiy(M+\"])");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"wocb?1r*E(Jiy(M+\"]->java.lang.String[\"wocb?1r*E(Jiy(M+\"]->java.sql.SQLTransientConnectionException[\"wocb?1r*E(Jiy(M+\"])");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"wocb?1r*E(Jiy(M+\"]->java.sql.SQLTransientConnectionException[\"wocb?1r*E(Jiy(M+\"])");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"wocb?1r*E(Jiy(M+\"]->java.sql.SQLTransientConnectionException[\"wocb?1r*E(Jiy(M+\"])", 2);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"wocb?1r*E(Jiy(M+\"]->java.sql.SQLTransientConnectionException[\"wocb?1r*E(Jiy(M+\"])", ";>LU(`6");
      // Undeclared exception!
      try { 
        jsonMappingException2.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) "", "");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      Object object0 = new Object();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator("ry21k)tYy");
      byte[] byteArray0 = new byte[17];
      jsonFactory0.createParser(byteArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("()", "()");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "", (Throwable) sQLRecoverableException0);
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, " (through reference chain: ");
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath((Object) " (through reference chain: ", " (through reference chain: ");
      sQLTransientException0.getStackTrace();
      jsonMappingException0.getMessage();
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "}-}u9LxZ[P$ M");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(54);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, "`");
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._index = 54;
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = 'V';
      charArray0[2] = '5';
      charArray0[3] = 'j';
      charArray0[4] = 'd';
      charArray0[5] = 'j';
      charArray0[6] = 'c';
      charArray0[7] = 'n';
      jsonFactory2.createParser(charArray0, (-1), 0);
      char[] charArray1 = new char[5];
      charArray1[0] = '+';
      jsonFactory3.copy();
      charArray1[1] = ' ';
      charArray1[2] = 'G';
      charArray1[3] = 'O';
      charArray1[4] = 'C';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray1, 54, 3611);
      JsonMappingException.from(jsonParser0, (String) null, (Throwable) jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "XL6oM%";
      JsonMappingException jsonMappingException0 = new JsonMappingException("XL6oM%");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(648);
      String string1 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, " (through reference chain: ");
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath((Object) " (through reference chain: ", " (through reference chain: ");
      jsonMappingException0.getMessage();
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '?';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filteringParserDelegate0, "JSON");
      jsonMappingException1.getProcessor();
      jsonMappingException0.getPath();
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, " (through reference chain: ");
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath((Object) " (through reference chain: ", " (through reference chain: ");
      jsonMappingException0.getMessage();
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '?';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filteringParserDelegate0, "JSON");
      // Undeclared exception!
      try { 
        jsonMappingException1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("XL6oM%");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("XL6oM%", "83VSDFWA;%3:<*");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("More than one argument (#%d and #%d) left as delegating for Creator %s: only one allowed");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) mockPrintWriter0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "P/PGh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "Cannot locate class '");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 2048);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      jsonMappingException0.getPath();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "com.fasterxml.jackson.databind.util.LinkedNode");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("XL6oM%");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("XL6oM%", "83VSDFWA;%3:<*");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      Integer integer0 = new Integer(91);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) integer0, 91);
      jsonMappingException_Reference0.getFrom();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[9];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OVVF{;nVdqM_");
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Reader) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonParser jsonParser0 = jsonFactory3.createParser("JSON");
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) jsonMappingException1);
      InvalidTypeIdException invalidTypeIdException0 = InvalidTypeIdException.from(jsonParser0, "A^hTbf815", javaType0, "(@JsonValue serializer for method ");
      JsonLocation jsonLocation0 = invalidTypeIdException0.getLocation();
      JsonMappingException jsonMappingException2 = new JsonMappingException("", jsonLocation0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLNonTransientException0, (-4758));
      jsonMappingException0.fillInStackTrace();
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "java.sql.SQLNonTransientException[?]");
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 1000);
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      sQLNonTransientException0.addSuppressed(jsonMappingException1);
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      JsonMappingException.from(jsonParser0, "(was java.sql.SQLNonTransientException) (through reference chain: UNKNOWN[?]->java.sql.SQLNonTransientException[?])");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ",RJ/+)66&UY^UYq2zH", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("$.A8Q2x6X>qq-`", (JsonLocation) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "$.A8Q2x6X>qq-`");
      jsonMappingException1.fillInStackTrace();
      JsonMappingException.from((JsonGenerator) null, "");
      jsonMappingException0.getPathReference();
      jsonMappingException0.getPath();
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      JsonMappingException jsonMappingException2 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "START_OBJECT", (String) null);
      jsonMappingException0.getPathReference();
      JsonMappingException jsonMappingException3 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(deserializerFactory0);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      jsonMappingException4.toString();
      System.setCurrentTimeMillis(2275L);
      jsonMappingException0.getPathReference((StringBuilder) null);
      jsonMappingException3.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "+qpoa", 27);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) simpleAbstractTypeResolver0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "START_OBJECT";
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "com.fasterxml.jackson.databind.type.TypeFactory", objectArray0);
      sQLInvalidAuthorizationSpecException0.printStackTrace(printWriter0);
      JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) charArrayReader0, " n2+r6{'%(~7!");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON");
      JsonMappingException.from(jsonParser0, "->", (Throwable) sQLTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "P~Ns'AJTe:nPY:", sQLTransientException0);
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("XL6oM%");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("XL6oM%", "83VSDFWA;%3:<*");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      Integer integer0 = new Integer(91);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pushbackInputStream0, 2);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "java.io.PushbackInputStream[2]");
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, " (through rFference chain_ ");
      StringBuilder stringBuilder0 = new StringBuilder("^");
      stringBuilder0.chars();
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException0.getMessage();
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON");
      JsonMappingException.from(jsonParser0, "->", (Throwable) sQLTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("mOQ_Y>", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", (-3289));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) sQLDataException0, "");
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "2U.uN]/X/Pbh)Vc", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("XL6oM%");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("XL6oM%", "83VSDFWA;%3:<*");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      Integer integer0 = new Integer(91);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) integer0, 91);
      jsonMappingException_Reference0.getFrom();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = javaType0;
      javaTypeArray0[8] = javaType0;
      MapLikeType.upgradeFrom(javaTypeArray0[2], javaTypeArray0[7], javaType0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, javaTypeArray0[7], true);
      File file0 = MockFile.createTempFile("W?NQ{Ah|Mi", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis(748L);
      int int0 = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("K@sB0y*)8(T%U", "", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) sQLTransactionRollbackException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(missingNode0);
      missingNode0.bigIntegerValue();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = null;
      jsonFactory0.setRootValueSeparator((String) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-871));
      placeholderForType0.toCanonical();
      objectMapper0.readerFor((JavaType) placeholderForType0);
      boolean boolean0 = false;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filteringParserDelegate0, 0);
      jsonMappingException1._buildMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonFactory0, 0);
      jsonMappingException2.getPathReference();
      jsonMappingException0._buildMessage();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringWriter stringWriter0 = new StringWriter();
      charArrayWriter0.writeTo(stringWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedWriter0, 0);
      jsonMappingException_Reference0.getDescription();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MockPrintStream> class0 = MockPrintStream.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("java.io.BufferedWriter[0]", "4ZyH&Nz", (-1622));
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLRecoverableException0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, (OutputStream) null, byteArray0, (byte)96, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Cg3V~J");
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(class0, jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(jsonFactory3);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "SQNP \"", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonFactory jsonFactory0 = new JsonFactory();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1268);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('7');
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(charArrayWriter1, 1268);
      jsonMappingException_Reference1.getDescription();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "", 37);
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      SQLDataException sQLDataException0 = new SQLDataException("j`uT.?Uu#T", "j`uT.?Uu#T", mockIOException0);
      mockIOException0.initCause(sQLDataException0);
      mockIOException0.getSuppressed();
      mockIOException0.getStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException((String) null, mockIOException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      jsonMappingException0.getPath();
      sQLDataException0.getLocalizedMessage();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.toString();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLDataException0);
      jsonMappingException_Reference0.setFieldName((String) null);
      jsonMappingException_Reference0.setFieldName("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, 0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)99;
      String string0 = "l}A7E-G";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "l}A7E-G", sQLTransactionRollbackException0);
      jsonMappingException0.getPath();
      SQLDataException sQLDataException0 = new SQLDataException("l}A7E-G");
      sQLDataException0.getLocalizedMessage();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.toString();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(objectReader0);
      jsonMappingException_Reference1.setFieldName("zaec<7%a\">Gk3-t2");
      jsonMappingException_Reference0.setFieldName("zaec<7%a\">Gk3-t2");
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1231));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1231
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedOutputStream0, (-664));
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UNWRAP_ROOT_VALUE", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("", (Throwable) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "0'A.9zA[m/");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("TYyP?n`hs/w\"Q/", ":{H?j*(,-Lng6]]N", (-1256), jsonMappingException0);
      SQLWarning sQLWarning1 = new SQLWarning("3Z3.qu`z-[Vu*u", "TYyP?n`hs/w\"Q/", (Throwable) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(pipedInputStream0, "TYyP?n`hs/w\"Q/", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")", ")", batchUpdateException0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "XL6oM%";
      JsonMappingException jsonMappingException0 = new JsonMappingException("XL6oM%");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("XL6oM%", "83VSDFWA;%3:<*");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      Integer integer0 = new Integer(91);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) integer0, 91);
      jsonMappingException_Reference0.getFrom();
      ObjectReader[] objectReaderArray0 = new ObjectReader[8];
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationConfig deserializationConfig0 = null;
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = javaType0;
      javaTypeArray0[8] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1]);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaTypeArray0[2], javaTypeArray0[7], simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, mapLikeType0);
      JavaType javaType1 = referenceType0.getReferencedType();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, javaTypeArray0[7], true);
      File file0 = MockFile.createTempFile("W?NQ{Ah|Mi", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0);
      uTF8JsonGenerator0.getSchema();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("=Z]LmDQaO_]r/U15", (Object) file0);
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper1, (DeserializationConfig) null, javaType1, jsonMappingException0, (FormatSchema) null, injectableValues_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(bufferedWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedWriter0, 0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.BufferedWriter[0]", string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<MockPrintStream> class0 = MockPrintStream.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertNotNull(resolvedRecursiveType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.treeAsTokens((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "");
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setIndex((-704));
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-704), jsonMappingException_Reference0.getIndex());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&Y");
      assertNotNull(mockPrintWriter0);
      
      sQLSyntaxErrorException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("!rTB?02+|u~dg8Ww0", "&Y", sQLSyntaxErrorException0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("&Y", sQLNonTransientException0.getSQLState());
      assertEquals("!rTB?02+|u~dg8Ww0", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: !rTB?02+|u~dg8Ww0", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("&Y", sQLNonTransientException0.getSQLState());
      assertEquals("!rTB?02+|u~dg8Ww0", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: !rTB?02+|u~dg8Ww0", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (-2533), sQLNonTransientException0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("&Y", sQLNonTransientException0.getSQLState());
      assertEquals("!rTB?02+|u~dg8Ww0", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: !rTB?02+|u~dg8Ww0", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-2533), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("&Y", sQLNonTransientException0.getSQLState());
      assertEquals("!rTB?02+|u~dg8Ww0", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: !rTB?02+|u~dg8Ww0", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-2533), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null, sQLNonTransientConnectionException0);
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("&Y", sQLNonTransientException0.getSQLState());
      assertEquals("!rTB?02+|u~dg8Ww0", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: !rTB?02+|u~dg8Ww0", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-2533), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(string0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertNotNull(placeholderForType0);
      
      // Undeclared exception!
      try { 
        placeholderForType0.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("e", "[]", 1000, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1000, sQLClientInfoException0.getErrorCode());
      assertEquals("[]", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: e", sQLClientInfoException0.toString());
      assertEquals("e", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "->", (Throwable) sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1000, sQLClientInfoException0.getErrorCode());
      assertEquals("[]", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: e", sQLClientInfoException0.toString());
      assertEquals("e", sQLClientInfoException0.getMessage());
      assertNotNull(jsonMappingException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException1 = new JsonMappingException((String) null, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException1, "");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1000, sQLClientInfoException0.getErrorCode());
      assertEquals("[]", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: e", sQLClientInfoException0.toString());
      assertEquals("e", sQLClientInfoException0.getMessage());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", (-3289));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-3289), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-3289), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 1920);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Spliterator<Throwable> spliterator0 = sQLFeatureNotSupportedException0.spliterator();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(spliterator0);
      
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      sQLFeatureNotSupportedException0.setNextException(sQLWarning0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) null, "");
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(jsonGeneratorDelegate0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory3 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "JSON");
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      
      String string0 = jsonMappingException1.getMessage();
      assertEquals("JSON", string0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(string0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(filterOutputStream0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(filterOutputStream0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(jsonMappingException_Reference0);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.FilterOutputStream[?]", string1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = jsonMappingException_Reference0.getFieldName();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNull(string2);
      
      String string3 = jsonMappingException0.getPathReference();
      assertEquals("UNKNOWN[\"\"]", string3);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(string3);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) jsonMappingException0, "By");
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 31;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("7jh kjL$~fa^(+5");
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("7jh kjL$~fa^(+5", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("7jh kjL$~fa^(+5", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".L=s'*9cA ,VW^od&/", "7jh kjL$~fa^(+5", intArray0, sQLTimeoutException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("7jh kjL$~fa^(+5", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: .L=s'*9cA ,VW^od&/", batchUpdateException0.toString());
      assertEquals("7jh kjL$~fa^(+5", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(".L=s'*9cA ,VW^od&/", batchUpdateException0.getMessage());
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {31}, intArray0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) batchUpdateException0, "");
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("7jh kjL$~fa^(+5", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: 7jh kjL$~fa^(+5", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: .L=s'*9cA ,VW^od&/", batchUpdateException0.toString());
      assertEquals("7jh kjL$~fa^(+5", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(".L=s'*9cA ,VW^od&/", batchUpdateException0.getMessage());
      assertEquals(1, intArray0.length);
      assertNotNull(jsonMappingException0);
      assertArrayEquals(new int[] {31}, intArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(")", "", (-626));
      assertEquals(")", sQLNonTransientException0.getMessage());
      assertEquals((-626), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: )", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) null, ")");
      assertEquals(")", sQLNonTransientException0.getMessage());
      assertEquals((-626), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: )", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      
      jsonMappingException_Reference0.setDescription("('true', 'false' or 'null')");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._index = (-1787);
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("('true', 'false' or 'null')", string1);
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      jsonMappingException_Reference0._desc = "";
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._fieldName = "('true', 'false' or 'null')";
      assertEquals("('true', 'false' or 'null')", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      
      String string2 = jsonMappingException_Reference0.toString();
      assertEquals("", string2);
      assertEquals("('true', 'false' or 'null')", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals("('true', 'false' or 'null')", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertEquals((-1787), jsonMappingException_Reference1.getIndex());
      assertEquals("('true', 'false' or 'null')", jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      String string3 = jsonMappingException_Reference0.toString();
      assertEquals("", string3);
      assertEquals("('true', 'false' or 'null')", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      jsonMappingException_Reference0.setFieldName("~H4vhn?`Q");
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertEquals("~H4vhn?`Q", jsonMappingException_Reference0.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      jsonMappingException_Reference0._fieldName = "~H4vhn?`Q";
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertEquals("~H4vhn?`Q", jsonMappingException_Reference0.getFieldName());
      
      String string4 = jsonMappingException_Reference0.toString();
      assertEquals("", string4);
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertEquals("~H4vhn?`Q", jsonMappingException_Reference0.getFieldName());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      jsonMappingException_Reference0._fieldName = "";
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNull(object0);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1787), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1787), jsonMappingException_Reference2.getIndex());
      assertEquals("", jsonMappingException_Reference2.getFieldName());
      assertNotNull(jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setIndex(0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonLocation0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("->", "");
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("->", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ->", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      String string0 = jsonLocation0.sourceDescription();
      assertEquals("UNKNOWN", string0);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(string0);
      
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("->", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ->", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("->", jsonLocation0, sQLNonTransientException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonMappingException0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("->\n at [Source: UNKNOWN; line: -1, column: -1]", string1);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("->", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ->", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ->\n at [Source: UNKNOWN; line: -1, column: -1]", string2);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("->", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ->", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("->", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ->", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("->", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ->", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackson.databind.JsonMappingException: ->\n at [Source: UNKNOWN; line: -1, column: -1]", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("j`uT.?Uu#T", "j`uT.?Uu#T", mockIOException0);
      assertEquals("java.sql.SQLDataException: j`uT.?Uu#T", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getMessage());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      Throwable throwable0 = mockIOException0.initCause(sQLDataException0);
      assertEquals("java.sql.SQLDataException: j`uT.?Uu#T", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getMessage());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertNotNull(throwable0);
      
      Throwable[] throwableArray0 = mockIOException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      StackTraceElement[] stackTraceElementArray0 = mockIOException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath((Object) mockIOException0, 63);
      JsonMappingException jsonMappingException1 = new JsonMappingException((String) null, mockIOException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertNotNull(jsonMappingException2);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      String string0 = sQLDataException0.getLocalizedMessage();
      assertEquals("j`uT.?Uu#T", string0);
      assertEquals("java.sql.SQLDataException: j`uT.?Uu#T", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getMessage());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getSQLState());
      assertNotNull(string0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null (through reference chain: org.evosuite.runtime.mock.java.io.MockIOException[63])", string1);
      assertNotNull(string1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException3);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      
      String string2 = jsonMappingException1.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: N/A", string2);
      assertNotNull(string2);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLDataException0);
      assertEquals("java.sql.SQLDataException: j`uT.?Uu#T", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getMessage());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getSQLState());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setFieldName((String) null);
      assertEquals("java.sql.SQLDataException: j`uT.?Uu#T", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getMessage());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getSQLState());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setFieldName("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null (through reference chain: org.evosuite.runtime.mock.java.io.MockIOException[63])");
      assertEquals("java.sql.SQLDataException: j`uT.?Uu#T", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getMessage());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getSQLState());
      assertEquals("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null (through reference chain: org.evosuite.runtime.mock.java.io.MockIOException[63])", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) list0, "GoVteDlxRxK+.G");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(jsonMappingException_Reference0));
      assertNotNull(jsonMappingException4);
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      String string3 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.sql.SQLDataException[\"Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null (through reference chain: org.evosuite.runtime.mock.java.io.MockIOException[63])\"]", string3);
      assertEquals("java.sql.SQLDataException: j`uT.?Uu#T", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getMessage());
      assertEquals("j`uT.?Uu#T", sQLDataException0.getSQLState());
      assertEquals("Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null (through reference chain: org.evosuite.runtime.mock.java.io.MockIOException[63])", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(534, 534);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class0);
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isContainerType());
      assertNotNull(collectionType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(collectionType0, "com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo", "}L_Y=~H &]cI");
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isContainerType());
      assertEquals("com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      String string0 = invalidTypeIdException0.getMessage();
      assertEquals("Could not resolve type id 'com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo' as a subtype of [collection type; class java.util.ArrayList, contains [simple type, class java.lang.Object]]: }L_Y=~H &]cI", string0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isContainerType());
      assertEquals("com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo", invalidTypeIdException0.getTypeId());
      assertNotNull(string0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(object0);
      
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonLocation0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser(byteArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON");
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("JSON", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: JSON", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "->", (Throwable) sQLTransientException0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("JSON", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: JSON", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(1, byteArray0.length);
      assertNotNull(jsonMappingException0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonMappingException jsonMappingException1 = new JsonMappingException("mOQ_Y>", jsonLocation0, jsonMappingException0);
      assertEquals(1, byteArray0.length);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNotNull(jsonMappingException1);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setDescription(")");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      jsonMappingException_Reference0._from = (Object) pipedWriter0;
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription(" s^Y");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setFieldName("com.fasterxml.jackson.databind.deser.std.StringDeserializer");
      assertEquals("com.fasterxml.jackson.databind.deser.std.StringDeserializer", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals("com.fasterxml.jackson.databind.deser.std.StringDeserializer", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("com.fasterxml.jackson.databind.deser.std.StringDeserializer", jsonMappingException_Reference1.getFieldName());
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0._index = 0;
      assertEquals("com.fasterxml.jackson.databind.deser.std.StringDeserializer", jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      assertEquals("com.fasterxml.jackson.databind.deser.std.StringDeserializer", jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals(" s^Y", string0);
      assertEquals("com.fasterxml.jackson.databind.deser.std.StringDeserializer", jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(" s^Y");
      assertNotNull(jsonMappingException0);
      
      String string1 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException:  s^Y", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      JsonMappingException.Reference jsonMappingException_Reference2 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals("com.fasterxml.jackson.databind.deser.std.StringDeserializer", jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertEquals(0, jsonMappingException_Reference2.getIndex());
      assertEquals("com.fasterxml.jackson.databind.deser.std.StringDeserializer", jsonMappingException_Reference2.getFieldName());
      assertNotNull(jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, 0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = 'p';
      charArray0[2] = 'Q';
      charArray0[3] = 's';
      charArray0[4] = 'o';
      charArray0[5] = '*';
      charArray0[6] = 'T';
      try { 
        pipedWriter0.write(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byteArrayOutputStream0.flush();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) byteArrayOutputStream0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("5C>Vn{L", (JsonLocation) null, (Throwable) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      jsonMappingException_Reference0.setIndex((-409));
      assertEquals((-409), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setFieldName("");
      assertEquals((-409), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertEquals((-409), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNull(object0);
      
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-409), int0);
      assertEquals((-409), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "#7s4C;", (Throwable) sQLDataException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      jsonMappingException0.prependPath((Object) sQLDataException0, "' has value that is not of type ArrayNode (but ");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext1.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext0);
      
      SQLDataException sQLDataException1 = new SQLDataException("' has value that is not of type ArrayNode (but ", "com.fasterxml.jackson.databind.DatabindContext", (-1));
      assertEquals((-1), sQLDataException1.getErrorCode());
      assertEquals("' has value that is not of type ArrayNode (but ", sQLDataException1.getMessage());
      assertEquals("com.fasterxml.jackson.databind.DatabindContext", sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ' has value that is not of type ArrayNode (but ", sQLDataException1.toString());
      assertNotNull(sQLDataException1);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext1, (String) null, (Throwable) sQLDataException1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext1.getDeserializationFeatures());
      assertEquals((-1), sQLDataException1.getErrorCode());
      assertEquals("' has value that is not of type ArrayNode (but ", sQLDataException1.getMessage());
      assertEquals("com.fasterxml.jackson.databind.DatabindContext", sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ' has value that is not of type ArrayNode (but ", sQLDataException1.toString());
      assertNotNull(jsonMappingException1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext0));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext0);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("N/A", string0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext1.getDeserializationFeatures());
      assertEquals((-1), sQLDataException1.getErrorCode());
      assertEquals("' has value that is not of type ArrayNode (but ", sQLDataException1.getMessage());
      assertEquals("com.fasterxml.jackson.databind.DatabindContext", sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ' has value that is not of type ArrayNode (but ", sQLDataException1.toString());
      assertNotNull(string0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext0));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext0);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "y+8");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "->", (Throwable) sQLTransientException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("@Q* 5E#<8n'ZzQ4k", jsonLocation0, sQLTransientException0);
      Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
      Class<MockRandomAccessFile> class1 = MockRandomAccessFile.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(jsonLocation0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler((Object) null);
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler((Object) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = referenceType3.getGenericSignature(stringBuilder0);
      jsonMappingException0.getPathReference(stringBuilder1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "@Q* 5E#<8n'ZzQ4k", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(534, 534);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(collectionType0, "com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo", "}L_Y=~H &]cI");
      jsonMappingException0.getMessage();
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, " (through reference chain: ");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("(was java.sql.SQLTransientException) (through reference chain: java.sql.SQLTransientException[\" (through reference chain: \"])", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
          BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
          DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
          DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
          String string0 = "mx!3rM";
          SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
          SQLDataException sQLDataException0 = new SQLDataException("mx!3rM", "string", sQLSyntaxErrorException0);
          SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(";.A..NM+", "string", sQLDataException0);
          SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, ";.A..NM+", sQLFeatureNotSupportedException0);
          JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "mx!3rM", (Throwable) sQLSyntaxErrorException1);
          int int0 = 0;
          StringBuilder stringBuilder0 = new StringBuilder(0);
          jsonMappingException0.getPathReference(stringBuilder0);
          jsonMappingException0.getProcessor();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
          PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0);
          JsonMappingException jsonMappingException1 = new JsonMappingException(pushbackReader0, "Tr]:95{>XHk", sQLSyntaxErrorException0);
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor150.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("EGg)K1},O-V5", sQLNonTransientConnectionException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "EGg)K1},O-V5");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }
}
