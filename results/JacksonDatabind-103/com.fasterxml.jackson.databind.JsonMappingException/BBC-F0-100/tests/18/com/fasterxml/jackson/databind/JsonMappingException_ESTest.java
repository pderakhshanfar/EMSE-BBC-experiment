/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 20:02:05 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(was ", "(was ");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) pipedInputStream0, ")");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) jsonMappingException0, 80);
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "=m");
      Random.setNextRandom(7);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cnAm&KiT&f");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider0, "cnAm&KiT&f");
      jsonMappingException2.getPathReference();
      // Undeclared exception!
      try { 
        jsonMappingException1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fa$terxml.jackson./atabind.JsonMappingxception$Referene", "com.fa$terxml.jackson./atabind.JsonMappingxception$Referene");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) "com.fa$terxml.jackson./atabind.JsonMappingxception$Referene", 130);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, "com.fa$terxml.jackson./atabind.JsonMappingxception$Referene");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fa$terxml.jackson./atabind.JsonMappingxception$Referene (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fa$terxml.jackson./atabind.JsonMappingxception$Referene\"]->UNKNOWN[?]->java.lang.String[130])", 130);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(130);
      jsonMappingException1.prependPath((Object) jsonMappingException0, "com.fa$terxml.jackson./atabind.JsonMappingxception$Referene");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fa$terxml.jackson./atabind.JsonMappingxception$Referene (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fa$terxml.jackson./atabind.JsonMappingxception$Referene\"]->UNKNOWN[?]->java.lang.String[130])", 130);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "com.fa$terxml.jackson./atabind.JsonMappingxception$Referene (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[\"com.fa$terxml.jackson./atabind.JsonMappingxception$Referene\"]->UNKNOWN[?]->java.lang.String[130])", 130);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "com.fa$terxml.jackson./atabind.JsonMappingxception$Referene");
      mockFile0.toURI();
      SQLDataException sQLDataException0 = new SQLDataException();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      try { 
        objectMapper1.valueToTree((Object) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"])
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$2", sQLIntegrityConstraintViolationException0);
      sQLTransientConnectionException0.setNextException(sQLIntegrityConstraintViolationException0);
      int int0 = (-382);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, (-382));
      Throwable throwable0 = sQLTransientConnectionException0.fillInStackTrace();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTransientConnectionException0, 1947);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$2", 1947);
      jsonMappingException_Reference0.setIndex((-382));
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      sQLTransientConnectionException0.printStackTrace();
      String string0 = "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator";
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", (Throwable) jsonMappingException1);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath(throwable0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException2._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "http://javax.xml.XMLConstants/feature/secure-processing";
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "http://javax.xml.XMLConstants/feature/secure-processing", "{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(";:o3");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(";:o3");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, 0);
      jsonMappingException_Reference0.getDescription();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[0]", "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[0]", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[0]", (Throwable) sQLTimeoutException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, 6036);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("nTJt_8.s8V", "nTJt_8.s8V", 1296);
      SQLWarning sQLWarning0 = new SQLWarning();
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>(1296);
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 5, 5);
      dataFormatReaders_Match0.createParserWithMatch();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "nTJt_8.s8V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "http://javax.xml.XMLConstants/feature/secure-processing";
      SQLWarning sQLWarning0 = new SQLWarning();
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "G>", (Throwable) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      jsonMappingException0.getMessage();
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser("http://javax.xml.XMLConstants/feature/secure-processing");
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "->", (Throwable) sQLWarning0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "*!2{B5G!_*h;FzI", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0);
      pipedOutputStream0.close();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "JSON", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.core.filter.TokenFilterContext");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLTransactionRollbackException0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, mockFileReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "\"1VCmI", sQLTransactionRollbackException0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLWarning sQLWarning1 = new SQLWarning("");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "m{|wGw", (Throwable) sQLWarning1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-237);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, (-237));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      jsonMappingException0._buildMessage();
      System.setCurrentTimeMillis((-633L));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      pipedInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 2, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 3);
      JsonLocation jsonLocation0 = uTF8DataInputJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "WRITE_DURATIONS_AS_TIMESTAMPS", jsonLocation0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pipedInputStream0, (-1268));
      jsonMappingException_Reference0.getDescription();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonInclude_Include0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 116;
      intArray0[1] = 116;
      intArray0[2] = 116;
      intArray0[3] = 116;
      intArray0[4] = 116;
      intArray0[5] = 116;
      intArray0[6] = 116;
      SQLDataException sQLDataException0 = new SQLDataException("tF&E+K_UV8]6(sT%:");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Unexpected IOException (of type %s): %s", intArray0, sQLSyntaxErrorException0);
      sQLDataException0.spliterator();
      batchUpdateException0.getSuppressed();
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "J.4U}ZO%", "", 116);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("J.4U}ZO%", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("nis$eZJ", "", batchUpdateException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser jsonParser0 = jsonFactory1.createParser("cr%&5");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "Sslq*'");
      jsonMappingException0.getPathReference();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      jsonMappingException0.getPathReference((StringBuilder) null);
      System.setCurrentTimeMillis(116);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      jsonFactory0.copy();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      batchUpdateException0.getSuppressed();
      StackTraceElement stackTraceElement0 = new StackTraceElement("f#m", "JSON", "JSON", 1190);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("JSON", (String) null, sQLNonTransientConnectionException0);
      JsonParser jsonParser0 = jsonFactory1.createParser("nis$eZJ");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      jsonMappingException0.getPathReference();
      jsonMappingException0._buildMessage();
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonMappingException0.getProcessor();
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonParser_Feature0, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonParser_Feature1);
      jsonFactory5.createParser((InputStream) byteArrayInputStream0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (JsonMappingException.Reference) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "");
      jsonMappingException0.getPath();
      jsonMappingException0.getPath();
      String string0 = "MISSING";
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", "MISSING");
      JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "MISSING", (Throwable) jsonMappingException1);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "MISSING", "", 1739);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(" has no content", "", " has no content", 1739);
      stackTraceElementArray0[1] = stackTraceElement1;
      String string1 = "Ef 2mV";
      StackTraceElement stackTraceElement2 = new StackTraceElement("Ef 2mV", "a8@=Y", " has no content", 1084);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "", "a8@=Y", 917);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement(" has no content", "<*AJER2d", "a8@=Y", 917);
      stackTraceElementArray0[4] = stackTraceElement4;
      String string2 = "";
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "", "", 917);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = null;
      try {
        stackTraceElement6 = new StackTraceElement((String) null, "{9Pg/~:KJ:F{t.'W", "Iz;#&v", 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http://javax.xml.XMLConstants/feature/secure-processing");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("http://javax.xml.XMLConstants/feature/secure-processing", 56);
      jsonMappingException_Reference0.getDescription();
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)32;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)32, 2781);
      dataFormatReaders_Match0.createParserWithMatch();
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      dupDetector0.findLocation();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("http://javax.xml.XMLConstants/feature/secure-processing", "java.lang.String[56]");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("java.lang.String[56]", (JsonLocation) null, batchUpdateException0);
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http://javax.xml.XMLConstants/feature/secure-processing");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("http://javax.xml.XMLConstants/feature/secure-processing", 41);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.String[41]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      Object object1 = jsonMappingException_Reference0.getFrom();
      assertNotNull(object1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) pipedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      pipedInputStream0.close();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "JSON", sQLTransientConnectionException0);
      jsonMappingException0.prependPath((Object) sQLTransientConnectionException0, "JSON");
      JsonFactory jsonFactory2 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory0.configure(jsonParser_Feature1, false);
      jsonFactory3.copy();
      jsonFactory2.disable(jsonParser_Feature1);
      jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createParser("");
      JsonMappingException.from(jsonParser0, "iK|eu0GJOHcZHM&");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.sql.SQLTransientConnectionException[\"JSON\"]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 116;
      intArray0[1] = 116;
      intArray0[2] = 116;
      intArray0[3] = 116;
      intArray0[4] = 116;
      intArray0[5] = 116;
      intArray0[6] = 116;
      intArray0[7] = 116;
      intArray0[8] = 116;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("tF&E+K_UV8]6(sT%:", intArray0);
      batchUpdateException0.getSuppressed();
      StackTraceElement stackTraceElement0 = new StackTraceElement("9U}2E<XPHEZhb", "tF&E+K_UV8]6(sT%:", "9U}2E<XPHEZhb", 116);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rmP<o", batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "$&\"J}(t<@kbG=e", batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException0._buildMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FloatNode floatNode0 = new FloatNode(2811.9868F);
      Number number0 = floatNode0.numberValue();
      Class<StringReader> class0 = StringReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(number0, class0, "{ulT<n\"");
      deserializerFactoryConfig0.deserializers();
      jsonMappingException0.getMessage();
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.initCause((Throwable) null);
      jsonMappingException0.getLocalizedMessage();
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("Cannot deserialize value of type `java.io.StringReader` from number 2811.9868: {ulT<n\"", string0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(charArrayReader0).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createParser("&jbp7U7HX\"Elhz");
      JsonMappingException.from(jsonParser0, "{ulT<n\"");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 2467L;
      System.setCurrentTimeMillis(2467L);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-44);
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0, (int) (byte) (-1), (int) (byte) (-44));
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "UNKNOWN");
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DataOutputStream> class1 = DataOutputStream.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) mapLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.io.DataOutputStream with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.databind.deser.BeanDeserializer");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1._appendPathDesc((StringBuilder) null);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) pipedOutputStream0);
      jsonFactory0.setRootValueSeparator((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("f#m", "JSON", "JSON", 1190);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("f#m", "6:vPvd~mJ|>", "JSON", 1190);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "", "", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "f#m", sQLSyntaxErrorException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) throwableArray0);
      batchUpdateException0.printStackTrace(printWriter0);
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = new JsonMappingException("", jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) sQLSyntaxErrorException0, 2);
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'Q';
      charArray0[2] = '-';
      charArray0[3] = '\\';
      charArray0[4] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayReader0, "");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("java.io.CharArrayReader[\"\"]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("short", "RDc");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "short", "RDc");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      pipedInputStream0.close();
      jsonMappingException0.prependPath((Object) pipedInputStream0, "RDc");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      MockURL.getFileExample();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "", (Throwable) sQLInvalidAuthorizationSpecException0);
      File file0 = MockFile.createTempFile("p/=R@^ricXT", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator(file0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      JsonMappingException.from(jsonGenerator0, "d%![O4iwQy`[4NM\"", (Throwable) jsonMappingException1);
      jsonMappingException1.prependPath((Object) filteringGeneratorDelegate0, 1114111);
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = 'U';
      charArray0[2] = 'f';
      charArray0[3] = '*';
      charArray0[4] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayReader0, "");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-112);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      jsonNodeFactory0.numberNode((long) (byte) (-112));
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "JSON");
      String string0 = null;
      JsonMappingException.from(jsonParser0, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setFieldName((String) null);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FloatNode floatNode0 = new FloatNode(2811.9868F);
      Number number0 = floatNode0.numberValue();
      Class<StringReader> class0 = StringReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(number0, class0, "{ulT<n\"");
      deserializerFactoryConfig0.deserializers();
      jsonMappingException0.getMessage();
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.initCause((Throwable) null);
      String string0 = jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getLocalizedMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Reader) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createParser("&jbp7U7HX\"Elhz");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "{ulT<n\"");
      String string1 = jsonMappingException1.getPathReference();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 391);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, (-570), sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("java.sql.SQLSyntaxErrorException (through reference chain: UNKNOWN[?])", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "cKY~obm))K$RV}xR8[U");
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException0.getLocalizedMessage();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2083));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      // Undeclared exception!
      try { 
        referenceType0.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("|996%,]Gab~Fyy");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("|996%,]Gab~Fyy");
      jsonMappingException_Reference0.getFieldName();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      String string0 = "<Z~58o6XSk";
      JsonMappingException.from(serializerProvider0, "<Z~58o6XSk");
      try { 
        MockURI.URI("<Z~58o6XSk", "v", "<Z~58o6XSk");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: <Z~58o6XSk:v#%3CZ~58o6XSk
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      SerializerProvider serializerProvider0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http://javax.xml.XMLConstants/feature/secure-processing");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("http://javax.xml.XMLConstants/feature/secure-processing", 41);
      jsonMappingException_Reference0.setIndex(41);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.String[41]", string0);
      assertNotNull(string0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      assertEquals(41, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jsonFactory1.createGenerator((OutputStream) pipedOutputStream0);
      jsonFactory0.setRootValueSeparator((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      batchUpdateException0.getSuppressed();
      StackTraceElement stackTraceElement0 = new StackTraceElement("ZF\"r", ";p@oq@Gk,F!;q$n_D", ": ", (-1652));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "", 1190);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(";p@oq@Gk,F!;q$n_D", "XX>c}oZ..", 5, batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("<c03s>=]d?/]f,", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ZF\"r", "com.fasterxml.jackson.databind.JsonMappingException$Reference", batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("(was java.sql.BatchUpdateException) (through reference chain: UNKNOWN[?])", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("short", "RDc");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "short", "RDc");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      pipedInputStream0.close();
      jsonMappingException0.prependPath((Object) pipedInputStream0, "RDc");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        jsonFactory2.createParser(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Wz=5TBoNv2gFj0", "Wz=5TBoNv2gFj0");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(8000);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) sequenceInputStream0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      sequenceInputStream0.close();
      jsonMappingException0._processor = (Closeable) sequenceInputStream0;
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParserSequence0, "frF>H6<C'^|\"40BM\"`");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals(8000, jsonMappingException_Reference0.getIndex());
      assertEquals("Wz=5TBoNv2gFj0 (through reference chain: com.fasterxml.jackson.core.util.JsonParserSequence[\"frF>H6<C'^|\"40BM\"`\"]->UNKNOWN[8000])", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      int int0 = 110;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonInclude_Include0, 110);
      jsonMappingException_Reference0.writeReplace();
      String string0 = "";
      jsonMappingException_Reference0.setDescription("");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        jsonFactory2.createParser(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileInputStream0, 74);
      jsonMappingException_Reference0.setFieldName("ju(Q&;abow");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<FilterInputStream> class0 = FilterInputStream.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      defaultSerializerProvider_Impl1.invalidTypeIdException(javaType0, "ju(Q&;abow", "y_R~C3j");
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaType0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MapType mapType1 = mapType0.withValueHandler(byteArrayOutputStream0);
      MapLikeType mapLikeType0 = mapType1.withContentTypeHandler(javaTypeArray0[0]);
      mapLikeType0.withKeyTypeHandler(typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[0], resolvedRecursiveType0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(objectOutputStream0);
      // Undeclared exception!
      try { 
        referenceType1.getGenericSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("", batchUpdateException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLDataException0);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class0 = Object.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      Class<ObjectOutputStream> class1 = ObjectOutputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[1]);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      resolvedRecursiveType0.isTypeOrSubTypeOf(class0);
      MapType mapType2 = mapType1.withStaticTyping();
      MapLikeType mapLikeType0 = mapType2.withKeyTypeHandler(mapType1);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(mapLikeType0, "ovPR");
      jsonMappingException0.getProcessor();
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0);
      jsonMappingException_Reference0.setFieldName("sq@OjD3}h5:Ip");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2114));
      StringBuilder stringBuilder0 = new StringBuilder("' already had index (");
      StringBuilder stringBuilder1 = placeholderForType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = placeholderForType0.getErasedSignature(stringBuilder1);
      StringBuilder stringBuilder3 = jsonMappingException0.getPathReference(stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, "UNKNOWN");
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) deserializerFactoryConfig0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      MapLikeType mapLikeType0 = mapType0.withContentValueHandler(typeFactory0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(mapLikeType0, "(was ", "Do not know how to construct standard type serializer for inclusion type: ");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id '(was ' as a subtype of [map type; class java.util.HashMap, [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]]: Do not know how to construct standard type serializer for inclusion type: ", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("^)dPEg7M~@}Pj.", 0L, 2, 2);
      JsonMappingException jsonMappingException0 = new JsonMappingException("^)dPEg7M~@}Pj.", jsonLocation0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.setDescription("^)dPEg7M~@}Pj.");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getProcessor();
      JsonFactory jsonFactory0 = new JsonFactory();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonMappingException_Reference0.getDescription();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "^)dPEg7M~@}Pj.", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.from(jsonGenerator0, (String) null, (Throwable) jsonMappingException1);
      jsonMappingException3.getLocalizedMessage();
      jsonMappingException3.addSuppressed(jsonMappingException2);
      jsonMappingException1.toString();
      jsonMappingException_Reference0.setDescription("50M.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      jsonMappingException2.prependPath((Object) mockPrintWriter1, 0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      int int0 = 63;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Can not construct IdKey for null key", (int[]) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "Can not construct IdKey for null key", (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      jsonMappingException0.getPathReference();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedInputStream0, (-1779));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("Cannot deserialize value of type `com.fasterxml.jackson.core.json.ReaderBasedJsonParser` from String \"\":  (through reference chain: UNKNOWN[?]->java.io.PipedInputStream[?])", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "G");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.getStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionException0.addSuppressed(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionException0.forEach(consumer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) sQLNonTransientConnectionException0);
      jsonMappingException0.prependPath((Object) "G", 2513);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "G");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) null, 0, 0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.setAttribute(charArrayWriter2, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }
}
