/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 20:02:44 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      try { 
        objectMapper0.writeValueAsBytes(jsonFactory1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException_Reference0.getDescription();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.core.base.ParserBase");
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.core.base.ParserBase", "", 2, intArray0);
      sQLTransactionRollbackException0.setNextException(batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("24NpNSrM&xohb/-]I", "24NpNSrM&xohb/-]I", (-1795));
      String string0 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", 15);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException1, (Object) sQLIntegrityConstraintViolationException1, "-mz&GZb!vIDq;");
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!RdTit");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!RdTit");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (JsonMappingException.Reference) null);
      sQLInvalidAuthorizationSpecException0.addSuppressed(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLWarning0, "");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1198);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringWriter stringWriter0 = new StringWriter(1198);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) stringWriter1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayList0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)105;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (-340), 1);
      dataFormatReaders_Match0.createParserWithMatch();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?}1sG%HAD__I", "`]W|x");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "?}1sG%HAD__I", (-340), (Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "com.fasterxml.jackson.databind.type.ArrayType", (Throwable) sQLClientInfoException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!RdTit");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (JsonMappingException.Reference) null);
      sQLInvalidAuthorizationSpecException0.addSuppressed(jsonMappingException0);
      sQLInvalidAuthorizationSpecException0.initCause(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShortNode.valueOf((short)62);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      String string0 = "2lN ";
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "2lN ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<DataInputStream> class0 = DataInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("wi]f%l", class0, "XY");
      PipedReader pipedReader0 = new PipedReader(123);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jsonMappingException0.prependPath((Object) pipedWriter0, "!\u0003Q__Yddtx");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.io.DataInputStream` from String \"wi]f%l\": XY (through reference chain: java.io.PipedWriter[\"!\u0003Q__Yddtx\"])", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, (-1045));
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.DataInputStream[?]", string1);
      assertEquals((-1045), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte)64);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(numericNode0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "TN");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      MockThrowable mockThrowable0 = new MockThrowable();
      StringReader stringReader0 = new StringReader("(was ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, 74);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("(was ", jsonLocation0, jsonMappingException0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertEquals(74, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("24NpNSrM&xohb/-]I", "24NpNSrM&xohb/-]I", (-1795));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) "24NpNSrM&xohb/-]I", "24NpNSrM&xohb/-]I");
      jsonMappingException0.getMessage();
      jsonMappingException0.printStackTrace();
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.JsonMappingException", (Throwable) sQLTransientException0);
      jsonMappingException0._appendPathDesc((StringBuilder) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "com.fasterxml.jackson.databind.JsonMappingException", 490);
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.lang.String[490])", string0);
      
      Integer integer0 = new Integer(65534);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, (-2207));
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.Integer[?]", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("24NpNSrM&xohb/-]I", "24NpNSrM&xohb/-]I", (-1795));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", 15);
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException1, (Object) sQLIntegrityConstraintViolationException1, "-mz&GZb!vIDq;");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 12, sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "", sQLTransientException0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string0);
      
      String string1 = jsonMappingException0.getMessage();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 232);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ShortNode shortNode0 = ShortNode.valueOf((short)153);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 1L, (short)153, (short)153);
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, jsonLocation0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, (String) null, (Throwable) jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) objectMapper0, "^lWb@9Ze4lt6%}Q2");
      JsonMappingException jsonMappingException2 = new JsonMappingException((String) null);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("@?rh3aV<VNjQS,$a@$J");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("5=", "5=", 2775);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "5=", (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "@?rh3aV<VNjQS,$a@$J", 713);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      jsonMappingException0.getProcessor();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(713);
      jsonMappingException0.getPathReference((StringBuilder) null);
      // Undeclared exception!
      try { 
        placeholderForType0.getGenericSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory4 = jsonFactory3.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonGenerator_Feature0);
      jsonFactory5.setRootValueSeparator("JSON");
      ObjectMapper objectMapper1 = new ObjectMapper();
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("JSON", "com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory1.createParser(file0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      JsonMappingException.from(jsonParser0, "Unexpected IOException (of type %s): %s", (Throwable) sQLFeatureNotSupportedException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory5);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.core.JsonFactory[?]", string0);
      assertNotNull(string0);
      
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("k:{U~Yt0E", "k:{U~Yt0E", 452, (Throwable) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(76);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("du) lpgNw3Tc`Vbt", sQLTransientException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._from = (Object) pipedInputStream0;
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ShortNode shortNode0 = ShortNode.valueOf((short)153);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ShortNode shortNode0 = ShortNode.valueOf((short)153);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      jsonParserSequence0.skipChildren();
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 713);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "^lWb@9Ze4lt6%}Q2");
      StringWriter stringWriter0 = new StringWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fasterxml.jackson.databind.cfg.MapperConfigBase", (Throwable) jsonMappingException0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter0, "com.fasterxml.jackson.databind.cfg.MapperConfigBase");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.StringWriter[\"com.fasterxml.jackson.databind.cfg.MapperConfigBase\"]", string0);
      assertNotNull(string0);
      
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "k:{U~Yt0E";
      int int0 = 452;
      Throwable throwable0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException("k:{U~Yt0E", "k:{U~Yt0E", 452, (Throwable) null);
      int int1 = 76;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(76);
      String string1 = "?KXK7|cvqzt>]T";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, "?KXK7|cvqzt>]T");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      PrintStream printStream0 = null;
      // Undeclared exception!
      try { 
        sQLTransientException0.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ShortNode shortNode0 = ShortNode.valueOf((short)153);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.skipChildren();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser1, (String) null);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: N/A\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
      
      Integer integer0 = new Integer((short)153);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, 2471);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals(2471, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("VWfn)hYq1Kv~]f", sQLClientInfoException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) hashMap0, "cCw_(!}&&<gyu3J,-[");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      StringBuilder stringBuilder0 = new StringBuilder();
      placeholderForType0.getGenericSignature(stringBuilder0);
      jsonMappingException0.getPathReference(stringBuilder0);
      assertEquals("$2java.util.HashMap[\"cCw_(!}&&<gyu3J,-[\"]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (Throwable) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON");
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", "JSON", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory3.createParser(file0);
      JsonMappingException.from(jsonParser0, "{Yf\"G!oeu:5Q@#", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "'uO/rn`#x:E*LO{L$");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, "");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setDescription("D9M>7,]iCB?TF+");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("D9M>7,]iCB?TF+", string0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "'uO/rn`#x:E*LO{L$");
      jsonMappingException0.getCause();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, "");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setDescription("D9M>7,]iCB?TF+");
      jsonMappingException0.getPathReference();
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (Throwable) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      jsonFactory1.copy();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory2 = jsonFactory0.setRootValueSeparator((String) null);
      MockFile mockFile0 = new MockFile("JSON");
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", "JSON", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory2.createParser(file0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "{Yf\"G!oeu:5Q@#", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-721));
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withOverrides(deserializationConfig0);
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, simpleMixInResolver1);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      DeserializationConfig deserializationConfig2 = new DeserializationConfig(deserializationConfig1, contextAttributes0);
      TypeFactory typeFactory0 = deserializationConfig2.getTypeFactory();
      Class<LineNumberReader> class0 = LineNumberReader.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      placeholderForType0.actualType(javaType0);
      ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      jsonMappingException1._buildMessage();
      jsonMappingException1.getPath();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "JSON");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "C(O}SK<Lt \"bH\"c)";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("C(O}SK<Lt \"bH\"c)", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      String string1 = "com.fasterxml.jackson.databind.node.NodeCursor$ArrayCursor";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.node.NodeCursor$ArrayCursor", "wac/E#bSR30g+gBi", 45, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("C(O}SK<Lt \"bH\"c)", map0, sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("wac/E#bSR30g+gBi", sQLClientInfoException1);
      sQLRecoverableException0.addSuppressed(sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) "wac/E#bSR30g+gBi", "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      jsonMappingException0.getPathReference();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      Class<LineNumberReader> class1 = LineNumberReader.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class1, typeBindings0, javaType0, (JavaType[]) null, javaType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType0, (JavaType[]) null, (JavaType) collectionType0, (JavaType) collectionType0);
      MapType mapType1 = mapType0.withTypeHandler(map0);
      MapType mapType2 = mapType1.withStaticTyping();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType2, (JavaType[]) null, (JavaType) mapType2);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(collectionLikeType0, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "xTcCO`f7CCBV]L1", (String) null);
      jsonMappingException0.clearLocation();
      jsonMappingException0.prependPath((Object) class0, 0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getOriginalMessage();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, 76);
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(deserializerFactory0, (-624));
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException2.getProcessor();
      Object object0 = new Object();
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, object0, (-620));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 713);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "^lWb@9Ze4lt6%}Q2");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "^lWb@9Ze4lt6%}Q2");
      StringWriter stringWriter2 = stringWriter1.append('o');
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter2, "G8p");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(34);
      ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      String string0 = jsonMappingException0._buildMessage();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      RawValue rawValue0 = new RawValue(objectNode0);
      ObjectNode objectNode1 = objectNode0.putRawValue("@?rh3aV<VNjQS,$a@$J", rawValue0);
      ArrayNode arrayNode0 = objectNode1.putArray("@?rh3aV<VNjQS,$a@$J");
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "", jsonLocation0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      jsonMappingException0.prependPath((Object) dataOutputStream0, (-262));
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
      jsonMappingException0.getProcessor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null KeyDeserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "xTcCO`f7CCBV]L1", (String) null);
      jsonMappingException0.clearLocation();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.JsonMappingException$Reference", "*n", 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("n=y{w- O=d:i", "", sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) "^lWb@9Ze4lt6%}Q2", "E_OYWEOn|Mr9OFCV9");
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("VWfn)hYq1Kv~]f", sQLClientInfoException0);
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) sQLClientInfoException0, "VWfn)hYq1Kv~]f");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false, "*K3?!Spc @jBy[Fzm");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // *K3?!Spc @jBy[Fzm
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ShortNode shortNode0 = ShortNode.valueOf((short)153);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      shortNode0.fieldNames();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      jsonParserSequence0.skipChildren();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper0, "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator");
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("VWfn)hYq1Kv~]f", sQLClientInfoException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) hashMap0, "cCw_(!}&&<gyu3J,-[");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException1, 52);
      assertSame(jsonMappingException0, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (Throwable) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      ObjectMapper objectMapper0 = new ObjectMapper();
      jsonFactory2.setCodec(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonFactory2.disable(jsonGenerator_Feature0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" ,:PKK,O)AH-<<7`|", (String) null, (-1));
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonFactory2, "");
      String string0 = jsonMappingException1.getMessage();
      assertEquals("N/A (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"\"])", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.JsonMappingException$Reference", "", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileInputStream0, "", sQLIntegrityConstraintViolationException0);
      MockFileInputStream mockFileInputStream1 = (MockFileInputStream)jsonMappingException0.getProcessor();
      assertEquals(0, mockFileInputStream1.available());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (Throwable) null);
      jsonMappingException0._buildMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON");
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", "JSON", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory3.createParser(file0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "{Yf\"G!oeu:5Q@#", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setIndex(0);
      JsonMappingException jsonMappingException2 = new JsonMappingException(jsonParser0, "com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", jsonMappingException1);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(4352);
      jsonMappingException_Reference0.setDescription("#{aj");
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setIndex((-1216));
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0._buildMessage();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPathReference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getDescription();
      assertEquals((-1216), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      jsonMappingException_Reference1.getDescription();
      jsonMappingException_Reference1.toString();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference1.setFieldName("MD%DA0\"~");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference1.toString();
      jsonMappingException_Reference1.setIndex(0);
      jsonMappingException_Reference0.setIndex((-1281));
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0._buildMessage();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPathReference();
      jsonMappingException_Reference1.writeReplace();
      jsonMappingException_Reference0.getDescription();
      assertEquals((-1281), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("VWfn)hYq1Kv~]f", sQLClientInfoException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "^lWb@9Ze4lt6%}Q2", "VWfn)hYq1Kv~]f");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "VWfn)hYq1Kv~]f");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "'uO/rn`#x:E*LO{L$");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, "");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "xTcCO`f7CCBV]L1", (String) null);
      jsonMappingException0.clearLocation();
      jsonMappingException0.prependPath((Object) class0, 0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
      jsonMappingException0.getProcessor();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createParser((char[]) null, (-32768), (-32768));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(jsonMappingException1);
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLNonTransientException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(beanDeserializerFactory0);
      jsonMappingException_Reference0.setIndex((-1945));
      jsonMappingException_Reference0.getDescription();
      assertEquals((-1945), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "xTcCO`f7CCBV]L1", (String) null);
      jsonMappingException0.clearLocation();
      jsonMappingException0.prependPath((Object) class0, 0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
      jsonMappingException0.getProcessor();
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException.from((JsonParser) null, "xTcCO`f7CCBV]L1", (Throwable) jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(deserializerFactory0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, (Throwable) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON");
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", "JSON", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory3.createParser(file0);
      JsonMappingException.from(jsonParser0, "{Yf\"G!oeu:5Q@#", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'o';
      charArray0[2] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charArrayReader0.read(charBuffer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayReader0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayReader0, ":@*I~b/L!#qT)gEE");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null, jsonMappingException0);
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(";9B[IY:1$");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4>&{<^=azDZ");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "string value";
      byteArrayOutputStream0.close();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0, "string value");
      String string1 = "<gJDZb";
      String string2 = ": expected close marker for %s (start marker at %s)";
      SQLTransientException sQLTransientException0 = new SQLTransientException(": expected close marker for %s (start marker at %s)");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("<gJDZb", sQLTransientException0);
      MockFile.createTempFile(": expected close marker for %s (start marker at %s)", ": expected close marker for %s (start marker at %s)");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = null;
      String string1 = "(was ";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "(was ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "xTcCO`f7CCBV]L1", (String) null);
      jsonMappingException0.clearLocation();
      jsonMappingException0.prependPath((Object) class0, 0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getProcessor();
      jsonMappingException0.getProcessor();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        placeholderForType0.getGenericSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("VWfn)hYq1Kv~]f", sQLClientInfoException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 4933);
      jsonMappingException_Reference0.getFieldName();
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      jsonMappingException_Reference0._from = object0;
      jsonMappingException_Reference0.setDescription("P=)V7$h`(%e<");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-865));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "vUebF!NU}WWJ]wS)B");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 63;
      intArray0[1] = (-334);
      intArray0[2] = 0;
      intArray0[3] = 491;
      intArray0[4] = 0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLTransactionRollbackException0);
      jsonMappingException0.prependPath((Object) sQLTransactionRollbackException0, 63);
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException: ", sQLTransactionRollbackException0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, 14);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.setIndex(34);
      assertEquals(34, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", jsonMappingException0);
      jsonMappingException0.initCause(sQLRecoverableException0);
      deserializerFactoryConfig0.abstractTypeResolvers();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) jsonMappingException2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      jsonMappingException_Reference0.getFrom();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, 1050, 2047);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "1xxL");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      int int0 = 1;
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-1035), 1);
      String string0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, (String) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) jsonMappingException0);
      jsonMappingException1.prependPath((Object) "", "");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory0.disable(jsonFactory_Feature0);
      Map<String, ClientInfoStatus> map0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "f", (Map<String, ClientInfoStatus>) null, jsonMappingException1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string1 = "UNKNOWN";
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1035));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1035
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("VWfn)hYq1Kv~]f", sQLClientInfoException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) sQLClientInfoException0, "VWfn)hYq1Kv~]f");
      jsonMappingException1.prependPath((Object) null, "VWfn)hYq1Kv~]f");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      assertEquals(8, jsonParser_Feature0.getMask());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonMappingException.from((JsonParser) null, "*yGjU{=t}R^!;pD3[6");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.writeReplace();
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLDataException sQLDataException0 = new SQLDataException("OJ4n}X'`/8=", "Failed to getValue() for field ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "?AAg55SS(", sQLDataException0);
      sQLTransientConnectionException0.printStackTrace();
      SQLException sQLException0 = new SQLException(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Failed to getValue() for field ", 125);
      jsonMappingException_Reference0._from = (Object) "OJ4n}X'`/8=";
      jsonMappingException_Reference0.setIndex(125);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "@?rh3aV<VNjQS,$a@$J", 713);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "^lWb@9Ze4lt6%}Q2");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("A1;");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[0];
      byteArrayOutputStream0.write(byteArray0);
      byteArrayOutputStream0.write(byteArray0);
      byteArrayOutputStream0.reset();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.println('[');
      jsonMappingException0.printStackTrace((PrintWriter) mockPrintWriter0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, (-1945));
      jsonMappingException_Reference0.writeReplace();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
