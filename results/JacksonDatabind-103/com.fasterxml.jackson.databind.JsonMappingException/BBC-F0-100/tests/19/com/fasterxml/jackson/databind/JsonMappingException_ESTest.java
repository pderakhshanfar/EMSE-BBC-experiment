/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 20:00:56 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInput;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Writer;
import java.sql.BatchUpdateException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BooleanNode booleanNode0 = BooleanNode.valueOf(false);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonParser0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, (DataInput) null, objectReader0, byteQuadsCanonicalizer0, 0);
      JsonLocation jsonLocation0 = uTF8DataInputJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "]26", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("(was java.sql.SQLInvalidAuthorizationSpecException) (through reference chain: UNKNOWN[0]->java.sql.SQLInvalidAuthorizationSpecException[0])", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-2876));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "IGNORE_UNKNOWN");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName((String) null);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, "YU$_m]gC]jR&", "com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator");
      StringBuilder stringBuilder0 = new StringBuilder();
      ((JsonMappingException)invalidFormatException0)._appendPathDesc(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "(was ");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN[?]");
      jsonMappingException0.prependPath((Object) null, "UNKNOWN[?]");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.databind.JsonMappingException", false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 61);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2192, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "");
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, 0);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException[0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "USE_LONG_FOR_INTS", (-1));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "rAvLi", (Throwable) sQLRecoverableException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Unexpected IOException (of type %s): %s", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 763);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("Unexpected IOException (of type %s): %s (through reference chain: UNKNOWN[763])", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShortNode shortNode0 = new ShortNode((short)1195);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) shortNode0, "(was ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "A!-", (JsonLocation) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("(2");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "(2", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "Unexpected IOException (of type %s): %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      StringBuffer stringBuffer0 = new StringBuffer("x3Ct+cw");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(">U9MrUst~=&P");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("9Ap,_T'.~([X", jsonMappingException0);
      JsonMappingException jsonMappingException1 = null;
      try {
        jsonMappingException1 = new JsonMappingException(jsonParserDelegate0, ">U9MrUst~=&P", sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, " (through reference chain: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(2", "(2");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("(2");
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "", (Throwable) null);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedInputStream0, 1);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.io.BufferedInputStream[1]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLInvalidAuthorizationSpecException0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException[?]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer((-2876));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "IGNORE_UNKNOWN");
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      String string0 = jsonMappingException_Reference1.getDescription();
      assertEquals("java.lang.Integer[\"IGNORE_UNKNOWN\"]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3360);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      BooleanNode booleanNode0 = BooleanNode.valueOf(false);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!9~|UwDbTr]RjV", "u7>(", 3360);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null, sQLInvalidAuthorizationSpecException0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("N/A\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `com.fasterxml.jackson.core.json.UTF8StreamJsonParser` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      jsonMappingException0.prependPath((Object) null, 9);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `com.fasterxml.jackson.core.json.UTF8StreamJsonParser` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.core.json.UTF8StreamJsonParser[\"com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `com.fasterxml.jackson.core.json.UTF8StreamJsonParser` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types\"]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      jsonMappingException0.prependPath((Object) sQLWarning0, (-3734));
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "j58$(A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("explicitly marked", (JsonLocation) null);
      StringBuilder stringBuilder0 = new StringBuilder("explicitly marked");
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) jsonMappingException0, "");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("IGNORE_UNKNOWN", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) null, 825);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) sQLWarning0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", (String) null, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLNonTransientException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "FJ4k^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "", (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("SK%Cr)^0}Znen{0t", ";cc=%B}JO", 0, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "SK%Cr)^0}Znen{0t", (Throwable) batchUpdateException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(">U9MrUst~=&P");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0._path = linkedList0;
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind.JsonMappingException$Reference", "Numeric value (%s) out of range of int (%d - %s)");
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "A!-", (JsonLocation) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "A!-", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) charArrayWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "o8X$s4");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonMappingException0.getProcessor();
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.core.util.DefaultIndenter", "", 500);
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.core.util.DefaultIndenter", jsonLocation0, sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "A!-", (JsonLocation) null);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "JSON");
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("o8X$s4");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pushbackInputStream0, "explicitly marked");
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }
}
