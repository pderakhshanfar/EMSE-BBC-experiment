/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:33:19 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.file.Path;
import java.sql.BatchUpdateException;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      
      String string1 = jsonMappingException_Reference0.getFieldName();
      assertNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "com.fasterxml.jackson.databind.SerializationConfig");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, "");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("GSC`RFpy{_");
      jsonMappingException0.prependPath((Object) null, "&k T");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "r+", "r+");
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("GSC`RFpy{_");
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "r+", "r+");
      StringBuilder stringBuilder0 = new StringBuilder("r+");
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor$Base", 93);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 574);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("UNKNOWN[574]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "xW=", (Throwable) null);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("_*)]W|7M", batchUpdateException0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("_*)]W|7M", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "sC``iUL");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "dmm:'9", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", (String) null, 50);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("(was java.sql.SQLNonTransientException) (through reference chain: UNKNOWN[?])", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 1849);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) path0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("xW=", "xW=");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "3FX&P`J(1?ti[{pCq");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "Cannot pass null fieldName");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) sQLClientInfoException0, "?n$kozY_{CbFVz7;.2");
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "?n$kozY_{CbFVz7;.2", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "p|w/:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "sC``iUL");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, (-1000), 12);
      int[] intArray0 = new int[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")BMm@s Yd", "JSON");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(")BMm@s Yd", intArray0, sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "charOffset", batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.reader();
      TextNode textNode0 = new TextNode("");
      JsonParser jsonParser0 = objectReader0.treeAsTokens(textNode0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "&l= vBe45>fO6,|");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("UNKNOWN[\"&l= vBe45>fO6,|\"]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "->");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintStream0, 0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("org.evosuite.runtime.mock.java.io.MockPrintStream[0]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "->");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintStream0, 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.SerializationConfig", "org.evosuite.runtime.mock.java.io.MockPrintStream[0]");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "org.evosuite.runtime.mock.java.io.MockPrintStream[0]", 0, batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Cannot pass null fieldName", 329);
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("java.lang.String[329]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "xW=", (Throwable) null);
      jsonMappingException0.prependPath((Object) null, (-2299));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("xW=", "xW=");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: xW= (through reference chain: java.lang.String[\"xW=\"]->UNKNOWN[?])", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      ShortNode shortNode0 = ShortNode.valueOf((short)0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(shortNode0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "JSON", (short)0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLTransientException0);
      jsonMappingException0._appendPathDesc((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "xW=", (Throwable) null);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 1849);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) path0, 1849);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams", "y-Ng*_Rgs");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "[]");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("Cannot deserialize Map key of type `java.io.ObjectInputStream` from String \"com.fasterxml.jackson.databind.introspect.AnnotatedWithParams\": y-Ng*_Rgs (through reference chain: java.io.ObjectInputStream[\"[]\"])", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "%M:*neW:");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("{", "", sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, ".}478Ph&RM\u0004}");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringWriter0, "Gs", (JsonLocation) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.SerializationConfig", (JsonLocation) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLDataException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      int[] intArray0 = new int[1];
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "1'#");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("pDKn*/T$fMz", "Cannot pass null fieldName", intArray0, jsonMappingException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "java.lang.String[329]", (Throwable) sQLRecoverableException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) pipedInputStream0, 83);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 1849);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      ShortNode shortNode0 = ShortNode.valueOf((short) (-1495));
      JsonParser jsonParser0 = objectReader0.treeAsTokens(shortNode0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("COV[CHO", "JSON", 4594);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "COV[CHO", (Throwable) sQLTransientException0);
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)jsonMappingException0.getProcessor();
      assertFalse(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("8!Obxcx1mn");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "8!Obxcx1mn", (Throwable) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1809), objectMapper0, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "^-Im4");
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-9999), inputStreamReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.util.ConstantValueInstantiator");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("cQwbII*Gk", "cQwbII*Gk", sQLException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("xW=", "xW=");
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Cannot pass null fieldName", 329);
      jsonMappingException_Reference0.setDescription("");
      assertEquals(329, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Cannot pass null fieldName");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("BhB<$+Asu8");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" j96HtM}:?");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLNonTransientConnectionException0, "");
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNotNull(object0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Cannot pass null fieldName", 329);
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals(329, jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(878);
      assertEquals(878, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("'");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "'", "'");
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }
}
