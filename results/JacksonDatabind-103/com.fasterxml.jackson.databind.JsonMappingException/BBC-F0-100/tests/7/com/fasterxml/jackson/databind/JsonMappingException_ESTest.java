/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 20:04:30 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (JsonMappingException.Reference) null);
      jsonMappingException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      String string0 = "";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", (String) null, 34);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sequenceInputStream0, 34);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) dataInputStream0, 34);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DataTruncation dataTruncation0 = new DataTruncation((-530), false, true, 34, 73);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("@81", "@81", 73, dataTruncation0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (JsonMappingException.Reference) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException.from((JsonParser) null, "@81", (Throwable) sQLTimeoutException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 0L, 63, 63);
      JsonMappingException jsonMappingException0 = new JsonMappingException("#object-ref", jsonLocation0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("#object-ref", "#object-ref");
      jsonMappingException_Reference1.setIndex(57);
      System.setCurrentTimeMillis(3920);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      int int0 = (-806);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, (-806));
      jsonMappingException_Reference0.setIndex((-806));
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, (-806));
      jsonMappingException1.getMessage();
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) sQLRecoverableException0, "(was java.sql.SQLRecoverableException) (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[?]->UNKNOWN[?]->UNKNOWN[?])");
      // Undeclared exception!
      try { 
        jsonMappingException2._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      int int0 = (-806);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, (-806));
      int int1 = 1946;
      jsonMappingException_Reference0.setIndex(1946);
      jsonMappingException0.addSuppressed(sQLRecoverableException0);
      jsonMappingException_Reference0.setIndex((-806));
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, (-806));
      jsonMappingException1.getOriginalMessage();
      jsonMappingException1.getMessage();
      jsonMappingException0.toString();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) null);
      stringWriter0.append((CharSequence) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      StringWriter stringWriter1 = new StringWriter();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) sQLRecoverableException0, "(was java.sql.SQLRecoverableException) (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[?]->UNKNOWN[?]->UNKNOWN[?])");
      // Undeclared exception!
      try { 
        jsonMappingException2.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException.from(jsonParser0, "Illegal character point (0x");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParser0, 0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFrom();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "!9KP~CbuIC>");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFrom();
      PipedInputStream pipedInputStream0 = new PipedInputStream(8000);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) pipedOutputStream0, (-1573));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      Object object0 = new Object();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Current token (%s) not of boolean type", "Internal error: should never end up through this code path", (Throwable) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "", sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      String string0 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      JsonParser jsonParser0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "n I=(iV|Dc#+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFrom();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserSequence0, "[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) pipedReader0, "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) charArrayWriter0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      JsonMappingException.from(deserializationContext0, "JSON", (Throwable) sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (JsonMappingException.Reference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, sQLSyntaxErrorException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      String string0 = "eelg=-Ri";
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "com.fasterxml.jackson.databind.JsonMappingException");
      jsonMappingException0.getPathReference((StringBuilder) null);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 648);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setDescription("UNKNOWN[648]");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      jsonMappingException0.toString();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.toString();
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      Object object0 = new Object();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, 648);
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) class0, 648);
      JsonMappingException jsonMappingException2 = new JsonMappingException("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `com.fasterxml.jackson.core.util.JsonParserSequence` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types", jsonMappingException1);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.JsonMappingException$Reference", (Throwable) jsonMappingException2);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) list0, 64);
      System.setCurrentTimeMillis(1L);
      jsonMappingException_Reference0.getDescription();
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      System.setCurrentTimeMillis(64);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 93, sQLIntegrityConstraintViolationException0);
      Throwable throwable0 = sQLRecoverableException0.fillInStackTrace();
      jsonMappingException_Reference0.setIndex(504);
      JsonMappingException.wrapWithPath(throwable0, jsonMappingException_Reference0);
      sQLRecoverableException0.spliterator();
      String string0 = "->";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "->");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "IcCs?+bV1>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      JsonLocation jsonLocation0 = new JsonLocation(floatNode0, 93, 93, 93, 93);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) floatNode0, 500);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", jsonMappingException1);
      sQLRecoverableException0.fillInStackTrace();
      jsonMappingException1.addSuppressed(sQLRecoverableException0);
      JsonMappingException jsonMappingException2 = new JsonMappingException("", jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) jsonMappingException2, 500);
      jsonMappingException1.getOriginalMessage();
      jsonMappingException0.clearLocation();
      jsonMappingException2.toString();
      sQLRecoverableException0.spliterator();
      jsonMappingException2.getLocalizedMessage();
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0, "(BA#(ZD0Z");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.setIndex((-1433));
      System.setCurrentTimeMillis(288L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      jsonMappingException0.toString();
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      Throwable throwable0 = sQLRecoverableException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("FAIL_ON_EMPTY_BEANS", "", "", 22);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", ")", 1693);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "", "", (-1118));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "", ")", 1693);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "(was ", "FAIL_ON_EMPTY_BEANS", (-225));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "R@43owce3j8}k<[", "K/jWxvFE6", 1869);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) ")", (-1118));
      sQLRecoverableException0.fillInStackTrace();
      jsonMappingException0.addSuppressed(throwable0);
      jsonMappingException_Reference0.setIndex(93);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath(throwable0, (Object) ")", (-1118));
      jsonMappingException1.getOriginalMessage();
      jsonMappingException0.clearLocation();
      jsonMappingException0.getMessage();
      jsonMappingException0.toString();
      sQLRecoverableException0.spliterator();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex((-1118));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.toString();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("[Source: UNKNOWN; line: -1, column: -1]", "Unexpected IOException (of type %s): %s");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getIndex();
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) "java.lang.String[\"Unexpected IOException (of type %s): %s\"]", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "}K");
      jsonMappingException0.getPathReference();
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "uLhMJF'2");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "?(Zx_Ee";
      String string1 = "com.fasterxml.jackson.databind.JsonMappingException";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "com.fasterxml.jackson.databind.JsonMappingException", 91);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("PHONE", "", 91, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException1.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("", (-4340));
      jsonMappingException_Reference1.getDescription();
      jsonMappingException_Reference1.getFieldName();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference1.getFieldName();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-4340));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`>}cJ||:", "Exponent indicator not followed by a digit", 3274, jsonMappingException0);
      MockFile mockFile0 = new MockFile("Exponent indicator not followed by a digit", ")xn0%(i@ iCdO@bkq@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Exponent indicator not followed by a digit";
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(bufferedWriter0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("`>}cJ||:", "", sQLNonTransientException0);
      JsonMappingException.from((JsonGenerator) null, "", (Throwable) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{t", "0>EX&Jc?=)|4p");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null, sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLDataException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, (String) null, sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "com.fasterxml.jackson.databind.JsonMappingException$Reference", sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?(Zx_Ee", "?(Zx_Ee", (-1148));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("?(Zx_Ee", "?(Zx_Ee", (-1148), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "h#:6?J%Yh*");
      jsonMappingException0.prependPath((Object) jsonFactory0, (-1148));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, (String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, (String) null, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")");
      Throwable throwable0 = sQLRecoverableException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, (-776));
      sQLRecoverableException0.fillInStackTrace();
      jsonMappingException0.addSuppressed(throwable0);
      jsonMappingException_Reference0.setIndex(93);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, (-776));
      jsonMappingException1.getOriginalMessage();
      jsonMappingException0.clearLocation();
      jsonMappingException1.getMessage();
      jsonMappingException0.getPath();
      jsonMappingException0.toString();
      sQLRecoverableException0.spliterator();
      jsonMappingException0.getLocalizedMessage();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(mockFileWriter0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 1;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 1);
      String string0 = "9cRc^Fs:qk?a5!";
      jsonMappingException_Reference0._desc = "9cRc^Fs:qk?a5!";
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._fieldName = "9cRc^Fs:qk?a5!";
      String string1 = "Cannot construct instance of %s, problem: %s";
      jsonMappingException_Reference0.setDescription("Cannot construct instance of %s, problem: %s");
      jsonMappingException_Reference0.setDescription("9cRc^Fs:qk?a5!");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, (-776));
      sQLRecoverableException0.fillInStackTrace();
      jsonMappingException0.addSuppressed(sQLRecoverableException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, (-776));
      jsonMappingException1.getOriginalMessage();
      jsonMappingException0.clearLocation();
      jsonMappingException1.getMessage();
      jsonMappingException0.getPath();
      jsonMappingException0.toString();
      sQLRecoverableException0.spliterator();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(4670);
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?(Zx_Ee", "", (-1148));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("?(Zx_Ee", "?(Zx_Ee", (-1148), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      File file0 = MockFile.createTempFile("?(Zx_Ee", "h#:6?J%Yh*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "UNKNOWN[?]", (Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("b;}R");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 943);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      jsonNodeFactory0.objectNode();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(filteringParserDelegate0, "[+.dg");
      jsonMappingException_Reference0.getFieldName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("[+.dg", "@+q<NTVp>d1toT?T");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonMappingException.from(jsonGenerator0, (String) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?(Zx_Ee", "", (-1148));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("?(Zx_Ee", "?(Zx_Ee", (-1148), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      File file0 = MockFile.createTempFile("?(Zx_Ee", "h#:6?J%Yh*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLFeatureNotSupportedException0);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, (-1403), (-783));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(javaType0, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "ab=t/!", (Throwable) sQLRecoverableException0);
      jsonMappingException1._buildMessage();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, (String) null);
      jsonMappingException0.getPathReference();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0, "");
      JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, (String) null);
      jsonMappingException0.getPathReference();
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory1.enable(jsonGenerator_Feature0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "");
      PipedReader pipedReader0 = new PipedReader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)3;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1029), pipedInputStream0, objectReader0, byteQuadsCanonicalizer0, byteArray0, 0, (-270), false);
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) uTF8StreamJsonParser0, "ij=N#Bgx,z1CI(BW");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("}_%yNpeZ");
      jsonMappingException0.getPathReference();
      int[] intArray0 = new int[5];
      intArray0[0] = 381;
      intArray0[1] = 10;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase", "y*X", 8000);
      MockIOException mockIOException0 = new MockIOException(sQLTimeoutException0);
      StringWriter stringWriter0 = new StringWriter(8000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase", mockIOException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "";
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) null, "com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2776, 2776);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<MockRandomAccessFile> class0 = MockRandomAccessFile.class;
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      CollectionLikeType collectionLikeType0 = typeFactory2.constructCollectionLikeType(class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder(") in base64 content");
      StringBuilder stringBuilder1 = referenceType1.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = collectionLikeType0.getGenericSignature(stringBuilder1);
      jsonMappingException0._appendPathDesc(stringBuilder2);
      jsonMappingException2.getPathReference(stringBuilder1);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase", "y*X", 8000);
      MockIOException mockIOException0 = new MockIOException(sQLTimeoutException0);
      StringWriter stringWriter0 = new StringWriter(8000);
      stringWriter0.append(',');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase", mockIOException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "";
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) null, "com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2776, 2776);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<MockRandomAccessFile> class0 = MockRandomAccessFile.class;
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      CollectionLikeType collectionLikeType0 = typeFactory2.constructCollectionLikeType(class0, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder(") in base64 content");
      referenceType1.getErasedSignature(stringBuilder0);
      jsonMappingException_Reference0.setIndex(102);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      String string0 = "2t6%'7~l`+2r8[9DK\"1";
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "2t6%'7~l`+2r8[9DK\"1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, (-1403), (-783));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(javaType0, (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "ab=t/!", (Throwable) sQLRecoverableException0);
      jsonMappingException1._buildMessage();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")");
      Throwable throwable0 = sQLRecoverableException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) null, (-776));
      sQLRecoverableException0.fillInStackTrace();
      jsonMappingException0.addSuppressed(throwable0);
      jsonMappingException_Reference0.setIndex(93);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, (-776));
      jsonMappingException1.getOriginalMessage();
      jsonMappingException0.clearLocation();
      jsonMappingException1.getMessage();
      jsonMappingException0.getPath();
      jsonMappingException0.toString();
      sQLRecoverableException0.spliterator();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(4670);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "", (-1148));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("?(Zx_Ee", "?(Zx_Ee", (-1148), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      File file0 = MockFile.createTempFile("?(Zx_Ee", "h#:6?J%Yh*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLFeatureNotSupportedException1.setNextException(sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("?(Zx_Ee", sQLFeatureNotSupportedException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, "", (Throwable) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Nz71A%1MQK\u0005Ad~k`[v");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)29;
      mockFileOutputStream0.write(byteArray0);
      JsonLocation jsonLocation0 = new JsonLocation("Nz71A%1MQK\u0005Ad~k`[v", 0L, 47, (-3254));
      jsonLocation0.toString();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "", jsonLocation0);
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("}_%yNpeZ");
      jsonMappingException0.getPathReference();
      int[] intArray0 = new int[5];
      intArray0[0] = 381;
      intArray0[1] = 10;
      intArray0[2] = 0;
      intArray0[3] = 3820;
      intArray0[4] = (-1412);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      jsonMappingException0.addSuppressed(batchUpdateException0);
      jsonMappingException0.prependPath((Object) "", "com.fasterxml.jackson.databind.JsonMappingException");
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("b;}R");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 943);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(filteringParserDelegate0, "[+.dg");
      jsonMappingException_Reference0.getFieldName();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)36, 63);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("(was ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-654), stringReader0, objectReader0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      JsonMappingException.from(jsonParser0, "");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      int int0 = (-5905);
      String string1 = "";
      String string2 = " slots -- suspect a DoS attack based on hash collisions.";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", " slots -- suspect a DoS attack based on hash collisions.", (-5905));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-5905), sQLTransactionRollbackException0);
      MockIOException mockIOException0 = new MockIOException(sQLSyntaxErrorException0);
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) null, (-5905));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-5905));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "+MqvVyt%EM=4";
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation("+MqvVyt%EM=4");
      JsonMappingException jsonMappingException0 = new JsonMappingException("+MqvVyt%EM=4", jsonLocation0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializers();
      jsonMappingException0.printStackTrace();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      jsonLocation0.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) tokenFilterContext0, 0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.toString();
      jsonLocation0.toString();
      jsonLocation0.toString();
      jsonLocation0.toString();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonLocation0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "Do not know how to construct standard type serializer for inclusion type: ";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Do not know how to construct standard type serializer for inclusion type: ", false);
      mockFileOutputStream0.release();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Do not know how to construct standard type serializer for inclusion type: ", "Do not know how to construct standard type serializer for inclusion type: ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Do not know how to construct standard type serializer for inclusion type: ", "", sQLSyntaxErrorException0);
      objectOutputStream0.writeChars("h@*L");
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "Do not know how to construct standard type serializer for inclusion type: ", (Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Unexpected IOException (of type %s): %s");
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, "Unexpected IOException (of type %s): %s", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.writeReplace();
      IOContext iOContext0 = null;
      int int0 = 730;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("->", false);
      String string0 = "LSclN^mCCH";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "LSclN^mCCH");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // LSclN^mCCH
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(serializerProvider0);
      jsonMappingException_Reference0.getIndex();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("}K", "");
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) pipedReader0, "}K");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "u4KEM*-6J^gOij";
      jsonMappingException_Reference0._desc = "u4KEM*-6J^gOij";
      String string1 = ":!8 evDS}c6NG)a7KnC";
      jsonMappingException_Reference0.setFieldName(":!8 evDS}c6NG)a7KnC");
      jsonMappingException_Reference0._fieldName = ":!8 evDS}c6NG)a7KnC";
      int int0 = 0;
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Unexpected IOException (of type %s): %s");
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator", "Unexpected IOException (of type %s): %s");
      jsonMappingException0.addSuppressed(sQLTransientException0);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(lineNumberReader0, 1);
      jsonMappingException_Reference0._index = 1860;
      jsonMappingException_Reference0.writeReplace();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getPath();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      String string1 = "Oc,eTN,jZz";
      JsonMappingException.from(deserializationContext0, "Oc,eTN,jZz");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 0, (-247));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = null;
      try {
        uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser((IOContext) null, (-1180), dataInputStream0, objectMapper0, byteQuadsCanonicalizer0, 1031);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
      }
  }
}
