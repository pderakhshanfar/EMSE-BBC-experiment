/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:13:13 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "'; no FilterProvider configured";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "'; no FilterProvider configured");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "_f9p=p_DFaMxuV%;");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockIOException0, 2800);
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      String string0 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[5];
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createParser(charArray0, (-1402), (-1402));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<PipedReader> class0 = PipedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "JSON", "JSON");
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        ((JsonMappingException)invalidFormatException0)._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Unexpected IOException (of type %s): %s", (JsonLocation) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.clearLocation();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "Unexpected IOException (of type %s): %s", (Throwable) jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-24);
      byte byte0 = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "TXNsY.]D", 2766);
      sQLWarning0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, (int) (byte) (-30));
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[13];
      charArray0[0] = 'O';
      charArray0[1] = '';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-382), 843);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("d|{~_2S;$D1XGRU6{6", "L");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParser0, "");
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException2, (-382));
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, "");
      jsonMappingException1.prependPath((Object) jsonParser0, "d|{~_2S;$D1XGRU6{6");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException2);
      // Undeclared exception!
      try { 
        jsonMappingException3._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-1403), (-1403));
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      jsonMappingException0.printStackTrace();
      jsonMappingException0.getPathReference();
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "gyScE*+r!ZN35");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("*k<%;dCEhq7OWnAE", "*k<%;dCEhq7OWnAE");
      String string0 = "?QTw";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "0");
      Object object0 = new Object();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      String string1 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, (String) null);
      jsonMappingException0.getPathReference();
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Wq", (JsonLocation) null);
      jsonMappingException0.getPathReference((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      Class<Map> class0 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(mapType1, "B|B5XR(62N", "B|B5XR(62N");
      ((JsonMappingException)invalidTypeIdException0)._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Integer integer0 = new Integer(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      invalidTypeIdException0.prependPath((Object) dataInputStream0, 0);
      invalidTypeIdException0.getPathReference();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("JSON", "Could not resolve type id 'B|B5XR(62N' as a subtype of [map type; class java.util.Map, [simple type, class java.util.Map] -> [simple type, class java.util.Map]]: B|B5XR(62N");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser((File) mockFile0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "&Q~V3%x68?i.CU[", invalidTypeIdException0);
      JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "java.io.DataInputStream[0]", (Throwable) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      Class<Map> class0 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(mapType1, "B|B5XR(62N", "B|B5XR(62N");
      ((JsonMappingException)invalidTypeIdException0)._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      arrayNode0.booleanNode(true);
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(arrayNode0);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) treeTraversingParser0, (JavaType) mapType0, jsonToken0, "Could not resolve type id 'B|B5XR(62N' as a subtype of [map type; class java.util.Map, [simple type, class java.util.Map] -> [simple type, class java.util.Map]]: B|B5XR(62N");
      mismatchedInputException0.getPath();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory jsonFactory2 = new JsonFactory();
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 't';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0, (-1403), 64);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "JSON");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", sQLNonTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      jsonMappingException_Reference0.getFrom();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON", (Throwable) sQLTimeoutException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "JSON");
      jsonMappingException1.getMessage();
      jsonMappingException1.getProcessor();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper0, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      JsonMappingException.from((JsonGenerator) uTF8JsonGenerator1, "JSON\n at [Source: (char[])\"tt\"; line: 1, column: 0]", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pvf#]J>]sD", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=Md/aP", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=Md/aP", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLRecoverableException1, 1);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      Integer integer0 = new Integer(1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(byteArrayBuilder0, (String) null);
      jsonMappingException0.prependPath((Object) jsonMappingException1, 76);
      jsonMappingException1.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3G,dHE#%E&y@");
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.toString();
      jsonLocation0.toString();
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.getLocalizedMessage();
      sQLDataException0.printStackTrace();
      JsonMappingException jsonMappingException0 = new JsonMappingException("3G,dHE#%E&y@", jsonLocation0, sQLDataException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jsonLocation0.sourceDescription();
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pvf#]J>]sD", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=Md/aP", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=Md/aP", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLRecoverableException1, 1);
      jsonMappingException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      Object object0 = jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException0.prependPath(object0, "; expected Class<ValueInstantiator>");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "; expected Class<ValueInstantiator>", (Throwable) sQLTransientConnectionException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      char[] charArray0 = new char[9];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-1403), 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "JSON Creator returned null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer", sQLNonTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, (String) null, (Throwable) sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      StringBuilder stringBuilder0 = new StringBuilder(1470);
      jsonMappingException0.getPathReference(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1000);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0, 1000);
      jsonMappingException_Reference0.setIndex((-1305));
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(1000);
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'o';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(charArrayReader0);
      jsonMappingException_Reference1.setIndex(61);
      jsonMappingException_Reference1.toString();
      SQLDataException sQLDataException0 = new SQLDataException("java.io.CharArrayReader[61]", (Throwable) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException_Reference1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pvf#]J>]sD", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=Md/aP", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=Md/aP", sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLRecoverableException0, 1);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      Object object0 = jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException0.prependPath(object0, "; expected Class<ValueInstantiator>");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException.from((JsonGenerator) null, "");
      jsonMappingException0.getProcessor();
      int int1 = 35;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 0, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oc_ZD 2icfe}<K:3-p");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal((-3212));
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "oc_ZD 2icfe}<K:3-p");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayBuilder0);
      String string0 = "cED&HX$`k&*[|q%";
      JsonMappingException jsonMappingException2 = new JsonMappingException(outputStreamWriter0, "cED&HX$`k&*[|q%", jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException2);
      jsonMappingException_Reference0.setIndex(117);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException_Reference1.getDescription();
      jsonMappingException_Reference0.setIndex((-2887));
      jsonMappingException_Reference0.setIndex(2);
      jsonMappingException_Reference0.toString();
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.JsonMappingException[2]", jsonMappingException0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      MockFile mockFile0 = new MockFile("at q6*E?G3");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "com.fasterxml.jackson.databind.JsonMappingException[2]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // com.fasterxml.jackson.databind.JsonMappingException[2]
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oc_ZD 2icfe}<K:3-p");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal((-3212));
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "oc_ZD 2icfe}<K:3-p");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'y';
      charArray0[2] = 'b';
      charArray0[3] = 'X';
      charArray0[4] = 'c';
      charArray0[5] = 'r';
      charArray0[6] = 'G';
      charArray0[7] = 'd';
      charArray0[8] = '4';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, false);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) filteringParserDelegate0, "");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SerializerProvider serializerProvider0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "READ_ONLY", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pvf#]J>]sD", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=Md/aP", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=Md/aP", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLRecoverableException1, 1);
      jsonMappingException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      sQLRecoverableException0.fillInStackTrace();
      jsonMappingException_Reference0.setFieldName("\f77^Y~xyr}rUk$");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("<8;btBJ<RLQmx", clientInfoStatus0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 3426;
      intArray0[2] = 1168;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 3426;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">s_U1s@|:L,j ox", intArray0, (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("DEFAULT_VIEW_INCLUSION", hashMap0, (Throwable) null);
      JsonMappingException.from((JsonGenerator) null, ">s_U1s@|:L,j ox", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("(was ");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = '^';
      charArray0[2] = '?';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, (-1403), 1439);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", (String) null);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null, jsonLocation0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("d", jsonMappingException0);
      jsonMappingException0.getMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, (String) null, (Throwable) jsonMappingException0);
      JsonMappingException.from(jsonParser0, "Ut;1YcJEV9}WBhO%");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "->");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pvf#]J>]sD", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=Md/aP", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=Md/aP", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLRecoverableException1, 1);
      jsonMappingException0.toString();
      jsonMappingException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      Object object0 = jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException0.prependPath(object0, "; expected Class<ValueInstantiator>");
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) "Pvf#]J>]sD", 1);
      StringBuilder stringBuilder0 = new StringBuilder(1);
      jsonMappingException0._appendPathDesc(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<Map> class0 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapType mapType0 = typeFactory1.constructMapType((Class<? extends Map>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(mapType1, "B|B5XR(62N", "B|B5XR(62N");
      ((JsonMappingException)invalidTypeIdException0)._buildMessage();
      invalidTypeIdException0.getPath();
      invalidTypeIdException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory jsonFactory2 = new JsonFactory();
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, (-1403), 64);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "JSON");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", sQLNonTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(mockFileWriter0, 66);
      jsonMappingException_Reference1.getFrom();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON", (Throwable) sQLTimeoutException0);
      JsonMappingException.from(jsonParser0, "JSON");
      jsonMappingException0.getPath();
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1000);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0, 1000);
      jsonMappingException_Reference0.setIndex(1);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(61);
      jsonMappingException_Reference0.setIndex((-49));
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "E<ll)<%uQfsXsOXX^MO");
      jsonMappingException0.getPathReference();
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, "Ww8>TQB2f4");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "U[M;QNe", (Throwable) jsonMappingException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation", "", jsonMappingException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation", jsonMappingException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException1, (Object) sQLRecoverableException0, (-1));
      jsonMappingException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLRecoverableException0);
      jsonMappingException_Reference0.getFrom();
      JsonMappingException jsonMappingException1 = new JsonMappingException("Invalid UTF-8 middle byte 0x", (JsonLocation) null);
      jsonMappingException1.getPathReference();
      jsonMappingException0.prependPath((Object) "", "-W82<^Hsl4");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLException0);
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.setIndex(2);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLException0, "");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) sQLException0, (-503));
      jsonMappingException0.getLocalizedMessage();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, jsonMappingException1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLException0);
      jsonMappingException_Reference1.getFrom();
      jsonMappingException1.getPathReference();
      jsonMappingException1.prependPath((Object) "", "; expected Class<ValueInstantiator>");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pvf#]J>]sD", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=Md/aP", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=Md/aP", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException1);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      Object object0 = jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException0.prependPath(object0, "; expected Class<ValueInstantiator>");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "; expected Class<ValueInstantiator>", (Throwable) sQLTransientConnectionException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) jsonMappingException_Reference0, 775);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.getPathReference();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pvf#]J>]sD", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=Md/aP", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=Md/aP", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLRecoverableException1, 1);
      jsonMappingException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      Object object0 = jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException0.prependPath(object0, "; expected Class<ValueInstantiator>");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "; expected Class<ValueInstantiator>", (Throwable) sQLTransientConnectionException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "java.sql.SQLRecoverableException[1]", 1, jsonMappingException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Pvf#]J>]sD", hashMap0, sQLDataException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "java.sql.SQLRecoverableException[1]", 1, map0);
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0, "#8t<\"x{HB");
      jsonMappingException_Reference0.setDescription("#8t<\"x{HB");
      jsonMappingException_Reference0.setDescription("#8t<\"x{HB");
      jsonMappingException_Reference0.setDescription("#8t<\"x{HB");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0, 74);
      jsonMappingException_Reference1.setDescription("");
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("#8t<\"x{HB");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl1, "", (Throwable) sQLNonTransientException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("", mockThrowable0);
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[3];
      intArray0[0] = 3426;
      intArray0[1] = (-1);
      intArray0[2] = 1168;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put(";jF3I{n$lz#z{.k", clientInfoStatus0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("<8;btBJ<RLQmx", intArray0, (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("<8;btBJ<RLQmx", hashMap0, batchUpdateException0);
      JsonMappingException.from((JsonGenerator) null, "/Sh958Jr${gAEf%j", (Throwable) sQLClientInfoException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "nhZ~x.lxxmb_U))Yen";
      jsonMappingException_Reference0.setFieldName((String) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, (String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "ZiDcjz");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "mHgri'wBIz";
      jsonMappingException_Reference0._fieldName = "mHgri'wBIz";
      jsonMappingException_Reference0.writeReplace();
      String string1 = "'\"&v]";
      jsonMappingException_Reference0._fieldName = "'\"&v]";
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.toString();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "'\"&v]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      int int0 = 0;
      int int1 = (-1623);
      String string0 = "X8|]R:GNYEy(t<g.";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "X8|]R:GNYEy(t<g.", 1, sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, sQLTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, (-1623), sQLRecoverableException1);
      dataTruncation0.getNextWarning();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null, (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      JsonLocation jsonLocation0 = new JsonLocation("mig>>SPZx~g2:9)", 1854L, 2475, 15);
      JsonMappingException jsonMappingException0 = new JsonMappingException("mig>>SPZx~g2:9)", jsonLocation0);
      Integer integer0 = new Integer(63);
      jsonMappingException0.prependPath((Object) integer0, 2475);
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e{a{");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'\"ys");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'\"ys", "'\"ys");
      sQLNonTransientException0.spliterator();
      Throwable throwable0 = sQLNonTransientException0.fillInStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      sQLNonTransientException0.fillInStackTrace();
      sQLNonTransientException0.printStackTrace();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._index = 79;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException0.getMessage();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPath();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, "'\"ys (through reference chain: UNKNOWN[?])", throwable0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      mapType0.withKeyType(simpleType0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl1.invalidTypeIdException(mapType0, "B|B5XR(62N", "B|B5XR(62N");
      ((JsonMappingException)invalidTypeIdException0)._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      arrayNode0.booleanNode(true);
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(arrayNode0);
      JsonMappingException.from((JsonParser) treeTraversingParser0, "com.fasterxml.jackson.databind.node.BigIntegerNode", (Throwable) invalidTypeIdException0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("g/C$0HPk<V(SA[A$w", "g/C$0HPk<V(SA[A$w", sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, "{Z{c)");
      sQLNonTransientConnectionException0.spliterator();
      jsonMappingException0.getPath();
      JsonMappingException.from((JsonParser) null, "X", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException0.fillInStackTrace();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      sQLNonTransientConnectionException0.spliterator();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jsonMappingException0.prependPath((Object) sequenceInputStream0, (-64));
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "{Z{c)");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("=Md/aP", (-3480));
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      String string0 = ">kxP6-";
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-3480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Throwable throwable0 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("Attempted to unwrap '%s' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("Unexpected IOException (of type %s): %s", 0L, 0L, 0, (-1341));
      JsonMappingException jsonMappingException0 = new JsonMappingException("Unexpected IOException (of type %s): %s", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonMappingException.from(serializerProvider0, ")8WVk<<hWzc:{smE", (Throwable) sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      DataTruncation dataTruncation0 = new DataTruncation(42, false, false, (-3382), (-3382), sQLClientInfoException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) dataTruncation0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0);
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) hashMap0, "");
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLException0);
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.setIndex(2);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLException0, "");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      // Undeclared exception!
      try { 
        objectMapper1.treeAsTokens((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pvf#]J>]sD", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=Md/aP", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=Md/aP", sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLRecoverableException0, 1);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      Object object0 = jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException0.prependPath(object0, "; expected Class<ValueInstantiator>");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("8h5QEif");
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) null, 0);
      jsonMappingException0.getLocalizedMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, (String) null, (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pvf#]J>]sD", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=Md/aP", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=Md/aP", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLRecoverableException1, 1);
      jsonMappingException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      Object object0 = jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException0.prependPath(object0, "; expected Class<ValueInstantiator>");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "wc;:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "`f?G8WS(MD");
      assertNotNull(jsonMappingException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription("`f?G8WS(MD");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      Class<MockFileReader> class0 = MockFileReader.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      
      JavaType javaType0 = resolvedRecursiveType0.getSuperClass();
      assertNull(javaType0);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-545));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, placeholderForType0);
      assertNotNull(referenceType0);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withTypeHandler(defaultSerializerProvider_Impl0);
      assertNotNull(referenceType1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType1.hasHandlers());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2737));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(91);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(91, jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(91, jsonMappingException_Reference0.getIndex());
      assertEquals(91, jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0._index = 0;
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference2);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      assertNull(jsonMappingException_Reference2.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference3 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference3);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference2));
      assertFalse(jsonMappingException_Reference3.equals((Object)jsonMappingException_Reference2));
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference3.getFieldName());
      assertEquals(0, jsonMappingException_Reference3.getIndex());
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference3);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference3, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference3, jsonMappingException_Reference0);
      assertNotSame(jsonMappingException_Reference3, jsonMappingException_Reference2);
      
      String string0 = "Pl|p_id[Q{>Rf";
      jsonMappingException_Reference2.setIndex(0);
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference3));
      assertFalse(jsonMappingException_Reference2.equals((Object)jsonMappingException_Reference0));
      assertEquals(0, jsonMappingException_Reference2.getIndex());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference3);
      assertNotSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "Pl|p_id[Q{>Rf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._desc = "'TZ";
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("'TZ", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      
      jsonMappingException_Reference0._index = 0;
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setDescription("'TZ");
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      
      JsonMappingException.Reference jsonMappingException_Reference2 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference2);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference2.getFieldName());
      assertEquals(0, jsonMappingException_Reference2.getIndex());
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference2);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference0);
      assertSame(jsonMappingException_Reference2, jsonMappingException_Reference1);
      
      String string1 = "E";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference1, true);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(0, jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      int int0 = 41;
      ObjectMapper objectMapper0 = null;
      try {
        objectMapper0 = new ObjectMapper((ObjectMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = '^';
      charArray0[2] = '?';
      charArray0[3] = '(';
      charArray0[4] = 'X';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser(charArray0, (-1403), (-1403));
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'V', '^', '?', '(', 'X'}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(5, charArray0.length);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "JSON");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: JSON", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("JSON", sQLNonTransientConnectionException0.getMessage());
      assertEquals("JSON", sQLNonTransientConnectionException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", sQLNonTransientConnectionException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: JSON", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("JSON", sQLNonTransientConnectionException0.getMessage());
      assertEquals("JSON", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: JSON", sQLTimeoutException0.toString());
      assertEquals("JSON", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "", sQLTimeoutException0);
      assertNotNull(jsonMappingException0);
      assertArrayEquals(new char[] {'V', '^', '?', '(', 'X'}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(5, charArray0.length);
      
      String string0 = jsonMappingException0.getMessage();
      assertNotNull(string0);
      assertArrayEquals(new char[] {'V', '^', '?', '(', 'X'}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals("java.sql.SQLNonTransientConnectionException: JSON", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("JSON", sQLNonTransientConnectionException0.getMessage());
      assertEquals("JSON", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: JSON", sQLTimeoutException0.toString());
      assertEquals("JSON", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(5, charArray0.length);
      assertEquals("\n at [Source: (char[])\"V^?(X\"; line: 1, column: 0]", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNull(object0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON", (Throwable) sQLTimeoutException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals("java.sql.SQLNonTransientConnectionException: JSON", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("JSON", sQLNonTransientConnectionException0.getMessage());
      assertEquals("JSON", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: JSON", sQLTimeoutException0.toString());
      assertEquals("JSON", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "tuoj<_:y5>E!W^LMza");
      assertNotNull(jsonMappingException2);
      assertArrayEquals(new char[] {'V', '^', '?', '(', 'X'}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0);
      assertNotNull(outputStreamWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(outputStreamWriter0);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(")", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      jsonMappingException0._processor = (Closeable) outputStreamWriter0;
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException2);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      
      String string0 = jsonMappingException0.getPathReference();
      assertNotNull(string0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertEquals("java.io.OutputStreamWriter[?]", string0);
      
      String string1 = jsonMappingException_Reference0.getFieldName();
      assertNull(string1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      ObjectMapper objectMapper0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<Map> class0 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      
      MapType mapType0 = typeFactory1.constructMapType((Class<? extends Map>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      assertNotNull(mapType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      assertNotNull(mapType1);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(mapType1, "B|B5XR(62N", "B|B5XR(62N");
      assertNotNull(invalidTypeIdException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertEquals("B|B5XR(62N", invalidTypeIdException0.getTypeId());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      String string0 = ((JsonMappingException)invalidTypeIdException0)._buildMessage();
      assertNotNull(string0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertEquals("B|B5XR(62N", invalidTypeIdException0.getTypeId());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      assertEquals("Could not resolve type id 'B|B5XR(62N' as a subtype of [map type; class java.util.Map, [simple type, class java.util.Map] -> [simple type, class java.util.Map]]: B|B5XR(62N", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("java.io.FilterOutputStream[?]", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("UNKNOWN[?]", string0);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("UNKNOWN[?]", string1);
      
      jsonMappingException_Reference0.setDescription((String) null);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._index = 44;
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(44, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(44, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.util.NameTransformer$2");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(44, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription("UNKNOWN[?]");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(44, jsonMappingException_Reference0.getIndex());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.util.NameTransformer$2");
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.NameTransformer$2", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.util.NameTransformer$2", sQLNonTransientException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation", (Throwable) sQLNonTransientException0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.NameTransformer$2", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.util.NameTransformer$2", sQLNonTransientException0.toString());
      
      MockThrowable mockThrowable0 = new MockThrowable(jsonMappingException0);
      assertNotNull(mockThrowable0);
      
      JsonMappingException jsonMappingException1 = new JsonMappingException("UNKNOWN[?]", mockThrowable0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      Object object0 = jsonMappingException1.getProcessor();
      assertNull(object0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.NameTransformer$2", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.util.NameTransformer$2", sQLNonTransientException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation", mockThrowable0.toString());
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setIndex(115);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(115, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      int[] intArray0 = new int[0];
      String string0 = "X/~+w)~";
      int int0 = (-1022);
      HashMap<String, ClientInfoStatus> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, ClientInfoStatus>((-1022), (-1022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1022
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 63);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(63, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._from = null;
      assertEquals(63, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._index = 1000;
      assertEquals(1000, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setIndex(63);
      assertEquals(63, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals(63, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("UNKNOWN[63]", string0);
      
      jsonMappingException_Reference0.setIndex((-737));
      assertEquals((-737), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setIndex(13);
      assertEquals(13, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string1 = jsonMappingException_Reference0.toString();
      assertNotNull(string1);
      assertEquals(13, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("UNKNOWN[63]", string1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2874);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataInputStream0);
      jsonMappingException_Reference0.setIndex(0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]}]! ho3Rwh_", "[]", 0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
