/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 04:01:37 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.BufferedInputStream;
import java.io.CharArrayReader;
import java.io.DataOutput;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.sql.BatchUpdateException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNativeValueException(jsonMappingException_Reference0, class0);
      StringBuilder stringBuilder0 = new StringBuilder();
      ((JsonMappingException)invalidFormatException0)._appendPathDesc(stringBuilder0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s-Ne");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "roAJi-?i])TB");
      Object object0 = jsonMappingException0.getProcessor();
      assertSame(mockPrintWriter0, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("_ SY<,1A^");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) defaultSerializerProvider_Impl0, "ps");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("(was java.sql.SQLTimeoutException) (through reference chain: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[\"ps\"])", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "}\"^");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ArrayNode arrayNode0 = objectNode0.putArray("#xl");
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, ": ", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, false);
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, charArrayReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1000, (-79), true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("\n at [Source: UNKNOWN; line: 1, column: 0]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException_Reference0, "Pz`\u0006j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) mockPrintWriter0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "q^|GxY)g}TcT", (String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, jsonMappingException0);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) sQLNonTransientException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ViKK", (Throwable) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std", (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("UNKNOWN[?]", intArray0);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "UNKNOWN[?]", batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("@U");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockThrowable mockThrowable0 = new MockThrowable("ub");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}\"{sF}*v^8h2}+*&o:M", mockThrowable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "CCz;[t7R}/%(]qx|", (Throwable) sQLTimeoutException0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("CZD", true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "Builder class %s does not have build method (name: '%s')");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON", "Vt>$$)yvJo?. ", 3017);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/fCkGPTN", "com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer", sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON", sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 12);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.lang.Object[12]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "Builder class %s does not have build method (name: '%s')");
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.sql.SQLTimeoutException[\"Builder class %s does not have build method (name: '%s')\"]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "Builder class %s does not have build method (name: '%s')");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("6UP!836xri6^l", (String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "6UP!836xri6^l", (Throwable) sQLRecoverableException0);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Missing external type id property '%s'");
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayReader0, "Missing external type id property '%s'", sQLTransientConnectionException0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (JsonMappingException.Reference) null);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-*;ML\"/Rb`");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("-*;ML\"/Rb`");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) mockFileInputStream0, 0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("JSON", "");
      jsonMappingException_Reference0._from = (Object) class0;
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("java.io.FilterInputStream[\"\"]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Missing external type id property '%s'");
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayReader0, "Missing external type id property '%s'", sQLTransientConnectionException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("u");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "u");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("u (through reference chain: java.sql.SQLTimeoutException[\"u\"])", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "", (JsonLocation) null);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7wPd?3'c*)nMt|Ye", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      InvalidFormatException invalidFormatException0 = new InvalidFormatException(jsonParser0, "8 @cmx0]]+fd{h-ZC>\"", objectOutputStream0, class0);
      JsonLocation jsonLocation0 = invalidFormatException0.getLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("$Kp$NZ5", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("@U", sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("u");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "u");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      Integer integer0 = new Integer(679);
      jsonMappingException0.prependPath((Object) integer0, "u");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.lang.Integer[\"u\"]->java.sql.SQLTimeoutException[\"u\"]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("u");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "u");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.toString();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: u (through reference chain: java.sql.SQLTimeoutException[\"u\"])", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "[]", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      Class<Integer> class0 = Integer.class;
      InvalidFormatException invalidFormatException0 = InvalidFormatException.from((JsonParser) null, "", (Object) filteringParserDelegate0, (Class<?>) class0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "@S`EL Xb", (Throwable) invalidFormatException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON", (Throwable) sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) jsonMappingException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      MockFile mockFile0 = new MockFile((File) null, "'F.&s9HuEDI&/1^ k}");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Missing external type id property '%s'");
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayReader0, "Missing external type id property '%s'", sQLTransientConnectionException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 585, charArrayReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException1 = new JsonMappingException("Missing external type id property '%s'", jsonLocation0, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("u");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTimeoutException0, "u");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      Object object0 = new Object();
      jsonMappingException0.prependPath(object0, 679);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("^_I)/,");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLFeatureNotSupportedException0, (-1290));
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNotNull(object0);
      assertEquals((-1290), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 0);
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals(0, jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("@U");
      jsonMappingException_Reference0.setIndex(1533);
      assertEquals(1533, jsonMappingException_Reference0.getIndex());
  }
}
