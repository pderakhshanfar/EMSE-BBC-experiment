/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 23:49:08 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "K?T}Jup'-}NJ;a";
      JsonMappingException jsonMappingException0 = new JsonMappingException("K?T}Jup'-}NJ;a");
      jsonMappingException0.prependPath((Object) "K?T}Jup'-}NJ;a", "K?T}Jup'-}NJ;a");
      jsonMappingException0._buildMessage();
      MockFile mockFile0 = new MockFile("K?T}Jup'-}NJ;a", "K?T}Jup'-}NJ;a (through reference chain: java.lang.String[\"K?T}Jup'-}NJ;a\"])");
      byte byte0 = (byte) (-127);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) objectOutputStream0, (int) (byte) (-127));
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedOutputStream0, "K?T}Jup'-}NJ;a");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) objectOutputStream0, "K?T}Jup'-}NJ;a");
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      jsonMappingException2.prependPath((Object) objectOutputStream0, (int) (byte) (-127));
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filteringParserDelegate0, (int) (byte) (-127));
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) filteringParserDelegate0, (JsonParser) filteringParserDelegate0);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, (Object) jsonParserSequence0, (int) (byte) (-127));
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      jsonMappingException6.prependPath((Object) mockPrintStream0, (int) (byte) (-127));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) jsonMappingException_Reference0, (int) (byte) (-127));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonParserSequence0, (int) (byte) (-127));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, (int) (byte) (-127));
      JsonMappingException jsonMappingException7 = null;
      try {
        jsonMappingException7 = new JsonMappingException(jsonParserSequence0, "K?T}Jup'-}NJ;a", jsonMappingException3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferRecycler0, 2);
      jsonMappingException_Reference0.toString();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "com.fasterxml.jackson.core.util.BufferRecycler[2]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, "R/tt&5-ykVW[7->-4-");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("R/tt&5-ykVW[7->-4-");
      sQLTimeoutException0.setNextException(sQLTransientConnectionException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      sQLTransientConnectionException0.printStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLTransientConnectionException0, 10);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "K?T}Jup'-}_J;ai");
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, "K?T}Jup'-}_J;ai");
      jsonMappingException0.prependPath((Object) "K?T}Jup'-}_J;ai", "K?T}Jup'-}_J;ai");
      jsonMappingException0._buildMessage();
      MockFile mockFile0 = new MockFile("K?T}Jup'-}_J;ai", "K?T}Jup'-}_J;ai (through reference chain: java.lang.String[\"K?T}Jup'-}_J;ai\"]->java.io.ByteArrayOutputStream[\"K?T}Jup'-}_J;ai\"])");
      byte byte0 = (byte)93;
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0);
      jsonMappingException_Reference0.setIndex((byte)93);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 340;
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) objectOutputStream0, 340);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedOutputStream0, "K?T}Jup'-}_J;ai");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) objectOutputStream0, "K?T}Jup'-}_J;ai");
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        jsonMappingException1._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "<:j exkw");
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "com.fasterxml.jackson.core.JsonToken", (JsonLocation) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.getPathReference();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "java.io.PipedInputStream[?]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "FIELD_NAME");
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, "FIELD_NAME");
      jsonMappingException0.prependPath((Object) "FIELD_NAME", "FIELD_NAME");
      jsonMappingException0._buildMessage();
      MockFile mockFile0 = new MockFile("FIELD_NAME (through reference chain: java.lang.String[\"FIELD_NAME\"]->java.io.ByteArrayOutputStream[\"FIELD_NAME\"])", "FIELD_NAME (through reference chain: java.lang.String[\"FIELD_NAME\"]->java.io.ByteArrayOutputStream[\"FIELD_NAME\"])");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0);
      jsonMappingException_Reference0.setIndex(2006);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) objectOutputStream0, 317);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) "FIELD_NAME", (int) (byte)93);
      Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      dataFormatReaders_Match0.createParserWithMatch();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "FIELD_NAME", (Throwable) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper();
      jsonFactory0.setRootValueSeparator("JSON");
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException.from(jsonParser0, "", (Throwable) sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON");
      char[] charArray0 = new char[0];
      jsonFactory0.createParser(charArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      jsonFactory0.setRootValueSeparator((String) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) "\"FM?-4?v-hp?`Qv", "\"FM?-4?v-hp?`Qv");
      jsonMappingException0._buildMessage();
      bufferedOutputStream0.close();
      MockFile mockFile0 = new MockFile(" %j^*d2Y|I1@bWQ4>U", "");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex((byte)42);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) pipedWriter0, 2006);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(2006);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "", "sPlpb@y-+G^i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON", (Throwable) jsonMappingException0);
      jsonMappingException1.getMessage();
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayList0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)93;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      dataFormatReaders_Match0.createParserWithMatch();
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "", (Throwable) sQLTimeoutException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
      jsonMappingException1._buildMessage();
      JsonMappingException.from((JsonParser) null, "");
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      jsonFactory0.copy();
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0, 0);
      jsonMappingException_Reference0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, 0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, (String) null, (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      arrayNode0.traverse();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "xY0V&iD,gP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0, 0);
      jsonMappingException_Reference0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "g=)", (Throwable) null);
      String string0 = "e";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("e");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      ArrayNode arrayNode1 = new ArrayNode((JsonNodeFactory) null);
      JsonParser jsonParser1 = arrayNode0.traverse();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(jsonParser1, byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("/", (-37));
      jsonMappingException_Reference0.setIndex((-37));
      jsonMappingException_Reference0.setFieldName("/");
      StringReader stringReader0 = new StringReader("'o=M| ^#Jj-mUKH");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) stringReader0, 1633);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0, 0);
      jsonMappingException_Reference0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonFactory1.configure(jsonParser_Feature0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.util.NameTransformer$3", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, "g=)", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException0, "`");
      jsonMappingException_Reference1.getFrom();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) "\"FM?-4?v-hp?`Qv", "\"FM?-4?v-hp?`Qv");
      jsonMappingException0._buildMessage();
      MockFile mockFile0 = new MockFile(" %j^*d2Y|I1@bWQ4>U", "");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex((byte)93);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      Throwable throwable0 = sQLRecoverableException0.initCause(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath(throwable0, jsonMappingException_Reference0);
      jsonMappingException1.prependPath((Object) jsonMappingException0, "?T");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLFeatureNotSupportedException0);
      JsonMappingException.from(serializerProvider0, "JSON", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "ye=hd-s+V7'})2nc", (Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) "\"FM?-4?v-hp?`Qv", "\"FM?-4?v-hp?`Qv");
      jsonMappingException0._buildMessage();
      bufferedOutputStream0.close();
      MockFile mockFile0 = new MockFile(" %j^*d2Y|I1@bWQ4>U", "");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex((byte)93);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) pipedWriter0, 2006);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(2006);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException1, (Object) byteArrayOutputStream1, "WRITE_DATES_AS_TIMESTAMPS");
      jsonMappingException2.getPath();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) "\"FM?-4?v-hp?`Qv", "\"FM?-4?v-hp?`Qv");
      jsonMappingException0._buildMessage();
      bufferedOutputStream0.close();
      MockFile mockFile0 = new MockFile("\"FM?-4?v-hp?`Qv (through reference chain: java.lang.String[\"\"FM?-4?v-hp?`Qv\"]->java.io.ByteArrayOutputStream[\"\"FM?-4?v-hp?`Qv\"])", "\"FM?-4?v-hp?`Qv (through reference chain: java.lang.String[\"\"FM?-4?v-hp?`Qv\"]->java.io.ByteArrayOutputStream[\"\"FM?-4?v-hp?`Qv\"])");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(2006);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) objectOutputStream0, 317);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jsonMappingException_Reference0.getFieldName();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) "\"FM?-4?v-hp?`Qv", "\"FM?-4?v-hp?`Qv");
      jsonMappingException0._buildMessage();
      bufferedOutputStream0.close();
      MockFile mockFile0 = new MockFile("\"FM?-4?v-hp?`Qv (through reference chain: java.lang.String[\"\"FM?-4?v-hp?`Qv\"]->java.io.ByteArrayOutputStream[\"\"FM?-4?v-hp?`Qv\"])", "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(2006);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, object0, 220);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) sQLRecoverableException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      String string0 = "\"FM?-4?v-hp?`Qv";
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, "\"FM?-4?v-hp?`Qv");
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) "\"FM?-4?v-hp?`Qv", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(")", 0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      char[] charArray0 = new char[2];
      charArray0[1] = 'T';
      char[] charArray1 = new char[9];
      charArray1[0] = 'T';
      charArray1[1] = 'T';
      charArray1[2] = 'T';
      charArray1[3] = 'T';
      charArray1[4] = 'T';
      charArray1[5] = '.';
      charArray1[6] = 'g';
      charArray1[7] = 'T';
      charArray1[8] = 'T';
      jsonFactory0.createParser(charArray1, 19, 198);
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) jsonParserDelegate0, "->");
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      BinaryNode binaryNode0 = new BinaryNode(byteArray0, 0, 0);
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(binaryNode0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserDelegate0, "JSON");
      objectMapper1.addHandler((DeserializationProblemHandler) null);
      binaryNode0.findValuesAsText("JSON");
      jsonMappingException_Reference0.getFrom();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "JSON", 0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      binaryNode0.canConvertToInt();
      jsonFactory0.configure(jsonParser_Feature0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@9u8+(K", sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransientConnectionException0, 1956);
      jsonMappingException_Reference0.setDescription("@9u8+(K");
      jsonMappingException_Reference0.toString();
      JsonMappingException.from((JsonGenerator) null, "JSON", (Throwable) sQLTransientConnectionException0);
      jsonMappingException0.prependPath((Object) sQLTransactionRollbackException0, "V[.Qtw+8/");
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException1.getMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) sQLTransactionRollbackException0);
      JsonMappingException.from(jsonParser0, "@9u8+(K", (Throwable) jsonMappingException2);
      JsonMappingException.from((JsonGenerator) null, "V@<?{f>");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("@NBo0Pn}Ka.hRmU", 0L, 0L, (-1676), (-1676));
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("@NBo0Pn}Ka.hRmU", jsonLocation0, sQLTransientConnectionException0);
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException0.getPathReference((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "com.fasterxml.jackson.databind.node.LongNode");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(")", 0);
      jsonMappingException_Reference0.setFieldName(")");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      char[] charArray0 = new char[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[0] = '7';
      charArray0[1] = 'T';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonMappingException.from((JsonParser) jsonParserDelegate0, "->");
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "MIME", "");
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, (String) null, (String) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      LinkedList<JsonMappingException.Reference> linkedList0 = jsonMappingException0._path;
      jsonMappingException1._path = null;
      jsonMappingException1.getMessage();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidTypeIdException): Could not resolve type id 'null' as a subtype of null", true);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockFileWriter0, "w,-/e;v104J[yGHx]K");
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 198);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("@NBo0Pn}Ka.hRmU", 0L, 0L, (-1676), (-1676));
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("@NBo0Pn}Ka.hRmU", jsonLocation0, sQLTransientConnectionException0);
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl1, "", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, "\"FM?-4?v-hp?`Qv");
      jsonMappingException0.prependPath((Object) "\"FM?-4?v-hp?`Qv", "\"FM?-4?v-hp?`Qv");
      jsonMappingException0._buildMessage();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      JsonMappingException.from(jsonParser0, "~q97k", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9[$4W~/F8I=KCs\"", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)0;
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.getChannel();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser jsonParser0 = jsonFactory2.createParser("org.evosuite.runtime.mock.java.io.MockFileOutputStream[?]");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0, collectionLikeType0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) mapLikeType0, jsonToken0, "JSON");
      ((JsonMappingException)mismatchedInputException0)._buildMessage();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(")", 0);
      jsonMappingException_Reference0.setFieldName(")");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = 'T';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonMappingException.from((JsonParser) jsonParserDelegate0, "->");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9[$4W~/F8I=KCs\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9[$4W~/F8I=KCs\"", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.getChannel();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex((byte)70);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) pipedInputStream0, (int) (byte)70);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("@NBo0Pn}Ka.hRmU", 0L, 0L, (-1676), (-1676));
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("@NBo0Pn}Ka.hRmU", jsonLocation0, sQLTransientConnectionException0);
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockFile mockFile0 = new MockFile("UNKNOWN[?]");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 34;
      intArray0[1] = 34;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("& ;.h8YGF#vd8dU3?V-", "Cannot update Map.Entry values", 34, intArray0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("I6c", "Cannot update Map.Entry values", "", 623);
      stackTraceElementArray0[0] = stackTraceElement0;
      batchUpdateException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (-4173));
      jsonMappingException_Reference0.setIndex((-4173));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "Cannot update Map.Entry values", 115);
      jsonMappingException_Reference0.getIndex();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0);
      jsonMappingException_Reference0.getFrom();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 41);
      JsonLocation jsonLocation0 = new JsonLocation(pushbackInputStream0, 1095L, 0, 0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLSyntaxErrorException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(500);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeSet> class0 = TreeSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      jsonMappingException_Reference0._desc = "";
      StringBuilder stringBuilder0 = new StringBuilder("#yv@&nx,");
      StringBuilder stringBuilder1 = collectionType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = placeholderForType0.getErasedSignature(stringBuilder1);
      jsonMappingException1.getPathReference(stringBuilder2);
      PipedReader pipedReader0 = new PipedReader();
      jsonMappingException0.prependPath((Object) pipedReader0, 1861);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "#yv@&nx,");
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException2._appendPathDesc(stringBuilder2);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "->");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0, 0);
      jsonMappingException_Reference0.toString();
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "+8M-V,q!M";
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "+8M-V,q!M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      NamedType[] namedTypeArray0 = new NamedType[8];
      Class<JsonMappingException> class0 = JsonMappingException.class;
      NamedType namedType0 = new NamedType(class0);
      namedTypeArray0[0] = namedType0;
      Class<BufferedWriter> class1 = BufferedWriter.class;
      NamedType namedType1 = new NamedType(class1);
      namedTypeArray0[1] = namedType1;
      Class<FilterInputStream> class2 = FilterInputStream.class;
      NamedType namedType2 = new NamedType(class2);
      namedTypeArray0[2] = namedType2;
      Class<BufferedReader> class3 = BufferedReader.class;
      NamedType namedType3 = new NamedType(class3, "com.fasterxml.jackson.databind.JsonMappingException");
      namedTypeArray0[3] = namedType3;
      Class<MockPrintWriter> class4 = MockPrintWriter.class;
      NamedType namedType4 = new NamedType(class4);
      namedTypeArray0[4] = namedType4;
      NamedType namedType5 = new NamedType(class0);
      namedTypeArray0[5] = namedType5;
      NamedType namedType6 = new NamedType(class0);
      namedTypeArray0[6] = namedType6;
      NamedType namedType7 = new NamedType(class2);
      namedTypeArray0[7] = namedType7;
      objectMapper0.registerSubtypes(namedTypeArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "com.fasterxml.jackson.databind.JsonMappingException", (Throwable) sQLTransactionRollbackException0);
      jsonMappingException0.getPathReference();
      Class<CharArrayReader> class5 = CharArrayReader.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")[LTBdiU%");
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLInvalidAuthorizationSpecException0);
      objectMapper0.canSerialize(class5, atomicReference0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(serializerProvider0, (-1170));
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.from(serializerProvider0, "QUOTE_NON_NUMERIC_NUMBERS", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      String string0 = "BeanSerializer for ";
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "BeanSerializer for ");
      jsonMappingException0.prependPath((Object) serializerProvider0, 986);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "#(1M}Kxq,";
      JsonMappingException jsonMappingException0 = new JsonMappingException("#(1M}Kxq,");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      OutputStream outputStream0 = null;
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException1._path = linkedList0;
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (-3141), 2343);
      dataFormatReaders_Match0.createParserWithMatch();
      JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException2);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "", (-1833), sQLNonTransientException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNWRAP_SINGLE_VALUE_ARRAYS", (Throwable) null);
      jsonMappingException0.prependPath((Object) "UNWRAP_SINGLE_VALUE_ARRAYS", "?1&9_~Q.R+");
      jsonMappingException0.toString();
      jsonMappingException0.getPathReference();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "UNWRAP_SINGLE_VALUE_ARRAYS", true, 'B', (-1994));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 26)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('T');
      charArrayWriter0.flush();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter1, "");
      jsonMappingException_Reference0.setFieldName("^)=mi!)`D&@");
      jsonMappingException_Reference0.getFrom();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath((Object) "MW2DZfC(CxbO", "");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 0);
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      IOContext iOContext0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonMappingException0.getPath();
      objectMapper0.reader(jsonNodeFactory0);
      ByteArrayBuilder byteArrayBuilder0 = null;
      try {
        byteArrayBuilder0 = new ByteArrayBuilder((-32768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      BinaryNode binaryNode0 = new BinaryNode(byteArray0, 0, 0);
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(binaryNode0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserDelegate0, "JSON");
      objectMapper1.addHandler((DeserializationProblemHandler) null);
      jsonMappingException_Reference0.getFrom();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "JSON", 0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      binaryNode0.canConvertToInt();
      jsonFactory0.configure(jsonParser_Feature0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("9u8+(K", sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransientConnectionException0, 1956);
      jsonMappingException_Reference0.setDescription("9u8+(K");
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "JSON", (Throwable) jsonMappingException0);
      jsonMappingException1.prependPath((Object) null, "*E.3@'#C0L$pR'r");
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException2.getMessage();
      JsonMappingException.from((JsonGenerator) null, "JSON", (Throwable) sQLTransactionRollbackException0);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.getPathReference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      jsonMappingException0.getProcessor();
      String string0 = "\\5srj*Oac\\vNX:k";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "\u0005srj*OacvNX:k");
      int int0 = 0;
      jsonMappingException_Reference0.setIndex(0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "n{z57OkJma%9DD");
      BufferRecycler bufferRecycler0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0005srj*OacvNX:k");
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, false, "\u0005srj*OacvNX:k");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \u0005srj*OacvNX:k
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "JSON");
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      int int0 = 1144;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1144);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Object with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 65535);
      jsonMappingException_Reference0.setDescription(")");
      jsonMappingException_Reference0.setFieldName((String) null);
      jsonMappingException_Reference0.setIndex(34);
      jsonMappingException_Reference0.getFrom();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Throwable throwable0 = null;
      JsonMappingException.from(serializerProvider0, "JSON", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      jsonMappingException_Reference0.toString();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.getIndex();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockIOException mockIOException0 = new MockIOException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, mockIOException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "ALWAYS_NULL", map0, mockIOException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLClientInfoException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("UNKNOWN[?]", "UNKNOWN[?]", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 86);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 49, dataInputStream0, objectMapper0, byteQuadsCanonicalizer0, 2);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(uTF8DataInputJsonParser0, 2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "}E'\"(q#:F1l):");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, (-2036));
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      jsonMappingException_Reference0._desc = null;
      charArray0[1] = '3';
      charArray0[2] = 'm';
      charArray0[3] = 'a';
      charArray0[4] = '?';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-2036), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }
}
