/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:46:19 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException.fromUnexpectedIOE(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayNode arrayNode0 = objectMapper0.valueToTree((Object) jsonFactory0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
      String string0 = "";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)78;
      byteArray0[0] = byte0;
      byte byte1 = (byte)29;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-29);
      byteArray0[2] = byte2;
      String string1 = "";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, string0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      String string2 = "5cto1`b<[vK:*kqFf1";
      File file0 = MockFile.createTempFile(string0, string2);
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) lineNumberReader0);
      objectMapper0.setInjectableValues(injectableValues_Std1);
      String string3 = "}gm";
      JsonMappingException.from(jsonParser0, string3, (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createNonBlockingByteArrayParser();
      MockThrowable mockThrowable0 = new MockThrowable("6IkvsIRn");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("ry", mockThrowable0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("6IkvsIRn");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      String string0 = ",C*$0S23>";
      jsonMappingException0.prependPath((Object) jsonFactory0, "ry");
      // Undeclared exception!
      try { 
        jsonMappingException1.prependPath((Object) mockThrowable0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      Class<DataOutputStream> class0 = DataOutputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      StringBuilder stringBuilder0 = new StringBuilder("com.fasterxml.jackson.databind.node.MissingNode");
      StringBuilder stringBuilder1 = referenceType1.getGenericSignature(stringBuilder0);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference(stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Spill-over slots in symbol table with ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayNode0.traverse((ObjectCodec) objectReader0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~0.f:K", "~0.f:K", (-16));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "UNKNOWN[?]", (Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, 0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._fieldName = "java.io.PipedInputStream[0]";
      jsonMappingException_Reference0.setIndex(0);
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("java.io.PipedInputStream[0]", string0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "java.io.PipedInputStream[0]");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(jsonMappingException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(pipedInputStream0, "", sQLTransactionRollbackException0);
      jsonMappingException1._buildMessage();
      String string1 = jsonMappingException1.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 354);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = new JsonMappingException("");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      arrayNode0.traverse((ObjectCodec) objectReader0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "1EQ'S6f(~n9/VNS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 256;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) jsonParserSequence0, "");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("(was java.sql.BatchUpdateException) (through reference chain: com.fasterxml.jackson.core.util.JsonParserSequence[\"\"])", string0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "");
      String string1 = jsonMappingException1.getMessage();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1954;
      intArray0[2] = 22;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1954;
      intArray0[7] = 1954;
      intArray0[8] = 1954;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "FAIL_ON_EMPTY_BEANS", 1954, intArray0);
      batchUpdateException0.getNextException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "FAIL_ON_EMPTY_BEANS", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("C&", "0/H\"6}gjS=dCWV");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 56319, 56319);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      SQLDataException sQLDataException0 = new SQLDataException("C&");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, "");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "4%Mkk#$2c)X", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("Idt2u_&/gK6I>bO?3w]", sQLClientInfoException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, "Idt2u_&/gK6I>bO?3w]");
      String string0 = jsonMappingException_Reference1.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals("UNKNOWN[\"Idt2u_&/gK6I>bO?3w]\"]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("?N_LrSk");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[]", "[]", sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) "[]", (-1857));
      jsonMappingException0.prependPath((Object) null, (-956));
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, ")+}zWP`\"0ynkm36nQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Class<MockPrintWriter> class0 = MockPrintWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "UNKNOWN[?]");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException1.prependPath((Object) bigInteger0, 1);
      Object object0 = new Object();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) bufferedReader0, "UNKNOWN[?]");
      jsonMappingException0.getProcessor();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "3&$_Dp#,!", (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 231;
      int[] intArray1 = new int[1];
      intArray1[0] = 263;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) jsonParserSequence0, "P<YXITvjcW&;J");
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "P<YXITvjcW&;J");
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 231;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter1, true, true);
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "", (Throwable) mockIOException0);
      jsonMappingException0.getPathReference((StringBuilder) null);
      jsonMappingException0.getPathReference((StringBuilder) null);
      System.setCurrentTimeMillis(231);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 231;
      intArray0[1] = 0;
      intArray0[2] = 231;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 125, (byte)86);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("=QukJi)z_,V");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("", "e");
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonLocation jsonLocation0 = new JsonLocation(pipedInputStream0, 0, 92, 0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "X?A*:42FA7D~6[\"7_#<", jsonLocation0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(jsonMappingException0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2362, (-2246));
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) byteArrayInputStream0, "");
      jsonMappingException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "P<YXITvjcW&;J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2172);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('y');
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) charArrayWriter2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = iOContext0.allocConcatBuffer();
      charsToNameCanonicalizer0.findSymbol(charArray0, 2, (-1416), 1220);
      char[] charArray1 = new char[1];
      charArray1[0] = 'N';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1255), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray1, 0, 1, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(readerBasedJsonParser0, 0);
      jsonMappingException_Reference0.getIndex();
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "WE.");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 11, 93);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("34@*G>g");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) charArrayWriter0, (-4174));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("=^GTT#", jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(bigIntegerNode0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filteringParserDelegate0, "=^GTT#");
      String string0 = jsonMappingException1._buildMessage();
      assertEquals("java.sql.SQLTransientException: 34@*G>g (through reference chain: com.fasterxml.jackson.core.filter.FilteringParserDelegate[\"=^GTT#\"]->java.io.CharArrayWriter[?])", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "YaD7g&_G*_sA>", "k9O-4VZ4");
      jsonMappingException0.getMessage();
      jsonMappingException0.toString();
      jsonMappingException0.getMessage();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.clearLocation();
      jsonMappingException0.getPath();
      jsonMappingException0.getMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "e#fbOZ;$", (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      jsonMappingException0.prependPath((Object) byteArrayOutputStream0, ";");
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "Qffb?kv+21";
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "Qffb?kv+21");
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Qffb?kv+21", "l-|`ejLvz9cUl]*^");
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      // Undeclared exception!
      try { 
        jsonMappingException0.addSuppressed(jsonMappingException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-suppression not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, 0);
      jsonMappingException_Reference0.toString();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.io.PipedInputStream[0]", "java.io.PipedInputStream[0]");
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "java.io.PipedInputStream[0]", sQLFeatureNotSupportedException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(32);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "java.io.PipedInputStream[0]");
      StringBuilder stringBuilder1 = placeholderForType0.getErasedSignature(stringBuilder0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder2 = jsonMappingException0.getPathReference(stringBuilder1);
      jsonMappingException0._appendPathDesc(stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("C&", "0/H\"6}gjS=dCWV");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1123, 248);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "0/H\"6}gjS=dCWV");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature1);
      MockFile mockFile0 = new MockFile("JSON");
      File file0 = MockFile.createTempFile("JSON", "", (File) mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      JsonMappingException.from(jsonGenerator0, "PyM3_I'Yy[Yi:z");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      iOContext0.allocConcatBuffer();
      charArray0[0] = 'N';
      char[] charArray1 = new char[4];
      charArray1[0] = 'N';
      charArray1[1] = 'N';
      charArray1[2] = 'N';
      charArray1[3] = 'N';
      charsToNameCanonicalizer0.findSymbol(charArray1, 2, 0, 1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 194, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 3, 0, false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(readerBasedJsonParser0, 3);
      jsonMappingException_Reference0.getIndex();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedReader0, "7b3D$5| gBoGtFpqq5");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException0.getPath();
      jsonMappingException0.getProcessor();
      jsonMappingException0._buildMessage();
      jsonMappingException0._appendPathDesc(stringBuilder0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "oZvv%2P:MV^`M.hkKYK", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      jsonMappingException0._buildMessage();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException3 = JsonMappingException.from(serializerProvider0, "oZvv%2P:MV^`M.hkKYK", (Throwable) jsonMappingException2);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", ": ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)22;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)76, (byte)116);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pushbackInputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pushbackInputStream0, ": ");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 231;
      intArray0[1] = 0;
      intArray0[2] = 1876;
      intArray0[3] = (-1610);
      intArray0[4] = 98;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "=QukJi)z_,V", intArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) "", "");
      assertNotNull(jsonMappingException0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, (String) null, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, "");
      String string0 = ((JsonMappingException)invalidFormatException0)._buildMessage();
      jsonMappingException_Reference0.getFrom();
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 432);
      SQLDataException sQLDataException0 = new SQLDataException("");
      PushbackReader pushbackReader1 = new PushbackReader(pushbackReader0);
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) pushbackReader1, 432);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl2, "Cannot deserialize value of type `com.fasterxml.jackson.core.json.ReaderBasedJsonParser` from String [N/A]: ");
      String string1 = jsonMappingException0.getPathReference();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, "");
      stringReader0.read();
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "");
      MockThrowable mockThrowable0 = new MockThrowable("");
      jsonMappingException0.addSuppressed(mockThrowable0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, 1);
      jsonMappingException1.getPath();
      jsonMappingException0.getPathReference();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "UNKNOWN[1]", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "HL.e%*XKMj*x\"\"r";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      boolean boolean0 = true;
      DataTruncation dataTruncation0 = new DataTruncation(1717, true, true, 1717, 1717);
      dataTruncation0.getNextWarning();
      sQLClientInfoException0.setNextException((SQLException) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "HL.e%*XKMj*x\"\"r", (Throwable) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("C&", "C&");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1123, 1123);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("C&");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, "|dn=");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("|dn=", "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)2;
      byteArray0[6] = (byte) (-76);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte) (-30);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 248, (byte)54);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      jsonMappingException_Reference0.setFieldName("|dn=");
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 231;
      intArray0[1] = 0;
      intArray0[2] = 1876;
      intArray0[3] = (-1610);
      intArray0[4] = 98;
      String string0 = "com.fasterxml.jackson.core.io.CharacterEscapes";
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.io.CharacterEscapes", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedWriter0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(34);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      IntNode intNode0 = IntNode.valueOf(663);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(intNode0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonParserSequence0);
      jsonMappingException_Reference1.getDescription();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(pipedWriter0, 34);
      jsonMappingException_Reference2.getDescription();
      jsonMappingException_Reference2.getFrom();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, "java.io.PipedWriter[34]");
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      jsonMappingException_Reference0.getFrom();
      PipedReader pipedReader1 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 256);
      InvalidFormatException invalidFormatException1 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) objectReader0, (-263));
      assertSame(invalidFormatException0, invalidFormatException1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("can only convert 1-character Strings", class0, (String) null);
      String string0 = ((JsonMappingException)invalidFormatException0)._buildMessage();
      assertEquals("Cannot deserialize value of type `com.fasterxml.jackson.core.json.ReaderBasedJsonParser` from String \"can only convert 1-character Strings\": null", string0);
      
      jsonMappingException_Reference0.getFrom();
      PipedReader pipedReader0 = new PipedReader();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1222);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1, 432);
      String string1 = jsonMappingException_Reference0.toString();
      assertNotNull(string1);
      assertEquals("java.io.ByteArrayOutputStream[?]", string1);
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(bufferedWriter0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 484;
      intArray0[1] = 859;
      intArray0[2] = (-416);
      MockIOException mockIOException0 = new MockIOException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[]", "", intArray0, mockIOException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("[]", batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("4!=gRJh|6+<Px\"|", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      JsonLocation jsonLocation0 = new JsonLocation(mockPrintWriter0, 0L, 2540L, 0, 0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileReader0, (String) null, jsonLocation0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-160);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      DeserializationConfig deserializationConfig0 = null;
      try {
        deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, simpleMixInResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) sQLFeatureNotSupportedException0, "|dn=");
      int int0 = 2;
      jsonMappingException0.prependPath((Object) sQLFeatureNotSupportedException0, 2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(pipedInputStream0, "|dn=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 63;
      PipedReader pipedReader0 = new PipedReader(63);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      String string0 = "xQ+|C";
      String string1 = "HiV,M~OsKm:5{U<";
      int int1 = 94;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("xQ+|C", "xQ+|C");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "HiV,M~OsKm:5{U<", 94, sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{Ci", "gi,q)+ZsXB(", (-3578), sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, "xQ+|C", sQLNonTransientException0);
      TypeFactory.defaultInstance();
      Class<InputStreamReader> class0 = InputStreamReader.class;
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = ")\"3XrVS!~po5cF*`0";
      int int0 = 20;
      String string1 = "&J>[O\\:2";
      String string2 = "o0X+/C=TB.ak";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("o0X+/C=TB.ak");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&J>[O:2", "&J>[O:2", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(")\"3XrVS!~po5cF*`0", sQLTimeoutException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(")\"3XrVS!~po5cF*`0", ")\"3XrVS!~po5cF*`0", 20, sQLTransactionRollbackException0);
      sQLNonTransientConnectionException0.initCause(sQLTransientException0);
      String string3 = "7? H}=";
      MockFile mockFile0 = new MockFile("7? H}=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTransientException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(40);
      StringBuffer stringBuffer0 = new StringBuffer();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(charArrayWriter1);
      JsonMappingException jsonMappingException0 = new JsonMappingException("i=+F)b5?i2o/", jsonLocation0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("i=+F)b5?i2o/\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 498;
      intArray0[1] = 498;
      intArray0[2] = 498;
      intArray0[3] = 498;
      intArray0[4] = 498;
      intArray0[5] = 498;
      intArray0[6] = 498;
      intArray0[7] = 498;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(")", intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(")", "|\rYFhlH)", 498, batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, ")", (Throwable) sQLTransactionRollbackException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "[c~GAbL'fD]");
      jsonMappingException_Reference0.setIndex((-3842));
      assertEquals((-3842), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("idH4m=Zqw.w");
      StringWriter stringWriter0 = new StringWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("idH4m=Zqw.w (through reference chain: java.io.StringWriter[?])", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'm';
      charArray0[2] = '#';
      charArray0[3] = ' ';
      charArray0[4] = '{';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) filteringParserDelegate0, "JSON");
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter1, true, false);
      JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "\"QDaD,Osn\"VW5_JF");
      JsonMappingException.from((JsonParser) filteringParserDelegate0, "JSON", (Throwable) jsonMappingException1);
      jsonMappingException0.getPath();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "idH4m=Zqw.w (through reference chain: java.io.StringWriter[?])");
      JsonMappingException.from((JsonGenerator) null, "idH4m=Zqw.w");
      String string1 = jsonMappingException1.getMessage();
      assertEquals("JSON\n at [Source: (char[])\"zm# {\"; line: 1, column: 0]", string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("gP_");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) mockFileWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("C&", "0/H\"6}gjS=dCWV");
      byte[] byteArray0 = new byte[0];
      int int0 = 56319;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 56319, 478);
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 478, 3600, 41);
      JsonMappingException jsonMappingException0 = new JsonMappingException("0/H\"6}gjS=dCWV", jsonLocation0, sQLSyntaxErrorException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonLocation0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = "9qx{";
      jsonMappingException_Reference0.getDescription();
      String string0 = "mrfJ>";
      jsonMappingException_Reference0.setFieldName("mrfJ>");
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "5;o'J>c3+H<zv!I");
      jsonMappingException0.getPathReference();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int int0 = 1;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(432);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("can only convert 1-character Strings", class0, (String) null);
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      jsonMappingException_Reference0.getFrom();
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader(pipedReader0, (-2181));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "<X+\"LeH;-2O}";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter0, "<X+\"LeH;-2O}");
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.JsonMappingException");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "com.fasterxml.jackson.databind.JsonMappingException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      pushbackInputStream0.close();
      jsonMappingException_Reference0._from = (Object) pushbackInputStream0;
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.type.PlaceholderForType");
      sequenceInputStream0.skip(0L);
      jsonMappingException_Reference0.setFieldName("");
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, 95, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 95);
      JsonLocation jsonLocation0 = uTF8DataInputJsonParser0.getCurrentLocation();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<MockFileWriter> class0 = MockFileWriter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType0, "com.fasterxml.jackson.databind.type.PlaceholderForType", "");
      SQLWarning sQLWarning0 = new SQLWarning(jsonMappingException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("Numeric value (", jsonLocation0, sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, 0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(0);
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("java.io.PipedInputStream[0]", string0);
      assertNotNull(string0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }
}
