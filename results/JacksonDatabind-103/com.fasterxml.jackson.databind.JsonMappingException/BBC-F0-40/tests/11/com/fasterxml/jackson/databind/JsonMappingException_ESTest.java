/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:35:42 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.MathContext;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParser0, (-422));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonFactory0, 559);
      ArrayList<JsonMappingException.Reference> arrayList0 = new ArrayList<JsonMappingException.Reference>();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(jsonMappingException1, jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("", clientInfoStatus0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`#", "", (int[]) null, (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(":<:ORJb5", hashMap0, batchUpdateException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.fasterxml.jackson.databind.deser.DeserializerCache", "", 30, map0, sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.deser.DeserializerCache", sQLClientInfoException1);
      sQLClientInfoException1.getSuppressed();
      batchUpdateException0.setNextException(sQLClientInfoException0);
      jsonMappingException0.getLocalizedMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectReader objectReader0 = objectMapper1.reader();
      objectMapper1.valueToTree((Object) objectReader0);
      String string0 = "";
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, string0, (Throwable) batchUpdateException0);
      jsonMappingException1.getPathReference();
      JsonMappingException.from(deserializationContext0, string0, (Throwable) jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Nu=5W");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<TextNode> class0 = TextNode.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) filteringParserDelegate0, (JsonParser) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0, "[]");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "", (Throwable) jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) jsonParserSequence0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      hashMap0.clone();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "IvjE\"zX8{H4I";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IvjE\"zX8{H4I");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2639L);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "i]@U)W<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLDataException sQLDataException0 = new SQLDataException("", "com.fasterxml.jackson.databind.exc.PropertyBindingException", (-2737), sQLTransientConnectionException0);
      sQLDataException0.setNextException(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLDataException0);
      jsonMappingException0.getMessage();
      System.setCurrentTimeMillis(0L);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) bufferedInputStream0, "");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (-828), hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) "", "");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("12\" 1ql gu,O,9;^;Pw");
      jsonParser0.getValueAsDouble();
      JsonMappingException.from(jsonParser0, "12\" 1ql gu,O,9;^;Pw");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLClientInfoException) (through reference chain: java.lang.String[\"\"])", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "[Y+S~";
      JsonMappingException jsonMappingException0 = new JsonMappingException("[Y+S~", (JsonLocation) null);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<MockFileWriter> class0 = MockFileWriter.class;
      Class<DataInputStream> class1 = DataInputStream.class;
      JavaType javaType0 = null;
      TypeBindings.createIfNeeded(class1, (JavaType) null);
      JavaType[] javaTypeArray0 = new JavaType[4];
      Class<PipedInputStream> class2 = PipedInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      JavaType[] javaTypeArray1 = new JavaType[0];
      // Undeclared exception!
      try { 
        ReferenceType.construct(class2, typeBindings0, (JavaType) null, javaTypeArray1, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, (-828), hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) null, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) byteArrayOutputStream0, 3468);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(3468);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      jsonMappingException_Reference0.setDescription("Problem deserializing property '");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "e0}aO+:i+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("UTF-16LE", true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0);
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("!c");
      jsonMappingException_Reference0.setFieldName("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "UTF-16LE");
      jsonMappingException_Reference0.setFieldName("JSON");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 7071);
      ObjectNode objectNode0 = arrayNode0.insertObject((-1224));
      ArrayNode arrayNode1 = objectNode0.withArray("vEi!7$=7@BWDJ*yj(");
      JsonParser jsonParser1 = arrayNode1.traverse();
      JsonMappingException.from(jsonParser1, "gPti,N<Rikh&GE]L9o1");
      JsonMappingException.from(jsonParser1, "UTF-16LE", (Throwable) jsonMappingException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) arrayNode1, 13);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(7071);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.printf("JSON", (Object[]) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockPrintStream1, "!c");
      jsonMappingException2._appendPathDesc(stringBuilder1);
      jsonMappingException1._buildMessage();
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) mockPrintStream1, 230);
      assertSame(jsonMappingException1, jsonMappingException3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("UTF-16LE", true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.io.MockFileWriter[?]", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("!c");
      jsonMappingException_Reference0.setFieldName("JSON");
      JsonMappingException.from(jsonParser0, "UTF-16LE");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "!c");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, " has no property name annotation; must have name when multiple-parameter constructor annotated as Creator", (Throwable) jsonMappingException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder(1081);
      stringBuilder1.append("");
      SQLException sQLException0 = new SQLException("", "JSON", jsonMappingException1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) filteringParserDelegate0, 1081);
      jsonMappingException_Reference0.setDescription("");
      assertEquals("JSON", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = " XlH9uEpNQ<f3";
      MockThrowable mockThrowable0 = new MockThrowable(" XlH9uEpNQ<f3");
      int int0 = 472;
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.ser.std.DateSerializer", "", "", 472);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) stackTraceElement0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.util.LinkedNode");
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 34);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataTruncation0);
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonParser jsonParser0 = jsonFactory2.createParser("JSON");
      jsonMappingException_Reference0.setFieldName("Ob?{eI$rzc+QdM37");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "!v7~&`yWUTf");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) jsonMappingException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 2743);
      jsonMappingException2.getPathReference(stringBuilder1);
      jsonMappingException_Reference0.setDescription("!v7~&`yWUTf");
      jsonMappingException2.getPathReference(stringBuilder1);
      assertEquals("java.lang.String[2743]java.lang.String[2743]", stringBuilder1.toString());
      
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" Gh-:U:}", " Gh-:U:}", 4986);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 2, sQLIntegrityConstraintViolationException0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) sQLIntegrityConstraintViolationException0, (-2004));
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.clearLocation();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      jsonMappingException0.getOriginalMessage();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "nTMT&EpfD;oh", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField("(was java.sql.SQLTransientConnectionException)", (Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ")";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("K&)d1J\"9~/@fO(V", "K&)d1J\"9~/@fO(V");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) ")", 0);
      StringReader stringReader0 = new StringReader("K&)d1J\"9~/@fO(V");
      jsonMappingException0.prependPath((Object) stringReader0, Integer.MIN_VALUE);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(" XlH9EpNQ<f3");
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.ser.std.DateSerializer", "", "", 472);
      StackTraceElement stackTraceElement1 = new StackTraceElement("UNKNOWN", "no String-argument constructor/factory method to deserialize from String value ('%s')", "$<,", 472);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("no String-argument constructor/factory method to deserialize from String value ('%s')", 117);
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      assertEquals(117, jsonMappingException_Reference0.getIndex());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.fasterxml.jackson.databind.ser.std.DateSerializer");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference1.setDescription("UOZW3");
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.util.LinkedNode");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.util.LinkedNode");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.String[?]", string0);
      assertNotNull(string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("com.fasterxml.jackson.databind.util.LinkedNode");
      jsonMappingException_Reference0.setFieldName("JSON");
      assertEquals("JSON", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.util.LinkedNode");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("java.lang.String[?]");
      String string1 = jsonMappingException1.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: \n at [Source: (String)\"com.fasterxml.jackson.databind.util.LinkedNode\"; line: 1, column: 0]", string1);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "", 1220);
      Object object0 = jsonMappingException2.getProcessor();
      assertNotNull(object0);
      assertSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.util.LinkedNode");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.util.LinkedNode");
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("com.fasterxml.jackson.databind.util.LinkedNode");
      jsonMappingException_Reference0.setFieldName("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.util.LinkedNode");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("java.lang.String[?]");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "com.fasterxml.jackson.databind.util.LinkedNode", (int) ',');
      jsonMappingException2._appendPathDesc(stringBuilder0);
      assertEquals("java.lang.String[?]java.lang.String[44]", stringBuilder0.toString());
      
      String string0 = jsonMappingException2._buildMessage();
      assertEquals("\n at [Source: (String)\"com.fasterxml.jackson.databind.util.LinkedNode\"; line: 1, column: 0] (through reference chain: java.lang.String[44])", string0);
      
      JsonMappingException jsonMappingException3 = new JsonMappingException(jsonParser0, "com.fasterxml.jackson.databind.util.LinkedNode", jsonMappingException0);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      String string0 = "";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string1 = "";
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = " XlH9uEpNQ<f3";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (Throwable) null);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      MockFile mockFile0 = new MockFile("(was ");
      MockFile mockFile1 = new MockFile(mockFile0, "(was ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) dataOutputStream0, (-1440));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.util.LinkedNode");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.util.LinkedNode");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.lang.String[?]", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("com.fasterxml.jackson.databind.util.LinkedNode");
      jsonMappingException_Reference0.setFieldName("JSON");
      assertEquals("JSON", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.util.LinkedNode");
      JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("java.lang.String[?]");
      JsonMappingException jsonMappingException1 = new JsonMappingException("");
      jsonMappingException1._appendPathDesc(stringBuilder0);
      String string1 = jsonMappingException1._buildMessage();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, (-828), hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) null, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) byteArrayOutputStream0, 3468);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(3468);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'w';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 3468, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      MockFileWriter mockFileWriter0 = new MockFileWriter("UNKNOWN[?]", false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", "UNKNOWN[?]", (-2644));
      sQLSyntaxErrorException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning("sq1(^R&", "sq1(^R&", sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "UNKNOWN[?]", sQLWarning0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getPath();
      jsonMappingException0.toString();
      jsonMappingException0.getPathReference();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "sq1(^R&");
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference("long", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-b<Ro9g*#:E", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, "uM}>1F>Im=Vb");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("uM}>1F>Im=Vb");
      Object object0 = new Object();
      MockFileWriter mockFileWriter0 = new MockFileWriter("uM}>1F>Im=Vb", false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("uM}>1F>Im=Vb", "", (-2644));
      sQLSyntaxErrorException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "sq1(^R&", sQLWarning0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "8fbi'k'97#_n*M");
      jsonMappingException1.getMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(deserializationContext0, "71O");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      
      jsonMappingException_Reference0.getFrom();
      MockFileWriter mockFileWriter0 = new MockFileWriter("UNKNOWN[?]", false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", "UNKNOWN[?]", (-2644));
      sQLSyntaxErrorException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning("sq1(^R&", "sq1(^R&", sQLSyntaxErrorException0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("sq1(^R&", "", 1, sQLWarning0);
      sQLWarning0.addSuppressed(sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "sq1(^R&", jsonLocation0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonLocation0, 1887);
      assertEquals(1887, jsonMappingException_Reference1.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(tokenFilter0, "sq1(^R&");
      String string1 = jsonMappingException_Reference2.getFieldName();
      assertNotNull(string1);
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
      
      jsonMappingException_Reference0.setFieldName("com.fasterxml.jackson.core.type.WritableTypeId$Inclusion");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.core.type.WritableTypeId$Inclusion", jsonMappingException_Reference0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("UTF-16LE", true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0);
      jsonMappingException_Reference0.getDescription();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.skipChildren();
      DataTruncation dataTruncation0 = new DataTruncation((-875), true, true, 0, 0);
      dataTruncation0.getNextWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser1, "<')M*dyx&u\"j", (Throwable) null);
      JsonMappingException.from((JsonGenerator) null, "org.evosuite.runtime.mock.java.io.MockFileWriter[?]", (Throwable) jsonMappingException0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("uUPuf,");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("uUPuf,");
      jsonMappingException0._buildMessage();
      jsonMappingException_Reference0.setFieldName("|");
      jsonMappingException_Reference0.writeReplace();
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: uUPuf,", string0);
      
      jsonMappingException0.getPathReference();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "uUPuf,");
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("java.lang.String[\"|\"]", string1);
      assertNotNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      tokenFilterContext0.getStartLocation(pipedWriter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, ": ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(tokenFilterContext0, 0);
      jsonMappingException_Reference0.getFieldName();
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0._buildMessage();
      jsonMappingException0.toString();
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: : ", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(":9", " XlH9uEpNQ<f3", "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer", 472);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(":9", "", ":9", 472);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" XlH9uEpNQ<f3", mockThrowable0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockThrowable0, 13);
      jsonMappingException_Reference0._from = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, 13);
      jsonMappingException_Reference0.setFieldName("");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Throwable> class0 = Throwable.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 13);
      String string0 = "com.fasterxml.jackson.databind.ser.impl.FailingSerializer";
      // Undeclared exception!
      try { 
        coreXMLDeserializers_Std0.findBackReference("com.fasterxml.jackson.databind.ser.impl.FailingSerializer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot handle managed/back reference 'com.fasterxml.jackson.databind.ser.impl.FailingSerializer': type: value deserializer of type com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std does not support them
         //
         verifyException("com.fasterxml.jackson.databind.JsonDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "MaI!o{_7DL%VeT");
      jsonMappingException0.getPathReference();
      StringReader stringReader0 = new StringReader("MaI!o{_7DL%VeT");
      char[] charArray0 = new char[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      charArray0[0] = '8';
      charArray0[1] = ')';
      stringReader0.read(charArray0);
      charArray0[2] = '7';
      charArray0[6] = '5';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      stringReader0.read(charArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLSyntaxErrorException0, 7);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.sql.SQLSyntaxErrorException[7]", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (Throwable) null);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) sQLInvalidAuthorizationSpecException0, 0);
      jsonMappingException0.getProcessor();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.setAttribute(byteArrayInputStream0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(pipedWriter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, ": ", jsonLocation0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(tokenFilterContext0, 0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.setFieldName((String) null);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLTimeoutException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLTimeoutException0);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "<1&'";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("<1&'", "<1&'");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("<1&'", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.setNextException(sQLTransientConnectionException0);
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) pipedReader0, "<1&'");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "<1&'", (Throwable) jsonMappingException0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "(was ";
      MockFile mockFile0 = new MockFile("", "");
      MockFile.createTempFile("QMjy BcR", "(was ", (File) mockFile0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DataTruncation dataTruncation0 = new DataTruncation(1473, true, true, 1202, 1202, batchUpdateException0);
      Object[] objectArray0 = new Object[0];
      try { 
        defaultSerializerProvider_Impl1.reportMappingProblem((Throwable) dataTruncation0, "TXr", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // TXr
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("^@", (String) null, 0, intArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null, batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'O';
      charArray0[2] = 'z';
      charArray0[3] = '7';
      charArray0[4] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      jsonMappingException_Reference0._from = (Object) charArrayReader0;
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setDescription("expected closing END_ARRAY after type information and deserialized value");
      jsonMappingException_Reference0.getFrom();
      MockFileWriter mockFileWriter0 = new MockFileWriter(" (through reference chain: ", false);
      mockFileWriter0.write("R");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, (String) null, sQLInvalidAuthorizationSpecException0);
      jsonMappingException0.prependPath((Object) "R", " (through reference chain: ");
      jsonMappingException_Reference0.writeReplace();
      Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = placeholderForType0.getGenericSignature(stringBuilder0);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getGenericSignature(stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("K&&|1J\"9~n/@fO(V", "K&&|1J\"9~n/@fO(V");
      SQLException sQLException0 = new SQLException("K&&|1J\"9~n/@fO(V", ")", 41, sQLSyntaxErrorException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      sQLException0.spliterator();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      sQLException0.addSuppressed(sQLSyntaxErrorException0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(41);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      sQLException0.printStackTrace((PrintWriter) mockPrintWriter0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.getPathReference();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getPath();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 2691;
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Class<PipedWriter> class0 = PipedWriter.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "O2Ehr");
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.toString();
      bigDecimal0.plus(mathContext0);
      invalidFormatException0.getPathReference((StringBuilder) null);
      ((JsonMappingException)invalidFormatException0)._appendPathDesc((StringBuilder) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl2, ")P4)natao{.'x+}C0U", (Throwable) invalidFormatException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(invalidFormatException0);
      invalidFormatException0.getPathReference((StringBuilder) null);
      jsonMappingException0.getPathReference((StringBuilder) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory0, 1000);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, ")P4)natao{.'x+}C0U", (Throwable) invalidFormatException0);
      jsonMappingException_Reference0.setDescription("JSON");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      objectMapper0.readerWithView(class0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "MaI!o{_7DL%VeT");
      invalidTypeIdException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("java.lang.String[?]", string0);
      assertNotNull(string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("yM");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "MaI!o{_7DL%VeT");
      JsonMappingException.from((JsonParser) readerBasedJsonParser0, "", (Throwable) invalidTypeIdException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("gm#C%9~m3");
      ((JsonMappingException)invalidTypeIdException0)._appendPathDesc(stringBuilder0);
      String string1 = jsonMappingException0._buildMessage();
      assertEquals("MaI!o{_7DL%VeT\n at [Source: (String)\"yM\"; line: 1, column: 0]", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "W0a!B.cO";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot pass null fieldName", sQLInvalidAuthorizationSpecException0);
      sQLTransientConnectionException0.addSuppressed(sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("W0a!B.cO", sQLTransientConnectionException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      File file0 = MockFile.createTempFile("Cannot pass null fieldName", "JSON");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory3.disable(jsonGenerator_Feature0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "W0a!B.cO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"W0a!B.cO\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator");
      int int0 = (-355);
      jsonMappingException_Reference0.setIndex((-355));
      jsonMappingException_Reference0.getFrom();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setFieldName((String) null);
      jsonMappingException_Reference0.getFrom();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "qQ,hU_", "Unrecognized Type: ");
      jsonMappingException0.getPathReference();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "(was ");
      Class<ObjectInputStream> class1 = ObjectInputStream.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getDefaultPropertyInclusion(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("9dHd>zlu+mPxL8+");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintStream0);
      jsonMappingException_Reference0.setDescription("9dHd>zlu+mPxL8+");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer";
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._desc = "com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer";
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setFieldName("!:Omw8b(CnSPes3Bz4");
      jsonMappingException_Reference0.getFrom();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer");
      int int0 = 0;
      sQLNonTransientConnectionException0.printStackTrace();
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer", 0, 2284);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      MockFileWriter mockFileWriter0 = new MockFileWriter("UNKNOWN[?]", false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", "UNKNOWN[?]", (-2644));
      sQLSyntaxErrorException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning("sq1(^R&", "sq1(^R&", sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "UNKNOWN[?]", sQLWarning0);
      jsonMappingException0.clearLocation();
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, ")L4o!-;5[R]!LrA x");
      jsonMappingException1.getMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(deserializationContext0, "UNKNOWN[?]");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = "#dFi:V'9#";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "#dFi:V'9#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      String string0 = ":9\\";
      StackTraceElement stackTraceElement0 = new StackTraceElement(":9", " XlH9uEpNQ<f3", "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer", 472);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(":9", "", ":9", 472);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" XlH9uEpNQ<f3", mockThrowable0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockThrowable0, 13);
      jsonMappingException_Reference0._from = null;
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Throwable> class0 = Throwable.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 13);
      // Undeclared exception!
      try { 
        coreXMLDeserializers_Std0.findBackReference("com.fasterxml.jackson.databind.ser.impl.FailingSerializer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot handle managed/back reference 'com.fasterxml.jackson.databind.ser.impl.FailingSerializer': type: value deserializer of type com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std does not support them
         //
         verifyException("com.fasterxml.jackson.databind.JsonDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      String string0 = " (through reference chain: ";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, " (through reference chain: ");
      String string1 = "J";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(" (through reference chain: ", "J");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // J
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.util.LinkedNode");
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = 'x';
      charArray0[2] = '5';
      charArray0[3] = 't';
      charArray0[4] = '~';
      charArray0[5] = '8';
      charArray0[6] = ')';
      stringReader0.read(charArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, 0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.io.StringReader[0]", string0);
  }
}
