/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:27:55 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.format.FormatStyle;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(was ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockPrintStream1);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "Q7;1}z4");
      jsonMappingException0.getPathReference((StringBuilder) null);
      jsonMappingException0.getPathReference();
      jsonFactory1._getBufferRecycler();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "(was ", (Throwable) jsonMappingException0);
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser jsonParser0 = jsonFactory2.createParser("JSON");
      Class<Integer> class0 = Integer.class;
      InvalidFormatException invalidFormatException0 = new InvalidFormatException(jsonParser0, "JSON", objectMapper0, class0);
      invalidFormatException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory2.configure(jsonFactory_Feature0, true);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTransactionRollbackException0, 2589);
      invalidFormatException0.getPath();
      JsonMappingException jsonMappingException3 = new JsonMappingException("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) byteArrayOutputStream0, 2589);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      // Undeclared exception!
      try { 
        jsonMappingException2.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("2LpX_q=P>cQDB.^", "2LpX_q=P>cQDB.^");
      int int0 = (-678);
      sQLWarning0.spliterator();
      DataTruncation dataTruncation0 = new DataTruncation((-678), true, true, 86, (-1082), sQLWarning0);
      dataTruncation0.getParameter();
      dataTruncation0.setNextWarning(sQLWarning0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "2LpX_q=P>cQDB.^");
      sQLWarning0.setNextWarning(dataTruncation0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("Build method '%s' has wrong return type (%s), not compatible with POJO type (%s)", class0, "#");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, 74);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, jsonMappingException_Reference0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1114111, objectMapper0, charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      bigInteger0.pow(2);
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "#r");
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      invalidFormatException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(invalidFormatException0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getMessage();
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 43);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 43, jsonMappingException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      JsonMappingException jsonMappingException1 = new JsonMappingException(lineNumberReader0, "", sQLInvalidAuthorizationSpecException0);
      jsonMappingException0.getPathReference();
      jsonMappingException1.getPath();
      jsonMappingException1.getPath();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException2.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      int int0 = 173;
      MockFileWriter mockFileWriter0 = new MockFileWriter("qL3i+]6`6{-G:E", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      sQLTransactionRollbackException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, 173);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(".NZshMh YFB{5>", ".NZshMh YFB{5>");
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, ".NZshMh YFB{5>", (Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.traverse();
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, 173);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "N]e/G8Us*7", sQLTransactionRollbackException0);
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 7);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 7);
      sQLNonTransientConnectionException0.setNextException(sQLTransientException0);
      sQLNonTransientConnectionException0.printStackTrace();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "(1\"-pM;Jr=1b]O.c");
      SQLWarning sQLWarning0 = new SQLWarning("n:ZselL_@mrGjB", sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("n:ZselL_@mrGjB");
      SQLException sQLException0 = new SQLException("n:ZselL_@mrGjB");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Could not resolve type id '%s' into a subtype of %s", "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", "('<$,GI6fLqQ", 41);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLException0.setStackTrace(stackTraceElementArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(':');
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      sQLFeatureNotSupportedException0.initCause(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) "n:ZselL_@mrGjB", "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.JsonMappingException$Reference", "Cannot handle managed/back reference '%s': no back reference property found from type %s");
      jsonMappingException_Reference1.writeReplace();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = new JsonFactory();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "com.fasterxml.jackson.databind.JsonMappingException$Reference", (Throwable) jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 2326);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZqFV", "ZqFV");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null);
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "(1\"-pM;Jr=1b]O.c");
      SQLWarning sQLWarning0 = new SQLWarning("n:ZselL_@mrGjB", sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("Cannot handle managed/back reference '%s': no back reference property found from type %s", "n:ZselL_@mrGjB", (-1256), sQLWarning0);
      SQLException sQLException0 = new SQLException("n:ZselL_@mrGjB");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Could not resolve type id '%s' into a subtype of %s", "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", "('<$,GI6wLqQ", 41);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLException0.setStackTrace(stackTraceElementArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(':');
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      sQLFeatureNotSupportedException0.initCause(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) "n:ZselL_@mrGjB", "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.JsonMappingException$Reference", "Cannot handle managed/back reference '%s': no back reference property found from type %s");
      jsonMappingException_Reference1.writeReplace();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonParser) filteringParserDelegate0, "value not 'true' or 'false'");
      jsonMappingException1.getMessage();
      jsonMappingException2._buildMessage();
      JsonMappingException.from((JsonParser) filteringParserDelegate0, "", (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLException sQLException0 = new SQLException("UNKNOWN", "t", 24);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLException0);
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Integer integer0 = new Integer(24);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "->");
      jsonMappingException_Reference0._desc = "";
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("t", "t", (String) null, 24);
      stackTraceElementArray0[0] = stackTraceElement0;
      jsonMappingException_Reference0.setFieldName("UNKNOWN");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException jsonMappingException0 = new JsonMappingException("O", (Throwable) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "O", 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, 29);
      jsonMappingException_Reference0._desc = null;
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      String string0 = "_)|y}t`LXxT2yw#TO";
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "_)|y}t`LXxT2yw#TO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("#A;5,!n>h+%", "w&0fsL");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) beanDeserializerFactory0, (-424));
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) sQLTransactionRollbackException0);
      jsonMappingException0._buildMessage();
      jsonMappingException0.toString();
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "&<d~!&Sh}i5bk&|/sn:";
      MockPrintStream mockPrintStream0 = new MockPrintStream("&<d~!&Sh}i5bk&|/sn:");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)34;
      String string1 = "";
      int int0 = (-1);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = (-1);
      intArray0[4] = 1;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = 374;
      intArray0[7] = (int) (byte)34;
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$ShortDeserializer", "com.fasterxml.jackson.databind.deser.std.NumberDeserializers$ShortDeserializer", 34);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLNonTransientException0.spliterator();
      sQLNonTransientException0.fillInStackTrace();
      sQLNonTransientException0.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$ShortDeserializer", sQLNonTransientException0);
      JsonMappingException.from((JsonParser) null, "com.fasterxml.jackson.databind.deser.std.NumberDeserializers$ShortDeserializer", (Throwable) sQLException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("]%a}T>{>{r0BIZT", "]%a}T>{>{r0BIZT");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]%a}T>{>{r0BIZT
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("(was ", class0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) jsonMappingException0);
      JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException1);
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException2._buildMessage();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "(1\"-pM;Jr=1b]O.c");
      SQLException sQLException0 = new SQLException("n:ZselL_@mrGjB");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Could not resolve type id '%s' into a subtype of %s", "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", "('<$,GI6wLqQ", 41);
      sQLFeatureNotSupportedException0.getSuppressed();
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLException0.setStackTrace(stackTraceElementArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(':');
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      sQLFeatureNotSupportedException0.initCause(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.JsonMappingException$Reference", "Cannot handle managed/back reference '%s': no back reference property found from type %s");
      jsonMappingException_Reference1.writeReplace();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, false);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) filteringParserDelegate0, "value not 'true' or 'false'");
      jsonMappingException1.getProcessor();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLException sQLException0 = new SQLException("UNKNOWN", "", 24);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLException0);
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Integer integer0 = new Integer(24);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "->");
      jsonMappingException_Reference0._desc = "";
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "->", (String) null, 24);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      jsonMappingException_Reference0.setFieldName("UNKNOWN");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      StringReader stringReader0 = new StringReader("(was java.sql.SQLNonTransientConnectionException) (through reference chain: )");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 'L';
      charArray0[2] = ')';
      charArray0[3] = '<';
      charArray0[4] = '+';
      charArray0[5] = '&';
      charArray0[6] = '=';
      charArray0[7] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 4, 33, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      Class<FilterInputStream> class0 = FilterInputStream.class;
      MismatchedInputException mismatchedInputException0 = MismatchedInputException.from(jsonParser0, class0, "UNKNOWN");
      objectMapper0.readerForUpdating(mismatchedInputException0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[4] = deserializationFeature0;
      JsonMappingException jsonMappingException1 = new JsonMappingException("", sQLNonTransientConnectionException0);
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      jsonMappingException1.prependPath((Object) "_ez^[:=8dZ`PPd=x5mT", "(/(BbHW");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 63);
      Long long0 = new Long(63);
      ValueNode valueNode0 = arrayNode0.numberNode(long0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(valueNode0);
      Class<FilterOutputStream> class0 = FilterOutputStream.class;
      InvalidFormatException invalidFormatException0 = new InvalidFormatException(jsonParser0, "", "(/(BbHW", class0);
      invalidFormatException0.toString();
      invalidFormatException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, " (through reference chain: ", (Throwable) sQLException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 4);
      JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "(1\"-pM;Jr=1b]O.c");
      SQLException sQLException0 = new SQLException("n:ZselL_@mrGjB");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Could not resolve type id '%s' into a subtype of %s", "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer", "('<$,GI6wLqQ", 41);
      sQLFeatureNotSupportedException0.getSuppressed();
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLException0.setStackTrace(stackTraceElementArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(':');
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayWriter1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      sQLFeatureNotSupportedException0.initCause(jsonMappingException0);
      jsonMappingException0.getMessage();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) charArrayWriter1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLException sQLException0 = new SQLException("UNKNOWN", "", 24);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLException0);
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Integer integer0 = new Integer((-2337));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "->");
      jsonMappingException_Reference0._desc = "";
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "->", (String) null, 24);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      jsonMappingException_Reference0.setFieldName("UNKNOWN");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[4] = deserializationFeature1;
      objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("", sQLNonTransientConnectionException0);
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException0.prependPath((Object) stackTraceElement0, 24);
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "->");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "->");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "->", (Throwable) jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLException sQLException0 = new SQLException("UNKNOWN", "", 24);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLException0);
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Integer integer0 = new Integer((-2337));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "->");
      jsonMappingException_Reference0._desc = "";
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "->", "->", 24);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      jsonMappingException_Reference0.setFieldName("UNKNOWN");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[4] = deserializationFeature1;
      objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("");
      jsonMappingException_Reference0.setFieldName("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) pipedOutputStream0, (-2337));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "uiVIk[0Keeu}";
      JsonMappingException jsonMappingException0 = new JsonMappingException("uiVIk[0Keeu}", (JsonLocation) null);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<JsonParserDelegate> class1 = JsonParserDelegate.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.core.util.JsonParserDelegate with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      JsonLocation jsonLocation0 = new JsonLocation("(was ", 0L, 0L, 1000, 64);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "(was ", jsonLocation0);
      jsonLocation0.sourceDescription();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ACCEPT_CASE_INSENSITIVE_ENUMS");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ACCEPT_CASE_INSENSITIVE_ENUMS", "(was ", jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "oFANj!>]", (Throwable) jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) jsonMappingException1, 1000);
      jsonMappingException0._buildMessage();
      jsonMappingException1.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.from((JsonGenerator) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException0.getMessage();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      jsonMappingException0.prependPath((Object) "", "");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<PipedOutputStream> class0 = PipedOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("w&0fsL", class0, "w&0fsL");
      jsonMappingException0.getPath();
      jsonMappingException0.getMessage();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileInputStream0, 2852);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setFieldName("w&0fsL");
      jsonMappingException0.getMessage();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      jsonMappingException0.prependPath((Object) formatStyle0, "_ez^[:=8dZ`PPd=x5mT");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      jsonMappingException0.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<PipedOutputStream> class0 = PipedOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("w&0fsL", class0, "w&0fsL");
      jsonMappingException0.getPath();
      jsonMappingException0.getMessage();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileInputStream0, 2852);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setFieldName("w&0fsL");
      jsonMappingException0.getMessage();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      jsonMappingException0.prependPath((Object) formatStyle0, "_ez^[:=8dZ`PPd=x5mT");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("#A;5,!n>h+%");
      jsonMappingException_Reference1.setFieldName("#A;5,!n>h+%");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      jsonMappingException0.getMessage();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      jsonMappingException_Reference1.getDescription();
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.JsonMappingException", "ZqFV", jsonMappingException0);
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '9';
      charArray0[2] = 'j';
      charArray0[3] = '%';
      charArray0[4] = 'l';
      charArray0[5] = 'I';
      charArray0[6] = '*';
      charArray0[7] = '~';
      charArray0[8] = 'q';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-2755), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZqFV", "#A;5,!n>h+%");
      JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) "#A;5,!n>h+%", 2589);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException0.getPath();
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.core.JsonGenerator$Feature");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 92;
      intArray0[2] = 1070;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("UNKNOWN");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "RMy,x\"/|?%^Jv", intArray0, sQLTransientConnectionException0);
      MockThrowable mockThrowable0 = new MockThrowable(batchUpdateException0);
      JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) batchUpdateException0, "RMy,x\"/|?%^Jv");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockThrowable0, 0);
      jsonMappingException_Reference0.getFieldName();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "zJyyCBfv}_@/n}");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("zJyyCBfv}_@/n}", "->");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = new JsonMappingException((Closeable) null, "->", jsonMappingException0);
      jsonMappingException1.getProcessor();
      jsonMappingException_Reference0.getFrom();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      jsonMappingException_Reference0._from = (Object) mockFileReader0;
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "Cannot set virtual property '";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Cannot set virtual property '", true);
      String string1 = "0|?hT'5b}J*";
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "0|?hT'5b}J*");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, 15);
      jsonMappingException1.getPathReference();
      jsonMappingException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        jsonMappingException1._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getLargeUpdateCounts();
      JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) null, (-747));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      String string0 = "#m";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "#m", (Throwable) batchUpdateException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 0);
      jsonMappingException_Reference0.getFrom();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLException sQLException0 = new SQLException("UNKNOWN", "", 24);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLException0);
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Integer integer0 = new Integer((-2337));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "->");
      jsonMappingException_Reference0._desc = "";
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "->", (String) null, 24);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      jsonMappingException_Reference0.setFieldName("UNKNOWN");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[4] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      JsonNode jsonNode0 = bigIntegerNode0.path("J~9`AsWCbk");
      JsonParser jsonParser0 = objectReader0.treeAsTokens(jsonNode0);
      JsonMappingException.from(jsonParser0, "OqdG");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" |M;&QkV{W", "CLASS");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement[] stackTraceElementArray1 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", ": ", ": ", 856);
      stackTraceElementArray1[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(": ", ": ", "*_iL@]X|P)+l1h=w[", 856);
      stackTraceElementArray1[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement(": ", "EK:bE,SL=p2r|\"6\"7j", "CLASS", 856);
      stackTraceElementArray1[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement(": ", "Cannot use FormatSchema of type ", "Cannot use FormatSchema of type ", 0);
      stackTraceElementArray1[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement(": ", "EK:bE,SL=p2r|\"6\"7j", "", 0);
      stackTraceElementArray1[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("[2:", "Yh^ssc[EzQ6>%", "'sT_G]{", 0);
      stackTraceElementArray1[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("", "hxr9Vxl> spH6<Ipi", "", 1605);
      stackTraceElementArray1[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("T7NCKJM18`Te", " |M;&QkV{W", ": ", 3032);
      stackTraceElementArray1[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("Cannot use FormatSchema of type ", "", "whM?9g{3w>bv),", 0);
      stackTraceElementArray1[8] = stackTraceElement8;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray1);
      StackTraceElement stackTraceElement9 = new StackTraceElement("Trying to re-set self reference; old value = ", "Cannot use FormatSchema of type ", "CLASS", 8);
      stackTraceElementArray0[0] = stackTraceElement9;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      sQLRecoverableException0.setNextException(sQLIntegrityConstraintViolationException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0, 63);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "UNKNOWN");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "UNKNOWN", (Throwable) jsonMappingException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException1.getPathReference(stringBuilder0);
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, 2);
      jsonMappingException_Reference0.setIndex((-269));
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException1.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      jsonMappingException1.prependPath(jsonMappingException_Reference1);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      jsonMappingException1._appendPathDesc(stringBuilder0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "UNKNOWN", (Throwable) jsonMappingException2);
      jsonMappingException_Reference0.getIndex();
      String string0 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._index = 478;
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN[?]", (Throwable) null);
      jsonMappingException_Reference0.setFieldName("UNKNOWN[?]");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("bT@XL\"#Yw", "bT@XL\"#Yw", "", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("mlMF0;qY", "W=^z-=|a3L|D2l%m+", "W=^z-=|a3L|D2l%m+", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("mlMF0;qY", "BIG_DECIMAL", "", 41);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "mlMF0;qY", "", 41);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "", "", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "", "", (-1166));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("", "*:-s`tHD;L(-!;U&F", "", 41);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("", "", "com.fasterxml.jackson.databind.KeyDeserializer", 1765);
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("bT@XL\"#Yw", sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      String string0 = null;
      int int0 = (-1099);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter", (String) null, (-1099));
      JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintStream mockPrintStream0 = new MockPrintStream("&<d~!&Sh}i5bk&|/sn:");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper0, mockPrintStream0, byteArray0, 41, false);
      JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "{'M7:oP\"Xh.Pk");
      MockIOException mockIOException0 = new MockIOException(sQLFeatureNotSupportedException0);
      mockIOException0.getMessage();
      mockIOException0.getSuppressed();
      mockIOException0.addSuppressed(sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockIOException0, 1521);
      jsonMappingException_Reference0._index = 1521;
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.setIndex(1521);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(611);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'B';
      charArray0[2] = '/';
      charArray0[3] = 'Z';
      charArray0[4] = '3';
      charArray0[5] = 'e';
      charArray0[6] = '{';
      charArrayWriter0.write(charArray0);
      bufferedWriter0.flush();
      jsonMappingException0.prependPath((Object) bufferedWriter0, "");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException.from(serializerProvider0, (String) null, (Throwable) sQLIntegrityConstraintViolationException0);
      JsonMappingException.from(serializerProvider0, (String) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = 'd';
      charArray0[2] = 'y';
      charArray0[3] = '8';
      charArray0[4] = 'B';
      charArray0[5] = 'H';
      charArray0[6] = 'N';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-1594), (-1594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, ")");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, (-586));
      jsonMappingException_Reference0._index = 0;
      jsonMappingException_Reference0.toString();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("java.lang.Object[0]", jsonLocation0, (Throwable) null);
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getIndex();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      iOContext0.allocBase64Buffer();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      PipedReader pipedReader0 = new PipedReader();
      pipedWriter0.connect(pipedReader0);
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-2992), objectReader0, printWriter0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) writerBasedJsonGenerator0, " (through reference chain: ", (Throwable) jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonEncoding0, 3);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<PipedInputStream> class0 = PipedInputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      defaultSerializerProvider_Impl0.invalidTypeIdException(arrayType0, ")", ")");
      int int0 = 0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      StringBuilder stringBuilder0 = null;
      arrayType0.withStaticTyping();
      // Undeclared exception!
      try { 
        placeholderForType0.getGenericSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }
}
