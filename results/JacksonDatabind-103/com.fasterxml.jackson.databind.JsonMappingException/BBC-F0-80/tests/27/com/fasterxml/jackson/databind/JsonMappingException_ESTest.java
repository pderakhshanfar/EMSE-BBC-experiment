/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:49:51 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      deserializerFactoryConfig0.deserializers();
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("XEAb0{.?[j[", class0, "XEAb0{.?[j[");
      jsonMappingException0.toString();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      defaultDeserializationContext_Impl0.findObjectId((Object) null, objectIdGenerators_IntSequenceGenerator0, simpleObjectIdResolver0);
      jsonMappingException0.prependPath((Object) class0, "XEAb0{.?[j[");
      jsonMappingException0.getMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, ";sjP9s~nBH[!i@)u!Yd");
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      jsonMappingException3.getPath();
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) null, (-521));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(jsonMappingException4);
      String string0 = "1@vE5VvHe;RH2";
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("1@vE5VvHe;RH2");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UNKNOWN[?]");
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      Object object0 = new Object();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      jsonMappingException0.prependPath((Object) null, "adh#j,K\"ANDE*$UjAS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "adh#j,K\"ANDE*$UjAS");
      jsonMappingException0.prependPath((Object) jsonMappingException1, "UNKNOWN[?]");
      jsonMappingException1.prependPath((Object) mockFileInputStream0, "adh#j,K\"ANDE*$UjAS");
      sQLWarning0.fillInStackTrace();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(filteringParserDelegate0, 4000);
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "", mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UNKNOWN[?]");
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      Object object0 = new Object();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      jsonMappingException0.prependPath((Object) null, "adh#j,C\"ANDo*$UjASv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "adh#j,C\"ANDo*$UjASv");
      jsonMappingException0.prependPath((Object) jsonMappingException1, "UNKNOWN[?]");
      jsonMappingException1.prependPath((Object) mockFileInputStream0, "adh#j,C\"ANDo*$UjASv");
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UNKNOWN[?]");
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      Object object0 = new Object();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      jsonMappingException0.prependPath((Object) null, "/dh#t,C\"ANDoy$UaASv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      LinkedList<JsonMappingException.Reference> linkedList0 = jsonMappingException1._path;
      jsonMappingException0._path = linkedList0;
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "/dh#t,C\"ANDoy$UaASv");
      jsonMappingException0.prependPath((Object) jsonMappingException1, "UNKNOWN[?]");
      jsonMappingException1.prependPath((Object) mockFileInputStream0, "/dh#t,C\"ANDoy$UaASv");
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UNKNOWN[?]");
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      Object object0 = new Object();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      jsonMappingException0.prependPath((Object) null, "/dh#t,C\"ANDoy$UaASv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "/dh#t,C\"ANDoy$UaASv");
      jsonMappingException0.prependPath((Object) jsonMappingException1, "UNKNOWN[?]");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("Unexpected IOException (of type %s): %s");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = '`';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, (-2467), (-2467));
      JsonMappingException.from(jsonParser0, " for format ", (Throwable) jsonMappingException1);
      jsonMappingException1.prependPath((Object) mockFileInputStream0, "/dh#t,C\"ANDoy$UaASv");
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("8[");
      ObjectMapper objectMapper0 = new ObjectMapper();
      POJONode pOJONode0 = new POJONode(objectMapper0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (JsonMappingException.Reference) null);
      jsonMappingException0.getMessage();
      jsonMappingException0.toString();
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      Class<Throwable> class0 = Throwable.class;
      SimpleType.constructUnsafe(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UNKNOWN[?]");
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation((-70), false, true, 206, (-70), sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getProcessor();
      jsonMappingException0.prependPath((Object) null, "/dh#t,C\"ANDoy$UaASv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLSyntaxErrorException0, "UNKNOWN[?]");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "");
      jsonMappingException0.prependPath((Object) jsonMappingException1, "UNKNOWN[?]");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) dataTruncation0, (Object) sQLSyntaxErrorException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      Class<Throwable> class0 = Throwable.class;
      SimpleType.constructUnsafe(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UNKNOWN[?]");
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation((-70), false, true, 206, (-70), sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getProcessor();
      jsonMappingException0.prependPath((Object) null, "/dh#t,C\"ANDoy$UaASv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      dataTruncation0.getTransferSize();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLSyntaxErrorException0, "UNKNOWN[?]");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "");
      jsonMappingException0.prependPath((Object) jsonMappingException1, "UNKNOWN[?]");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) dataTruncation0, (Object) null, "Cannot pass null fieldName");
      jsonMappingException2._buildMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "/dh#t,C\"ANDoy$UaASv", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      Class<Throwable> class0 = Throwable.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UNKNOWN[?]");
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(7, false, true, 228, (-65), sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getProcessor();
      jsonMappingException0.prependPath((Object) null, "/dh#t,C\"ANDoy$UaASv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor1);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-908));
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      StringBuilder stringBuilder0 = new StringBuilder(1735);
      sQLSyntaxErrorException0.spliterator();
      StringBuilder stringBuilder1 = arrayType1.getErasedSignature(stringBuilder0);
      stringBuilder1.append(7);
      StringBuilder stringBuilder2 = placeholderForType0.getErasedSignature(stringBuilder1);
      jsonMappingException1.getPathReference(stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<BufferedWriter> class1 = BufferedWriter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      simpleType0.containedTypeOrUnknown(53);
      javaTypeArray0[1] = (JavaType) referenceType0;
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(referenceType2, "]WB7Tx");
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.missingTypeIdException(referenceType2, "");
      jsonMappingException0.initCause(jsonMappingException1);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) javaTypeArray0[1], 2);
      jsonMappingException2.getLocalizedMessage();
      jsonMappingException0.getPathReference();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "[]");
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Missing type id when trying to resolve subtype of [reference type, class com.fasterxml.jackson.core.util.JsonParserSequence<java.io.BufferedWriter<java.io.BufferedWriter>><[reference type, class java.io.BufferedWriter<java.io.BufferedWriter><[simple type, class java.io.BufferedWriter]>]>]: ]WB7Tx (through reference chain: com.fasterxml.jackson.databind.type.ReferenceType[2])");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonFactory3.enable(jsonGenerator_Feature0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "]WB7Tx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"]WB7Tx\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.toString();
      DataTruncation dataTruncation0 = new DataTruncation(93, true, true, 36, 93, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", dataTruncation0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      Class<Throwable> class0 = Throwable.class;
      SimpleType.constructUnsafe(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UNKNOWN[?]");
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(7, false, true, 206, (-65), sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UNKNOWN[?]", sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getProcessor();
      jsonMappingException0.prependPath((Object) null, "/dh#t,C\"ANDoy$UaASv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor1);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLSyntaxErrorException0, "UNKNOWN[?]");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      jsonMappingException0.prependPath((Object) sQLInvalidAuthorizationSpecException0, "");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Cannot pass null fieldName");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      arrayNode0.traverse();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "Cannot pass null fieldName");
      jsonMappingException1.getPathReference((StringBuilder) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "6nRBgAG#");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      jsonMappingException_Reference2.getDescription();
      Class<Throwable> class0 = Throwable.class;
      SimpleType.constructUnsafe(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = null;
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 7, 56320, sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLInvalidAuthorizationSpecException0);
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference1);
      jsonMappingException_Reference1.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.getStackTrace();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(5);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "\"", sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte) (-100);
      byteArray1[2] = (byte) (-50);
      byteArray1[3] = (byte) (-50);
      byteArray1[4] = (byte) (-100);
      byteArray1[5] = (byte) (-50);
      byteArray1[6] = (byte) (-100);
      byteArray1[7] = (byte) (-100);
      byteArray1[8] = (byte) (-50);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 34, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray1, 1, 54, false);
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.getTextOffset();
      String string0 = "[]";
      SQLException sQLException0 = new SQLException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8StreamJsonParser0, "[]", sQLException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("s`oSK6vHa`}Q", jsonLocation0, jsonMappingException0);
      jsonMappingException0.toString();
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      DataTruncation dataTruncation0 = new DataTruncation(8, false, true, 3, 11, sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(was ", dataTruncation0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataTruncation0);
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("(was ", class0, "");
      jsonMappingException0.getProcessor();
      String string0 = "com.fasterxml.jackson.databind.JsonMappingException$Reference";
      jsonMappingException0.prependPath((Object) sQLSyntaxErrorException0, "java.sql.DataTruncation[?]");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(")", "(was ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"(was \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-109), 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      jsonLocation0.sourceDescription();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(was ");
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, (Throwable) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3), (-2678));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getFieldName();
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      jsonMappingException0.prependPath((Object) lineNumberReader0, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) filteringParserDelegate0, "JSON", (Throwable) jsonMappingException0);
      jsonMappingException1.getPath();
      jsonMappingException1.getProcessor();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory4.createParser(byteArray0, 23, Integer.MIN_VALUE);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "ZZY");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON", (JsonLocation) null);
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "=rcr07XEs&2");
      jsonMappingException0.getProcessor();
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = '0';
      charArray0[2] = '*';
      charArray0[3] = 'B';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[4] = 'D';
      charArray0[5] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) charArrayReader0, 0);
      jsonMappingException0.getPath();
      jsonMappingException0.getPath();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "zv(uG9ZR\"m");
      jsonMappingException1.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0, 0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.JsonMappingException$Reference", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 1);
      jsonMappingException_Reference0.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis((-2682L));
      JsonLocation jsonLocation0 = new JsonLocation("", (-2682L), (-628), (-2));
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<MockFileWriter> class0 = MockFileWriter.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      defaultSerializerProvider_Impl0.copy();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(was ", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("(was ", (-1477));
      jsonMappingException_Reference0.toString();
      SQLWarning sQLWarning0 = new SQLWarning("@Bqi9xuzOG-nnUKF", "*f*[*'Hk,A(3}g\"J0n", 2507);
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      DataTruncation dataTruncation0 = new DataTruncation(93, false, false, 1, 15, jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(atomicReference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-2);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-52);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      int int0 = (-109);
      int int1 = 0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, int0, int1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      boolean boolean1 = false;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, boolean0, boolean1);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      jsonLocation0.sourceDescription();
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "(was ";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      jsonLocation0.sourceDescription();
      Throwable throwable0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException(string0, jsonLocation0, throwable0);
      int int2 = (-3);
      int int3 = (-2678);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int2, int3);
      Object object0 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0);
      jsonMappingException_Reference0.getFieldName();
      PipedReader pipedReader0 = new PipedReader();
      SerializerProvider serializerProvider0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from(serializerProvider0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^\u0007ve>$8", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectOutputStream0, (byte)0);
      jsonMappingException_Reference0.toString();
      int int0 = 93;
      Throwable throwable0 = null;
      int int1 = 19;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<MockFileWriter> class0 = MockFileWriter.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      defaultSerializerProvider_Impl0.copy();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      SimpleType.constructUnsafe(class0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2204));
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator((OutputDecorator) null);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " t", false);
      StringReader stringReader0 = new StringReader("");
      Class<Object> class1 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5, stringReader0, objectReader0, charsToNameCanonicalizer1);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase");
      JsonMappingException jsonMappingException1 = new JsonMappingException(mockFileWriter0, "com.fasterxml.jackson.databind.JsonMappingException[?]");
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-109), 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DataTruncation dataTruncation0 = new DataTruncation((byte) (-2), true, true, 285, 0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("qen%Y", (Throwable) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '1';
      charArray0[2] = 'V';
      charArray0[3] = 'G';
      charArray0[4] = '#';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayReader0, (byte)0);
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "}9: Z", (Throwable) null);
      jsonMappingException0.getLocalizedMessage();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectMapper0.getDateFormat();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "s:");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getProcessor();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}9: Z");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonGenerator0, "b\"fJ}G3", (Throwable) null);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException2);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.toString();
      DataTruncation dataTruncation0 = new DataTruncation(93, true, true, 36, 285, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", dataTruncation0);
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "UNKNOWN[\"\"]", (Throwable) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "";
      PlaceholderForType placeholderForType0 = new PlaceholderForType(180);
      placeholderForType0.actualType();
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "", "_ov%/t5");
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) invalidTypeIdException0);
      System.setCurrentTimeMillis(180);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.getDescription();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<InputStreamReader> class0 = InputStreamReader.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader0);
      int int0 = (-1639);
      jsonFactory3.createParser((char[]) null, 93, (-1639));
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(object0, 8);
      jsonMappingException_Reference1.setFieldName("UNKNOWN");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "UNKNOWN");
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      IOContext iOContext0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-109), 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      jsonLocation0.sourceDescription();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(was ");
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, (Throwable) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3), (-2678));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getFieldName();
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      jsonMappingException0.prependPath((Object) lineNumberReader0, "");
      JsonMappingException.from((JsonParser) filteringParserDelegate0, "JSON", (Throwable) jsonMappingException0);
      jsonMappingException0.prependPath((Object) "(was ", 0);
      JsonMappingException.from((JsonParser) null, "");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pushbackReader0, objectMapper0, charsToNameCanonicalizer1);
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "XpOfGF/yx~#N``)K*R\"");
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-109), 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '7';
      charArray0[2] = 'X';
      charArray0[3] = 'x';
      charArray0[4] = 'F';
      charArray0[5] = '7';
      charArray0[6] = '&';
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "(byte[])\"\u0000\uFFFD\u0000\"";
      objectArray0[1] = (Object) (byte) (-52);
      objectArray0[2] = (Object) tokenFilter0;
      objectArray0[3] = (Object) 'F';
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) filteringParserDelegate0;
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) null, "(byte[])\"\u0000\uFFFD\u0000\"", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (byte[])\"\u0000\uFFFD\u0000\"
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<MockFileWriter> class0 = MockFileWriter.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      defaultSerializerProvider_Impl0.copy();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getDescription();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = simpleType1.getGenericSignature(stringBuilder0);
      jsonMappingException0._appendPathDesc(stringBuilder1);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", (String) null, 60000, sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, sQLNonTransientConnectionException1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException1.forEach(consumer0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", (String) null, jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLNonTransientException0, "KxNPPwZEml$xc6x");
      jsonMappingException0.toString();
      JsonMappingException.from((JsonGenerator) null, "KxNPPwZEml$xc6x");
      jsonMappingException1.getMessage();
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException1, (Object) "", 2380);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1886L);
      jsonMappingException0.getPathReference();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Could not resolve type id '%s' into a subtype of %s");
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("id$2d", "!vyn", (-1), jsonMappingException1);
      sQLNonTransientException1.printStackTrace();
      JsonMappingException.from((JsonGenerator) null, "KxNPPwZEml$xc6x", (Throwable) sQLNonTransientException1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "!vyn");
      JsonMappingException.from((JsonGenerator) null, "->");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-1388), jsonMappingException0);
      jsonMappingException0.initCause(sQLTransientException0);
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      DataTruncation dataTruncation0 = new DataTruncation(36, true, true, 93, (-1388), jsonMappingException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLTransientException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException((Closeable) null, "");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("~O^-}uh2Dpx");
      sQLSyntaxErrorException0.spliterator();
      sQLSyntaxErrorException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, (-1439));
      jsonMappingException0.toString();
      jsonMappingException0.getPath();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-109), 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("zlVmO!gK1", class0, "`u&@igl");
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) jsonMappingException0, (-1303));
      jsonMappingException0.toString();
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.getStackTrace();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-1));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0);
      jsonMappingException_Reference0.getFieldName();
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex((-1942));
      Closeable closeable0 = null;
      String string0 = " &.hDACkX";
      Throwable throwable0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      String string1 = "=SEs(G";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"ZICqrtca%T245XU", "=SEs(G");
      // Undeclared exception!
      try { 
        sQLTransactionRollbackException0.initCause(sQLTimeoutException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTimeoutException: \"ZICqrtca%T245XU
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "5>/@|aHaDXNK8Lfuf", "5>/@|aHaDXNK8Lfuf");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-118);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) bufferedInputStream0, "SzX]SlDD86{hhNa>sy");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setDescription("bku7Z");
      jsonMappingException_Reference0.getIndex();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UNKNOWN[?]");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "UNKNOWN[?]");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.cfg.MapperConfigBase", "com.fasterxml.jackson.databind.cfg.MapperConfigBase");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jsonMappingException0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "UNKNOWN[?]";
      objectArray0[3] = (Object) mockFile0;
      mockFile0.setExecutable(false, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      sQLFeatureNotSupportedException0.printStackTrace(printWriter0);
      jsonMappingException0.initCause(sQLFeatureNotSupportedException0);
      jsonMappingException0._buildMessage();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, (-1));
      jsonMappingException_Reference0.getFrom();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectReader0, charsToNameCanonicalizer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) null, (Object) readerBasedJsonParser0, 0);
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0.getPathReference(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      int[] intArray0 = new int[7];
      intArray0[0] = 309;
      intArray0[1] = 0;
      intArray0[2] = 48;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2567);
      intArray0[6] = 41;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4aT", intArray0);
      MockIOException mockIOException0 = new MockIOException("", batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "KE)h84i)nVC7", mockIOException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "KE)h84i)nVC7", (Throwable) sQLRecoverableException0);
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 1869);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      Byte byte0 = new Byte((byte)61);
      jsonNodeFactory0.numberNode(byte0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.setCodec(objectMapper0);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("W|A={:q]*HU", jsonLocation0, (Throwable) null);
      jsonMappingException_Reference0.setFieldName("W|A={:q]*HU");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.toString();
      jsonMappingException0.getMessage();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getSerializerProvider();
      String string0 = "PUBLIC_ONLY";
      String string1 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (JsonMappingException.Reference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-109), 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, (Throwable) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '7';
      charArray0[2] = 'X';
      charArray0[3] = 'x';
      charArray0[4] = 'F';
      charArray0[5] = 'A';
      charArray0[6] = '&';
      charArray0[7] = '4';
      charArray0[8] = '`';
      jsonFactory0.createParser(charArray0, (int) (byte)0, (-1873));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, (byte) (-52));
      jsonMappingException_Reference0.setFieldName("JSON");
      jsonMappingException0._buildMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._index = 0;
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.toString();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("U=>.{K8dC#v", "UNKNOWN[?]", 498);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("L#WJ", sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, sQLRecoverableException0);
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Unexpected IOException (of type %s): %s");
      jsonMappingException_Reference0._desc = "Unexpected IOException (of type %s): %s";
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("Unexpected IOException (of type %s): %s", "UNKNOWN");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException.from(jsonGenerator0, "!Hz/{7 \":DhGD");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(0);
      String string0 = "";
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException_Reference0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }
}
