/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:35:25 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-9");
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      assertNotNull(byteArray1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2000, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      byteArray0[2] = (byte) (-127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, objectMapper1, (OutputStream) null, byteArray0, 157, false);
      assertNotNull(uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte)95, (byte)12, (byte) (-127)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(3, byteArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(41, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(157, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      assertNotNull(uTF8JsonGenerator1);
      assertArrayEquals(new byte[] {(byte)95, (byte)12, (byte) (-127)}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(3, byteArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(41, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(157, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(157, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(41, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      
      try { 
        objectMapper1.writeValueAsBytes(objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 500);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "", 500);
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Include0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 500);
      assertNotNull(jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException0);
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonInclude_Include0, "");
      assertNotNull(jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException2);
      
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException6, jsonMappingException0);
      assertSame(jsonMappingException6, jsonMappingException3);
      assertSame(jsonMappingException6, jsonMappingException1);
      assertSame(jsonMappingException6, jsonMappingException2);
      assertSame(jsonMappingException6, jsonMappingException4);
      assertSame(jsonMappingException6, jsonMappingException5);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException3.prependPath(object0, "");
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException5);
      
      String string0 = jsonMappingException7.getMessage();
      assertNotNull(string0);
      assertEquals(" (through reference chain: java.lang.Object[\"\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"\"]->java.lang.String[500]->java.lang.String[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500])", string0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) " (through reference chain: java.lang.Object[\"\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"\"]->java.lang.String[500]->java.lang.String[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500])", " (through reference chain: java.lang.Object[\"\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"\"]->java.lang.String[500]->java.lang.String[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500])");
      assertNotNull(jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException7);
      assertSame(jsonMappingException8, jsonMappingException3);
      assertSame(jsonMappingException8, jsonMappingException4);
      assertSame(jsonMappingException8, jsonMappingException5);
      assertSame(jsonMappingException8, jsonMappingException0);
      assertSame(jsonMappingException8, jsonMappingException1);
      assertSame(jsonMappingException8, jsonMappingException6);
      
      jsonMappingException8.prependPath((Object) jsonMappingException5, 500);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException8);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException7);
      assertSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertSame(jsonMappingException5, jsonMappingException6);
      assertSame(jsonMappingException8, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException7);
      assertSame(jsonMappingException8, jsonMappingException3);
      assertSame(jsonMappingException8, jsonMappingException4);
      assertSame(jsonMappingException8, jsonMappingException5);
      assertSame(jsonMappingException8, jsonMappingException0);
      assertSame(jsonMappingException8, jsonMappingException1);
      assertSame(jsonMappingException8, jsonMappingException6);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException8.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException7);
      assertSame(jsonMappingException8, jsonMappingException3);
      assertSame(jsonMappingException8, jsonMappingException4);
      assertSame(jsonMappingException8, jsonMappingException5);
      assertSame(jsonMappingException8, jsonMappingException0);
      assertSame(jsonMappingException8, jsonMappingException1);
      assertSame(jsonMappingException8, jsonMappingException6);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException9 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "", 500);
      assertNotNull(jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException9, jsonMappingException7);
      assertSame(jsonMappingException9, jsonMappingException3);
      assertSame(jsonMappingException9, jsonMappingException4);
      assertSame(jsonMappingException9, jsonMappingException5);
      assertSame(jsonMappingException9, jsonMappingException8);
      assertSame(jsonMappingException9, jsonMappingException1);
      assertSame(jsonMappingException9, jsonMappingException6);
      assertSame(jsonMappingException9, jsonMappingException0);
      assertSame(jsonMappingException9, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JsonMappingException jsonMappingException10 = defaultDeserializationContext_Impl0.weirdNativeValueException("", class0);
      assertNotNull(jsonMappingException10);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException11 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException10, " (through reference chain: java.lang.Object[\"\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"\"]->java.lang.String[500]->java.lang.String[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500])");
      assertNotNull(jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      StringReader stringReader0 = new StringReader(" (through reference chain: java.lang.Object[\"\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"\"]->java.lang.String[500]->java.lang.String[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500])");
      assertNotNull(stringReader0);
      
      jsonMappingException7.prependPath((Object) jsonMappingException10, "");
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException8);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException9);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException11);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      jsonMappingException1.prependPath((Object) class0, 500);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string1);
      assertEquals("UNKNOWN[?]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string2 = jsonMappingException11.getLocalizedMessage();
      assertNotNull(string2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException11);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException11);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException11, jsonMappingException0);
      assertSame(jsonMappingException11, jsonMappingException9);
      assertSame(jsonMappingException11, jsonMappingException7);
      assertSame(jsonMappingException11, jsonMappingException6);
      assertSame(jsonMappingException11, jsonMappingException1);
      assertSame(jsonMappingException11, jsonMappingException3);
      assertSame(jsonMappingException11, jsonMappingException4);
      assertSame(jsonMappingException11, jsonMappingException5);
      assertSame(jsonMappingException11, jsonMappingException8);
      assertSame(jsonMappingException11, jsonMappingException2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(":TFr");
      assertNotNull(mockFileWriter0);
      
      JsonMappingException jsonMappingException12 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException10, (Object) mockFileWriter0, "Cannot pass null fieldName");
      assertNotNull(jsonMappingException12);
      assertSame(jsonMappingException12, jsonMappingException10);
      assertSame(jsonMappingException10, jsonMappingException12);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 3826;
      String string0 = "; failed to set access: ";
      JsonMappingException jsonMappingException0 = new JsonMappingException("; failed to set access: ");
      assertNotNull(jsonMappingException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 3826, jsonMappingException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(3826, sQLNonTransientException0.getErrorCode());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(3826, sQLNonTransientException0.getErrorCode());
      
      jsonMappingException1.printStackTrace();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(3826, sQLNonTransientException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      assertNotNull(jsonParserSequence0);
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserSequence0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNull(jsonParser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertNotNull(jsonParserDelegate0);
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", "", 2299);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", sQLNonTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(2299, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, (String) null, (Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("key deserial.zer", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 500);
      assertNotNull(jsonMappingException1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, object0, 500);
      assertNotNull(jsonMappingException2);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Include0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "key deserial.zer", 8);
      assertNotNull(jsonMappingException3);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonInclude_Include0, "key deserial.zer");
      assertNotNull(jsonMappingException4);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertSame(jsonMappingException4, jsonMappingException2);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException3);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException5);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException5, jsonMappingException1);
      assertSame(jsonMappingException5, jsonMappingException2);
      assertSame(jsonMappingException5, jsonMappingException0);
      assertSame(jsonMappingException5, jsonMappingException4);
      assertSame(jsonMappingException5, jsonMappingException3);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException6);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException6, jsonMappingException5);
      assertSame(jsonMappingException6, jsonMappingException4);
      assertSame(jsonMappingException6, jsonMappingException2);
      assertSame(jsonMappingException6, jsonMappingException0);
      assertSame(jsonMappingException6, jsonMappingException3);
      assertSame(jsonMappingException6, jsonMappingException1);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException7);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException3.prependPath(object0, "key deserial.zer");
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      String string0 = jsonMappingException7.getMessage();
      assertNotNull(string0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("key deserial.zer\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.lang.Object[\"key deserial.zer\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"key deserial.zer\"]->java.lang.String[8]->java.lang.Object[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500]->UNKNOWN[?])", string0);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "key deserial.zer\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.lang.Object[\"key deserial.zer\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"key deserial.zer\"]->java.lang.String[8]->java.lang.Object[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500]->UNKNOWN[?])", "key deserial.zer\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.lang.Object[\"key deserial.zer\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"key deserial.zer\"]->java.lang.String[8]->java.lang.Object[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500]->UNKNOWN[?])");
      assertNotNull(jsonMappingException8);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException8, jsonMappingException6);
      assertSame(jsonMappingException8, jsonMappingException5);
      assertSame(jsonMappingException8, jsonMappingException1);
      assertSame(jsonMappingException8, jsonMappingException0);
      assertSame(jsonMappingException8, jsonMappingException7);
      assertSame(jsonMappingException8, jsonMappingException4);
      assertSame(jsonMappingException8, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      jsonMappingException8.prependPath(jsonMappingException_Reference0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException8, jsonMappingException6);
      assertSame(jsonMappingException8, jsonMappingException5);
      assertSame(jsonMappingException8, jsonMappingException1);
      assertSame(jsonMappingException8, jsonMappingException0);
      assertSame(jsonMappingException8, jsonMappingException7);
      assertSame(jsonMappingException8, jsonMappingException4);
      assertSame(jsonMappingException8, jsonMappingException2);
      assertSame(jsonMappingException8, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException9 = new JsonMappingException("key deserial.zer", jsonLocation0);
      assertNotNull(jsonMappingException9);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException6));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException5));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException7));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException8));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException9.equals((Object)jsonMappingException4));
      
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException8);
      assertSame(jsonMappingException3, jsonMappingException7);
      assertSame(jsonMappingException3, jsonMappingException5);
      assertSame(jsonMappingException3, jsonMappingException6);
      assertNotSame(jsonMappingException3, jsonMappingException9);
      assertSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException4);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException9));
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException10 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "key deserial.zer", 500);
      assertNotNull(jsonMappingException10);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException10, jsonMappingException4);
      assertNotSame(jsonMappingException10, jsonMappingException9);
      assertSame(jsonMappingException10, jsonMappingException0);
      assertSame(jsonMappingException10, jsonMappingException3);
      assertSame(jsonMappingException10, jsonMappingException1);
      assertSame(jsonMappingException10, jsonMappingException2);
      assertSame(jsonMappingException10, jsonMappingException7);
      assertSame(jsonMappingException10, jsonMappingException8);
      assertSame(jsonMappingException10, jsonMappingException5);
      assertSame(jsonMappingException10, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertNotSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException10.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException9));
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JsonMappingException jsonMappingException11 = defaultDeserializationContext_Impl0.weirdNativeValueException("key deserial.zer", class0);
      assertNotNull(jsonMappingException11);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException12 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException11, "key deserial.zer\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.lang.Object[\"key deserial.zer\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"key deserial.zer\"]->java.lang.String[8]->java.lang.Object[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500]->UNKNOWN[?])");
      assertNotNull(jsonMappingException12);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertNotSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException12, jsonMappingException1);
      assertSame(jsonMappingException12, jsonMappingException2);
      assertSame(jsonMappingException12, jsonMappingException8);
      assertSame(jsonMappingException12, jsonMappingException7);
      assertSame(jsonMappingException12, jsonMappingException5);
      assertSame(jsonMappingException12, jsonMappingException6);
      assertNotSame(jsonMappingException12, jsonMappingException9);
      assertSame(jsonMappingException12, jsonMappingException0);
      assertSame(jsonMappingException12, jsonMappingException4);
      assertSame(jsonMappingException12, jsonMappingException10);
      assertSame(jsonMappingException12, jsonMappingException3);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException12.equals((Object)jsonMappingException9));
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      StringReader stringReader0 = new StringReader("key deserial.zer\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.lang.Object[\"key deserial.zer\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->com.fasterxml.jackson.annotation.JsonInclude$Include[\"key deserial.zer\"]->java.lang.String[8]->java.lang.Object[500]->com.fasterxml.jackson.databind.JsonMappingException$Reference[500]->UNKNOWN[?])");
      assertNotNull(stringReader0);
      
      jsonMappingException7.prependPath((Object) jsonMappingException11, "key deserial.zer");
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException0);
      assertSame(jsonMappingException7, jsonMappingException5);
      assertSame(jsonMappingException7, jsonMappingException4);
      assertSame(jsonMappingException7, jsonMappingException6);
      assertSame(jsonMappingException7, jsonMappingException1);
      assertSame(jsonMappingException7, jsonMappingException2);
      assertSame(jsonMappingException7, jsonMappingException8);
      assertSame(jsonMappingException7, jsonMappingException12);
      assertSame(jsonMappingException7, jsonMappingException10);
      assertSame(jsonMappingException7, jsonMappingException3);
      assertNotSame(jsonMappingException7, jsonMappingException9);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException7.equals((Object)jsonMappingException9));
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException13 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) stringReader0, 500);
      assertNotNull(jsonMappingException13);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertNotSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException13, jsonMappingException8);
      assertSame(jsonMappingException13, jsonMappingException7);
      assertSame(jsonMappingException13, jsonMappingException1);
      assertSame(jsonMappingException13, jsonMappingException3);
      assertSame(jsonMappingException13, jsonMappingException4);
      assertSame(jsonMappingException13, jsonMappingException10);
      assertSame(jsonMappingException13, jsonMappingException0);
      assertSame(jsonMappingException13, jsonMappingException2);
      assertSame(jsonMappingException13, jsonMappingException6);
      assertSame(jsonMappingException13, jsonMappingException12);
      assertNotSame(jsonMappingException13, jsonMappingException9);
      assertSame(jsonMappingException13, jsonMappingException5);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException13.equals((Object)jsonMappingException9));
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException14 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) beanDeserializerFactory0, 8);
      assertNotNull(jsonMappingException14);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException14, jsonMappingException10);
      assertSame(jsonMappingException14, jsonMappingException13);
      assertSame(jsonMappingException14, jsonMappingException5);
      assertSame(jsonMappingException14, jsonMappingException6);
      assertSame(jsonMappingException14, jsonMappingException1);
      assertSame(jsonMappingException14, jsonMappingException0);
      assertSame(jsonMappingException14, jsonMappingException8);
      assertSame(jsonMappingException14, jsonMappingException4);
      assertSame(jsonMappingException14, jsonMappingException3);
      assertNotSame(jsonMappingException14, jsonMappingException9);
      assertSame(jsonMappingException14, jsonMappingException12);
      assertSame(jsonMappingException14, jsonMappingException7);
      assertSame(jsonMappingException14, jsonMappingException2);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException14.equals((Object)jsonMappingException9));
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException8);
      assertSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException9);
      assertSame(jsonMappingException0, jsonMappingException14);
      assertSame(jsonMappingException0, jsonMappingException13);
      assertSame(jsonMappingException0, jsonMappingException6);
      assertSame(jsonMappingException0, jsonMappingException7);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException0, jsonMappingException10);
      assertSame(jsonMappingException0, jsonMappingException12);
      assertSame(jsonMappingException0, jsonMappingException5);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException12);
      assertNotSame(jsonMappingException1, jsonMappingException9);
      assertSame(jsonMappingException1, jsonMappingException13);
      assertSame(jsonMappingException1, jsonMappingException8);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException6);
      assertSame(jsonMappingException1, jsonMappingException14);
      assertSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException7);
      assertSame(jsonMappingException1, jsonMappingException10);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException7);
      assertSame(jsonMappingException2, jsonMappingException4);
      assertSame(jsonMappingException2, jsonMappingException13);
      assertNotSame(jsonMappingException2, jsonMappingException9);
      assertSame(jsonMappingException2, jsonMappingException6);
      assertSame(jsonMappingException2, jsonMappingException5);
      assertSame(jsonMappingException2, jsonMappingException14);
      assertSame(jsonMappingException2, jsonMappingException8);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException10);
      assertSame(jsonMappingException2, jsonMappingException12);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException9));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException9));
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      // Undeclared exception!
      try { 
        jsonMappingException14.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("D3");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      assertFalse(boolean0);
      
      jsonMappingException0.printStackTrace();
      jsonMappingException_Reference0._index = (-603);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-603), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-603), jsonMappingException_Reference0.getIndex());
      assertEquals((-603), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-603), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-603), jsonMappingException_Reference0.getIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON", (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      assertNotNull(filteringParserDelegate0);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("V");
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) "V", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("S");
      assertNotNull(jsonMappingException0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      NullNode nullNode0 = NullNode.instance;
      assertNotNull(nullNode0);
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(nullNode0);
      assertNotNull(jsonParser0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      assertNotNull(jsonParserSequence0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0);
      assertNotNull(jsonMappingException_Reference0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.core.util.JsonParserSequence[?]", string0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "");
      assertNotNull(jsonMappingException0);
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-664), false, false, (-664), 1331);
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, (-664));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "");
      assertNotNull(jsonMappingException0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      
      String string0 = jsonMappingException0.toString();
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: \n at [Source: UNKNOWN; line: -1, column: -1]", string0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      
      String string1 = jsonMappingException0._buildMessage();
      assertNotNull(string1);
      assertEquals("\n at [Source: UNKNOWN; line: -1, column: -1]", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      
      String string2 = jsonMappingException0.getMessage();
      assertNotNull(string2);
      assertEquals("\n at [Source: UNKNOWN; line: -1, column: -1]", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "S16}DRZ1=GqiYxE", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getMessage();
      assertNotNull(string0);
      assertEquals("", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string1);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[?]", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?5x:BanlPAO@m^1n");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("?5x:BanlPAO@m^1n");
      assertNotNull(jsonMappingException0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "UNKNOWN");
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      String string0 = jsonMappingException1._buildMessage();
      assertNotNull(string0);
      assertEquals("UNKNOWN\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      
      String string1 = jsonMappingException0._buildMessage();
      assertNotNull(string1);
      assertEquals("?5x:BanlPAO@m^1n", string1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?5x:BanlPAO@m^1n");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "?5x:BanlPAO@m^1n");
      assertNotNull(jsonMappingException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      StringBuffer stringBuffer0 = new StringBuffer("lSvm7U[\\");
      assertNotNull(stringBuffer0);
      assertEquals("lSvm7U[\\", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals("lSvm7U[\\", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals("lSvm7U[\\", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("lSvm7U[\\", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals("lSvm7U[\\java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"]", stringBuilder0.toString());
      assertEquals("lSvm7U[\\java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"]", stringBuilder1.toString());
      
      String string0 = jsonMappingException0.toString();
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ?5x:BanlPAO@m^1n (through reference chain: java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"])", string0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      StringBuilder stringBuilder2 = jsonMappingException0.getPathReference(stringBuilder1);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("lSvm7U[\\", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals("lSvm7U[\\java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"]java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"]", stringBuilder0.toString());
      assertEquals("lSvm7U[\\java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"]java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"]", stringBuilder1.toString());
      assertEquals("lSvm7U[\\java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"]java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"]", stringBuilder2.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("E%S$;MqU<0A]YoF", "t");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: E%S$;MqU<0A]YoF", sQLRecoverableException0.toString());
      assertEquals("t", sQLRecoverableException0.getSQLState());
      assertEquals("E%S$;MqU<0A]YoF", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      assertNotNull(bufferedOutputStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) bufferedOutputStream0, "t");
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLRecoverableException: E%S$;MqU<0A]YoF", sQLRecoverableException0.toString());
      assertEquals("t", sQLRecoverableException0.getSQLState());
      assertEquals("E%S$;MqU<0A]YoF", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "30:tW", (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("java.sql.SQLRecoverableException: E%S$;MqU<0A]YoF", sQLRecoverableException0.toString());
      assertEquals("t", sQLRecoverableException0.getSQLState());
      assertEquals("E%S$;MqU<0A]YoF", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      String string0 = jsonMappingException0._buildMessage();
      assertNotNull(string0);
      assertEquals("E%S$;MqU<0A]YoF (through reference chain: java.io.BufferedOutputStream[\"t\"])", string0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertEquals("java.sql.SQLRecoverableException: E%S$;MqU<0A]YoF", sQLRecoverableException0.toString());
      assertEquals("t", sQLRecoverableException0.getSQLState());
      assertEquals("E%S$;MqU<0A]YoF", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("t", "E%S$;MqU<0A]YoF (through reference chain: java.io.BufferedOutputStream[\"t\"])", 34);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: t", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("E%S$;MqU<0A]YoF (through reference chain: java.io.BufferedOutputStream[\"t\"])", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(34, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("t", sQLInvalidAuthorizationSpecException0.getMessage());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("E%S$;MqU<0A]YoF (through reference chain: java.io.BufferedOutputStream[\"t\"])");
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: t", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("E%S$;MqU<0A]YoF (through reference chain: java.io.BufferedOutputStream[\"t\"])", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(34, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("t", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException2.getPathReference();
      assertNotNull(string1);
      assertEquals("java.lang.String[?]", string1);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: t", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("E%S$;MqU<0A]YoF (through reference chain: java.io.BufferedOutputStream[\"t\"])", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(34, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("t", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string2 = jsonMappingException2.getPathReference();
      assertNotNull(string2);
      assertEquals("java.lang.String[?]", string2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: t", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("E%S$;MqU<0A]YoF (through reference chain: java.io.BufferedOutputStream[\"t\"])", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(34, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("t", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: t", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("E%S$;MqU<0A]YoF (through reference chain: java.io.BufferedOutputStream[\"t\"])", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(34, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("t", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException3);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertEquals("java.sql.SQLRecoverableException: E%S$;MqU<0A]YoF", sQLRecoverableException0.toString());
      assertEquals("t", sQLRecoverableException0.getSQLState());
      assertEquals("E%S$;MqU<0A]YoF", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string3 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string3);
      assertEquals("java.lang.String[?]", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException3);
      assertNotNull(jsonMappingException4);
      assertNotSame(jsonMappingException3, jsonMappingException4);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertEquals("java.sql.SQLRecoverableException: E%S$;MqU<0A]YoF", sQLRecoverableException0.toString());
      assertEquals("t", sQLRecoverableException0.getSQLState());
      assertEquals("E%S$;MqU<0A]YoF", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      System.setCurrentTimeMillis((-1L));
      String string4 = jsonMappingException4._buildMessage();
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(jsonMappingException3, jsonMappingException4);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("java.sql.SQLRecoverableException: E%S$;MqU<0A]YoF", sQLRecoverableException0.toString());
      assertEquals("t", sQLRecoverableException0.getSQLState());
      assertEquals("E%S$;MqU<0A]YoF", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string5 = jsonMappingException3.toString();
      assertNotNull(string5);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: E%S$;MqU<0A]YoF (through reference chain: java.lang.String[?])", string5);
      assertNotSame(jsonMappingException3, jsonMappingException4);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("java.sql.SQLRecoverableException: E%S$;MqU<0A]YoF", sQLRecoverableException0.toString());
      assertEquals("t", sQLRecoverableException0.getSQLState());
      assertEquals("E%S$;MqU<0A]YoF", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      
      JsonMappingException jsonMappingException5 = JsonMappingException.from((JsonGenerator) writerBasedJsonGenerator0, "", (Throwable) jsonMappingException1);
      assertNotNull(jsonMappingException5);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotSame(jsonMappingException5, jsonMappingException1);
      assertNotSame(jsonMappingException5, jsonMappingException2);
      assertNotSame(jsonMappingException5, jsonMappingException0);
      assertNotSame(jsonMappingException5, jsonMappingException3);
      assertNotSame(jsonMappingException5, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException5);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException1, jsonMappingException4);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException5);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException4));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("java.sql.SQLRecoverableException: E%S$;MqU<0A]YoF", sQLRecoverableException0.toString());
      assertEquals("t", sQLRecoverableException0.getSQLState());
      assertEquals("E%S$;MqU<0A]YoF", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayOutputStream0, "NRHrN;VL`vN;1,YaS3");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("NRHrN;VL`vN;1,YaS3", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("NRHrN;VL`vN;1,YaS3", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("");
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", (-1));
      assertNotNull(jsonMappingException2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) beanDeserializerFactory0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?5x:BanlPAO@m^1n");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "?5x:BanlPAO@m^1n");
      assertNotNull(jsonMappingException0);
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      JsonMappingException jsonMappingException1 = new JsonMappingException("?5x:BanlPAO@m^1n");
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0._fieldName = "?5x:BanlPAO@m^1n";
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("?5x:BanlPAO@m^1n", jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException[\"?5x:BanlPAO@m^1n\"]", string0);
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("?5x:BanlPAO@m^1n", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("?5x:BanlPAO@m^1n", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertNotNull(jsonMappingException3);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("-rAa[D&WvTsKlD*axF", "", hashMap0, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("-rAa[D&WvTsKlD*axF", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -rAa[D&WvTsKlD*axF", sQLClientInfoException1.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("-rAa[D&WvTsKlD*axF");
      assertNotNull(mockFile0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) jsonMappingException_Reference1, (-1321));
      assertNotNull(jsonMappingException0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      String string1 = jsonMappingException0.toString();
      assertNotNull(string1);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLClientInfoException) (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[?])", string1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(")", ")", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: )", sQLClientInfoException1.toString());
      assertEquals(")", sQLClientInfoException1.getMessage());
      assertEquals(")", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLClientInfoException1);
      assertNotNull(jsonMappingException_Reference0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: )", sQLClientInfoException1.toString());
      assertEquals(")", sQLClientInfoException1.getMessage());
      assertEquals(")", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._index = (-206);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: )", sQLClientInfoException1.toString());
      assertEquals(")", sQLClientInfoException1.getMessage());
      assertEquals(")", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals((-206), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("java.sql.SQLClientInfoException[?]", string0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: )", sQLClientInfoException1.toString());
      assertEquals(")", sQLClientInfoException1.getMessage());
      assertEquals(")", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals((-206), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(")", "SJ;hf", (-206), sQLClientInfoException1);
      assertNotNull(sQLTransientConnectionException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: )", sQLClientInfoException1.toString());
      assertEquals(")", sQLClientInfoException1.getMessage());
      assertEquals(")", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("SJ;hf", sQLTransientConnectionException0.getSQLState());
      assertEquals(")", sQLTransientConnectionException0.getMessage());
      assertEquals((-206), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: )", sQLTransientConnectionException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: )", sQLClientInfoException1.toString());
      assertEquals(")", sQLClientInfoException1.getMessage());
      assertEquals(")", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals((-206), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals("SJ;hf", sQLTransientConnectionException0.getSQLState());
      assertEquals(")", sQLTransientConnectionException0.getMessage());
      assertEquals((-206), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: )", sQLTransientConnectionException0.toString());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      
      ObjectNode objectNode0 = arrayNode0.insertObject(17);
      assertNotNull(objectNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      
      ArrayNode arrayNode1 = objectNode0.withArray("java.sql.SQLClientInfoException[?]");
      assertNotNull(arrayNode1);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      
      JsonParser jsonParser0 = arrayNode1.traverse();
      assertNotNull(jsonParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "SJ;hf");
      assertNotNull(jsonMappingException1);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)jsonMappingException1.getProcessor();
      assertNotNull(treeTraversingParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(jsonParser0, treeTraversingParser0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(treeTraversingParser0, jsonParser0);
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertNull(treeTraversingParser0.getCurrentName());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      
      String string1 = jsonMappingException1._buildMessage();
      assertNotNull(string1);
      assertEquals("SJ;hf\n at [Source: UNKNOWN; line: -1, column: -1]", string1);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(jsonParser0, treeTraversingParser0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertNotNull(list0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(jsonParser0, treeTraversingParser0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(list0.contains(jsonMappingException_Reference0));
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException2);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: )", sQLClientInfoException1.toString());
      assertEquals(")", sQLClientInfoException1.getMessage());
      assertEquals(")", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals((-206), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext_Impl1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl1, "Zg`");
      assertNotNull(jsonMappingException3);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "Y3q?h0/(Xp3", "T9Cx<zr");
      assertNotNull(jsonMappingException4);
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException0);
      assertSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(jsonParser0, treeTraversingParser0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException4);
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      
      JsonMappingException jsonMappingException5 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter");
      assertNotNull(jsonMappingException5);
      assertNotSame(jsonMappingException5, jsonMappingException2);
      assertNotSame(jsonMappingException5, jsonMappingException0);
      assertNotSame(jsonMappingException5, jsonMappingException4);
      assertNotSame(jsonMappingException5, jsonMappingException1);
      assertNotSame(jsonMappingException5, jsonMappingException3);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(jsonParser0, treeTraversingParser0);
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException3));
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      
      String string2 = jsonMappingException5.getPathReference();
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(jsonMappingException5, jsonMappingException2);
      assertNotSame(jsonMappingException5, jsonMappingException0);
      assertNotSame(jsonMappingException5, jsonMappingException4);
      assertNotSame(jsonMappingException5, jsonMappingException1);
      assertNotSame(jsonMappingException5, jsonMappingException3);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(jsonParser0, treeTraversingParser0);
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException5.equals((Object)jsonMappingException3));
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("key deserializer");
      assertNotNull(mockPrintStream0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, "UnthM$'([,WDdM42P", (JsonLocation) null);
      assertNotNull(jsonMappingException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("key deserializer", "", (-1325), hashMap0, jsonMappingException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: key deserializer", sQLClientInfoException0.toString());
      assertEquals("key deserializer", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals((-1325), sQLClientInfoException0.getErrorCode());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: key deserializer", sQLClientInfoException0.toString());
      assertEquals("key deserializer", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals((-1325), sQLClientInfoException0.getErrorCode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("UnthM$'([,WDdM42P", clientInfoStatus0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", (String) null, map0, jsonMappingException0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: key deserializer", sQLClientInfoException0.toString());
      assertEquals("key deserializer", sQLClientInfoException0.getMessage());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals((-1325), sQLClientInfoException0.getErrorCode());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("key deserializer");
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      String string0 = jsonMappingException_Reference1.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, "com.fasterxml.jackson.databind.node.NdeCursor$RootCursor", 588, hashMap0);
      assertNotNull(sQLClientInfoException2);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(588, sQLClientInfoException2.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertEquals("com.fasterxml.jackson.databind.node.NdeCursor$RootCursor", sQLClientInfoException2.getSQLState());
      assertNull(sQLClientInfoException2.getMessage());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException2, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException1);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(588, sQLClientInfoException2.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertEquals("com.fasterxml.jackson.databind.node.NdeCursor$RootCursor", sQLClientInfoException2.getSQLState());
      assertNull(sQLClientInfoException2.getMessage());
      
      // Undeclared exception!
      try { 
        jsonMappingException1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("7.RW@DhMp6,5+E*K");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.getMessage());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("7.RW@DhMp6,5+E*K");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "7.RW@DhMp6,5+E*K", (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.getMessage());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException1, "~B34;;aZ");
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.getMessage());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0, "7.RW@DhMp6,5+E*K");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("7.RW@DhMp6,5+E*K", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException3);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertSame(jsonMappingException3, jsonMappingException2);
      assertSame(jsonMappingException3, jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("7.RW@DhMp6,5+E*K", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException4);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException4);
      assertSame(jsonMappingException4, jsonMappingException0);
      assertNotSame(jsonMappingException4, jsonMappingException2);
      assertNotSame(jsonMappingException4, jsonMappingException1);
      assertNotSame(jsonMappingException4, jsonMappingException3);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException4.equals((Object)jsonMappingException3));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("7.RW@DhMp6,5+E*K", jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException2.getPathReference();
      assertNotNull(string0);
      assertEquals("java.io.PipedReader[\"7.RW@DhMp6,5+E*K\"]->com.fasterxml.jackson.databind.JsonMappingException[\"~B34;;aZ\"]", string0);
      assertSame(jsonMappingException1, jsonMappingException3);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException4);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException4);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException3);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException4));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("7.RW@DhMp6,5+E*K", sQLIntegrityConstraintViolationException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "com.fasterxml.jackson.databind.introspect.AnnotationMap", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'T';
      charArray0[2] = 'S';
      charArray0[3] = '5';
      charArray0[4] = '*';
      charArray0[5] = '.';
      charArray0[6] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', 'T', 'S', '5', '*', '.', 'U'}, charArray0);
      assertEquals(7, charArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, charArrayReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, 0, true);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'w', 'T', 'S', '5', '*', '.', 'U'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(7, charArray0.length);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertNotNull(readerBasedJsonParser1);
      assertArrayEquals(new char[] {'w', 'T', 'S', '5', '*', '.', 'U'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(7, charArray0.length);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(3, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      
      JsonMappingException jsonMappingException1 = new JsonMappingException(readerBasedJsonParser1, "com.fasterxml.jackson.databind.introspect.AnnotationMap", jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertArrayEquals(new char[] {'w', 'T', 'S', '5', '*', '.', 'U'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(7, charArray0.length);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y4Vc^dY)IBosT");
      assertNotNull(mockPrintWriter0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0, (-1386));
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setFieldName("");
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setFieldName("y4Vc^dY)IBosT");
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
      assertEquals("y4Vc^dY)IBosT", jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.io.MockPrintWriter[\"y4Vc^dY)IBosT\"]", string0);
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
      assertEquals("y4Vc^dY)IBosT", jsonMappingException_Reference0.getFieldName());
      
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1386), int0);
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
      assertEquals("y4Vc^dY)IBosT", jsonMappingException_Reference0.getFieldName());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("y4Vc^dY)IBosT");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("y4Vc^dY)IBosT", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: y4Vc^dY)IBosT", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "o+tM`QAsq0<*", sQLTransactionRollbackException0);
      assertNotNull(jsonMappingException0);
      
      sQLTransactionRollbackException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals("y4Vc^dY)IBosT", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: y4Vc^dY)IBosT", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      mockPrintWriter0.flush();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("}cLG`N", "o+tM`QAsq0<*", jsonMappingException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("y4Vc^dY)IBosT", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: y4Vc^dY)IBosT", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("o+tM`QAsq0<*", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: }cLG`N", sQLNonTransientException0.toString());
      assertEquals("}cLG`N", sQLNonTransientException0.getMessage());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) jsonMappingException_Reference0, 600);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
      assertEquals("y4Vc^dY)IBosT", jsonMappingException_Reference0.getFieldName());
      assertEquals("y4Vc^dY)IBosT", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: y4Vc^dY)IBosT", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("o+tM`QAsq0<*", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: }cLG`N", sQLNonTransientException0.toString());
      assertEquals("}cLG`N", sQLNonTransientException0.getMessage());
      
      String string1 = jsonMappingException1._buildMessage();
      assertNotNull(string1);
      assertEquals("}cLG`N (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[600])", string1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
      assertEquals("y4Vc^dY)IBosT", jsonMappingException_Reference0.getFieldName());
      assertEquals("y4Vc^dY)IBosT", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: y4Vc^dY)IBosT", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("o+tM`QAsq0<*", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: }cLG`N", sQLNonTransientException0.toString());
      assertEquals("}cLG`N", sQLNonTransientException0.getMessage());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
      assertEquals("y4Vc^dY)IBosT", jsonMappingException_Reference0.getFieldName());
      assertEquals("y4Vc^dY)IBosT", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: y4Vc^dY)IBosT", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("y4Vc^dY)IBosT");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      assertTrue(boolean0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("}cLG`N (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[600])", "com.fasterxml.jackson.databind.JsonMappingException$Reference", "y4Vc^dY)IBosT", (-1386));
      assertNotNull(stackTraceElement0);
      assertEquals("}cLG`N (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[600])", stackTraceElement0.getClassName());
      assertEquals("}cLG`N (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[600]).com.fasterxml.jackson.databind.JsonMappingException$Reference(y4Vc^dY)IBosT)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("y4Vc^dY)IBosT", stackTraceElement0.getFileName());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException$Reference", stackTraceElement0.getMethodName());
      assertEquals((-1386), stackTraceElement0.getLineNumber());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.evosuite.runtime.mock.java.io.MockPrintWriter[\"y4Vc^dY)IBosT\"]", "y4Vc^dY)IBosT", "com.fasterxml.jackson.databind.JsonMappingException$Reference", 41);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException$Reference", stackTraceElement1.getFileName());
      assertEquals("y4Vc^dY)IBosT", stackTraceElement1.getMethodName());
      assertEquals("org.evosuite.runtime.mock.java.io.MockPrintWriter[\"y4Vc^dY)IBosT\"]", stackTraceElement1.getClassName());
      assertEquals(41, stackTraceElement1.getLineNumber());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("org.evosuite.runtime.mock.java.io.MockPrintWriter[\"y4Vc^dY)IBosT\"].y4Vc^dY)IBosT(com.fasterxml.jackson.databind.JsonMappingException$Reference:41)", stackTraceElement1.toString());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Unexpected IOException (of type %s): %s", "", "}cLG`N", (-1386));
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertEquals("Unexpected IOException (of type %s): %s.(}cLG`N)", stackTraceElement2.toString());
      assertEquals((-1386), stackTraceElement2.getLineNumber());
      assertEquals("", stackTraceElement2.getMethodName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("}cLG`N", stackTraceElement2.getFileName());
      assertEquals("Unexpected IOException (of type %s): %s", stackTraceElement2.getClassName());
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("com.fasterxml.jackson.databind.JsonMappingException$Reference", "org.evosuite.runtime.mock.java.io.MockPrintWriter[\"y4Vc^dY)IBosT\"]", "", 41);
      assertNotNull(stackTraceElement3);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException$Reference", stackTraceElement3.getClassName());
      assertEquals("org.evosuite.runtime.mock.java.io.MockPrintWriter[\"y4Vc^dY)IBosT\"]", stackTraceElement3.getMethodName());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException$Reference.org.evosuite.runtime.mock.java.io.MockPrintWriter[\"y4Vc^dY)IBosT\"](:41)", stackTraceElement3.toString());
      assertEquals("", stackTraceElement3.getFileName());
      assertEquals(41, stackTraceElement3.getLineNumber());
      assertFalse(stackTraceElement3.isNativeMethod());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(stackTraceElement2);
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals("Unexpected IOException (of type %s): %s.(}cLG`N)", stackTraceElement2.toString());
      assertEquals((-1386), stackTraceElement2.getLineNumber());
      assertEquals("", stackTraceElement2.getMethodName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("}cLG`N", stackTraceElement2.getFileName());
      assertEquals("Unexpected IOException (of type %s): %s", stackTraceElement2.getClassName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
      assertEquals("y4Vc^dY)IBosT", jsonMappingException_Reference0.getFieldName());
      assertEquals("y4Vc^dY)IBosT", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: y4Vc^dY)IBosT", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("o+tM`QAsq0<*", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: }cLG`N", sQLNonTransientException0.toString());
      assertEquals("}cLG`N", sQLNonTransientException0.getMessage());
      
      String string2 = jsonMappingException_Reference1.getDescription();
      assertNotNull(string2);
      assertEquals("java.lang.StackTraceElement[?]", string2);
      assertNotSame(stackTraceElement2, stackTraceElement3);
      assertNotSame(stackTraceElement2, stackTraceElement0);
      assertNotSame(stackTraceElement2, stackTraceElement1);
      assertNotSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Unexpected IOException (of type %s): %s.(}cLG`N)", stackTraceElement2.toString());
      assertEquals((-1386), stackTraceElement2.getLineNumber());
      assertEquals("", stackTraceElement2.getMethodName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("}cLG`N", stackTraceElement2.getFileName());
      assertEquals("Unexpected IOException (of type %s): %s", stackTraceElement2.getClassName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLClientInfoException1);
      assertNotNull(jsonMappingException_Reference0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0._index = (-206);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-206), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("java.sql.SQLClientInfoException[?]", string0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-206), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1000));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.type.MapType", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0._desc = "com.fasterxml.jackson.databind.type.MapType";
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, (-1));
      assertNotNull(jsonMappingException1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, object0, ".I Q)L5f]pXMf");
      assertNotNull(jsonMappingException2);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?5x:BanlPAO@m^1n");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "?5x:BanlPAO@m^1n");
      assertNotNull(jsonMappingException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "?5x:BanlPAO@m^1n", (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      
      Integer integer0 = new Integer(2568);
      assertNotNull(integer0);
      assertEquals(2568, (int)integer0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING");
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", string0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertNull(jsonMappingException_Reference1.getFieldName());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "m3sA>!=Ot~6\"bP1{:@");
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      String string1 = jsonMappingException1.getLocalizedMessage();
      assertNotNull(string1);
      assertEquals("?5x:BanlPAO@m^1n", string1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("?5x:BanlPAO@m^1n", sQLIntegrityConstraintViolationException0.getMessage());
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from((JsonParser) null, "?5x:BanlPAO@m^1n");
      assertNotNull(jsonMappingException3);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("object");
      assertNotNull(jsonMappingException0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      SQLWarning sQLWarning0 = new SQLWarning("object", "", jsonMappingException0);
      assertNotNull(sQLWarning0);
      assertEquals("object", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: object", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLWarning0, 0);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("object", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: object", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("java.sql.SQLWarning[0]", string0);
      assertEquals("object", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: object", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertNotNull(jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertSame(jsonMappingException_Reference1, jsonMappingException_Reference0);
      assertEquals("object", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: object", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals(0, jsonMappingException_Reference1.getIndex());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("object");
      assertNotNull(jsonMappingException0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      String string0 = "";
      SQLWarning sQLWarning0 = new SQLWarning("object", "", jsonMappingException0);
      assertNotNull(sQLWarning0);
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: object", sQLWarning0.toString());
      assertEquals("object", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, "_;p(.M=yRV7[<.", (Throwable) sQLWarning0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: object", sQLWarning0.toString());
      assertEquals("object", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      LinkedList<JsonMappingException.Reference> linkedList0 = jsonMappingException1._path;
      assertNull(linkedList0);
      
      jsonMappingException1._path = null;
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: object", sQLWarning0.toString());
      assertEquals("object", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException1._buildMessage();
      assertNotNull(string1);
      assertEquals("_;p(.M=yRV7[<.", string1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: object", sQLWarning0.toString());
      assertEquals("object", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      jsonMappingException_Reference0._index = 829;
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(829, jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setDescription((String) null);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(829, jsonMappingException_Reference0.getIndex());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pipedInputStream0);
      assertNotNull(jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference1.equals((Object)jsonMappingException_Reference0));
      assertEquals(0, pipedInputStream0.available());
      assertNull(jsonMappingException_Reference1.getFieldName());
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      String string2 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string2);
      assertEquals("UNKNOWN[829]", string2);
      assertNotSame(jsonMappingException_Reference0, jsonMappingException_Reference1);
      assertFalse(jsonMappingException_Reference0.equals((Object)jsonMappingException_Reference1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(829, jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException2);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      Class<DataInputStream> class0 = DataInputStream.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.io.DataInputStream with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Vi<U");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Vi<U", "Vi<U");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Vi<U", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setFieldName("Vi<U");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Vi<U", jsonMappingException_Reference0.getFieldName());
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string0);
      assertEquals("Vi<U", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Vi<U", jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Vi<U", jsonMappingException_Reference0.getFieldName());
      
      String string1 = jsonMappingException_Reference0.getFieldName();
      assertNotNull(string1);
      assertEquals("Vi<U", string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Vi<U", jsonMappingException_Reference0.getFieldName());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(jsonMappingException1);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Vi<U", jsonMappingException_Reference0.getFieldName());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: Vi<U (through reference chain: java.lang.String[\"Vi<U\"])", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.databind.JsonMappingException: Vi<U (through reference chain: java.lang.String[\"Vi<U\"])", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Vi<U", jsonMappingException_Reference0.getFieldName());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: Vi<U (through reference chain: java.lang.String[\"Vi<U\"])", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.databind.JsonMappingException: Vi<U (through reference chain: java.lang.String[\"Vi<U\"])", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      jsonMappingException_Reference0.setDescription("(was ");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Vi<U", jsonMappingException_Reference0.getFieldName());
      
      jsonMappingException_Reference0.setDescription("Cannot pass null fieldName");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("Vi<U", jsonMappingException_Reference0.getFieldName());
      
      String string2 = "i1f\\B[";
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "Vi<U", (Throwable) jsonMappingException2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("object");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLWarning sQLWarning0 = new SQLWarning("object", "", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, "_;p(.M=yRV7[<.", (Throwable) sQLWarning0);
      LinkedList<JsonMappingException.Reference> linkedList0 = jsonMappingException1._path;
      jsonMappingException1._path = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1._buildMessage();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException_Reference0.setDescription("_;p(.M=yRV7[<.");
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getFrom();
      jsonMappingException1.getProcessor();
      IntNode intNode0 = new IntNode(829);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(intNode0, "_;p(.M=yRV7[<.");
      jsonMappingException_Reference1.setIndex(829);
      jsonMappingException_Reference1.toString();
      jsonMappingException1.prependPath((Object) null, 1672);
      System.setCurrentTimeMillis((-1214L));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]", "", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(beanDeserializerFactory0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?5x:BanlPAO@m^1n");
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "?5x:BanlPAO@m^1n");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "?5x:BanlPAO@m^1n");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "?5x:BanlPAO@m^1n", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException1._appendPathDesc((StringBuilder) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (JsonMappingException.Reference) null);
      assertNotSame(jsonMappingException2, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?5x:BanlPAO@m^1n");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) "?5x:BanlPAO@m^1n", "?~");
      JsonMappingException.from((JsonParser) null, " (through reference chain: ", (Throwable) sQLIntegrityConstraintViolationException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0);
      jsonMappingException_Reference0.setDescription(" (through reference chain: ");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (JsonMappingException.Reference) null);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("object");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLDataException sQLDataException0 = new SQLDataException("[]", "]ltMf9 ?Y](ZcR]", 0, jsonMappingException0);
      SQLWarning sQLWarning0 = new SQLWarning("_3{6w]\":^e+ZWu>mG", "_;p(.M=yRV7[<.", sQLDataException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, "", (Throwable) sQLDataException0);
      LinkedList<JsonMappingException.Reference> linkedList0 = jsonMappingException1._path;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("object (through reference chain: UNKNOWN[?])", string0);
      
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0.setDescription("[]");
      JsonMappingException jsonMappingException2 = JsonMappingException.from(deserializationContext0, "_3{6w]\":^e+ZWu>mG", (Throwable) sQLWarning0);
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException2.toString();
      JsonMappingException jsonMappingException3 = new JsonMappingException("[]");
      String string1 = jsonMappingException3.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: []", string1);
      
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException0.getProcessor();
      jsonMappingException2._buildMessage();
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("object");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLWarning sQLWarning0 = new SQLWarning("object", "", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, "_;p(.M=yRV7[<.", (Throwable) sQLWarning0);
      LinkedList<JsonMappingException.Reference> linkedList0 = jsonMappingException1._path;
      jsonMappingException1._path = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1._buildMessage();
      jsonMappingException_Reference0._index = 829;
      jsonMappingException_Reference0.setDescription((String) null);
      jsonMappingException_Reference0.setDescription("}3~jG");
      JsonMappingException jsonMappingException2 = JsonMappingException.from(deserializationContext0, "i1fB[", (Throwable) jsonMappingException1);
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException0.toString();
      jsonMappingException0.toString();
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      jsonMappingException0.getProcessor();
      jsonMappingException2._buildMessage();
      List<JsonMappingException.Reference> list0 = jsonMappingException2.getPath();
      assertEquals(0, list0.size());
      
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.from(deserializationContext0, "");
      assertNotSame(jsonMappingException3, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(")", ")", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLClientInfoException1);
      jsonMappingException_Reference0._index = (-206);
      StackTraceElement stackTraceElement0 = new StackTraceElement("?o}.z5;LyhoVP00VOhS", "?o}.z5;LyhoVP00VOhS", ")", (-5070));
      StackTraceElement stackTraceElement1 = new StackTraceElement("UNKNOWN", "?o}.z5;LyhoVP00VOhS", ")Gkr+f_^]]NI", (-206));
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "[]", ")Gkr+f_^]]NI", (-241));
      StackTraceElement stackTraceElement3 = new StackTraceElement(")Gkr+f_^]]NI", ")Gkr+f_^]]NI", "[]", (-241));
      StackTraceElement stackTraceElement4 = new StackTraceElement(")", "", "", (-241));
      SQLDataException sQLDataException0 = new SQLDataException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      stackTraceElementArray0[0] = stackTraceElement3;
      stackTraceElementArray0[1] = stackTraceElement4;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      jsonMappingException0.printStackTrace();
      jsonMappingException0.getMessage();
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.setDescription("mhl=jN7e5FVV2+^");
      assertNull(jsonMappingException_Reference0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[]", "[]", (-1691), (int[]) null, sQLRecoverableException0);
      batchUpdateException0.getNextException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 66);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("2b$p^+heES*c40!");
      jsonMappingException0.getStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("2b$p^+heES*c40!", "");
      jsonMappingException_Reference0.setFieldName("B*y}T906");
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription("B*y}T906");
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.getFrom();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.type.MapType", jsonLocation0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._desc = "com.fasterxml.jackson.databind.type.MapType";
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, (-1));
      Object object0 = new Object();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, object0, ".I Q)L5f]pXMf");
      System.setCurrentTimeMillis((-1));
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, 41, (-3251));
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException2, ".I Q)L5f]pXMf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JsonLocation jsonLocation0 = new JsonLocation(lineNumberReader0, (-1L), 2128, 0);
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, mockIOException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) placeholderForType0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2068, (byte)0);
      ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) byteArrayInputStream0, (Object) jsonMappingException0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Vi<U");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("Vi<U", "Vi<U");
      jsonMappingException_Reference0.setFieldName("Vi<U");
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(jsonMappingException1);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      jsonMappingException2.getLocalizedMessage();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      arrayType0.withValueHandler(jsonMappingException3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y4Vc^dY)IBosT");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0, (-1386));
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.setFieldName("y4Vc^dY)IBosT");
      jsonMappingException_Reference0.toString();
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1386), int0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("y4Vc^dY)IBosT");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "o+tM`QAsq0<*", sQLTransactionRollbackException0);
      jsonMappingException_Reference0._from = (Object) "org.evosuite.runtime.mock.java.io.MockPrintWriter[\"y4Vc^dY)IBosT\"]";
      sQLTransactionRollbackException0.printStackTrace((PrintWriter) mockPrintWriter0);
      mockPrintWriter0.flush();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("}cLG`N", "o+tM`QAsq0<*", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) jsonMappingException_Reference0, 600);
      jsonMappingException1._buildMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("}cLG`N (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[600])", "com.fasterxml.jackson.databind.JsonMappingException$Reference", "y4Vc^dY)IBosT", (-1386));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Unexpected IOException (of type %s): %s", "XSODcj-`U", "com.fasterxml.jackson.databind.JsonMappingException$Reference", 41);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Unexpected IOException (of type %s): %s", "XSODcj-`U", "}cLG`N", (-1386));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("com.fasterxml.jackson.databind.JsonMappingException$Reference", "XSODcj-`U", "Unexpected IOException (of type %s): %s", 41);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("UNKNOWN", "o+tM`QAsq0<*", "y4Vc^dY)IBosT", (-241));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("y4Vc^dY)IBosT", "[]", "}cLG`N (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[600])", (-1386));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("q?t|S1d-", "q?t|S1d-", "com.fasterxml.jackson.databind.util.AccessPattern", (-1365));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("Unexpected IOException (of type %s): %s", "com.fasterxml.jackson.databind.util.AccessPattern", "", 600);
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      jsonMappingException1.printStackTrace();
      String string0 = jsonMappingException1.getMessage();
      assertEquals("}cLG`N (through reference chain: org.evosuite.runtime.mock.java.io.MockPrintWriter[\"y4Vc^dY)IBosT\"]->com.fasterxml.jackson.databind.JsonMappingException$Reference[600])", string0);
      
      jsonMappingException1.getProcessor();
      jsonMappingException_Reference0.setDescription("8j");
      assertEquals((-1386), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "[]", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(beanDeserializerFactory0, "[]");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "54>?\"2'L5z", (Throwable) jsonMappingException0);
      int int0 = (-543);
      jsonMappingException_Reference0.setIndex((-543));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockFile mockFile0 = new MockFile("[]", "54>?\"2'L5z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(mockPrintWriter0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(")", ")", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLClientInfoException1);
      jsonMappingException_Reference0._index = (-206);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.writeReplace();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference0._desc = "";
      jsonMappingException_Reference0.getFieldName();
      String string0 = "Cannot pass null fieldName";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "Cannot pass null fieldName");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Cannot pass null fieldName\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("(was ");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-589));
      StringBuilder stringBuilder0 = new StringBuilder("(was ");
      StringBuilder stringBuilder1 = placeholderForType0.getErasedSignature(stringBuilder0);
      stringBuilder1.append(true);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-589));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -589
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?5x:BanlPAO@m^1n");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) sQLIntegrityConstraintViolationException0, "?5x:BanlPAO@m^1n");
      JsonMappingException.from((JsonParser) null, "?5x:BanlPAO@m^1n", (Throwable) sQLIntegrityConstraintViolationException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (JsonMappingException.Reference) null);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = '\"';
      charArray0[2] = 'P';
      charArray0[3] = 'R';
      charArray0[4] = 'm';
      charArray0[5] = 'D';
      charArray0[6] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayReader0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      // Undeclared exception!
      try { 
        jsonFactory2.createParser(charArray0, 871, 871);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "aJ7-";
      File file0 = MockFile.createTempFile("aJ7-", "aJ7-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeBoolean(false);
      String string1 = "Unrecognized filter type (";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, "Unrecognized filter type (");
      jsonMappingException_Reference0.getFrom();
      String string2 = "";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("aJ7-", "Unrecognized filter type (", 41);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Unrecognized filter type (", sQLNonTransientException0);
      sQLNonTransientException0.setNextException(sQLRecoverableException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "Unrecognized filter type (");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Unrecognized filter type (
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileInputStream0, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl1, "?b5T2f%kRBi/M'lC(", (Throwable) jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper0, 39);
      jsonMappingException_Reference0.getIndex();
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      Class<ByteArrayOutputStream> class1 = ByteArrayOutputStream.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      PlaceholderForType placeholderForType0 = new PlaceholderForType(39);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentTypeHandler(jsonFactory0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      Class<JsonParserDelegate> class1 = JsonParserDelegate.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      Class<FilterInputStream> class2 = FilterInputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(sequenceInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler(inputStreamReader0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(referenceType3, (String) null, "");
      jsonMappingException0.prependPath((Object) class0, ")");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3044), objectReader0, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "", (Throwable) null);
      jsonMappingException0.prependPath((Object) uTF8JsonGenerator0, "");
      JsonMappingException.from(jsonGenerator0, "", (Throwable) jsonMappingException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.JsonMappingException");
      JsonMappingException jsonMappingException0 = new JsonMappingException("8fwjc|Q_RSHzSH %q", sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1000;
      intArray0[1] = (-3013);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot deserialize a POJO (of type %s) from non-Array representation (token: %s): type/property designed to be serialized as JSON Array", "com.fasterxml.jackson.databind.JsonMappingException", intArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "com.fasterxml.jackson.databind.JsonMappingException", batchUpdateException0);
      batchUpdateException0.initCause(jsonMappingException0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      batchUpdateException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("#I&)>/hy9<}M<he.cRH", "com.fasterxml.jackson.databind.JsonMappingException");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      String string0 = null;
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, (String) null);
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findPrimaryPropertySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "B^H*ah(/\\p/!'";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(deserializerFactoryConfig0, "B^H*ah(/p/!'");
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
