/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:08:36 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.sql.SQLTimeoutException;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Long> class0 = Long.TYPE;
      JavaType javaType0 = objectMapper0.constructType(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, javaType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.setSerializerFactory((SerializerFactory) null);
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      objectMapper0.canSerialize(class0, atomicReference0);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder((SerializationConfig) null, (BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.CUSTOM;
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include1, jsonInclude_Include0, class0, class0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      Class<NamedType> class1 = NamedType.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLTimeoutException0);
      boolean boolean0 = objectMapper1.canSerialize(class1, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      Class<SimpleModule> class0 = SimpleModule.class;
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      mapperFeatureArray0[2] = mapperFeatureArray0[0];
      mapperFeatureArray0[3] = mapperFeature0;
      mapperFeatureArray0[4] = mapperFeatureArray0[0];
      mapperFeatureArray0[5] = mapperFeatureArray0[2];
      mapperFeatureArray0[6] = mapperFeatureArray0[0];
      mapperFeatureArray0[7] = mapperFeatureArray0[5];
      objectMapper1.enable(mapperFeatureArray0);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }
}
