/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:15:13 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.SQLException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2800);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb08<d8q]RW");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1701);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<Map> class1 = Map.class;
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue((String) null, (AnnotatedMember) null, mapType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getDefaultValue(placeholderForType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getDefaultValue(javaType0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(" instance");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-623));
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType1 = propertyBuilder0.findSerializationType((Annotated) null, false, placeholderForType0);
      assertNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("': csGls ");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<String> class0 = String.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = propertyBuilder0.findSerializationType((Annotated) null, true, javaType0);
      assertFalse(javaType1.hasContentType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Class<PropertyAccessor> class1 = PropertyAccessor.class;
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      Class<Integer> class3 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, resolvedRecursiveType0);
      assertFalse(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Class<List> class1 = List.class;
      Class<MinimalClassNameIdResolver> class2 = MinimalClassNameIdResolver.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CollectionType collectionType1 = collectionType0.withValueHandler(simpleObjectIdResolver0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionType1);
      assertEquals(1, javaType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("': csGls ");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<String> class0 = String.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      Class<Map> class1 = Map.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = typeFactory0.constructMapType(class1, javaType0, javaType0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      MapType mapType1 = mapType0.withContentValueHandler(simpleObjectIdResolver0);
      JavaType javaType1 = propertyBuilder0.findSerializationType((Annotated) null, true, mapType1);
      assertTrue(javaType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("' of default ");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<String> class0 = String.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedClass annotatedClass0 = beanDescription0.getClassInfo();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      JavaType javaType0 = propertyBuilder0.findSerializationType(annotatedClass0, true, arrayType0);
      assertFalse(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("Failed to get property '", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, javaType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1698);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, (TypeBindings) null);
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, (Locale) null, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, arrayType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertyName propertyName0 = PropertyName.construct("S[Zb0l<d8qR3");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, placeholderForType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9o|&", (String) null);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLNonTransientConnectionException0, "S[Zb0l<d8qR3", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property 'S[Zb0l<d8qR3' of default java.util.Locale instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SQLException sQLException0 = new SQLException("", "{t/", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 1, sQLException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLNonTransientException0, ">|^U?M66B8u'@h9/", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb08td8}RW");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1698);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) dateFormat0;
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("S[Zb08td8}RW", (AnnotatedMember) null, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(" instance");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-623));
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) dateFormat0;
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)propertyBuilder0.getDefaultBean();
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      propertyBuilder0.getDefaultBean();
      Object object0 = propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, placeholderForType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(" not a super-type of (declared) class ");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<String> class0 = String.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, (PropertyName) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotatedClass annotatedClass0 = beanDescription0.getClassInfo();
      AnnotatedField annotatedField0 = new AnnotatedField(annotatedClass0, (Field) null, (AnnotationMap) null);
      pOJOPropertyBuilder0.addField(annotatedField0, (PropertyName) null, false, false, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, " not a super-type of (declared) class ");
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, collectionLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb08<d8q]RW");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1701);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, beanProperty_Bogus0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0, asArrayTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type `java.lang.String`): serialization type [simple type, class java.lang.String] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("o[Zb08td8}RW");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1681);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, (PropertyName) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "o[Zb08td8}RW");
      Class<PropertyAccessor> class1 = PropertyAccessor.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, collectionLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property [N/A] (of type `java.lang.String`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Oo^[Zb0t}RW");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1705);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, (PropertyName) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "Oo^[Zb0t}RW");
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      JsonSerializer<SerializationFeature> jsonSerializer0 = (JsonSerializer<SerializationFeature>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, beanProperty_Bogus0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, collectionLikeType0, jsonSerializer0, asExternalTypeSerializer0, asArrayTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property [N/A] (of type `java.lang.String`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S[Zb0l<d8qR3");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1692);
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(" instance");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-623));
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }
}
