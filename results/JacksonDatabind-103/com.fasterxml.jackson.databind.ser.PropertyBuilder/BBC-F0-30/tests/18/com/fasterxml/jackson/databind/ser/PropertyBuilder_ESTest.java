/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:14:55 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder((SerializationConfig) null, (BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      mapperFeatureArray0[2] = mapperFeature0;
      objectMapper0.enable(mapperFeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) byteArrayBuilder0);
      assertEquals(714, byteArrayBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      Class<MinimalClassNameIdResolver> class1 = MinimalClassNameIdResolver.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0, class0, class1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) byteArrayBuilder0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) objectIdGenerators_StringIdGenerator0);
      assertEquals(28, byteArrayBuilder0.size());
      assertEquals(28, byteArrayBuilder0.getCurrentSegmentLength());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) byteArrayBuilder0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) byteArrayBuilder0);
      assertEquals(714, byteArrayBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      objectMapper1.writeValue((OutputStream) byteArrayBuilder0, (Object) byteArrayBuilder0);
      assertEquals(689, byteArrayBuilder0.size());
      assertEquals(189, byteArrayBuilder0.getCurrentSegmentLength());
  }
}
