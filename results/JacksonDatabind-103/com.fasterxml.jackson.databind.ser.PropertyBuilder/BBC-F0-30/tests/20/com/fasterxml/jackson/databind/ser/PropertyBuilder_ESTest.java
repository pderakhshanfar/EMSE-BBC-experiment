/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:16:57 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.sql.ClientInfoStatus;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(deserializationConfig0, annotationIntrospector0, true, propertyName0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, arrayType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer((TypeIdResolver) null, beanProperty_Std0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, pOJOPropertyBuilder0, arrayType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0, asArrayTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `com.fasterxml.jackson.databind.ext.DOMSerializer[]`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue((String) null, (AnnotatedMember) null, simpleType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      Class<NamedType> class1 = NamedType.class;
      Class<BeanPropertyWriter> class2 = BeanPropertyWriter.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Object object0 = propertyBuilder0.getDefaultValue(resolvedRecursiveType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      Object object0 = propertyBuilder0.getDefaultValue(arrayType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      propertyBuilder0._defaultBean = (Object) deserializationConfig0;
      DeserializationConfig deserializationConfig1 = (DeserializationConfig)propertyBuilder0.getDefaultBean();
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, false, arrayType0);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) arrayType0, (JavaType) arrayType0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) mapLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, mapLikeType0);
      assertTrue(javaType0.equals((Object)mapLikeType0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = propertyBuilder0.findSerializationType((Annotated) null, true, javaType0);
      assertTrue(javaType1.isConcrete());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.ITALIAN;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserializationWithBuilder(deserializationConfig0, arrayType0, deserializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[2];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType0, javaTypeArray0, javaType0);
      JavaType javaType1 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionType0);
      assertTrue(javaType1.equals((Object)collectionType0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, arrayType0);
      assertTrue(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMAN;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<MatchStrength> class0 = MatchStrength.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(134);
      ReferenceType referenceType1 = referenceType0.withValueHandler(placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, referenceType1, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, referenceType1);
      assertTrue(javaType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) arrayType0);
      CollectionType collectionType1 = collectionType0.withTypeHandler(rootNameLookup0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionType1);
      assertTrue(javaType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMAN;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserializationWithBuilder(deserializationConfig0, arrayType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<StdTypeResolverBuilder> class1 = StdTypeResolverBuilder.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, resolvedRecursiveType0);
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<Module> class1 = Module.class;
      JavaType javaType0 = typeFactory0.constructReferenceType(class1, arrayType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, arrayType0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) mapLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("' of default ", (AnnotatedMember) null, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type com.fasterxml.jackson.databind.Module: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.ROOT;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, arrayType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, arrayType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(6);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.CHINA;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "': class ");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, (BeanPropertyDefinition) null, arrayType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<NamedType> class0 = NamedType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation(deserializationConfig0, arrayType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("~1", "~1", 3053);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLNonTransientException0, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder((SerializationConfig) null, (BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.ser.PropertyBuilder", "com.fasterxml.jackson.databind.ser.PropertyBuilder");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.ser.PropertyBuilder", "", sQLWarning0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLRecoverableException0, "", defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property '' of default com.fasterxml.jackson.databind.ser.impl.FailingSerializer instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) referenceType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, referenceType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      propertyBuilder0.getDefaultBean();
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("[collection ty; class ", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      try { 
        objectMapper0.updateValue((StdTypeResolverBuilder) objectMapper_DefaultTypeResolverBuilder0, (Object) basicBeanDescription0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.introspect.BasicBeanDescription[\"classAnnotations\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      StdTypeResolverBuilder stdTypeResolverBuilder0 = objectMapper0.updateValue((StdTypeResolverBuilder) objectMapper_DefaultTypeResolverBuilder0, (Object) objectMapper_DefaultTypeResolverBuilder0);
      assertSame(stdTypeResolverBuilder0, objectMapper_DefaultTypeResolverBuilder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asWrapperTypeSerializer0, asWrapperTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type `com.fasterxml.jackson.databind.ext.DOMSerializer[]`): serialization type [simple type, class com.fasterxml.jackson.databind.ext.DOMSerializer] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BeanDescription beanDescription0 = deserializationConfig0.introspectForBuilder((JavaType) arrayType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("v[w5`$*~", (AnnotatedMember) null, arrayType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }
}
