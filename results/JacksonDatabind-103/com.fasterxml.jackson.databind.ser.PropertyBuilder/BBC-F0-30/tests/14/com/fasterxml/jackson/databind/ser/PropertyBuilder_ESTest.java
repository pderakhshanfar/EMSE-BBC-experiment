/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:12:51 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.BatchUpdateException;
import java.sql.SQLDataException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig1, annotationIntrospector0, true, propertyName0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer((TypeIdResolver) null, beanProperty_Bogus0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(32);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Ljava/lang/String;", integer0, "T xNlww;e");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapLikeType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      AsArrayTypeSerializer asArrayTypeSerializer1 = asArrayTypeSerializer0.forProperty(beanProperty_Std0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, mapLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer1, asArrayTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `java.lang.String`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, (AnnotationIntrospector) null, true, propertyName0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "");
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, mapLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExistingPropertyTypeSerializer0, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `java.lang.String`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      Class<Object> class0 = Object.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0, class0, class0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class1 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation(deserializationConfig0, resolvedRecursiveType0, deserializationConfig0);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1465);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, placeholderForType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Object object0 = propertyBuilder0.getDefaultValue(placeholderForType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include)propertyBuilder0.getDefaultValue(mapLikeType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, jsonInclude_Include0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospectorPair annotationIntrospectorPair0 = (AnnotationIntrospectorPair)AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig1, annotationIntrospectorPair0, true, propertyName0);
      propertyBuilder0._defaultBean = (Object) pOJOPropertyBuilder0;
      POJOPropertyBuilder pOJOPropertyBuilder1 = (POJOPropertyBuilder)propertyBuilder0.getDefaultBean();
      assertFalse(pOJOPropertyBuilder1.anyIgnorals());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = (AnnotationCollector.NoAnnotations)propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotationCollector_NoAnnotations0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      MapLikeType mapLikeType1 = (MapLikeType)propertyBuilder0.findSerializationType((Annotated) null, false, mapLikeType0);
      assertNull(mapLikeType1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      Class<ObjectReader> class1 = ObjectReader.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)propertyBuilder0.findSerializationType(annotatedClass0, true, resolvedRecursiveType0);
      assertTrue(resolvedRecursiveType1.isConcrete());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<NamedType> class1 = NamedType.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, typeBindings0);
      ArrayType arrayType1 = (ArrayType)propertyBuilder0.findSerializationType((Annotated) null, true, arrayType0);
      assertFalse(arrayType1.isAbstract());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) mapLikeType0);
      CollectionType collectionType1 = (CollectionType)propertyBuilder0.findSerializationType((Annotated) null, true, collectionType0);
      assertFalse(collectionType1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<BeanPropertyWriter> class1 = BeanPropertyWriter.class;
      Class<ObjectIdGenerators.UUIDGenerator> class2 = ObjectIdGenerators.UUIDGenerator.class;
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[2] = (JavaType) mapLikeType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.construct(class1, typeBindings0, javaTypeArray0[3], javaTypeArray0, javaTypeArray0[2]);
      ReferenceType referenceType1 = referenceType0.withValueHandler(javaTypeArray0[2]);
      ReferenceType referenceType2 = (ReferenceType)propertyBuilder0.findSerializationType((Annotated) null, true, referenceType1);
      assertTrue(referenceType2.isReferenceType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "Can not construct IdKey for null key", mapLikeType0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentTypeHandler(configOverrides0);
      MapLikeType mapLikeType2 = (MapLikeType)propertyBuilder0.findSerializationType(virtualAnnotatedMember0, true, mapLikeType1);
      assertFalse(mapLikeType2.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      SimpleType simpleType1 = (SimpleType)propertyBuilder0.findSerializationType((Annotated) null, true, simpleType0);
      assertFalse(simpleType1.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue(" instance", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig1, simpleType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType(annotatedClass0, true, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2$WN`l^I", (String) null);
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("t!Nnx#'COe]gU", (String) null, 4000, intArray0, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      // Undeclared exception!
      propertyBuilder0._throwWrapped(sQLDataException0, "l&:", sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("zO@d@A6:");
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLTimeoutException0, "zO@d@A6:", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2$WN`l^I", (String) null);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLDataException0, "l&:", sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property 'l&:' of default java.sql.SQLTransactionRollbackException instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationIntrospector annotationIntrospector0 = propertyBuilder0._annotationIntrospector;
      AnnotationIntrospectorPair annotationIntrospectorPair0 = (AnnotationIntrospectorPair)AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig1, annotationIntrospectorPair0, false, propertyName0);
      propertyBuilder0._defaultBean = (Object) pOJOPropertyBuilder0;
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("Ge.q4p", (AnnotatedMember) null, mapLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0.getDefaultBean();
      JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include)propertyBuilder0.getPropertyDefaultValue("was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name", (AnnotatedMember) null, mapLikeType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, jsonInclude_Include0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig1, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, (PropertyName) null);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer((TypeIdResolver) null, beanProperty_Bogus0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerBuilder beanSerializerBuilder0 = beanSerializerFactory0.constructBeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      AnnotatedField annotatedField0 = new AnnotatedField(annotatedClass0, (Field) null, (AnnotationMap) null);
      pOJOPropertyBuilder0.addField(annotatedField0, (PropertyName) null, false, false, true);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, mapLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asWrapperTypeSerializer0, asWrapperTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      SimpleType simpleType0 = (SimpleType)typeFactory0.constructParametricType(class0, (JavaType[]) null);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig1, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationIntrospector annotationIntrospector0 = propertyBuilder0._annotationIntrospector;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig1, annotationIntrospector0, false, propertyName0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer((TypeIdResolver) null, beanProperty_Bogus0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asWrapperTypeSerializer0, asWrapperTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `java.lang.String`): serialization type [simple type, class java.lang.String] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, (AnnotationIntrospector) null, true, propertyName0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "");
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, mapLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExistingPropertyTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `java.lang.String`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, mapLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig1, simpleType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }
}
