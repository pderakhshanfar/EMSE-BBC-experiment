/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:41:25 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.lang.reflect.Type;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTransientConnectionException;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = new JsonInclude.Value(jsonInclude0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      Class<BeanPropertyWriter> class1 = BeanPropertyWriter.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue((String) null, (AnnotatedMember) null, resolvedRecursiveType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      Object object0 = propertyBuilder0.getDefaultValue(simpleType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      String string0 = (String)propertyBuilder0.getDefaultValue(javaType0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SimpleType simpleType0 = (SimpleType)propertyBuilder0.findSerializationType((Annotated) null, false, javaType0);
      assertNull(simpleType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      SimpleType simpleType1 = (SimpleType)propertyBuilder0.findSerializationType((Annotated) null, true, simpleType0);
      assertFalse(simpleType1.isArrayType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, javaType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<MapLikeType> class1 = MapLikeType.class;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) mapLikeType0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withValueHandler(basicClassIntrospector0);
      ArrayType arrayType2 = (ArrayType)propertyBuilder0.findSerializationType((Annotated) null, true, arrayType1);
      assertNotSame(arrayType2, arrayType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, javaType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<MatchStrength> class1 = MatchStrength.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)propertyBuilder0.findSerializationType((Annotated) null, true, resolvedRecursiveType0);
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("need JSON String that contains type id (for subtype of ", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) stdSubtypeResolver0;
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerBuilder beanSerializerBuilder0 = beanSerializerFactory0.constructBeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(annotatedClass0, class0, "need JSON String that contains type id (for subtype of ", javaType0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("need JSON String that contains type id (for subtype of ", virtualAnnotatedMember0, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot get virtual property 'need JSON String that contains type id (for subtype of '
         //
         verifyException("com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[one of: '");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "S_o", sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[one of: '", "", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLInvalidAuthorizationSpecException0, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder((SerializationConfig) null, (BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("S_o");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("$_ 3N,)SN\";pR\"K)rd", ":YmZ4S}", sQLFeatureNotSupportedException0);
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLTransientConnectionException0, "^.h9 TNN2D_1", matchStrength0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property '^.h9 TNN2D_1' of default com.fasterxml.jackson.core.format.MatchStrength instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) stdSubtypeResolver0;
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("need JSON String that contains type id (for subtype of ", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) stdSubtypeResolver0;
      StdSubtypeResolver stdSubtypeResolver1 = (StdSubtypeResolver)propertyBuilder0.getDefaultBean();
      assertSame(stdSubtypeResolver0, stdSubtypeResolver1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0.getDefaultBean();
      String string0 = (String)propertyBuilder0.getPropertyDefaultValue(" has no content", (AnnotatedMember) null, javaType0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, beanProperty_Bogus0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asWrapperTypeSerializer0, asWrapperTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type `java.lang.String`): serialization type [simple type, class java.lang.String] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, beanProperty_Bogus0);
      Class<Map> class1 = Map.class;
      Class<JavaType> class2 = JavaType.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, mapType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asWrapperTypeSerializer0, asWrapperTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, beanProperty_Bogus0);
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class1);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "07\"xRG|*2 ");
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, mapType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asWrapperTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = new PropertyName("JSON");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig1, annotationIntrospector0, true, propertyName0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"JSON\" (of type `java.lang.String`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, javaType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = (AnnotationCollector.NoAnnotations)propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotationCollector_NoAnnotations0.size());
  }
}
