/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:41:31 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLNonTransientConnectionException;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "r");
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, beanProperty_Bogus0);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, arrayType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExistingPropertyTypeSerializer0, asArrayTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "stle");
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type `com.fasterxml.jackson.databind.node.IntNode[]`): serialization type [simple type, class com.fasterxml.jackson.databind.node.IntNode] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Module> class0 = Module.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((SerializationConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn(arrayType0).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = new JsonInclude.Value(jsonInclude0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      mapperFeatureArray0[2] = mapperFeature0;
      mapperFeatureArray0[3] = mapperFeature0;
      mapperFeatureArray0[4] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = arrayType0.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("_Ce~1OTIKjT", (AnnotatedMember) null, resolvedRecursiveType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      mapperFeatureArray0[2] = mapperFeature0;
      mapperFeatureArray0[3] = mapperFeature0;
      mapperFeatureArray0[4] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, annotatedClass0, annotationMap0, 4);
      JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include)propertyBuilder0.getPropertyDefaultValue("7Y[m", annotatedParameter0, arrayType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, jsonInclude_Include0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      Object object0 = propertyBuilder0.getDefaultValue(simpleType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      ArrayType arrayType1 = (ArrayType)propertyBuilder0.findSerializationType((Annotated) null, false, arrayType0);
      assertNull(arrayType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) arrayType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      CollectionType collectionType1 = (CollectionType)propertyBuilder0.findSerializationType((Annotated) null, true, collectionType0);
      assertFalse(collectionType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      ArrayType arrayType1 = arrayType0.withValueHandler(configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      AnnotatedField annotatedField0 = new AnnotatedField(annotatedClass0, (Field) null, annotationMap0);
      ArrayType arrayType2 = (ArrayType)propertyBuilder0.findSerializationType(annotatedField0, true, arrayType1);
      assertTrue(arrayType2.equals((Object)arrayType0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) arrayType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) arrayType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      MapType mapType1 = (MapType)mapType0.withTypeHandler("o");
      MapType mapType2 = (MapType)propertyBuilder0.findSerializationType((Annotated) null, true, mapType1);
      assertFalse(mapType2.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<ObjectMapper.DefaultTypeResolverBuilder> class1 = ObjectMapper.DefaultTypeResolverBuilder.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      SimpleType simpleType1 = (SimpleType)propertyBuilder0.findSerializationType((Annotated) null, true, simpleType0);
      assertFalse(simpleType1.isEnumType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      mapperFeatureArray0[2] = mapperFeature0;
      mapperFeatureArray0[3] = mapperFeatureArray0[0];
      mapperFeatureArray0[4] = mapperFeature0;
      mapperFeatureArray0[5] = mapperFeatureArray0[0];
      mapperFeatureArray0[6] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[7] = mapperFeature1;
      mapperFeatureArray0[8] = mapperFeatureArray0[6];
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      mapperFeatureArray0[2] = mapperFeature0;
      mapperFeatureArray0[3] = mapperFeature0;
      mapperFeatureArray0[4] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped((Exception) null, "7Y[m", mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      mapperFeatureArray0[2] = mapperFeatureArray0[1];
      mapperFeatureArray0[3] = mapperFeatureArray0[1];
      mapperFeatureArray0[4] = mapperFeatureArray0[0];
      mapperFeatureArray0[5] = mapperFeatureArray0[1];
      mapperFeatureArray0[6] = mapperFeatureArray0[4];
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[7] = mapperFeature1;
      mapperFeatureArray0[8] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      int[] intArray0 = new int[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(batchUpdateException0, "4X(KYEu})awkK_", intArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property '4X(KYEu})awkK_' of default java.lang.Integer instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      MockException mockException0 = new MockException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", mockException0);
      mockException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      propertyBuilder0._throwWrapped(mockException0, "", simpleMixInResolver0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      mapperFeatureArray0[2] = mapperFeatureArray0[0];
      mapperFeatureArray0[3] = mapperFeature0;
      mapperFeatureArray0[4] = mapperFeatureArray0[2];
      mapperFeatureArray0[5] = mapperFeatureArray0[0];
      mapperFeatureArray0[6] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[7] = mapperFeature1;
      mapperFeatureArray0[8] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("nu)c_ge*_<tZS6", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      mapperFeatureArray0[2] = mapperFeature0;
      mapperFeatureArray0[3] = mapperFeature0;
      mapperFeatureArray0[4] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) rootNameLookup0;
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, arrayType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      mapperFeatureArray0[0] = mapperFeature1;
      mapperFeatureArray0[1] = mapperFeature0;
      mapperFeatureArray0[2] = mapperFeature1;
      mapperFeatureArray0[3] = mapperFeature1;
      mapperFeatureArray0[4] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) mapperFeature0;
      MapperFeature mapperFeature2 = (MapperFeature)propertyBuilder0.getDefaultBean();
      assertFalse(mapperFeature2.equals((Object)mapperFeature1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0.getDefaultBean();
      Boolean boolean0 = (Boolean)propertyBuilder0.getDefaultBean();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AnnotationIntrospector annotationIntrospector0 = propertyBuilder0._annotationIntrospector;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, arrayType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `com.fasterxml.jackson.databind.node.IntNode[]`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "style");
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type `com.fasterxml.jackson.databind.node.IntNode[]`): serialization type [simple type, class com.fasterxml.jackson.databind.node.IntNode] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include)propertyBuilder0.getDefaultValue(arrayType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, jsonInclude_Include0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IntNode> class0 = IntNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig1, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = (AnnotationCollector.NoAnnotations)propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotationCollector_NoAnnotations0.size());
  }
}
