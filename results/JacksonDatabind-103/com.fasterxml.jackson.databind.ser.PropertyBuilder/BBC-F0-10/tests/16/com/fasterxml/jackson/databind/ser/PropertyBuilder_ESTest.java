/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:13:35 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.sql.SQLFeatureNotSupportedException;
import java.text.DateFormat;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, beanPropertyWriter0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0, asArrayTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type `java.lang.String`): serialization type [simple type, class java.lang.String] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus1.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ArrayDeque<NamedType> arrayDeque0 = new ArrayDeque<NamedType>();
      TypeNameIdResolver typeNameIdResolver0 = TypeNameIdResolver.construct(serializationConfig0, simpleType0, arrayDeque0, true, false);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(typeNameIdResolver0, beanProperty_Bogus0, "com.fasterxml.jackson.databind.ser.PropertyBuilder$1");
      AsArrayTypeSerializer asArrayTypeSerializer0 = asExistingPropertyTypeSerializer0.forProperty(beanProperty_Bogus1);
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, pOJOPropertyBuilder0, simpleType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `java.lang.String`): serialization type [simple type, class java.lang.String] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      Class<ArrayNode> class1 = ArrayNode.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0, class1, class2);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, (JavaType[]) null, javaType0, javaType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1841);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, placeholderForType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getDefaultValue(simpleType0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getDefaultBean();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, false, simpleType0);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, mapType0);
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<JavaType> class0 = JavaType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, simpleType0);
      assertTrue(javaType0.equals((Object)simpleType0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SimpleType simpleType1 = simpleType0.withValueHandler(baseSettings0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, simpleType1);
      assertTrue(javaType0.equals((Object)simpleType0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionLikeType0);
      assertEquals(0, javaType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, simpleType0);
      assertFalse(javaType0.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue((String) null, (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Locale locale0 = Locale.ENGLISH;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, simpleType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("KpZX1_bo>`$", "KpZX1_bo>`$", mockThrowable0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLFeatureNotSupportedException0, "", simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property '' of default com.fasterxml.jackson.databind.type.SimpleType instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", mockThrowable0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLFeatureNotSupportedException0, "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserializationWithBuilder(deserializationConfig0, simpleType0, deserializationConfig0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      propertyBuilder0._defaultBean = (Object) pOJOPropertyBuilder0;
      POJOPropertyBuilder pOJOPropertyBuilder1 = (POJOPropertyBuilder)propertyBuilder0.getDefaultBean();
      assertEquals("", pOJOPropertyBuilder1.getInternalName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, true, propertyName0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `java.lang.String`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, beanProperty_Bogus0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], javaTypeArray0[0]);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, mapType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asWrapperTypeSerializer0, asWrapperTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, (BeanPropertyDefinition) null, simpleType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("com.fasterxml.jackson.databind.ser.PropertyBuilder$1", (AnnotatedMember) null, simpleType0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale0 = Locale.GERMANY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, (TypeFactory) null, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }
}
