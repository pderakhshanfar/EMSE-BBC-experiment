/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:08:54 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.math.RoundingMode;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.text.DateFormat;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair((AnnotationIntrospector) null, annotationIntrospector0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      BaseSettings baseSettings1 = baseSettings0.withAnnotationIntrospector(annotationIntrospector0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings1, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector1, false, (PropertyName) null);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter((SerializerProvider) null, pOJOPropertyBuilder0, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = new JsonInclude.Value(jsonInclude0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(537, "VR[QwI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(537);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, placeholderForType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "VR[*Ih^7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getDefaultValue(simpleType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair((AnnotationIntrospector) null, annotationIntrospector0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getDefaultValue(simpleType0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) simpleType0;
      SimpleType simpleType1 = (SimpleType)propertyBuilder0.getDefaultBean();
      assertTrue(simpleType1.isFinal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair((AnnotationIntrospector) null, annotationIntrospector0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "VR[*Ih^7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(1, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair((AnnotationIntrospector) null, annotationIntrospector0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      BaseSettings baseSettings1 = baseSettings0.withAnnotationIntrospector(annotationIntrospector0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings1, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, false, simpleType0);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "Illegal concrete-type annotation for method '");
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, simpleType0);
      assertTrue(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.US;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "g_x*,HmVHBgNH(");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PropertyName propertyName0 = new PropertyName((String) null);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, true, propertyName0);
      JavaType javaType0 = pOJOPropertyBuilder0.getPrimaryType();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType1 = propertyBuilder0.findSerializationType((Annotated) null, true, javaType0);
      assertFalse(javaType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) simpleType0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionLikeType0);
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(537, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<PropertyName> class1 = PropertyName.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, arrayType0);
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(499, "could not determine property type");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<HashMap> class1 = HashMap.class;
      Class<PropertyName> class2 = PropertyName.class;
      Class<ObjectIdGenerators.StringIdGenerator> class3 = ObjectIdGenerators.StringIdGenerator.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      MapLikeType mapLikeType0 = mapType0.withValueHandler(typeFactory0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, mapLikeType0);
      assertFalse(javaType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.ITALY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-434), "");
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, resolvedRecursiveType0);
      assertFalse(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-10), "VR[*Ih^7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<RoundingMode> class0 = RoundingMode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, simpleType0);
      assertNotSame(javaType0, simpleType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("]X", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "VR[*Ih^7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue((String) null, (AnnotatedMember) null, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("VR[wI&h^B7p", (AnnotatedMember) null, simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type com.fasterxml.jackson.databind.JsonDeserializer: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair((AnnotationIntrospector) null, annotationIntrospector0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "", 2, 2, 2, 2, 2, 2, 2, 2);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, simpleType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "VR[*Ih^7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type com.fasterxml.jackson.databind.JsonDeserializer: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(537, "VR[QwI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(537);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "Cannot resolve PropertyFilter with id '");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "com.fasterxml.jackson.dataCind.ser.PropertyBuilder$1", 4, 4, 4, 4, 4, 4, 4, 4, 4);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, placeholderForType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, true, propertyName0);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter((SerializerProvider) null, pOJOPropertyBuilder0, placeholderForType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair((AnnotationIntrospector) null, annotationIntrospector0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLTransactionRollbackException0, "g\"23", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder((SerializationConfig) null, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair((AnnotationIntrospector) null, annotationIntrospector0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("VR[wI&h^B7p", "VR[wI&h^B7p", 523);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("VR[wI&h^B7p", "VR[wI&h^B7p", sQLTransientException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLTimeoutException0, "UNKNOWN", rootNameLookup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property 'UNKNOWN' of default com.fasterxml.jackson.databind.util.RootNameLookup instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(537, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      JavaType javaType0 = serializationConfig0.constructType(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("N7t\"vpDkzQ{N-((9`", (AnnotatedMember) null, mapType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-10), "VR[*Ih^7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("VR[*Ih^7p", annotatedConstructor0, simpleType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot call getValue() on constructor of com.fasterxml.jackson.databind.ser.BeanPropertyWriter
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair((AnnotationIntrospector) null, annotationIntrospector0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "VR[wI&h^B7p");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      propertyBuilder0.getDefaultBean();
      Object object0 = propertyBuilder0.getDefaultBean();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
      TypeNameIdResolver typeNameIdResolver0 = TypeNameIdResolver.construct(serializationConfig0, collectionLikeType0, hashSet0, false, true);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(typeNameIdResolver0, beanProperty_Bogus0, "");
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExistingPropertyTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type `java.lang.String`): serialization type [simple type, class java.lang.String] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
      TypeNameIdResolver typeNameIdResolver0 = TypeNameIdResolver.construct(serializationConfig0, collectionLikeType0, hashSet0, false, true);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(typeNameIdResolver0, beanProperty_Bogus0, "");
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, collectionLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExistingPropertyTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(523, "");
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector1, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, (DateFormat) null, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
      TypeNameIdResolver typeNameIdResolver0 = TypeNameIdResolver.construct(serializationConfig0, collectionLikeType0, hashSet0, true, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(typeNameIdResolver0, beanProperty_Bogus0, "");
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, collectionLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-441), "POPERTY");
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BaseSettings baseSettings0 = new BaseSettings((ClassIntrospector) null, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, (TypeResolverBuilder<?>) null, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, simpleType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }
}
