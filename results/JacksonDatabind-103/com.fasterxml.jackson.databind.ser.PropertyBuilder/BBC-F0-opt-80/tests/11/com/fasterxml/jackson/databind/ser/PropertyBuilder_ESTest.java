/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 23:48:50 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.sql.ClientInfoStatus;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "");
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, (BeanPropertyDefinition) null, mapLikeType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, asExistingPropertyTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.CHINESE;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, (Locale) null, (TimeZone) null, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) mapLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      Class<Module> class2 = Module.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("gs}", (AnnotatedMember) null, resolvedRecursiveType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      Class<InputStream> class1 = InputStream.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      Class<ArrayType> class2 = ArrayType.class;
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<Object> class3 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      Object object0 = propertyBuilder0.getDefaultValue(resolvedRecursiveType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      Class<Integer> class1 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getDefaultValue(mapLikeType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<SerializationFeature> class0 = SerializationFeature.class;
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class1 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) annotationIntrospector0;
      Object object0 = propertyBuilder0.getDefaultBean();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(1, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<ArrayType> class0 = ArrayType.class;
      Class<StdTypeResolverBuilder> class1 = StdTypeResolverBuilder.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, false, mapLikeType0);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.ITALY;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<JsonTypeInfo.As> class2 = JsonTypeInfo.As.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, resolvedRecursiveType0);
      assertFalse(javaType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, mapLikeType0);
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<ArrayType> class0 = ArrayType.class;
      Class<List> class1 = List.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapLikeType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, arrayType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, arrayType0);
      assertFalse(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      Class<InputStream> class1 = InputStream.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<List> class2 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      CollectionLikeType collectionLikeType0 = collectionType0.withValueHandler(collectionType0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionLikeType0);
      assertTrue(javaType0.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<SerializationFeature> class0 = SerializationFeature.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, mapLikeType0);
      assertFalse(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      PropertyName propertyName0 = PropertyName.construct("VE4ZE=");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector1, true, propertyName0);
      JavaType javaType0 = pOJOPropertyBuilder0.getPrimaryType();
      JavaType javaType1 = propertyBuilder0.findSerializationType((Annotated) null, true, javaType0);
      assertNotSame(javaType1, javaType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<ArrayType> class0 = ArrayType.class;
      Class<StdTypeResolverBuilder> class1 = StdTypeResolverBuilder.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class1, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, deserializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("}s<", (AnnotatedMember) null, mapLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      Class<InputStream> class1 = InputStream.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
      Class<SerializationFeature> class2 = SerializationFeature.class;
      Class<Module> class3 = Module.class;
      MapLikeType mapLikeType1 = typeFactory0.constructMapLikeType(class1, class2, class3);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType1, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("*: ", (AnnotatedMember) null, mapLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type java.io.InputStream: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.FRANCE;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      Class<Map> class1 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class2 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) annotationIntrospector0, (Object) simpleType0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) simpleType0, (JavaType) arrayType0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, mapType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      Class<InputStream> class0 = InputStream.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type java.io.InputStream: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.CHINA;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<StdTypeResolverBuilder> class0 = StdTypeResolverBuilder.class;
      Class<Map> class1 = Map.class;
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, mapType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.JAPAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<Object> class1 = Object.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      JavaType javaType0 = typeFactory0.constructReferenceType(class1, placeholderForType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) basicClassIntrospector0, (Object) null);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, arrayType0, serializationConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector1, true, (PropertyName) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "gs}", 1, 0, 248, 127, 127, 0, 0, 2);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, mapLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SQLWarning sQLWarning0 = new SQLWarning("", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "", (-3516), sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLFeatureNotSupportedException0, "com.fasterxml.jackson.databind.util.ClassUtil", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder(serializationConfig0, (BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<JavaType> class0 = JavaType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Module> class1 = Module.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "", "I7uVT5zFlh$Sr}A+8y+");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(jsonMappingException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLNonTransientException0, "33 w", jsonInclude_Include0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property '33 w' of default com.fasterxml.jackson.annotation.JsonInclude$Include instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<JavaType> class0 = JavaType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, serializationConfig0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("Cannot set virtual property '", (AnnotatedMember) null, mapLikeType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class1, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, deserializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("Failed to get property '", annotatedConstructor0, mapLikeType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot call getValue() on constructor of com.fasterxml.jackson.annotation.SimpleObjectIdResolver
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      propertyBuilder0.getDefaultBean();
      Object object0 = propertyBuilder0.getDefaultBean();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<JavaType> class0 = JavaType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, serializationConfig0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeatureArray0[3];
      serializationFeatureArray0[7] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      BeanSerializerBuilder beanSerializerBuilder0 = beanSerializerFactory0.constructBeanSerializerBuilder(basicBeanDescription0);
      List<BeanPropertyWriter> list0 = beanSerializerFactory0.findBeanProperties(defaultSerializerProvider_Impl1, basicBeanDescription0, beanSerializerBuilder0);
      assertEquals(28, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<StdTypeResolverBuilder> class0 = StdTypeResolverBuilder.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      List<BeanPropertyWriter> list0 = beanSerializerFactory0.findBeanProperties(defaultSerializerProvider_Impl1, basicBeanDescription0, beanSerializerBuilder0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_EMPTY;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include1, jsonInclude_Include0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<JavaType> class0 = JavaType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, serializationConfig0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      BeanSerializerBuilder beanSerializerBuilder0 = beanSerializerFactory0.constructBeanSerializerBuilder(basicBeanDescription0);
      List<BeanPropertyWriter> list0 = beanSerializerFactory0.findBeanProperties(defaultSerializerProvider_Impl1, basicBeanDescription0, beanSerializerBuilder0);
      assertEquals(28, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_ABSENT;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include1, jsonInclude_Include0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<JavaType> class0 = JavaType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, serializationConfig0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      BeanSerializerBuilder beanSerializerBuilder0 = beanSerializerFactory0.constructBeanSerializerBuilder(basicBeanDescription0);
      List<BeanPropertyWriter> list0 = beanSerializerFactory0.findBeanProperties(defaultSerializerProvider_Impl1, basicBeanDescription0, beanSerializerBuilder0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<StdTypeResolverBuilder> class0 = StdTypeResolverBuilder.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      List<BeanPropertyWriter> list0 = beanSerializerFactory0.findBeanProperties(defaultSerializerProvider_Impl1, basicBeanDescription0, beanSerializerBuilder0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<JavaType> class0 = JavaType.class;
      Class<String> class1 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, serializationConfig0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      BeanSerializerBuilder beanSerializerBuilder0 = beanSerializerFactory0.constructBeanSerializerBuilder(basicBeanDescription0);
      List<BeanPropertyWriter> list0 = beanSerializerFactory0.findBeanProperties(defaultSerializerProvider_Impl1, basicBeanDescription0, beanSerializerBuilder0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      Class<InputStream> class1 = InputStream.class;
      Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, serializationConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector1, false, (PropertyName) null);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer((TypeIdResolver) null, beanPropertyWriter0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = pOJOPropertyBuilder0.getPrimaryType();
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0, asArrayTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property [N/A] (of type `java.lang.String`): serialization type [simple type, class java.lang.Object] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector1, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector1, false, (PropertyName) null);
      LinkedList<NamedType> linkedList0 = new LinkedList<NamedType>();
      TypeNameIdResolver typeNameIdResolver0 = TypeNameIdResolver.construct(serializationConfig0, mapLikeType0, linkedList0, false, true);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(typeNameIdResolver0, beanProperty_Bogus0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, mapLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, asArrayTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property [N/A] (of type `int`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_UpperCamelCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<StdTypeResolverBuilder> class0 = StdTypeResolverBuilder.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }
}
