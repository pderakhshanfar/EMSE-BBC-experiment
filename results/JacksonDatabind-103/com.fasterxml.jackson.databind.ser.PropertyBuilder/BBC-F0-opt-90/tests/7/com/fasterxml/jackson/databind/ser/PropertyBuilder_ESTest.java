/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 17:41:45 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientConnectionException;
import java.text.DateFormat;
import java.time.chrono.IsoEra;
import java.util.ArrayDeque;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0, class0, class0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, referenceType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Prob6em acnessing propert+ '", 0, 0, 0, 0, 0, 0, 0, 0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, referenceType0, (ClassIntrospector.MixInResolver) null);
      PropertyName propertyName0 = rootNameLookup0.findRootName((JavaType) referenceType0, (MapperConfig<?>) serializationConfig0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, true, propertyName0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, collectionType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"Object\" (of type `java.lang.Object`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance((int) (byte)3);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((byte)0, "");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Object object0 = propertyBuilder0.getDefaultValue(javaType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance((int) (byte)3);
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((byte)0, "");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)3);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, placeholderForType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<IsoEra> class0 = IsoEra.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) referenceType0);
      Object object0 = propertyBuilder0.getDefaultValue(collectionLikeType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Object object0 = propertyBuilder0.getDefaultBean();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "{yNDza", 0, 0, 0, 0, 0, 0, 0, 0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(6048);
      Class<IsoEra> class0 = IsoEra.class;
      JavaType javaType0 = serializationConfig0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(1, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`u1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, false, placeholderForType0);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(1);
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "Tzx`Cp", 1, 1, 1, 1, 1, 1, 1, 1);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedClass annotatedClass0 = beanDescription0.getClassInfo();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotatedClass0, annotationMap0, 1);
      JavaType javaType1 = propertyBuilder0.findSerializationType(annotatedParameter0, true, javaType0);
      assertFalse(javaType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "|");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Class<BeanPropertyWriter> class1 = BeanPropertyWriter.class;
      Class<ArrayDeque> class2 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class1);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionType0);
      assertNotSame(collectionType0, javaType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "|");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Class<BeanPropertyWriter> class1 = BeanPropertyWriter.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, collectionLikeType0);
      PriorityQueue<NamedType> priorityQueue0 = new PriorityQueue<NamedType>();
      TypeNameIdResolver typeNameIdResolver0 = TypeNameIdResolver.construct(serializationConfig0, referenceType0, priorityQueue0, true, false);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0, (Object) locale0, (Object) typeNameIdResolver0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, arrayType0);
      assertNotSame(arrayType0, javaType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|{`uu");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Class<Map> class1 = Map.class;
      Class<StdTypeResolverBuilder> class2 = StdTypeResolverBuilder.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class2);
      MapType mapType1 = mapType0.withContentValueHandler(stdTypeResolverBuilder0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, mapType1);
      assertFalse(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`u1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, referenceType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<IsoEra> class0 = IsoEra.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, resolvedRecursiveType0);
      assertFalse(javaType0.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`u1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue(";6}}Wd|F{`u1", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`uu");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue(";6}}Wd|F{`uu", (AnnotatedMember) null, referenceType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.FRANCE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, (TimeZone) null, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3467);
      Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
      JavaType javaType0 = typeFactory0.constructSpecializedType(placeholderForType0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, javaType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`u1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`u1", 0, 0, 0, 0, 0, 0, 0, 0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, referenceType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";fHoJv8$TZ\u0000 XWzb1", 0, 0, 0, 0, 0, 0, 0, 0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<AnnotationIntrospector> class0 = AnnotationIntrospector.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type com.fasterxml.jackson.databind.AnnotationIntrospector: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "{yNDza", 0, 0, 0, 0, 0, 0, 0, 0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, (PropertyNamingStrategy) null, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, referenceType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`u1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, referenceType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`uu");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, mapLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter((SerializerProvider) null, (BeanPropertyDefinition) null, mapLikeType0, jsonSerializer0, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance((int) (byte)3);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((byte)6, "");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)3);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) placeholderForType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped((Exception) null, "", jsonGenerator_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder((SerializationConfig) null, (BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance((int) (byte)3);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((byte)0, "");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLNonTransientConnectionException0, "", beanDescription0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property '' of default com.fasterxml.jackson.databind.introspect.BasicBeanDescription instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`u1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<ArrayDeque> class0 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      BeanDescription beanDescription0 = serializationConfig0.introspect((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedConstructor annotatedConstructor0 = beanDescription0.findDefaultConstructor();
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("serialization type ", annotatedConstructor0, collectionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot call getValue() on constructor of java.util.ArrayDeque
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`u1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<ArrayDeque> class0 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      ArrayDeque arrayDeque0 = (ArrayDeque)propertyBuilder0.getDefaultBean();
      assertEquals(0, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, referenceType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, placeholderForType0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("O>\"~G0=", (AnnotatedMember) null, placeholderForType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6}}Wd|F{`u1");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, referenceType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      PropertyName propertyName0 = new PropertyName(";6}}Wd|F{`u1");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, referenceType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \";6}}Wd|F{`u1\" (of type `java.lang.Object`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(1);
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "wJFl", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, referenceType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, (PropertyName) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, beanProperty_Bogus0, "wJFl");
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property [N/A] (of type `java.lang.Object`): serialization type [simple type, class java.lang.Object] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6Z}5d({`u1", 0, 0, 0, 0, 0, 0, 0, 0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1491);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, referenceType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<StdTypeResolverBuilder> class0 = StdTypeResolverBuilder.class;
      PropertyName propertyName0 = rootNameLookup0.findRootName((Class<?>) class0, (MapperConfig<?>) serializationConfig0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, beanPropertyWriter0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "sm%:d'4n{1uNZ,");
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, referenceType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6Z}5d({`u1", 0, 0, 0, 0, 0, 0, 0, 0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1491);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, referenceType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("|,E=", (AnnotatedMember) null, referenceType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";6Z}5d({`u1", 0, 0, 0, 0, 0, 0, 0, 0);
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<Object> class0 = Object.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }
}
