/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:00:24 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.sql.ClientInfoStatus;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.text.DateFormat;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, collectionLikeType0, serializationConfig0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = new JsonInclude.Value(jsonInclude0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "QW|");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.JAPANESE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.construct("QW|");
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      JavaType javaType0 = pOJOPropertyBuilder0.getPrimaryType();
      Object object0 = propertyBuilder0.getPropertyDefaultValue("r", (AnnotatedMember) null, javaType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-921), "<pe+0<=rS__;l5VdnR");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = propertyBuilder0.getDefaultValue(javaType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("pN^GOp$^^.");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Object object0 = propertyBuilder0.getDefaultValue(collectionLikeType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("pN^GOp$^^.");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(1, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("pN^GOp$^^.");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      JavaType javaType0 = propertyBuilder0.findSerializationType(annotatedField0, false, collectionLikeType0);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionLikeType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, resolvedRecursiveType0);
      assertTrue(javaType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Ko");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      Class<HashMap> class1 = HashMap.class;
      Class<Module> class2 = Module.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, mapType0);
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1547), "{^%*Xl4p `sB=");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory((SerializerFactoryConfig) null);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionLikeType0);
      assertFalse(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.", 0, 0, 0, 0, 0, 0, 0, 0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.ITALY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, arrayType0);
      assertNotSame(arrayType0, javaType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Ko");
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<StdTypeResolverBuilder> class0 = StdTypeResolverBuilder.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(beanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionLikeType1);
      assertTrue(javaType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Ko");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, collectionLikeType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) collectionLikeType0);
      JavaType javaType0 = propertyBuilder0.findSerializationType(annotatedField0, true, collectionType0);
      assertFalse(javaType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.", 0, 0, 0, 0, 0, 0, 0, 0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.ITALY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionLikeType0, serializationConfig0);
      PropertyName propertyName0 = new PropertyName("pN^GOp$^^.", "pN^GOp$^^.");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = pOJOPropertyBuilder0.getPrimaryType();
      JavaType javaType1 = propertyBuilder0.findSerializationType((Annotated) null, true, javaType0);
      assertFalse(javaType1.hasContentType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("pN^GOp$^^.");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("T>A2uK>a?T6i", annotatedField0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      Class<TextNode> class1 = TextNode.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("oUO5,(", annotatedField0, collectionLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Module> class0 = Module.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("X||>`cnT");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue((String) null, annotatedField0, collectionLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type com.fasterxml.jackson.databind.Module: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("pN^GOp$^^.");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1891), "Ko");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, collectionLikeType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("pN^GOp$^^.");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type java.io.InputStream: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("pN^GOp$^^.");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Ko");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("Ko");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, (BeanPropertyDefinition) null, collectionLikeType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, annotatedField0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("pN^GOp$^^.");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped((Exception) null, "(#:# nk", serializerFactoryConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder((SerializationConfig) null, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "QW|");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("QW|");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      propertyBuilder0._defaultBean = (Object) collectionLikeType0;
      CollectionLikeType collectionLikeType1 = (CollectionLikeType)propertyBuilder0.getDefaultBean();
      assertFalse(collectionLikeType1.isAbstract());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      SQLDataException sQLDataException0 = new SQLDataException("2oj.^JsI@K?x~tu{?[", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLDataException0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLInvalidAuthorizationSpecException0, "0Z8,utH7d", simpleObjectIdResolver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property '0Z8,utH7d' of default com.fasterxml.jackson.annotation.SimpleObjectIdResolver instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.CHINA;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedClass annotatedClass0 = beanDescription0.getClassInfo();
      AnnotatedConstructor annotatedConstructor0 = annotatedClass0.getDefaultConstructor();
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue((String) null, annotatedConstructor0, collectionLikeType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot call getValue() on constructor of com.fasterxml.jackson.annotation.SimpleObjectIdResolver
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.forLanguageTag("pN^GOp$^^.");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanDescription beanDescription0 = serializationConfig0.introspectClassAnnotations((JavaType) collectionLikeType0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      propertyBuilder0.getPropertyDefaultValue(".*P)$w~N!%]l>", annotatedField0, collectionLikeType0);
      Object object0 = propertyBuilder0.getDefaultBean();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.", 0, 0, 0, 0, 0, 0, 0, 0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      Locale locale0 = Locale.JAPANESE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("pN^GOp$^^.", "pN^GOp$^^.");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<StdTypeResolverBuilder> class1 = StdTypeResolverBuilder.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      JavaType javaType0 = serializerProvider0.constructType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "pN^GOp$^^.");
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, pOJOPropertyBuilder0, javaType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"pN^GOp$^^.\" (of type `com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder`): serialization type [simple type, class java.lang.String] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.", 0, 0, 0, 0, 0, 0, 0, 0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Locale locale0 = Locale.ITALY;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionLikeType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      PropertyName propertyName0 = new PropertyName("pN^GOp$^^.", "pN^GOp$^^.");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, true, propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "pN^GOp$^^.");
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, pOJOPropertyBuilder0, collectionLikeType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"pN^GOp$^^.\" (of type `java.lang.String`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "pN^GOp$^^.", 0, 0, 0, 0, 0, 0, 0, 0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      Locale locale0 = Locale.JAPANESE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("pN^GOp$^^.", "pN^GOp$^^.");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<StdTypeResolverBuilder> class1 = StdTypeResolverBuilder.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      JavaType javaType0 = serializerProvider0.constructType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "pN^GOp$^^.");
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, pOJOPropertyBuilder0, referenceType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, asExternalTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"pN^GOp$^^.\" (of type `com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 0, 0, 0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Locale locale0 = Locale.PRC;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_KebabCaseStrategy0, typeFactory0, objectMapper_DefaultTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, simpleTimeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      Class<Month> class0 = Month.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, collectionLikeType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }
}
