/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 17:40:18 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder((SerializationConfig) null, (BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Class<String> class0 = String.class;
      NamedType namedType0 = new NamedType(class0, "AR1*0B4jt2IIwZFT5");
      objectMapper0.writeValue((OutputStream) byteArrayOutputStream0, (Object) namedType0);
      assertEquals(54, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      NamedType namedType0 = new NamedType(class0);
      objectMapper1.writeValue((OutputStream) byteArrayOutputStream0, (Object) namedType0);
      assertFalse(namedType0.hasName());
  }
}
