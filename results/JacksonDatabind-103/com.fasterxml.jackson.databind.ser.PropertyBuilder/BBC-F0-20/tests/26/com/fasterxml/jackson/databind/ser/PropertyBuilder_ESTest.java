/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:23:52 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.text.DateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectIdGenerator<BasicBeanDescription> objectIdGenerator0 = (ObjectIdGenerator<BasicBeanDescription>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        objectMapper0.updateValue(objectIdGenerator0, (Object) objectMapper0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<List> class0 = List.class;
      Class<Object> class1 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) collectionType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Object object0 = propertyBuilder0.getDefaultValue(resolvedRecursiveType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<List> class0 = List.class;
      Class<Object> class1 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Object object0 = propertyBuilder0.getDefaultValue(collectionType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) collectionType0, (JavaType) collectionType0);
      BasicBeanDescription basicBeanDescription0 = serializationConfig0.introspect((JavaType) mapType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      HashMap hashMap0 = (HashMap)propertyBuilder0.getDefaultBean();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations(class0);
      PropertyBuilder propertyBuilder0 = beanSerializerFactory0.constructPropertyBuilder(serializationConfig0, beanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(1, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, false, collectionType0);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("ZLe");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<List> class0 = List.class;
      Class<Object> class1 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) collectionType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, resolvedRecursiveType0);
      assertFalse(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, mapType0);
      assertTrue(javaType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("jKE(b~%tn-");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) collectionType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) collectionType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionType0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, referenceType0);
      assertFalse(javaType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("jKE(b~%tn-");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType0, collectionType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(timeZone0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, referenceType1);
      assertFalse(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionType0);
      NamedType namedType0 = new NamedType(class0, "");
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(namedType0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, arrayType1);
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("serialization type ");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      JavaType javaType0 = propertyBuilder0.findSerializationType((Annotated) null, true, collectionType0);
      assertNotSame(collectionType0, javaType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, false, propertyName0);
      JavaType javaType0 = pOJOPropertyBuilder0.getPrimaryType();
      JavaType javaType1 = propertyBuilder0.findSerializationType((Annotated) null, true, javaType0);
      assertNotSame(javaType0, javaType1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      propertyBuilder0._defaultBean = (Object) locale_FilteringMode0;
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("Z+n", (AnnotatedMember) null, collectionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig0, collectionType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone(").");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, collectionType0, (ClassIntrospector.MixInResolver) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2316);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType((Annotated) null, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertyName propertyName0 = PropertyName.construct("VXV");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospector0, true, propertyName0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, placeholderForType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("serialization type ");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 2, sQLNonTransientConnectionException0);
      // Undeclared exception!
      propertyBuilder0._throwWrapped(sQLTimeoutException0, "", (Object) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z+n");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("sKyz 2WKBR&5E)", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLNonTransientException0, "Z+n", simpleMixInResolver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property 'Z+n' of default com.fasterxml.jackson.databind.introspect.SimpleMixInResolver instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder((SerializationConfig) null, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("serialization type ");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, collectionType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 2, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLTimeoutException0, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      Class<HashMap> class1 = HashMap.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) collectionType0, javaType0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, mapType0, serializationConfig0);
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("com.fasterxml.jackson.databind.node.ShortNode", annotatedConstructor0, mapType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot call getValue() on constructor of java.util.HashMap
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      propertyBuilder0.getDefaultBean();
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("Z+n", (AnnotatedMember) null, resolvedRecursiveType0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectIdGenerator<BasicBeanDescription> objectIdGenerator0 = (ObjectIdGenerator<BasicBeanDescription>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      try { 
        objectMapper0.updateValue(objectIdGenerator0, (Object) configOverrides0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.fasterxml.jackson.databind.cfg.ConfigOverrides[\"defaultVisibility\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getTimeZone(".7q2*[p/pOj~p^6");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      ObjectIdGenerator<BasicBeanDescription> objectIdGenerator0 = (ObjectIdGenerator<BasicBeanDescription>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      try { 
        objectMapper0.updateValue(objectIdGenerator0, (Object) beanDescription0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.fasterxml.jackson.databind.introspect.BasicBeanDescription[\"classInfo\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"annotations\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      PropertyName propertyName0 = PropertyName.construct("sKyz 2WKBR&5E)", "sKyz 2WKBR&5E)");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, (AnnotationIntrospector) null, true, propertyName0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, beanProperty_Bogus0, "Z+n");
      try { 
        propertyBuilder0.buildWriter(serializerProvider0, pOJOPropertyBuilder0, collectionType0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, asExistingPropertyTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"sKyz 2WKBR&5E)\" (of type `java.util.List`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, beanPropertyWriter0);
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, (BeanPropertyDefinition) null, collectionType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asArrayTypeSerializer0, asArrayTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Object object0 = propertyBuilder0.getPropertyDefaultValue("sKyz 2WKBR&5E)", (AnnotatedMember) null, collectionType0);
      assertEquals(JsonInclude.Include.NON_EMPTY, object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z+n");
      BaseSettings baseSettings0 = new BaseSettings(basicClassIntrospector0, annotationIntrospector0, propertyNamingStrategy_SnakeCaseStrategy0, typeFactory0, stdTypeResolverBuilder0, dateFormat0, (HandlerInstantiator) null, locale0, timeZone0, (Base64Variant) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanDescription beanDescription0 = serializationConfig0.introspectDirectClassAnnotations((JavaType) collectionType0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig0, beanDescription0);
      Annotations annotations0 = propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }
}
