/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:17:43 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyBuilder;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.math.BigInteger;
import java.sql.SQLRecoverableException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyBuilder_ESTest extends PropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      configOverrides0.setDefaultInclusion(jsonInclude_Value0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = null;
      try {
        propertyBuilder0 = new PropertyBuilder(serializationConfig0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, simpleMixInResolver0);
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SimpleType simpleType1 = (SimpleType)TypeFactory.unknownType();
      Object object0 = propertyBuilder0.getPropertyDefaultValue("", (AnnotatedMember) null, simpleType1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, simpleMixInResolver0);
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SimpleType simpleType1 = (SimpleType)TypeFactory.unknownType();
      Object object0 = propertyBuilder0.getDefaultValue(simpleType1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      String string0 = (String)propertyBuilder0.getDefaultValue(simpleType0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0._defaultBean = (Object) serializationConfig1;
      SerializationConfig serializationConfig2 = (SerializationConfig)propertyBuilder0.getDefaultBean();
      assertNull(serializationConfig2.getDefaultMergeable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      CollectionLikeType collectionLikeType1 = (CollectionLikeType)propertyBuilder0.findSerializationType((Annotated) null, false, collectionLikeType0);
      assertNull(collectionLikeType1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SimpleType simpleType1 = (SimpleType)TypeFactory.unknownType();
      SimpleType simpleType2 = (SimpleType)propertyBuilder0.findSerializationType((Annotated) null, true, simpleType1);
      assertFalse(simpleType2.isInterface());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      Class<MapperFeature> class1 = MapperFeature.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = (MapType)propertyBuilder0.findSerializationType((Annotated) null, true, mapType0);
      assertTrue(mapType1.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      CollectionLikeType collectionLikeType1 = (CollectionLikeType)propertyBuilder0.findSerializationType((Annotated) null, true, collectionLikeType0);
      assertFalse(collectionLikeType1.isArrayType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      Class<MatchStrength> class1 = MatchStrength.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class2 = Map.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class2, class2);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(annotatedClass0, class1, "com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver", mapType0);
      MapType mapType1 = (MapType)propertyBuilder0.findSerializationType(virtualAnnotatedMember0, true, mapType0);
      assertTrue(mapType1.isContainerType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      ArrayType arrayType1 = arrayType0.withValueHandler(matchStrength0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, arrayType1, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      ArrayType arrayType2 = (ArrayType)propertyBuilder0.findSerializationType((Annotated) null, true, arrayType1);
      assertFalse(arrayType2.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)propertyBuilder0.findSerializationType((Annotated) null, true, resolvedRecursiveType0);
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("]WG/y:}av?x!JUx", (AnnotatedMember) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      propertyBuilder0._defaultBean = (Object) dOMSerializer0;
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("D_GY<Z.p", (AnnotatedMember) null, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultValue((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.BeanUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse(serializationConfig1, simpleType0, (AnnotatedClass) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0.getDefaultBean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[7];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      mapperFeatureArray0[2] = mapperFeature0;
      mapperFeatureArray0[3] = mapperFeature0;
      mapperFeatureArray0[4] = mapperFeature0;
      mapperFeatureArray0[5] = mapperFeature0;
      mapperFeatureArray0[6] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, simpleMixInResolver0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(annotatedClass0, (Field) null, annotationMap0);
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType(annotatedField0, true, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotatedClass0, annotationMap0, (-947));
      // Undeclared exception!
      try { 
        propertyBuilder0.findSerializationType(annotatedParameter0, true, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      mapperFeatureArray0[2] = mapperFeature1;
      mapperFeatureArray0[3] = mapperFeature0;
      mapperFeatureArray0[4] = mapperFeature0;
      mapperFeatureArray0[5] = mapperFeature1;
      mapperFeatureArray0[6] = mapperFeature1;
      mapperFeatureArray0[7] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped((Exception) null, "", mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "");
      SQLWarning sQLWarning0 = new SQLWarning(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        propertyBuilder0._throwWrapped(sQLWarning0, (String) null, serializationConfig1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to get property 'null' of default com.fasterxml.jackson.databind.SerializationConfig instance
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(annotatedClass0, class0, "", collectionLikeType0);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      propertyBuilder0._defaultBean = (Object) bigIntegerNode0;
      // Undeclared exception!
      try { 
        propertyBuilder0.getPropertyDefaultValue("UED'fE#V3<Jxr", virtualAnnotatedMember0, collectionLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot get virtual property ''
         //
         verifyException("com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forSerialization(serializationConfig0, simpleType0, simpleMixInResolver0);
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      propertyBuilder0.getDefaultBean();
      String string0 = (String)propertyBuilder0.getPropertyDefaultValue("UbmpTL'TWRkxK*7]", (AnnotatedMember) null, simpleType0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      PropertyName propertyName0 = PropertyName.construct("", "z o efault ");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, (AnnotationIntrospector) null, false, propertyName0);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField(annotatedClass0, (Field) null, annotationMap0);
      pOJOPropertyBuilder0.addField(annotatedField0, propertyName0, false, true, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "z o efault ");
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter((SerializerProvider) null, pOJOPropertyBuilder0, collectionLikeType0, (JsonSerializer<?>) null, asExistingPropertyTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      mapperFeatureArray0[0] = mapperFeature1;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospectorPair annotationIntrospectorPair0 = (AnnotationIntrospectorPair)AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = new PropertyName("", "SqwJstY-41G].gS");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig1, annotationIntrospectorPair0, false, propertyName0);
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (TypeSerializer) null, (AnnotatedMember) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `java.lang.String`): could not determine property type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      mapperFeatureArray0[0] = mapperFeature1;
      mapperFeatureArray0[1] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationIntrospector annotationIntrospector0 = propertyBuilder0._annotationIntrospector;
      PropertyName propertyName0 = PropertyName.construct("", "");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig1, annotationIntrospector0, true, propertyName0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "&b|(!M~.M0>");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "&b|(!M~.M0>");
      try { 
        propertyBuilder0.buildWriter(defaultSerializerProvider_Impl0, pOJOPropertyBuilder0, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asPropertyTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\" (of type `java.lang.String`): serialization type [simple type, class java.lang.String] has no content
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      PropertyName propertyName0 = PropertyName.construct("", "' of default ");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, (AnnotationIntrospector) null, true, propertyName0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "' of default ");
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter((SerializerProvider) null, pOJOPropertyBuilder0, collectionLikeType0, (JsonSerializer<?>) null, asExistingPropertyTypeSerializer0, asExistingPropertyTypeSerializer0, (AnnotatedMember) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      mapperFeatureArray0[0] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig1, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      PropertyName propertyName0 = new PropertyName("", "");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, (AnnotationIntrospector) null, true, propertyName0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "could not determine property type");
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "could not determine property type");
      // Undeclared exception!
      try { 
        propertyBuilder0.buildWriter((SerializerProvider) null, pOJOPropertyBuilder0, collectionLikeType0, (JsonSerializer<?>) null, asExistingPropertyTypeSerializer0, asExternalTypeSerializer0, (AnnotatedMember) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.PropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[2] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(serializationConfig0, simpleType0, serializationConfig1);
      PropertyBuilder propertyBuilder0 = new PropertyBuilder(serializationConfig1, basicBeanDescription0);
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = (AnnotationCollector.NoAnnotations)propertyBuilder0.getClassAnnotations();
      assertEquals(0, annotationCollector_NoAnnotations0.size());
  }
}
