/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:38:00 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<List> class0 = List.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<PropertyName> class0 = PropertyName.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getGenericSuperclass(class0);
      Class<List> class1 = List.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.findSuperClasses(class1, class1, true);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getEnclosingClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      typeBindings0.toString();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, "org.hibernate.proxy.", resolvedRecursiveType0);
      virtualAnnotatedMember0.getAnnotated();
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.getClassDescription("org.hibernate.proxy.");
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getClassDescription((Object) null);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.getGenericSuperclass(class3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.isConcrete((Member) constructor0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("WNWr(/9~UJJotQ", "WNWr(/9~UJJotQ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) sQLTransactionRollbackException0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) sQLTransactionRollbackException0;
      objectArray0[6] = (Object) "WNWr(/9~UJJotQ";
      objectArray0[7] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("WNWr(/9~UJJotQ", objectArray0);
      sQLTransactionRollbackException0.printStackTrace(printWriter0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("WNWr(/9~UJJotQ", "cS", sQLTransactionRollbackException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("WNWr(/9~UJJotQ");
      sQLTransactionRollbackException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLTransactionRollbackException0.initCause(sQLTransactionRollbackException1);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransactionRollbackException0);
      sQLTransientException0.setNextException(sQLTransactionRollbackException0);
      sQLTransientException0.getStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "2Bw]=g:M4WH[h;");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nullOrToString(class0);
      ClassUtil.isLocalType((Class<?>) null, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      enumSet0.remove(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.backticked("com.fasterxml.jackson.annotation.ObjectIdGenerator");
      Class<CollectionType> class1 = CollectionType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "net.sf.cglib.proxy.java.sql.ClientInfoStatus", 515);
      MockError mockError0 = new MockError(sQLSyntaxErrorException0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(mockError0);
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern1, accessPattern0, accessPattern2, accessPattern1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern0, accessPattern1);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern0, accessPattern1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      enumSet0.removeIf(predicate3);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<InputStream> class2 = InputStream.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      ClassUtil.findClassAnnotations(class1);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      AccessPattern accessPattern3 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern0, accessPattern3);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "");
      ClassUtil.quotedOr((Object) null, "");
      Class<Double> class0 = Double.class;
      ClassUtil.findEnumType(class0);
      System.setCurrentTimeMillis(0L);
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.quotedOr((Object) null, "");
      Class<String> class2 = String.class;
      ClassUtil.isCollectionMapOrArray(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getClassDescription(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.nonNullString(" has no default (no arg) constructor");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.java.lang.Long", " has no default (no arg) constructor");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" has no default (no arg) constructor");
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'x';
      charArray0[2] = '1';
      charArray0[3] = 'A';
      charArray0[4] = 'o';
      charArray0[5] = '7';
      charArray0[6] = '#';
      mockPrintWriter0.write(charArray0);
      mockRuntimeException0.addSuppressed(sQLNonTransientException0);
      mockPrintWriter0.println(6);
      sQLNonTransientException0.printStackTrace((PrintWriter) mockPrintWriter0);
      mockRuntimeException0.addSuppressed(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
      ClassUtil.isProxyType(class0);
      ClassUtil.getOuterClass(class1);
      ClassUtil.quotedOr(class1, "java.lang.String");
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte)52;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0, (-721483190), (int) (byte) (-16));
      Class<Byte> class0 = Byte.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(class0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, javaType0, jsonToken0, "JSON");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: JSON
         //  at [Source: (byte[])\"\u0019\uFFFD\u0006\u0017\uFFFDC\uFFFD4\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      String string0 = "4}S%";
      SQLWarning sQLWarning0 = new SQLWarning("`java.lang.String`", "4}S%");
      MockError mockError0 = new MockError("4}S%", sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "`java.lang.String`");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues((InjectableValues) null);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectMapper2.addHandler(deserializationProblemHandler0);
      Class<Object> class0 = Object.class;
      objectMapper2.readerFor(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E5;`E2Rp@%Tk~\"N0oW");
      beanProperty_Bogus0.getContextAnnotation(class0);
      String string0 = null;
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<Object> class1 = Object.class;
      ClassUtil.isProxyType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class1, class0);
      int[] intArray0 = new int[8];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 6;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("H!:)IO018", "5Vm_LY=o", 6, intArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) "H!:)IO018", 8);
      batchUpdateException0.initCause(jsonMappingException0);
      // Undeclared exception!
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0, accessPattern0, accessPattern2);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getGenericSuperclass(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.buildAbstract();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<RuntimeException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      ClassUtil.createInstance(class0, false);
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Byte byte0 = new Byte((byte)1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      formatFeatureArray0[5] = formatFeature0;
      ObjectReader objectReader2 = objectReader1.withFeatures(formatFeatureArray0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader1;
      ObjectReader objectReader3 = objectReader2.withFormatDetection(objectReaderArray0);
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      ObjectReader objectReader4 = objectReader3.withFormatDetection(dataFormatReaders0);
      ObjectReader objectReader5 = objectReader4.without(formatFeature0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-629636399), objectReader5, filterOutputStream0, byteArray0, (-3323), true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) filterOutputStream0, (Exception) runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isLocalType(class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = new Object();
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1, accessPattern0, accessPattern2);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockIOException mockIOException0 = new MockIOException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("O]", mockIOException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.lang.annotatio", sQLFeatureNotSupportedException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "iy7`s'yw%-");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iy7`s'yw%-", "iy7`s'yw%-", (-661868634));
      int[] intArray0 = new int[3];
      intArray0[0] = (-661868634);
      intArray0[1] = (-661868634);
      intArray0[2] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("iy7`s'yw%-", intArray0, jsonMappingException0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete((Member) constructor0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("xxy,e\"|j!CR9M");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) constructor0;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "xxy,e\"|j!CR9M", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) printStream0, jsonEncoding0);
      MockIOException mockIOException0 = new MockIOException("xxy,e\"|j!CR9M");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "iy7`s'yw%-");
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Float> class1 = Float.TYPE;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = (long) 1947;
      longArray0[2] = (long) 1947;
      longArray0[3] = (long) 1947;
      longArray0[4] = (-2147483648L);
      longArray0[5] = (long) 1947;
      longArray0[6] = (long) 1947;
      MockError mockError0 = new MockError();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("71gAm", "[]", 1947, longArray0, mockError0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("\"%s\"", "\"%s\"", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("n");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getSuppressed();
      sQLNonTransientException0.initCause(sQLIntegrityConstraintViolationException0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, true);
      sQLNonTransientException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLNonTransientException0.spliterator();
      sQLIntegrityConstraintViolationException0.initCause(sQLNonTransientException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<+yxVTX3FP7xF70[?k");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.isLocalType(class0, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class2, class2, list0);
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<NullNode> class0 = NullNode.class;
      ClassUtil.isConcrete(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(RVO^Cw=p5B+?qK");
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) dataOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = 'v';
      charArray0[2] = 'B';
      charArray0[3] = '/';
      charArray0[4] = 'H';
      charArray0[5] = 'D';
      charArray0[6] = 'N';
      charArray0[7] = 'C';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1703);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType((Class<?>) class0, (JavaType) collectionType0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) collectionLikeType0, jsonToken0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: JSON
         //  at [Source: (char[])\"PvB/HDNC\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, " since it is not astract");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      enumMap0.put(accessPattern0, jsonMappingException0);
      enumMap0.values();
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "org.hibernate.proxy.java.lang.annotation.Annotation");
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.AUTO_DETECT_SETTERS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
      mapperFeatureArray0[4] = mapperFeature4;
      ObjectMapper objectMapper2 = objectMapper1.disable(mapperFeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      ObjectMapper objectMapper4 = objectMapper3.enable(mapperFeatureArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper5 = objectMapper4.configure(jsonGenerator_Feature0, true);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      simpleFilterProvider0.setFailOnUnknownId(true);
      objectMapper5.setFilterProvider(simpleFilterProvider0);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      TreeSet<Module> treeSet1 = new TreeSet<Module>();
      objectMapper5.findAndRegisterModules();
      objectMapper0.readerFor(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.isJacksonStdImpl((Object) simpleFilterProvider0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, " since it is not astract");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      ClassUtil.nameOf((Named) null);
      ClassUtil.findEnumType(enumMap0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  since it is not astract
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O,4p1U.0e");
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.toGenericString();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      ClassUtil.isBogusClass(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getOuterClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Byte byte0 = new Byte((byte)23);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)23, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-688), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLDataException sQLDataException0 = new SQLDataException(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Error> class0 = Error.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, filterOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-988), 0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      MockException mockException0 = new MockException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer");
      SerializationFeature serializationFeature1 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper4 = objectMapper3.disable(serializationFeature1, serializationFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ObjectMapper objectMapper5 = objectMapper4.configure(jsonParser_Feature0, true);
      objectMapper5.enableDefaultTyping();
      Class<ReferenceType> class0 = ReferenceType.class;
      objectMapper0.readerFor(class0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getPackageName(class3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ClassUtil.rawClass(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Character character0 = new Character('A');
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.nonNullString("'; inject id '");
      Class<Short> class1 = Short.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      List<Class<?>> list0 = new Vector<Class<RuntimeException>>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(javaType0, "jp$rF]aj(mXn@<", "V_UY54^x6VD]<3");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'jp$rF]aj(mXn@<' as a subtype of [simple type, class java.lang.Object]: V_UY54^x6VD]<3
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.primitiveType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException((Class<?>) null, ">8AaG,j<4(!xj.", ">8AaG,j<4(!xj.");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type [null] from String \">8AaG,j<4(!xj.\": >8AaG,j<4(!xj.
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, " since it is not astract");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      enumMap0.put(accessPattern0, jsonMappingException0);
      LinkedList<JsonMappingException> linkedList0 = new LinkedList<JsonMappingException>();
      enumMap0.values();
      ClassUtil.findEnumType(enumMap0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isProxyType(class1);
      Class<InputStream> class2 = InputStream.class;
      Constructor<InputStream> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TypeBindings.emptyBindings();
      TypeFactory.unknownType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NULL");
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getOuterClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaringClass(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getClassMethods(class2);
      Object object0 = new Object();
      ClassUtil.nullOrToString(object0);
      TypeFactory.defaultInstance();
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, " since it is not astract");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      LinkedList<JsonMappingException> linkedList0 = new LinkedList<JsonMappingException>();
      ArrayDeque<JsonMappingException> arrayDeque0 = new ArrayDeque<JsonMappingException>();
      ClassUtil.findEnumType(enumMap0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.quotedOr(class0, "{A\"XGs{fBm>g");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"class java.lang.Integer\"", ">${oOdsi@6");
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientConnectionException0);
      MockError mockError0 = new MockError(mockThrowable0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getConstructors(class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.getConstructors(class4);
      Class<Character> class5 = Character.class;
      ClassUtil.primitiveType(class5);
      ClassUtil.backticked((String) null);
      ClassUtil.getPackageName(class2);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<InputStream> class0 = InputStream.class;
      Constructor<InputStream> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericParameterTypes();
      constructor0.getGenericExceptionTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.nameOf(class0);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.primitiveType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, false);
      Class<Void> class1 = Void.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getPackageName(class1);
      ClassUtil.classOf((Object) null);
      ClassUtil.getDeclaredMethods(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("tmeH0u|b2X05]Ws@", "z5E[:P");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.setNextException(sQLTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.nameOf(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      TreeSet<Module> treeSet1 = new TreeSet<Module>((SortedSet<Module>) treeSet0);
      objectMapper1.enableDefaultTyping();
      Class<Annotation> class0 = Annotation.class;
      objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference", runtimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      SimpleBeanPropertyFilter.SerializeExceptFilter simpleBeanPropertyFilter_SerializeExceptFilter0 = new SimpleBeanPropertyFilter.SerializeExceptFilter(set0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.setDefaultFilter((PropertyFilter) simpleBeanPropertyFilter_SerializeExceptFilter0);
      objectMapper0.setFilterProvider(simpleFilterProvider1);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      TreeSet<Module> treeSet1 = new TreeSet<Module>((SortedSet<Module>) treeSet0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      objectMapper1.enableDefaultTyping();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper1.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      Class<Double> class0 = Double.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, true);
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) runtimeException0, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "`)#V8{d\"'gNH*j`");
      enumMap0.put(accessPattern0, jsonMappingException0);
      LinkedList<JsonMappingException> linkedList0 = new LinkedList<JsonMappingException>();
      enumMap0.values();
      ClassUtil.findEnumType(enumMap0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      SimpleModule simpleModule0 = new SimpleModule();
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      simpleModule0.setSerializerModifier(beanSerializerModifier0);
      ClassUtil.backticked((String) null);
      ClassUtil.getRootCause(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.backticked((String) null);
      ClassUtil.classNameOf("[null]");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "`)#V8{d\"'YgNH*j`");
      enumMap0.put(accessPattern0, jsonMappingException0);
      LinkedList<JsonMappingException> linkedList0 = new LinkedList<JsonMappingException>();
      enumMap0.values();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.canBeABeanType(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "`)#V8{d\"'YgNH*j`");
      enumMap0.put(accessPattern0, jsonMappingException0);
      Collection<JsonMappingException> collection0 = new LinkedList<JsonMappingException>();
      enumMap0.values();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.createInstance(class2, true);
      SimpleModule simpleModule0 = new SimpleModule();
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
      ClassUtil.classNameOf(simpleModule1);
      ClassUtil.getRootCause(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0, "hu'BN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nameOf((Named) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, ")`MU]z(!Se%w+LK v");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // )`MU]z(!Se%w+LK v
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      enumMap0.values();
      enumMap0.values();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.emptyIterator();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getOuterClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      enumMap0.values();
      enumMap0.values();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.isNonStaticInnerClass(class1);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "\bBgEp6oM^?9IU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.emptyIterator();
      Throwable throwable0 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.java.lang.Double", "net.sf.cglib.proxy.java.lang.Double", (-1375), (Throwable) null);
      sQLNonTransientException0.getStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hibernate.proxy.", "X}+yh?g9b JlH1Q<h", "_R9aM", (-1375));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("net.sf.cglib.proxy.java.lang.Double", "serialVersionUID", ";T:bGm#45b,8$", (-515));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Tx9SHUc7{fhHy}(R7", " (from class ", ";T:bGm#45b,8$", (-1375));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement(" has no default (no arg) constructor", "X}+yh?g9b JlH1Q<h", "net.sf.cglib.proxy.java.lang.Double", (-1375));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("Sub-class %s (of class %s) must override method '%s'", "org.hibernate.proxy.", "wh3", (-1375));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("Tx9SHUc7{fhHy}(R7", "utc-millisec", " has no default (no arg) constructor", (-5));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("_R9aM", "_R9aM", "_R9aM", (-5));
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException0, "$n-I`@`o{9T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // $n-I`@`o{9T
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.emptyIterator();
      ClassUtil.getOuterClass(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)11;
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Character character0 = new Character('H');
      ClassUtil.nullOrToString((Object) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<MapType> class1 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<NullNode> class1 = NullNode.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      NullNode.getInstance();
      try { 
        JsonPointer.compile("not one of values excepted for Enum class: %s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"not one of values excepted for Enum class: %s\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findClassAnnotations(class0);
      Object object0 = new Object();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Void> class1 = Void.class;
      Class<String> class2 = String.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class1, class2);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Long long0 = new Long((-1L));
      ClassUtil.getClassDescription(long0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      TreeSet<Module> treeSet1 = new TreeSet<Module>((SortedSet<Module>) treeSet0);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) treeSet1);
      Class<Error> class0 = Error.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      objectMapper2.canSerialize(class0, atomicReference0);
      ObjectReader objectReader0 = objectMapper2.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      Class<Module> class1 = Module.class;
      ClassUtil.canBeABeanType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error: should never end up through this code path");
      Byte byte0 = new Byte((byte)114);
      ClassUtil.nonNull((Byte) null, byte0);
      ClassUtil.findClassAnnotations(class1);
      Class<Long> class3 = Long.class;
      ClassUtil.isObjectOrPrimitive(class3);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Iterator<CollectionLikeType> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.classNameOf(iterator0);
      ClassUtil.classOf(iterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot figure out type for EnumMap (odd JDK platform?)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error: should never end up through this code path");
      ClassUtil.nonNull((Byte) null, (Byte) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Long long0 = new Long((-1L));
      ClassUtil.getClassDescription(long0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Long long0 = new Long((-2767L));
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Long long0 = new Long((-1L));
      ClassUtil.getClassDescription(long0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long long0 = new Long((-1L));
      ClassUtil.getClassDescription(long0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      TreeSet<Module> treeSet1 = new TreeSet<Module>((SortedSet<Module>) treeSet0);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) treeSet1);
      Class<Error> class0 = Error.class;
      ObjectReader objectReader0 = objectMapper2.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("($j/Od<,]AWS3&!vJm", "com.fasterxml.jackson.databind.ser.BasicSerializerFactory", hashMap0);
      ClassUtil.getRootCause(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassUtil.backticked("WOz~f1Nt");
      Class<Float> class0 = Float.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nonNullString("`WOz~f1Nt`");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot figure out type for EnumMap (odd JDK platform?)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error: should never end up through this code path");
      ClassUtil.nonNull((Byte) null, (Byte) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findConstructor(class3, false);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.getDeclaredMethods(class4);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLNonTransientException0);
      ClassUtil.getRootCause(throwable0);
      ClassUtil.isJacksonStdImpl(class4);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Character character0 = new Character('Q');
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasClass(character0, class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassUtil.nonNullString("$8**PW3");
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString("$8**PW3");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.hasClass("$8**PW3", class0);
      Class<MapType> class1 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString("3Qtp)*'bq1t");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("4*K", "4*K", mockIOException0);
      Class<ArrayType> class0 = ArrayType.class;
      mockIOException0.initCause(sQLIntegrityConstraintViolationException0);
      ClassUtil.isProxyType(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("4*K", "4*K", (-8), mockIOException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Dyj|^pA>Vd8J0", "Dyj|^pA>Vd8J0", (-749));
      sQLTimeoutException0.getStackTrace();
      SQLException sQLException0 = null;
      sQLTimeoutException0.setNextException((SQLException) null);
      sQLTimeoutException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("u}W<MPHF+@9", "local/anonymous");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: u}W<MPHF+@9
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getClassDescription(classUtil0);
      Class<Short> class2 = Short.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.nullOrToString(class0);
      ClassUtil.getOuterClass(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Z3e7BKh(n0G9O3)jf.M", "dnrL[E+U|J");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "dnrL[E+U|J", sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("java.lang.Class@0000000001", "java.lang.Class@0000000001", (-3037), sQLIntegrityConstraintViolationException0);
      ClassUtil.throwIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findEnumType(class0);
      ClassUtil.backticked("Default constructor for ");
      Class<Float> class1 = Float.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.nonNullString((String) null);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.nonNullString(".mS[[JxVXhn;{)vP");
      Class<Object> class3 = Object.class;
      ClassUtil.hasClass(".mS[[JxVXhn;{)vP", class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.getConstructors(class4);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassDescription(class0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findConstructor(class2, false);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = new Boolean("FT{q1*#-{%R`q|axfU");
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(96);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" (from class ", "FT{q1*#-{%R`q|axfU", 96);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4|=~r", (int[]) null, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException:  (from class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findClassAnnotations(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<ReferenceType> class3 = ReferenceType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaTypeArray0[5], javaTypeArray0[4]);
      Class<Character> class4 = Character.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class4, (TypeBindings) null, javaTypeArray0[4], javaTypeArray0, (JavaType) collectionLikeType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionType0);
      SimpleType simpleType0 = referenceType0.withStaticTyping();
      CollectionType collectionType1 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) simpleType0);
      collectionType1.withTypeHandler(typeFactory0);
      referenceType0.containedTypeOrUnknown((-293));
      CollectionLikeType collectionLikeType1 = collectionType1.withContentValueHandler((Object) null);
      collectionLikeType1.equals(typeFactory0);
      collectionType1.withContentValueHandler(class3);
      Float float0 = new Float(974.5524F);
      ClassUtil.quotedOr(float0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      Class<SimpleType> class5 = SimpleType.class;
      ClassUtil.findSuperTypes(class5, class3);
      Class<CollectionType> class6 = CollectionType.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class6, false);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("4*K", "4*K", mockIOException0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.createInstance(class2, true);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = new Long((-1L));
      ClassUtil.getClassDescription(long0);
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = new Boolean("vals");
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getClassDescription(classUtil0);
      Class<Short> class2 = Short.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1410));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, referenceType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(class2);
      referenceType0.containedTypeOrUnknown((-293));
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentValueHandler("`com.fasterxml.jackson.databind.util.ClassUtil`");
      collectionLikeType2.equals(class2);
      collectionLikeType2.withContentValueHandler((Object) null);
      ClassUtil.quotedOr(class3, "java.io");
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, class4);
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class4, false);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = referenceType1.getGenericSignature(stringBuilder0);
      stringBuilder1.reverse();
      referenceType0.getGenericSignature(stringBuilder1);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(class0);
      referenceType2.withContentType(referenceType1);
      referenceType2.getInterfaces();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.hasClass(referenceType2, class2);
      ClassUtil.isProxyType(class2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vals");
      SQLException sQLException0 = new SQLException();
      sQLTransientConnectionException0.setNextException(sQLException0);
      sQLTransientConnectionException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      Double double0 = new Double(0.0);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.getOuterClass(class3);
      Double double1 = new Double(0.0);
      ClassUtil.nonNull((Object) referenceType2, (Object) class3);
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.findSuperClasses(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = new Boolean("elementType");
      JsonFactory jsonFactory0 = new JsonFactory();
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNull((Integer) null, (Integer) null);
      Class<String> class1 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      MockException mockException0 = new MockException();
      ClassUtil.throwIfRTE(mockException0);
      ClassUtil.findSuperTypes(class1, class0, list0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      ClassUtil.classOf(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.nonNullString((String) null);
      Byte byte0 = new Byte((byte)1);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (byte) (-85));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(accessPattern0, (byte)1);
      jsonMappingException_Reference0.toString();
      Class<Float> class2 = Float.class;
      Class<Object> class3 = Object.class;
      ClassUtil.isCollectionMapOrArray(class3);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.getConstructors(class4);
      ClassUtil.hasClass(class2, class3);
      ClassUtil.nonNullString("LSaA3imvI\"d");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Boolean boolean0 = new Boolean("elementType");
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(96);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      byteArrayBuilder0.appendFourBytes((-1859));
      String string0 = " (from class ";
      int[] intArray0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" (from class ", "F4aofA|HJ55WQaQ5c", 96);
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      try { 
        jsonGenerator0.writeString((Reader) null, 563);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // null reader
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      SQLException sQLException0 = new SQLException((String) null, "Failed to instantiate class ", 5, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      mockRuntimeException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Character character0 = new Character('A');
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.hasClass(character0, class0);
      ClassUtil.findClassAnnotations(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "*;,fP&lt'0x6P-{UN", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      ClassUtil.hasClass((Object) null, class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NIRPy\"_");
      SQLException sQLException0 = new SQLException();
      sQLTransientConnectionException0.setNextException(sQLException0);
      sQLTransientConnectionException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLException0);
      Double double0 = new Double((-1098.0));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class2);
      ClassUtil.quotedOr((Object) null, "@\"OXD~g%*,AjA1I");
      Class<Integer> class3 = Integer.class;
      Class<Object> class4 = Object.class;
      Class<String> class5 = String.class;
      ClassUtil.findSuperTypes(class4, class5);
      ClassUtil.findSuperTypes((JavaType) null, class3, false);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNull((Integer) null, (Integer) null);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("4*K", "4*K", mockIOException0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("4*K", "4*K", (-8), mockIOException0);
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<IOException> class1 = IOException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassDescription(class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isLocalType(class2, true);
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3fTE)yD4S++s'!QeRn");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = referenceType1.getGenericSignature(stringBuilder0);
      referenceType0.getGenericSignature(stringBuilder1);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(class0);
      referenceType2.withContentType(referenceType1);
      referenceType2.getInterfaces();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.hasClass(referenceType2, class2);
      ClassUtil.isProxyType(class2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vals");
      SQLException sQLException0 = new SQLException();
      sQLTransientConnectionException0.setNextException(sQLException0);
      sQLTransientConnectionException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      Double double0 = new Double(0.0);
      ClassUtil.quotedOr(double0, "com.fasterxml.jackson.core.io.OutputDecorator");
      Class<MapLikeType> class3 = MapLikeType.class;
      Class<Integer> class4 = Integer.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isJacksonStdImpl((Object) "vals");
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.hasEnclosingMethod(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Long> class1 = Long.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NULL");
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      ReferenceType referenceType2 = referenceType1.withValueHandler(class0);
      referenceType2.containedTypeOrUnknown((-2));
      referenceType2.isTypeOrSuperTypeOf(class0);
      ClassUtil.classOf(referenceType2);
      Class<Double> class2 = Double.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.getOuterClass(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.getDeclaringClass(class3);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.getClassMethods(class4);
      Object object0 = new Object();
      ClassUtil.nullOrToString(object0);
      Class<Short> class5 = Short.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<AccessPattern> class6 = AccessPattern.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class6, (JavaType) referenceType1);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class5, collectionLikeType0, "NULL");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.type.CollectionLikeType (of class java.lang.Short) must override method 'NULL'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Boolean boolean0 = new Boolean("elementType");
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(96);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" (from class ", "F4aofA|HJ55WQaQ5c", 96);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" (from class ", (int[]) null, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException:  (from class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Character> class0 = Character.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "elementType", "elementType");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("elementType", "local/anonymous", 3);
      sQLRecoverableException0.initCause(jsonMappingException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Character` from String \"elementType\": elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getClassDescription(classUtil0);
      Class<Short> class2 = Short.class;
      ClassUtil.primitiveType(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1410));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, referenceType0);
      referenceType0.containedTypeOrUnknown((-293));
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler("`com.fasterxml.jackson.databind.util.ClassUtil`");
      collectionLikeType1.equals(class2);
      collectionLikeType1.withContentValueHandler((Object) null);
      ClassUtil.getOuterClass(class1);
      Class<Double> class3 = Double.class;
      referenceType0.findSuperType(class3);
      Double double0 = new Double((-293));
      ClassUtil.nonNull((Object) collectionLikeType1, (Object) double0);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.getDeclaredMethods(class1);
      Class<RuntimeException> class5 = RuntimeException.class;
      Class<Float> class6 = Float.class;
      ClassUtil.findSuperClasses(class5, class6, true);
      Class<Integer> class7 = Integer.class;
      Integer integer0 = new Integer((-293));
      Class<NoClass> class8 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class8, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Integer integer1 = ClassUtil.nonNull(integer0, integer0);
      ClassUtil.verifyMustOverride(class7, integer1, "");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = referenceType1.getGenericSignature(stringBuilder0);
      referenceType0.getGenericSignature(stringBuilder1);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(class0);
      referenceType2.withContentType(referenceType1);
      referenceType2.getInterfaces();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.hasClass(referenceType2, class2);
      ClassUtil.isProxyType(class2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vals");
      SQLException sQLException0 = new SQLException();
      sQLTransientConnectionException0.setNextException(sQLException0);
      sQLTransientConnectionException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      ClassUtil.getDeclaredFields(class1);
      Class<Float> class3 = Float.class;
      ClassUtil.findRawSuperTypes(class1, class3, true);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Character character0 = new Character('Q');
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasClass(character0, class0);
      ClassUtil.findClassAnnotations(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.nameOf(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Character character0 = new Character('A');
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasClass(character0, class0);
      ClassUtil.findClassAnnotations(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = referenceType1.getGenericSignature(stringBuilder0);
      referenceType0.getGenericSignature(stringBuilder1);
      referenceType1.containedTypeOrUnknown((-4));
      ReferenceType referenceType2 = referenceType1.withTypeHandler(class0);
      referenceType2.withContentType(referenceType1);
      referenceType2.getInterfaces();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.hasClass(referenceType2, class2);
      ClassUtil.isProxyType(class2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vals");
      SQLException sQLException0 = new SQLException();
      sQLTransientConnectionException0.setNextException(sQLException0);
      sQLTransientConnectionException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      ClassUtil.getDeclaredFields(class1);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassDescription(class1);
      ClassUtil.isLocalType(class2, false);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Character character0 = new Character('A');
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasClass(character0, class0);
      Boolean boolean0 = new Boolean("net.sf.cglib.proxy.java.lang.reflect.AccessibleObject");
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "$eqAKR)N&Qt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      referenceType0.withContentTypeHandler(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.backticked("Default constructor for ");
      Class<Float> class2 = Float.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.nonNullString((String) null);
      ClassUtil.getEnclosingClass(class1);
      Class<IOException> class3 = IOException.class;
      ClassUtil.findConstructor(class3, false);
      TypeFactory.defaultInstance();
      Class<HashMap> class4 = HashMap.class;
      Class<Long> class5 = Long.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.createIfNeeded(class4, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.util.HashMap with 1 type parameter: class expects 2
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<String> class0 = String.class;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLDataException sQLDataException0 = new SQLDataException("E&]7Kb:", batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      SQLWarning sQLWarning0 = new SQLWarning("|@B.5izb", sQLTransactionRollbackException0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1807324828);
      longArray0[1] = (long) (-1807324828);
      longArray0[2] = (long) (-1807324828);
      longArray0[3] = (long) (-1807324828);
      longArray0[4] = (long) (-1807324828);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("net.sf.cglib.proxy.java.io.IOException", "elementType", (-1807324828), longArray0, sQLDataException0);
      sQLDataException0.addSuppressed(batchUpdateException1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-1807324828), sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Dyj|^pA>Vd8J0", "Dyj|^pA>Vd8J0", (-749));
      sQLTimeoutException0.getStackTrace();
      sQLTimeoutException0.setNextException((SQLException) null);
      sQLTimeoutException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Boolean boolean0 = new Boolean("elementType");
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(96);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" (from class ", "F4aofA|HJ55WQaQ5c", 96);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" (from class ", (int[]) null, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException:  (from class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Boolean boolean0 = new Boolean("elementType");
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, boolean0, "elementType");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Boolean (of class com.fasterxml.jackson.databind.type.PlaceholderForType) must override method 'elementType'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("charOffset");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "charOffset", (Throwable) sQLTransientException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("charOffset", jsonMappingException0);
      DataTruncation dataTruncation0 = new DataTruncation((-13), false, false, 2388, 0, mockRuntimeException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) "vals");
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getOuterClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("keyType", " / 0x", (-3842));
      Throwable throwable0 = sQLTransientException0.fillInStackTrace();
      ClassUtil.getRootCause(sQLTransientException0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "p{i0e`x7akv>Z L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p{i0e`x7akv>Z L
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("M&]{jc3xDUV", "qN(hp!5%95ek+D7", 0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0, "qN(hp!5%95ek+D7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // qN(hp!5%95ek+D7
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.findEnumType(class1);
      Class<String> class2 = String.class;
      Class<Byte> class3 = Byte.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      String string0 = "{9ZH.i";
      typeBindings0.withUnboundVariable("{9ZH.i");
      Class<Integer> class4 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      CollectionLikeType.construct((Class<?>) class4, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      // Undeclared exception!
      try { 
        TypeBindings.createIfNeeded((Class<?>) null, javaTypeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockError mockError0 = new MockError();
      StackTraceElement[] stackTraceElementArray0 = mockError0.getStackTrace();
      StackTraceElement[] stackTraceElementArray1 = mockError0.getStackTrace();
      mockError0.setStackTrace(stackTraceElementArray1);
      mockError0.initCause((Throwable) null);
      mockError0.getSuppressed();
      mockError0.getMessage();
      mockError0.getLocalizedMessage();
      mockError0.setStackTrace(stackTraceElementArray0);
      mockError0.getCause();
      mockError0.getMessage();
      ClassUtil.nullOrToString(mockError0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.nonNull(";N,GL", ")^SF");
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class3, class4);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.findSuperTypes(class1, class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = false;
      ClassUtil.findSuperClasses(class0, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.createInstance(class1, false);
      Integer integer0 = new Integer((-1247));
      ClassUtil.nullOrToString(integer0);
      TypeBindings.emptyBindings();
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[3];
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Short short0 = new Short((short) (-2658));
      Class<?> class0 = ClassUtil.classOf(short0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*;,fP&lt'0x6P-{UN", "*;,fP&lt'0x6P-{UN");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("*;,fP&lt'0x6P-{UN", "*;,fP&lt'0x6P-{UN", 3, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // *;,fP&lt'0x6P-{UN
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.emptyIterator();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<String> class2 = String.class;
      ClassUtil.getGenericInterfaces(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class0, class1);
      String string0 = "JsonInclude.Value(value=";
      ClassUtil.nonNullString("JsonInclude.Value(value=");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "P8zbU");
      sQLRecoverableException0.initCause(jsonMappingException0);
      sQLRecoverableException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize Map key of type `java.lang.String` from String \"\": P8zbU
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Character character0 = new Character('A');
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findClassAnnotations(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      boolean boolean0 = true;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      File file0 = MockFile.createTempFile("YlN", "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      jsonFactory0.createParser("serialVersionUID");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "", (Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransientException0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      Class<Object> class1 = Object.class;
      Class<Double> class2 = Double.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      Class<Boolean> class3 = Boolean.class;
      TypeBindings.create(class3, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ClassUtil.getClassDescription(resolvedRecursiveType0);
      Class<NoClass> class4 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Long long0 = new Long((-1L));
      ClassUtil.getClassDescription(long0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getClassDescription(classUtil0);
      Class<Short> class2 = Short.class;
      ClassUtil.primitiveType(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1410));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, referenceType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(class2);
      referenceType0.containedTypeOrUnknown((-293));
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentValueHandler("`com.fasterxml.jackson.databind.util.ClassUtil`");
      collectionLikeType2.equals(class2);
      collectionLikeType2.withContentValueHandler((Object) null);
      ClassUtil.getOuterClass(class1);
      Double double0 = new Double(317.9735288);
      ClassUtil.nonNull((Object) collectionLikeType2, (Object) double0);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.getDeclaredMethods(class1);
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<Float> class5 = Float.class;
      ClassUtil.findSuperClasses(class4, class5, true);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isBogusClass(class1);
      Class<Short> class2 = Short.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = referenceType1.getGenericSignature(stringBuilder0);
      referenceType0.getGenericSignature(stringBuilder1);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(class0);
      referenceType2.withContentType(referenceType1);
      referenceType2.getInterfaces();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.hasClass(referenceType2, class2);
      ClassUtil.isProxyType(class2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vals");
      SQLException sQLException0 = new SQLException();
      sQLTransientConnectionException0.setNextException(sQLException0);
      sQLTransientConnectionException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      ClassUtil.getDeclaredFields(class1);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassDescription(class1);
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getGenericInterfaces(class0);
      String string0 = "%*X";
      try { 
        Short.valueOf("%*X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%*X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.nameOf(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        AbstractDeserializer.constructForNonPOJO((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }
}
