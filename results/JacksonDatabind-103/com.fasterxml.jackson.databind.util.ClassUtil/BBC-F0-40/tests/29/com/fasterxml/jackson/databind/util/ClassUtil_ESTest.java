/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:59:52 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInput;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockError mockError0 = new MockError("array");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<IOException> class1 = IOException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-4586));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.verifyMustOverride(class0, accessPattern0, "");
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, (OutputStream) null, byteArray0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(objectMapper0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1536);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader2, bufferedOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[1] = 56320;
      intArray0[2] = 0;
      intArray0[3] = 56319;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("JSON", intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      MapType mapType0 = MapType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      MapLikeType mapLikeType0 = mapType0.withStaticTyping();
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(mapType0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapLikeType1, "EAGER_DESERIALIZER_FETCH", "EAGER_DESERIALIZER_FETCH");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'EAGER_DESERIALIZER_FETCH' as a subtype of [map type; class java.sql.ClientInfoStatus, [simple type, class com.fasterxml.jackson.databind.type.PlaceholderForType] -> [simple type, class com.fasterxml.jackson.databind.type.PlaceholderForType]]: EAGER_DESERIALIZER_FETCH
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Object> class2 = Object.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1234));
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) placeholderForType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler((Object) null);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 65599, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 285, false);
      uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null, 1536);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-787), objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1536, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classOf(typeFactory0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getPackageName(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getPackageName(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleModule simpleModule0 = new SimpleModule();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "array");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // array
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) null);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("org.hibernate.proxy.java.lang.Short");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      ClassUtil.nonNull((ResolvedRecursiveType) null, resolvedRecursiveType0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassUtil.emptyIterator();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte) (-123);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getConstructors(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "org.hibernate.proxy.java.lang.annotation.Annotation", "org.hibernate.proxy.java.lang.annotation.Annotation");
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.PlaceholderForType` from String \"org.hibernate.proxy.java.lang.annotation.Annotation\": org.hibernate.proxy.java.lang.annotation.Annotation
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class0);
      ClassUtil.getEnclosingClass(class0);
      System.setCurrentTimeMillis(5278L);
      Class<TextNode> class1 = TextNode.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes(class1, class2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.isJacksonStdImpl(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      MockError mockError0 = new MockError(mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaTypeArray0[0], simpleType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) collectionLikeType0, javaTypeArray0[0]);
      MapType mapType1 = mapType0.withStaticTyping();
      Character character0 = new Character('3');
      MapType mapType2 = mapType1.withValueHandler(character0);
      MapLikeType mapLikeType0 = mapType2.withKeyType(javaTypeArray0[0]);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(simpleType0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType1, (Class<?>) class1, false);
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      Class<HashMap> class1 = HashMap.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructRawMapType(class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 315426292 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$343714266) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      ClassUtil.hasClass(object0, class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "\"%s\"";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("\"%s\"", (Throwable) null);
      mockRuntimeException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "\"%s\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaredMethods(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      MockError mockError0 = new MockError("l^;)a@U5?z", sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(mockError0);
      Throwable throwable0 = sQLClientInfoException0.initCause(mockError0);
      mockError0.getSuppressed();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockError0.fillInStackTrace();
      mockError0.addSuppressed(throwable0);
      mockError0.getStackTrace();
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      System.setCurrentTimeMillis(1L);
      ClassUtil.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Default constructor for ");
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getConstructors(class1);
      Class<String> class2 = String.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.isProxyType(class2);
      ClassUtil.nullOrToString(class1);
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isJacksonStdImpl(class0);
      Class<IOException> class3 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) null, class3, false);
      Class<Error> class4 = Error.class;
      ClassUtil.isProxyType(class4);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE(throwable0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      typeFactory0.constructRawMapType(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VHsge,r'%");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class0);
      EnumMap<AccessPattern, MapLikeType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, MapLikeType> enumMap2 = new EnumMap<AccessPattern, MapLikeType>(enumMap1);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      enumMap2.putIfAbsent(accessPattern0, mapType0);
      ClassUtil.findEnumType(enumMap2);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("T:}(lh[:rhjQ>09", "T:}(lh[:rhjQ>09");
      int[] intArray0 = new int[9];
      intArray0[0] = (-2959);
      intArray0[1] = (-1809238660);
      intArray0[2] = 1243;
      intArray0[3] = 658;
      intArray0[4] = 1;
      intArray0[5] = 1503;
      intArray0[6] = 954;
      intArray0[7] = 12;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[8] = (-1024);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("WdL^$A", intArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateException0.spliterator();
      sQLInvalidAuthorizationSpecException0.initCause(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.backticked(":4SL}h");
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.allOf(class0);
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      enumSet0.clone();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.util.NavigableSet");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, defaultDeserializationContext0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 92, (DataInput) null, objectMapper0, byteQuadsCanonicalizer0, 92);
      Class<Long> class1 = Long.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8DataInputJsonParser0, (Class<?>) class1, jsonToken0, (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT
         //  at [Source: UNKNOWN; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.hasClass(class0, class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      PropertyName propertyName0 = PropertyName.construct("");
      objectReader0.withRootName(propertyName0);
      char char0 = 'k';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "Class ", false, 'k', (-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 6)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getLocalizedMessage();
      mockError0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.primitiveType(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.java.lang.Short", "org.hibernate.proxy.java.lang.Short", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasClass(class0, class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      SQLTransientException sQLTransientException0 = new SQLTransientException("groovy.lang");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class0);
      EnumMap<AccessPattern, MapLikeType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, MapLikeType> enumMap2 = new EnumMap<AccessPattern, MapLikeType>(enumMap1);
      ClassUtil.findEnumType(enumMap2);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      MockError mockError0 = new MockError("java.lang.Long");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
      ClassUtil.wrapperType(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (JavaType[]) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", mapType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNullString("0");
      Class<Object> class0 = Object.class;
      boolean boolean0 = false;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getParameters();
      constructor0.getDeclaredAnnotations();
      constructor0.getAnnotations();
      constructor0.getGenericParameterTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getName();
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperTypes(class0, class2, list0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.setAccessible(true);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class2);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getTypeParameters();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class2, class3, false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockError mockError0 = new MockError("Q52>BLnR0h\u0000%5-EG++");
      mockError0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, ", problem: ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("BIG_INTEGER");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<RuntimeException> class1 = RuntimeException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ClassUtil.nonNull((ResolvedRecursiveType) null, (ResolvedRecursiveType) null);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.hasClass(class0, class1);
      ClassUtil.emptyIterator();
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("y?p<JJ)Tw2b");
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<Object> class2 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("y?qp<kJJ)Tw2b");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(jsonMappingException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "y?qp<kJJ)Tw2b", 418);
      sQLNonTransientConnectionException0.addSuppressed(sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "y?qp<kJJ)Tw2b");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.hasClass(class0, class1);
      ClassUtil.emptyIterator();
      Class<Module> class2 = Module.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      ObjectReader objectReader2 = objectReader1.withRootName("PP");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader2, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[0];
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) mapLikeType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdGenerator<Double> objectIdGenerator0 = (ObjectIdGenerator<Double>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(collectionLikeType0, propertyName0, objectIdGenerator0, false);
      JsonSerializer<JsonMappingException> jsonSerializer0 = (JsonSerializer<JsonMappingException>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withSerializer(jsonSerializer0);
      SerializedString serializedString0 = (SerializedString)objectIdWriter1.propertyName;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      SQLDataException sQLDataException0 = new SQLDataException("\"]4O8vm}$@Os[ouE3\"r", "JSON");
      MockError mockError0 = new MockError("Split surrogate on writeRaw() input (last character): first character 0x%4x", sQLDataException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("\"]4O8vm}$@Os[ouE3\"r", "elementType", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: \"]4O8vm}$@Os[ouE3\"r
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Character> class0 = Character.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      Class<Void> class2 = Void.TYPE;
      ClassUtil.isBogusClass(class2);
      Class<Module> class3 = Module.class;
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class1);
      constructor0.newInstance(annotationArray0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.classOf(clientInfoStatus0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nameOf(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`java.lang.Long`");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class0, class1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, (TypeBindings) null);
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) null, false);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "()", "}I");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Long` from String \"()\": }I
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getTypeParameters();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      SimpleModule simpleModule0 = new SimpleModule();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      JsonDeserializer<AccessibleObject> jsonDeserializer0 = (JsonDeserializer<AccessibleObject>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      simpleModule0.addDeserializer(class2, (JsonDeserializer<? extends AccessibleObject>) jsonDeserializer0);
      ClassUtil.quotedOr(simpleModule0, "net.sf.cglib.proxy.long");
      Class<IOException> class3 = IOException.class;
      Class<Annotation> class4 = Annotation.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class4, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
      ClassUtil.getOuterClass(class4);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getTypeParameters();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      SimpleModule simpleModule0 = new SimpleModule();
      ClassUtil.quotedOr(simpleModule0, "net.sf.cglib.proxy.long");
      Class<IOException> class2 = IOException.class;
      Class<Annotation> class3 = Annotation.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class3, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
      ClassUtil.getOuterClass(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleModule simpleModule0 = new SimpleModule("UC");
      NamedType[] namedTypeArray0 = new NamedType[7];
      Class<Float> class0 = Float.class;
      NamedType namedType0 = new NamedType(class0);
      namedTypeArray0[0] = namedType0;
      Class<RuntimeException> class1 = RuntimeException.class;
      NamedType namedType1 = new NamedType(class1);
      namedTypeArray0[1] = namedType1;
      NamedType namedType2 = new NamedType(class0);
      namedTypeArray0[2] = namedType2;
      NamedType namedType3 = new NamedType(class1, "UC");
      namedTypeArray0[3] = namedType3;
      NamedType namedType4 = new NamedType(class1, "UC");
      namedTypeArray0[4] = namedType4;
      NamedType namedType5 = new NamedType(class1, "UC");
      namedTypeArray0[5] = namedType5;
      NamedType namedType6 = new NamedType(class0);
      namedTypeArray0[6] = namedType6;
      simpleModule0.registerSubtypes(namedTypeArray0);
      simpleModule0.getTypeId();
      ClassUtil.classNameOf(simpleModule0);
      Class<?> class2 = ClassUtil.classOf("UC");
      ClassUtil.canBeABeanType(class2);
      ClassUtil.getOuterClass(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class3, class2, true);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class4);
      Class<Byte> class5 = Byte.class;
      ClassUtil.findConstructor(class5, true);
      Class<Double> class6 = Double.class;
      ClassUtil.findSuperClasses((Class<?>) null, class6, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Short> class1 = Short.TYPE;
      constructor0.getParameterTypes();
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Annotation> class1 = Annotation.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "non-static member class");
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.classOf((Object) null);
      System.setCurrentTimeMillis((-3336L));
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, (Object) null, "Class ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.backticked((String) null);
      ClassUtil.nonNullString("[]");
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isConcrete(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.findSuperTypes(class1, class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getPackageName(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getEnclosingClass(class2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.initCause(mockRuntimeException0);
      MockError mockError0 = new MockError("m$5EvZ/zYe*Cxb1Ww&g", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      mockError0.getStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      mockError0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwRootCauseIfIOE(mockError0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.printStackTrace();
      ClassUtil.throwIfIOE(sQLTransientException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapLikeType.upgradeFrom(mapType0, mapType0, mapType0);
      Class<Float> class3 = Float.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class3, true);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.canBeABeanType(class4);
      SQLTransientException sQLTransientException1 = new SQLTransientException();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.backticked("[]");
      ClassUtil.nameOf((Named) null);
      ClassUtil.findEnumType(class0);
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getDeclaringClass(class0);
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.getClassMethods(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1617);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentTypeHandler(iterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.printStackTrace();
      MockIOException mockIOException0 = new MockIOException("`dszR$7/!B0");
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class2, class0, true);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.backticked("NWjICS");
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isLocalType(class1, true);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isConcrete(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class1, class3, false);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.isObjectOrPrimitive(class2);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class3, class4);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-110);
      // Undeclared exception!
      try { 
        jsonFactory1.createParser(byteArray0, (int) (byte) (-60), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -60
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.emptyIterator();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Double> class1 = Double.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      ClassUtil.isConcrete(class2);
      Class<Long> class3 = Long.TYPE;
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getEnclosingClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getPackageName(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findSuperTypes(javaType0, class2, true);
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      Annotation[] annotationArray0 = constructor1.getAnnotationsByType(class2);
      constructor1.newInstance(annotationArray0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNullString((String) null);
      Long long0 = new Long(0);
      ClassUtil.isJacksonStdImpl((Object) long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getPackageName(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(javaType0, class2, false);
      ClassUtil.quotedOr(beanProperty_Bogus0, "org.hibernate.proxy.long");
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = true;
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("JSON", clientInfoStatus0);
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON", true);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) mockFileWriter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("0");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, ";m3`#LKq", (Throwable) sQLSyntaxErrorException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileWriter0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ;m3`#LKq
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.printStackTrace();
      ClassUtil.throwIfIOE(sQLTransientException0);
      TypeFactory.defaultInstance();
      ClassUtil.quotedOr(class0, "LbC*");
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "\",%.nq";
      Class<Short> class0 = Short.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonFactory0.enable(jsonParser_Feature0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("JSON", clientInfoStatus0);
      hashMap0.put("(Hg61(jE", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      ClassUtil.throwIfIOE(throwable0);
      ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Byte byte0 = new Byte((byte)2);
      ClassUtil.classOf(byte0);
      MockException mockException0 = new MockException("QmY(kyeaMx2");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("QmY(kyeaMx2", mockException0);
      mockException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("QmY(kyeaMx2", "QmY(kyeaMx2");
      sQLRecoverableException0.printStackTrace();
      sQLRecoverableException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLRecoverableException0.getStackTrace();
      mockException0.fillInStackTrace();
      mockException0.getMessage();
      sQLRecoverableException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "QmY(kyeaMx2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // QmY(kyeaMx2
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      Long long0 = new Long(1936L);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Object object0 = new Object();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Long long0 = new Long(623L);
      ClassUtil.classOf(long0);
      ClassUtil.hasEnclosingMethod(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.nullOrToString(long0);
      ClassUtil.nonNullString("java.lang.Long@0000000001");
      Class<Short> class3 = Short.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.nonNullString("enum");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.throwIfError(mockRuntimeException0);
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("JSON", clientInfoStatus0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setInputDecorator(inputDecorator0);
      MockFile mockFile0 = new MockFile((String) null, "CQ-h{Vib&%(cyu");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo", "hzcjmeY", map0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLClientInfoException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class2, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 512, objectMapper1, mockPrintStream0, byteArray0, (byte)1, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isProxyType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.isJacksonStdImpl((Object) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      Class<IOException> class3 = IOException.class;
      objectReader1.withView(class3);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "okG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.getGenericInterfaces(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.getGenericInterfaces(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<AccessPattern>[] classArray0 = (Class<AccessPattern>[]) Array.newInstance(Class.class, 2);
      Class<AccessPattern> class1 = AccessPattern.class;
      classArray0[0] = class1;
      Class<AccessPattern> class2 = AccessPattern.class;
      classArray0[1] = class2;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      Long long0 = new Long(623L);
      assertEquals(623L, (long)long0);
      assertNotNull(long0);
      
      Class<?> class2 = ClassUtil.classOf(long0);
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.Long", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Class<Object> class3 = Object.class;
      Class<?> class4 = ClassUtil.primitiveType(class3);
      assertNull(class4);
      
      Class<ArrayType> class5 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class5, false);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.printStackTrace();
      ClassUtil.throwIfIOE(sQLTransientException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(mapType0, mapType0, mapType0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.canBeABeanType(class3);
      SQLTransientException sQLTransientException1 = new SQLTransientException();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ClassUtil.throwIfIOE(sQLTransientException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(mapType0, mapType0, mapType0);
      Class<IOException> class3 = IOException.class;
      typeFactory0.clearCache();
      mapLikeType0.findSuperType(class3);
      boolean boolean0 = true;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, true);
      Class<Integer> class4 = Integer.class;
      try { 
        ClassUtil.createInstance(class4, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ClassUtil.throwIfIOE(sQLTransientException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(mapType0, mapType0, mapType0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, true);
      Class<Integer> class3 = Integer.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap1.put((String) null, clientInfoStatus1);
      hashMap1.put("entrySet", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put((String) null, clientInfoStatus2);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "entrySet", 182, hashMap0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      ClassUtil.throwIfIOE(throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[#gjDu--]+A'bg(Pc;");
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      ClassUtil.quotedOr(class0, "NG&d^5/c.FG4G>(#6!r");
      ClassUtil.isBogusClass(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ClassUtil.throwIfIOE(sQLTransientException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("keyUniverse");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, objectMapper1, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findEnumType(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      Long long0 = new Long(623L);
      Boolean boolean0 = new Boolean(false);
      Class<?> class3 = ClassUtil.classOf(boolean0);
      ClassUtil.hasEnclosingMethod(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.isNonStaticInnerClass(class4);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.findSuperClasses(class0, class0, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ClassUtil.throwIfIOE(sQLTransientException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(mapType0, mapType0, mapType0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class2, true);
      Class<Integer> class3 = Integer.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Long long0 = new Long(623L);
      ClassUtil.classOf(long0);
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      placeholderForType0.isReferenceType();
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      Object object0 = new Object();
      ClassUtil.classOf((Object) null);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Long long0 = new Long((-1358L));
      Long long1 = new Long((-1L));
      Long long2 = new Long((-1L));
      ClassUtil.nonNull(long1, long2);
      Class<Integer> class1 = Integer.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isConcrete(class1);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.backticked("`java.lang.Integer`");
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      Object object0 = null;
      ClassUtil.classNameOf((Object) null);
      ClassUtil.getConstructors(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionType> class1 = CollectionType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nonNull((ResolvedRecursiveType) null, (ResolvedRecursiveType) null);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getDeclaredMethods(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", sQLNonTransientException0);
      sQLNonTransientException0.setNextException(sQLException0);
      sQLNonTransientException0.getStackTrace();
      sQLNonTransientException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "keyUniverse");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Long long0 = new Long(639L);
      Long long1 = new Long((-1358L));
      ClassUtil.nonNull(long1, long0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.nameOf(class1);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Character> class3 = Character.class;
      ClassUtil.isCollectionMapOrArray(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.isLocalType(class4, false);
      Character.valueOf('(');
      ClassUtil.getClassDescription(class0);
      Class<String> class5 = String.class;
      ClassUtil.isProxyType(class5);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.backticked(",bDv+D9 [");
      Class<Integer> class2 = Integer.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      ClassUtil.findSuperClasses(class3, class0, false);
      Class<IOException> class4 = IOException.class;
      ClassUtil.getDeclaredMethods(class4);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getDeclaringClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      placeholderForType0.isReferenceType();
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      Object object0 = new Object();
      ClassUtil.classOf(object0);
      SQLWarning sQLWarning0 = new SQLWarning("");
      MockError mockError0 = new MockError((String) null, sQLWarning0);
      mockError0.getSuppressed();
      mockError0.getSuppressed();
      Float float0 = new Float((-412.00021));
      ClassUtil.nullOrToString(float0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class2);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.findSuperTypes(class1, class3);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, class4, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Boolean) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findConstructor(class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Object> class4 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class4, false);
      Class<Annotation> class5 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class5);
      constructor0.newInstance(annotationArray0);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class1);
      constructor0.newInstance(annotationArray0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      String string0 = "l>ex\\(T*-aghi0Y%";
      ClassUtil.nonNullString("l>ex(T*-aghi0Y%");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.primitiveType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isProxyType(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      Class<Annotation> class4 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class4);
      constructor0.newInstance(annotationArray0);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Long long0 = new Long((-1872L));
      assertEquals((-1872L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) long0);
      assertFalse(boolean0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "KV iPW)k&Gq\"h/?Y)");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("KV iPW)k&Gq\"h/?Y)", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLTransientConnectionException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil", (String) null);
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransientConnectionException1.getMessage());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionException0.addSuppressed(sQLTransientConnectionException1);
      assertNotSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("KV iPW)k&Gq\"h/?Y)", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransientConnectionException1.getMessage());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.util.ClassUtil$Ctor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      
      String string0 = ClassUtil.backticked(",bDv+P9 ^");
      assertEquals("`,bDv+P9 ^`", string0);
      assertNotNull(string0);
      
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertEquals("float", class2.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class0);
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      
      String string0 = ClassUtil.backticked(",bDv+D9 [");
      assertEquals("`,bDv+D9 [`", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.isLocalType(class0, true);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      assertNotNull(string0);
      
      Class<MapType> class1 = MapType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertNotNull(class2);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class com.fasterxml.jackson.databind.type.MapLikeType", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.type", (-1322));
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.type", sQLNonTransientException0.toString());
      assertEquals((-1322), sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientException0.getMessage());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      Class<ArrayType> class2 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Object object0 = constructor0.newInstance(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(object0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Short> class1 = Short.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<ReferenceType> class2 = ReferenceType.class;
      Constructor<ReferenceType> constructor1 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = ClassUtil.nonNull("9Q", "9Q");
      assertEquals("9Q", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<ArrayType> class1 = ArrayType.class;
      String string0 = ClassUtil.nameOf(class1);
      assertEquals("`com.fasterxml.jackson.databind.type.ArrayType`", string0);
      assertNotNull(string0);
      
      Class<?> class2 = ClassUtil.getDeclaringClass(class0);
      assertNull(class2);
      
      Class<ArrayType> class3 = ArrayType.class;
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertSame(class3, class1);
      assertNotNull(class4);
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class4.toString());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertEquals(1025, class4.getModifiers());
      
      Class<Long> class5 = Long.class;
      Class<?> class6 = ClassUtil.getDeclaringClass(class5);
      assertNull(class6);
      
      Class<Character> class7 = Character.class;
      Class<?> class8 = ClassUtil.primitiveType(class7);
      assertNotNull(class8);
      assertFalse(class8.isInterface());
      assertTrue(class8.isPrimitive());
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertEquals(1041, class8.getModifiers());
      assertFalse(class8.isArray());
      assertFalse(class8.isAnnotation());
      assertEquals("char", class8.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Long long0 = new Long(623L);
      assertEquals(623L, (long)long0);
      assertNotNull(long0);
      
      Class<?> class2 = ClassUtil.classOf(long0);
      assertNotNull(class2);
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.Long", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      Class<MapLikeType> class3 = MapLikeType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      NoClass noClass0 = ClassUtil.createInstance(class1, true);
      assertNotNull(noClass0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Long long0 = new Long(623L);
      assertEquals(623L, (long)long0);
      assertNotNull(long0);
      
      Class<?> class2 = ClassUtil.classOf(class1);
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Class", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      Class<Object> class3 = Object.class;
      Class<?> class4 = ClassUtil.primitiveType(class3);
      assertNull(class4);
      
      Class<ArrayType> class5 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class5, true);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON", false);
      assertNotNull(mockFileWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((Writer) mockFileWriter0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(159, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON", "JSON", 36, (Throwable) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(36, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: JSON", sQLFeatureNotSupportedException0.toString());
      assertEquals("JSON", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("JSON", sQLFeatureNotSupportedException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) mockFileWriter0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      ResolvedRecursiveType resolvedRecursiveType0 = ClassUtil.nonNull((ResolvedRecursiveType) null, (ResolvedRecursiveType) null);
      assertNull(resolvedRecursiveType0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNull(jsonGenerator0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Short short0 = new Short((short) (-664));
      assertEquals((short) (-664), (short)short0);
      assertNotNull(short0);
      
      Class<?> class0 = ClassUtil.classOf(short0);
      assertNotNull(class0);
      assertEquals("class java.lang.Short", class0.toString());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-664);
      intArray0[1] = 57343;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("a#=kb]OQg<HWu='zdDe", "a#=kb]OQg<HWu='zdDe", sQLTransactionRollbackException0);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.toString());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("a#=kb]OQg<HWu='zdDe", sQLRecoverableException0);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.toString());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: a#=kb]OQg<HWu='zdDe", sQLTransientConnectionException0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("a#=kb]OQg<HWu='zdDe", "a#=kb]OQg<HWu='zdDe", (short) (-664), intArray0, sQLTransientConnectionException0);
      assertEquals(2, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.toString());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: a#=kb]OQg<HWu='zdDe", sQLTransientConnectionException0.toString());
      assertEquals("a#=kb]OQg<HWu='zdDe", batchUpdateException0.getSQLState());
      assertEquals((-664), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: a#=kb]OQg<HWu='zdDe", batchUpdateException0.toString());
      assertEquals("a#=kb]OQg<HWu='zdDe", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {(-664), 57343}, intArray0);
      
      long[] longArray0 = batchUpdateException0.getLargeUpdateCounts();
      assertEquals(2, intArray0.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.toString());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLRecoverableException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("a#=kb]OQg<HWu='zdDe", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: a#=kb]OQg<HWu='zdDe", sQLTransientConnectionException0.toString());
      assertEquals("a#=kb]OQg<HWu='zdDe", batchUpdateException0.getSQLState());
      assertEquals((-664), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: a#=kb]OQg<HWu='zdDe", batchUpdateException0.toString());
      assertEquals("a#=kb]OQg<HWu='zdDe", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {(-664), 57343}, intArray0);
      assertArrayEquals(new long[] {(-664L), 57343L}, longArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: a#=kb]OQg<HWu='zdDe
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("aq>mj<oP<8hx");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("aq>mj<oP<8hx", "entrySet", (-2928), sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException0.getMessage());
      assertEquals("entrySet", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException1.toString());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException1.getMessage());
      assertEquals((-2928), sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorException1.setNextException(sQLSyntaxErrorException0);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException0.getMessage());
      assertEquals("entrySet", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException1.toString());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException1.getMessage());
      assertEquals((-2928), sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorException0.setNextException(sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException0.getMessage());
      assertEquals("entrySet", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException1.toString());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException1.getMessage());
      assertEquals((-2928), sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = (SQLSyntaxErrorException)ClassUtil.getRootCause(sQLSyntaxErrorException0);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException2);
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException2.toString());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(0, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<IOException> class1 = IOException.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLSyntaxErrorException2);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException2.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException0.getMessage());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException2.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      
      Class<RuntimeException> class3 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class3);
      assertFalse(boolean0);
      
      Class<CollectionType> class4 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class4, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      Class<?> class5 = ClassUtil.primitiveType(class0);
      assertNull(class5);
      
      Class<JsonMappingException> class6 = JsonMappingException.class;
      Class<Double> class7 = Double.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class6, class7, list0);
      assertSame(list1, list0);
      assertSame(list0, list1);
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(8, list1.size());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException0);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException2);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException2);
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException2.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException2.toString());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("aq>mj<oP<8hx", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: aq>mj<oP<8hx", sQLSyntaxErrorException2.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      
      Class<CollectionType> class8 = CollectionType.class;
      List<Class<?>> list2 = ClassUtil.findSuperClasses(class1, class8, false);
      assertSame(class8, class4);
      assertNotNull(list2);
      assertEquals(3, list2.size());
      assertFalse(list2.isEmpty());
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNull(jsonParser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.createInstance((DeserializationConfig) null, (JsonParser) null, injectableValues_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-1358L));
      assertEquals((-1358L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = ClassUtil.nonNull(long0, long0);
      assertEquals((-1358L), (long)long1);
      assertNotNull(long1);
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`com.fasterxml.jackson.databind.type.MapLikeType`", string0);
      assertNotNull(string0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class2, false);
      assertNotNull(list0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean4 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("`com.fasterxml.jackson.databind.type.MapLikeType`", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLTransientConnectionException0.getSQLState());
      assertEquals("`com.fasterxml.jackson.databind.type.MapLikeType`", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: `com.fasterxml.jackson.databind.type.MapLikeType`", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, "E");
      assertNotNull(sQLTransientConnectionException1);
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("E", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionException0.addSuppressed(sQLTransientConnectionException1);
      assertNotSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLTransientConnectionException0.getSQLState());
      assertEquals("`com.fasterxml.jackson.databind.type.MapLikeType`", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: `com.fasterxml.jackson.databind.type.MapLikeType`", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("E", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `com.fasterxml.jackson.databind.type.MapLikeType`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      
      String string0 = ClassUtil.backticked(",bDv+D9 [");
      assertEquals("`,bDv+D9 [`", string0);
      assertNotNull(string0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(25, methodArray0.length);
      assertNotNull(methodArray0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      String string1 = sQLNonTransientException0.getLocalizedMessage();
      assertNull(string1);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, ",bDv+D9 [");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ,bDv+D9 [
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      String string0 = ClassUtil.quotedOr((Object) null, "!:K");
      assertEquals("!:K", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[]", "!:K", hashMap0, (Throwable) null);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: []", sQLClientInfoException0.toString());
      assertEquals("[]", sQLClientInfoException0.getMessage());
      assertEquals("!:K", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: []", sQLClientInfoException0.toString());
      assertEquals("[]", sQLClientInfoException0.getMessage());
      assertEquals("!:K", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("!:K", "O-XI&qD{k G{<L^(%", 0, map0, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: []", sQLClientInfoException0.toString());
      assertEquals("[]", sQLClientInfoException0.getMessage());
      assertEquals("!:K", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("!:K", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: !:K", sQLClientInfoException1.toString());
      assertEquals("O-XI&qD{k G{<L^(%", sQLClientInfoException1.getSQLState());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(map0, map1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertSame(map1, map0);
      assertNotNull(map1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: []", sQLClientInfoException0.toString());
      assertEquals("[]", sQLClientInfoException0.getMessage());
      assertEquals("!:K", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("!:K", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: !:K", sQLClientInfoException1.toString());
      assertEquals("O-XI&qD{k G{<L^(%", sQLClientInfoException1.getSQLState());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map1, (Throwable) null);
      assertNotNull(sQLClientInfoException2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: []", sQLClientInfoException0.toString());
      assertEquals("[]", sQLClientInfoException0.getMessage());
      assertEquals("!:K", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("!:K", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: !:K", sQLClientInfoException1.toString());
      assertEquals("O-XI&qD{k G{<L^(%", sQLClientInfoException1.getSQLState());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertNull(sQLClientInfoException2.getMessage());
      assertNull(sQLClientInfoException2.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      
      SQLClientInfoException sQLClientInfoException3 = (SQLClientInfoException)ClassUtil.throwIfRTE(sQLClientInfoException2);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException3);
      assertSame(map0, map1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException3);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException2);
      assertSame(map1, map0);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException0);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException1);
      assertSame(sQLClientInfoException2, sQLClientInfoException3);
      assertNotSame(sQLClientInfoException3, sQLClientInfoException1);
      assertSame(sQLClientInfoException3, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException3, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: []", sQLClientInfoException0.toString());
      assertEquals("[]", sQLClientInfoException0.getMessage());
      assertEquals("!:K", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("!:K", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: !:K", sQLClientInfoException1.toString());
      assertEquals("O-XI&qD{k G{<L^(%", sQLClientInfoException1.getSQLState());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertNull(sQLClientInfoException2.getMessage());
      assertNull(sQLClientInfoException2.getSQLState());
      assertNull(sQLClientInfoException3.getSQLState());
      assertNull(sQLClientInfoException3.getMessage());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException3.toString());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Integer`", string0);
      assertNotNull(string0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class2);
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Number", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      
      Class<ReferenceType> class3 = ReferenceType.class;
      Class<?> class4 = ClassUtil.getDeclaringClass(class3);
      assertNull(class4);
      
      Class<IOException> class5 = IOException.class;
      Class<?> class6 = ClassUtil.primitiveType(class5);
      assertNull(class6);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "Cannot access ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.RuntimeException) must override method 'Cannot access '
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class1);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Object object0 = constructor0.newInstance(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(object0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray1.length);
      assertNotSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray2.length);
      assertNotNull(annotationArray2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(int1 == int0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      
      String string0 = ClassUtil.nonNullString("l>ex(T*-aghi0Y%");
      assertEquals("l>ex(T*-aghi0Y%", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) "l>ex(T*-aghi0Y%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      assertNotNull(typeBindings0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(referenceType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      
      Object object0 = null;
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      assertEquals(0, javaTypeArray0.length);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertNotNull(referenceType1);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        placeholderForType0.refine(class2, typeBindings0, referenceType1, javaTypeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<ArrayType> class2 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      boolean boolean0 = ClassUtil.hasClass((Object) null, class2);
      assertFalse(boolean0);
      
      Iterator<ReferenceType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      Object object0 = null;
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      assertFalse(boolean0);
      
      Class<CollectionType> class1 = CollectionType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Iterator<ClientInfoStatus> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      assertNotNull(mockIOException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("enum", "@-VRaC}Jl7xEF{", "@-VRaC}Jl7xEF{", (-1));
      assertNotNull(stackTraceElement0);
      assertEquals("enum", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("enum.@-VRaC}Jl7xEF{(@-VRaC}Jl7xEF{)", stackTraceElement0.toString());
      assertEquals("@-VRaC}Jl7xEF{", stackTraceElement0.getMethodName());
      assertEquals("@-VRaC}Jl7xEF{", stackTraceElement0.getFileName());
      assertEquals((-1), stackTraceElement0.getLineNumber());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Q|>7", "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase", "@-VRaC}Jl7xEF{", (-518));
      assertNotNull(stackTraceElement1);
      assertEquals("com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase", stackTraceElement1.getMethodName());
      assertEquals("@-VRaC}Jl7xEF{", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals((-518), stackTraceElement1.getLineNumber());
      assertEquals("Q|>7.com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase(@-VRaC}Jl7xEF{)", stackTraceElement1.toString());
      assertEquals("Q|>7", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("p=)iD!5EB*Kj6 mIPd", "p=)iD!5EB*Kj6 mIPd", "net.sf.cglib.proxy.long", (-8));
      assertNotNull(stackTraceElement2);
      assertEquals((-8), stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("p=)iD!5EB*Kj6 mIPd", stackTraceElement2.getMethodName());
      assertEquals("net.sf.cglib.proxy.long", stackTraceElement2.getFileName());
      assertEquals("p=)iD!5EB*Kj6 mIPd", stackTraceElement2.getClassName());
      assertEquals("p=)iD!5EB*Kj6 mIPd.p=)iD!5EB*Kj6 mIPd(net.sf.cglib.proxy.long)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("t#fR%iY/}JN5", "com.fasterxml.jackso", "ymzx34j$q<W~ f", (-1));
      assertNotNull(stackTraceElement3);
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals((-1), stackTraceElement3.getLineNumber());
      assertEquals("t#fR%iY/}JN5", stackTraceElement3.getClassName());
      assertEquals("com.fasterxml.jackso", stackTraceElement3.getMethodName());
      assertEquals("t#fR%iY/}JN5.com.fasterxml.jackso(ymzx34j$q<W~ f)", stackTraceElement3.toString());
      assertEquals("ymzx34j$q<W~ f", stackTraceElement3.getFileName());
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("4WdUx;-[yQGk", "y1", "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase", 3);
      assertNotNull(stackTraceElement4);
      assertEquals("4WdUx;-[yQGk", stackTraceElement4.getClassName());
      assertEquals("y1", stackTraceElement4.getMethodName());
      assertEquals(3, stackTraceElement4.getLineNumber());
      assertEquals("com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase", stackTraceElement4.getFileName());
      assertEquals("4WdUx;-[yQGk.y1(com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase:3)", stackTraceElement4.toString());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("net.sf.cglib.proxy.long", "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase", "!k6:N?59c", (-1));
      assertNotNull(stackTraceElement5);
      assertEquals("net.sf.cglib.proxy.long", stackTraceElement5.getClassName());
      assertEquals((-1), stackTraceElement5.getLineNumber());
      assertEquals("!k6:N?59c", stackTraceElement5.getFileName());
      assertEquals("net.sf.cglib.proxy.long.com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase(!k6:N?59c)", stackTraceElement5.toString());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertEquals("com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase", stackTraceElement5.getMethodName());
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("expected a value", "com.fasterxml.jackso", "4WdUx;-[yQGk", (-1));
      assertNotNull(stackTraceElement6);
      assertEquals("expected a value.com.fasterxml.jackso(4WdUx;-[yQGk)", stackTraceElement6.toString());
      assertEquals("expected a value", stackTraceElement6.getClassName());
      assertEquals("4WdUx;-[yQGk", stackTraceElement6.getFileName());
      assertFalse(stackTraceElement6.isNativeMethod());
      assertEquals((-1), stackTraceElement6.getLineNumber());
      assertEquals("com.fasterxml.jackso", stackTraceElement6.getMethodName());
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("ymzx34j$q<W~ f", "p=)iD!5EB*Kj6 mIPd", "@6*c[7wF4!N", (-4225));
      assertNotNull(stackTraceElement7);
      assertEquals((-4225), stackTraceElement7.getLineNumber());
      assertEquals("ymzx34j$q<W~ f.p=)iD!5EB*Kj6 mIPd(@6*c[7wF4!N)", stackTraceElement7.toString());
      assertEquals("p=)iD!5EB*Kj6 mIPd", stackTraceElement7.getMethodName());
      assertEquals("ymzx34j$q<W~ f", stackTraceElement7.getClassName());
      assertFalse(stackTraceElement7.isNativeMethod());
      assertEquals("@6*c[7wF4!N", stackTraceElement7.getFileName());
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement6));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[7] = stackTraceElement7;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      assertEquals(8, stackTraceElementArray0.length);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockIOException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "(z{ H~RsYsh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (z{ H~RsYsh
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      Class<IOException>[] classArray0 = null;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("oAv-f$$WIgiZrdnBR,");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      sQLNonTransientConnectionException0.printStackTrace();
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,", sQLSyntaxErrorException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.getRootCause(sQLSyntaxErrorException0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("oAv-f$$WIgiZrdnBR,", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      
      String string0 = ClassUtil.getClassDescription("oAv-f$$WIgiZrdnBR,");
      assertEquals("`java.lang.String`", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        sQLSyntaxErrorException0.initCause(sQLNonTransientConnectionException1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLNonTransientConnectionException: oAv-f$$WIgiZrdnBR,
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(3, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Float> class1 = Float.class;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid delegate-creator definition for %s: value instantiator (%s) returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      System.setCurrentTimeMillis((-2147483648L));
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.util", string0);
      assertNotNull(string0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Class<Long> class2 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class0, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      Class<JsonMappingException> class3 = JsonMappingException.class;
      boolean boolean2 = ClassUtil.isConcrete(class3);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Class<Double> class4 = Double.class;
      Method[] methodArray1 = ClassUtil.getClassMethods(class4);
      assertEquals(29, methodArray1.length);
      assertNotSame(methodArray1, methodArray0);
      assertNotNull(methodArray1);
      assertFalse(methodArray1.equals((Object)methodArray0));
      
      Class<Integer> class5 = Integer.class;
      Class<?> class6 = ClassUtil.getOuterClass(class5);
      assertNull(class6);
      
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Short short0 = new Short((short)1368);
      assertEquals((short)1368, (short)short0);
      assertNotNull(short0);
      
      String string0 = ClassUtil.nullOrToString(short0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.nonNullString("java.lang.Short@0000000001");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Class<Short> class0 = Short.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Integer> class1 = Integer.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertNotNull(class3);
      assertEquals(16385, class3.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isEnum());
      assertFalse(class3.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      assertFalse(boolean0);
      
      Class<CollectionType> class1 = CollectionType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      assertNotNull(string0);
      
      Class<MapType> class1 = MapType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertNotNull(class2);
      assertEquals("class com.fasterxml.jackson.databind.type.MapLikeType", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      
      int int0 = (-1322);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.type", (-1322));
      assertNotNull(sQLNonTransientException0);
      assertEquals((-1322), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.type", sQLNonTransientException0.toString());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientException0.getMessage());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      String string1 = "entrySet";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "entrySet");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // entrySet
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Float> class1 = Float.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string0 = ClassUtil.nonNullString("Rh&F&XJdtH\"[]FE");
      assertEquals("Rh&F&XJdtH\"[]FE", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer((-1015));
      assertEquals((-1015), (int)integer0);
      assertNotNull(integer0);
      
      String string1 = ClassUtil.classNameOf(integer0);
      assertEquals("`java.lang.Integer`", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put((String) null, clientInfoStatus0);
      assertNotSame(hashMap0, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.equals((Object)hashMap1));
      
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("DG", clientInfoStatus1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(clientInfoStatus1, clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(clientInfoStatus1.equals((Object)clientInfoStatus0));
      
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      Collection<ClientInfoStatus> collection0 = hashMap1.values();
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotNull(collection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertFalse(collection0.contains(clientInfoStatus2));
      
      hashMap1.put("entrySet", clientInfoStatus2);
      assertNotSame(clientInfoStatus2, clientInfoStatus1);
      assertNotSame(clientInfoStatus2, clientInfoStatus0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus1));
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus0));
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`java.lang.Integer`", "Q^vX", (-1015), hashMap1);
      assertNotNull(sQLClientInfoException0);
      assertEquals((-1015), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: `java.lang.Integer`", sQLClientInfoException0.toString());
      assertEquals("Q^vX", sQLClientInfoException0.getSQLState());
      assertEquals("`java.lang.Integer`", sQLClientInfoException0.getMessage());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotNull(sQLClientInfoException1);
      assertEquals((-1015), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: `java.lang.Integer`", sQLClientInfoException0.toString());
      assertEquals("Q^vX", sQLClientInfoException0.getSQLState());
      assertEquals("`java.lang.Integer`", sQLClientInfoException0.getMessage());
      assertEquals("Q^vX", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: `java.lang.Integer`", sQLClientInfoException1.toString());
      assertEquals("`java.lang.Integer`", sQLClientInfoException1.getMessage());
      assertEquals((-1015), sQLClientInfoException1.getErrorCode());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      boolean boolean2 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      SQLClientInfoException sQLClientInfoException2 = (SQLClientInfoException)ClassUtil.throwIfIOE(sQLClientInfoException1);
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException0, sQLClientInfoException2);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      assertSame(sQLClientInfoException1, sQLClientInfoException2);
      assertSame(sQLClientInfoException2, sQLClientInfoException1);
      assertSame(sQLClientInfoException2, sQLClientInfoException0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotNull(sQLClientInfoException2);
      assertEquals((-1015), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: `java.lang.Integer`", sQLClientInfoException0.toString());
      assertEquals("Q^vX", sQLClientInfoException0.getSQLState());
      assertEquals("`java.lang.Integer`", sQLClientInfoException0.getMessage());
      assertEquals("Q^vX", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: `java.lang.Integer`", sQLClientInfoException1.toString());
      assertEquals("`java.lang.Integer`", sQLClientInfoException1.getMessage());
      assertEquals((-1015), sQLClientInfoException1.getErrorCode());
      assertEquals((-1015), sQLClientInfoException2.getErrorCode());
      assertEquals("`java.lang.Integer`", sQLClientInfoException2.getMessage());
      assertEquals("java.sql.SQLClientInfoException: `java.lang.Integer`", sQLClientInfoException2.toString());
      assertEquals("Q^vX", sQLClientInfoException2.getSQLState());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      Class<Byte> class3 = Byte.class;
      Constructor<Byte> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType((Enum<?>) clientInfoStatus2);
      assertNotSame(clientInfoStatus2, clientInfoStatus1);
      assertNotSame(clientInfoStatus2, clientInfoStatus0);
      assertNotNull(class4);
      assertEquals(16401, class4.getModifiers());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals("class java.sql.ClientInfoStatus", class4.toString());
      assertFalse(class4.isSynthetic());
      assertTrue(class4.isEnum());
      assertFalse(class4.isAnnotation());
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus1));
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus0));
      
      Class<Short> class5 = Short.class;
      Class class6 = (Class)ClassUtil.getGenericSuperclass(class5);
      assertSame(class5, class0);
      assertNotNull(class6);
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isAnnotation());
      assertEquals(1025, class6.getModifiers());
      assertEquals("class java.lang.Number", class6.toString());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class7 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class7, class3, class0);
      assertSame(class0, class5);
      assertNotNull(mapType0);
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      
      MapType mapType1 = mapType0.withValueHandler(clientInfoStatus1);
      assertNotSame(mapType1, mapType0);
      assertSame(class0, class5);
      assertNotSame(clientInfoStatus1, clientInfoStatus2);
      assertNotSame(clientInfoStatus1, clientInfoStatus0);
      assertNotSame(mapType0, mapType1);
      assertNotNull(mapType1);
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(clientInfoStatus1.equals((Object)clientInfoStatus2));
      assertFalse(clientInfoStatus1.equals((Object)clientInfoStatus0));
      
      MapType mapType2 = mapType1.withContentValueHandler(class1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertSame(class0, class5);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(clientInfoStatus1, clientInfoStatus2);
      assertNotSame(clientInfoStatus1, clientInfoStatus0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotNull(mapType2);
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isAbstract());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasContentType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertFalse(clientInfoStatus1.equals((Object)clientInfoStatus2));
      assertFalse(clientInfoStatus1.equals((Object)clientInfoStatus0));
      assertTrue(mapType0.equals((Object)mapType1));
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<Double> class8 = Double.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class8, "Rh&F&XJdtH\"[]FE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      Class<Object> class0 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = false;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(int1 == int0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) constructor0);
      assertFalse(boolean1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(boolean1 == boolean0);
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray0);
      assertNotNull(annotationArray2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<IOException> class1 = IOException.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertSame(class1, class0);
      assertNull(class2);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 0, hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, sQLClientInfoException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.classOf(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.nameOf(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.nameOf(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getDeclaringClass(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getDeclaredMethods(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2898);
      placeholderForType0.isReferenceType();
      PlaceholderForType placeholderForType1 = new PlaceholderForType(1162);
      placeholderForType1.actualType();
      ClassUtil.rawClass(placeholderForType1);
      Object object0 = new Object();
      Character character0 = Character.valueOf('N');
      Class<?> class1 = ClassUtil.classOf(character0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      placeholderForType0.isReferenceType();
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      Object object0 = new Object();
      ClassUtil.classOf(object0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      placeholderForType0.isReferenceType();
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Double with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getDeclaredFields(class1);
      TypeFactory.defaultInstance();
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<Boolean> class3 = Boolean.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      Class<Error> class4 = Error.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class4);
      Class<Long> class5 = Long.class;
      Class<Float> class6 = Float.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class6, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Float with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "GZZiBOV|\"~+O6.Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.createInstance(class1, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      String string0 = "AViJi-y @;";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      // Undeclared exception!
      try { 
        jsonFactory0.createParser(byteArray0, 2058, 2058);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2058
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }
}
