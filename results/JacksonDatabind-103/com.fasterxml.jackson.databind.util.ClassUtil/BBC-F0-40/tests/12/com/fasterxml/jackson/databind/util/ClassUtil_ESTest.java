/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:40:51 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-65);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module");
      sQLFeatureNotSupportedException0.spliterator();
      MockException mockException0 = new MockException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module", sQLFeatureNotSupportedException0);
      mockException0.getMessage();
      sQLFeatureNotSupportedException0.initCause(mockException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class0, class1);
      MockIOException mockIOException0 = new MockIOException((String) null);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.nameOf(class0);
      MockError mockError0 = new MockError();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`com.fasterxml.jackson.databind.util.AccessPattern`", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "`com.fasterxml.jackson.databind.util.AccessPattern`");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) class0, (Object) class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      JavaType javaType0 = referenceType1.getReferencedType();
      ClassUtil.rawClass(javaType0);
      ClassUtil.canBeABeanType(class0);
      DoubleNode doubleNode0 = new DoubleNode((-9.223372036854776E18));
      ClassUtil.classNameOf(doubleNode0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, object0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Boolean (of class boolean) must override method 'org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.nonNullString("UTC_MILLISEC");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2231, objectMapper1, (OutputStream) null, byteArray0, (byte) (-8), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("'y;:)", class0, "Xw?(A1+65<==");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from String \"'y;:)\": Xw?(A1+65<==
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredFields(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class1);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<Short> class2 = Short.class;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)50;
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)32;
      byteArray0[3] = (byte)32;
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerForUpdating(classUtil_Ctor0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class1);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapType0, "@l", "QsZJSzfD52");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '@l' as a subtype of [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]: QsZJSzfD52
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findConstructor(class2, true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      ClassUtil.nonNullString("org.hibernate.proxy.com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      System.setCurrentTimeMillis((byte) (-53));
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findConstructor(class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.deser.BeanDeserializerModifier");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('{');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.classNameOf(character0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" has no default (no arg) constructor", " has no default (no arg) constructor", 1876);
      MockError mockError0 = new MockError(" has no default (no arg) constructor", sQLRecoverableException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hibernate.proxy.java.lang.annotation.Annotation", "org.hibernate.proxy.java.lang.annotation.Annotation", " has no default (no arg) constructor", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(" has no default (no arg) constructor", "org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleValueInstantiators", "org.hibernate.proxy.java.lang.annotation.Annotation", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("`java.lang.Character`", "`java.lang.Character`", " has no default (no arg) constructor", (-629636399));
      mockError0.addSuppressed(sQLRecoverableException0);
      stackTraceElementArray0[2] = stackTraceElement2;
      mockError0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, " has no default (no arg) constructor");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         //  has no default (no arg) constructor
         //
         verifyException("org.hibernate.proxy.java.lang.annotation.Annotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Class<Void> class1 = Void.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      ClassUtil.verifyMustOverride(class0, runtimeException0, "UBfpVGj ");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(classUtil_Ctor0);
      objectReader0.getTypeFactory();
      MockIOException mockIOException0 = new MockIOException("')");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      Class<InputStream> class1 = InputStream.class;
      boolean boolean0 = true;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = new EnumMap<AccessPattern, AccessPattern>(enumMap0);
      ClassUtil.findEnumType(enumMap0);
      Class<AccessPattern> class1 = AccessPattern.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-204));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(accessPattern0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      MockException mockException0 = new MockException();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class1);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, accessPattern0);
      enumMap0.put(accessPattern0, accessPattern0);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = new EnumMap<AccessPattern, AccessPattern>(enumMap0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("X`_ET2xH", "X`_ET2xH", (-1513));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("X`_ET2xH", "net.sf.cglib.proxy.java.lang.reflect.AccessibleObject", (-1513));
      sQLNonTransientConnectionException0.initCause(sQLDataException0);
      sQLDataException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class2);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = new EnumMap<AccessPattern, AccessPattern>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, (-393805486));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(accessPattern0);
      objectReader0.getTypeFactory();
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      ClassUtil.backticked("[i");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[i", "[i");
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.isConcrete((Member) constructor0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (TypeBindings) null);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(javaType0, class1, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotatedParameterTypes();
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(classUtil_Ctor0);
      objectReader0.getTypeFactory();
      ClassUtil.quotedOr(objectReader0, "1J");
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockException mockException0 = new MockException();
      Class<Object> class0 = Object.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, (-393805486));
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.backticked("java.lang.annotatio");
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Float> class0 = Float.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.nameOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<IOException> class2 = IOException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 2047);
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(coreXMLDeserializers_Std0);
      objectReader0.getTypeFactory();
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.NEGATIVE_INFINITY);
      ClassUtil.classNameOf(doubleNode0);
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      ClassUtil.findConstructor(class3, true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Object[] objectArray0 = new Object[0];
      constructor0.newInstance(objectArray0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, (-393805486));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(accessPattern0);
      objectReader0.getTypeFactory();
      Class<IOException> class1 = IOException.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(classUtil_Ctor0);
      objectReader0.getTypeFactory();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "primitive");
      ClassUtil.getClassDescription("E,Pz`K12[P}WQ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("k(Rh6ldX", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, (-393805486));
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.canBeABeanType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, (-393805486));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(accessPattern0);
      objectReader0.getTypeFactory();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      Class<ArrayType> class0 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isBogusClass(class0);
      MockException mockException0 = new MockException();
      Class<AccessPattern> class1 = AccessPattern.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(mockException0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(resolvedRecursiveType0);
      MockError mockError0 = new MockError("$,hvIj> mGdbosJYU:", (Throwable) null);
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler(mockError0);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes((JavaType) referenceType3, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(constructor0);
      objectReader0.getTypeFactory();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Long> class0 = Long.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, collectionType1);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withContentValueHandler(referenceType1);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(collectionType2);
      objectReader0.getTypeFactory();
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nullOrToString(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, (AnnotatedMember) null, (PropertyMetadata) null);
      beanProperty_Std0.withType(javaType0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, javaType0);
      ClassUtil.nameOf((Named) beanProperty_Std1);
      Class<Double> class1 = Double.class;
      ClassUtil.isLocalType(class1, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "u=qb&]?x^RqOG+&");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaredMethods(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ClassUtil.rawClass(javaType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      jsonFactory1.setRootValueSeparator("JSON");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)49);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true, "JSON");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // JSON
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-9));
      placeholderForType0.actualType();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("cgPO{@71C;W@", "+N~NCc,&? Q", (-707017675));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) null, (-707017675));
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cgPO{@71C;W@ (through reference chain: UNKNOWN[?])
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-47));
      placeholderForType0.actualType();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<Error> class1 = Error.class;
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      Class<Double> class2 = Double.class;
      String string1 = ClassUtil.nameOf(class2);
      assertNotNull(string1);
      assertEquals("`java.lang.Double`", string1);
      
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class3);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      String string2 = ClassUtil.nonNullString("NULL");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("NULL", string2);
      
      Double double0 = new Double((-1253.83789));
      assertNotNull(double0);
      assertEquals((-1253.83789), (double)double0, 0.01);
      
      Class<?> class4 = ClassUtil.classOf(double0);
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertEquals("class java.lang.Double", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(17, class4.getModifiers());
      assertNotNull(class4);
      
      Class<String> class5 = String.class;
      ClassUtil.getOuterClass(class5);
      Class<Character> class6 = Character.class;
      ClassUtil.primitiveType(class6);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(constructor0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      typeFactory0.withModifier((TypeModifier) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(435);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot figure out type for EnumMap (odd JDK platform?)");
      MockError mockError0 = new MockError(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        collectionLikeType0.withContentValueHandler(mockError0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getConstructors(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 93);
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.hasEnclosingMethod(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class1 = NoClass.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockError mockError0 = new MockError("1/:5!(S7}KUs,");
      Throwable throwable0 = ClassUtil.throwIfRTE(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(throwable0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isLocalType(class0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 512);
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<RuntimeException> class1 = RuntimeException.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, (String) null);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_ARRAY
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.throwIfIOE((Throwable) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(2.2250738585072014E-308);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "'*E");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) stringWriter0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Byte byte0 = Byte.valueOf((byte) (-46));
      Class<Byte> class0 = Byte.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(byte0, class0, "`4+'JcLY9mpqLwjdw");
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType");
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Byte` from number -46: `4+'JcLY9mpqLwjdw
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.isJacksonStdImpl((Object) constructor0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, constructor0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 127, true);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      int[] intArray0 = new int[8];
      intArray0[0] = (-641314725);
      intArray0[1] = 92;
      intArray0[2] = 127;
      intArray0[3] = (-2713);
      intArray0[4] = 127;
      intArray0[5] = 56319;
      intArray0[6] = 2;
      intArray0[7] = 56319;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getNextException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("O$<)4", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: O$<)4
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isBogusClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("YkJ5", "[null]", (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("net.sf.cglib.proxy.java.lang.Integer", mockRuntimeException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[null]", sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLTransactionRollbackException0, ")ok8");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [null] (through reference chain: java.sql.SQLTransactionRollbackException[\")ok8\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getConstructors(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.hasClass("c;%:#T<4g]", class0);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        mockIOException0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.createInstance(class1, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getOuterClass(class0);
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)80;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.nameOf(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfError((Throwable) null);
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      Class<DoubleNode> class1 = DoubleNode.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.java.io.IOException");
      Throwable throwable0 = mockRuntimeException0.fillInStackTrace();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Void> class2 = Void.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      Class<AccessPattern> class4 = AccessPattern.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class4);
      arrayType0.getBindings();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "Sub-class %s (of class %s) must override method '%s'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[4], javaTypeArray0[1]);
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler("cZ6!)|L28`l!mR");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[4], typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaTypeArray0[3], classNameIdResolver0, "2v^*z7u`*", true, javaTypeArray0[5]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapLikeType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-527), javaTypeArray0[5], propertyMetadata0);
      JsonDeserializer<Character> jsonDeserializer0 = (JsonDeserializer<Character>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      ClassUtil.nameOf((Named) settableBeanProperty0);
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isProxyType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackso");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)80;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Float> class4 = Float.class;
      ClassUtil.findClassAnnotations(class4);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Long long0 = new Long(836L);
      ClassUtil.nonNull((Long) null, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.nonNull((IOException) null, (IOException) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      List<Class<?>> list0 = new ArrayList<Class<Object>>();
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class0, list0);
      ClassUtil.classOf(list1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Object> class1 = Object.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfRTE((Throwable) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Long long0 = new Long((-1413L));
      Long long1 = new Long(162L);
      ClassUtil.nonNull(long1, long1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, ",");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2860));
      placeholderForType0.actualType();
      defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "'p*E", "'p*E");
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.nameOf(class0);
      ClassUtil.nullOrToString("`java.lang.Double`");
      Class<Double> class1 = Double.class;
      ClassUtil.isLocalType(class1, false);
      Long long0 = new Long(2305L);
      Object object0 = new Object();
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", problem: ");
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.classOf((Object) null);
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.isCollectionMapOrArray(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      ClassUtil.classNameOf(class0);
      Long long0 = new Long((-9223372036854775808L));
      Long long1 = new Long(0L);
      ClassUtil.nonNull(long0, long1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      placeholderForType0.toString();
      ClassUtil.classNameOf(placeholderForType0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParamCount();
      constructor0.setAccessible(true);
      Class<SimpleModule> class1 = SimpleModule.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-4485));
      constructor0.getAnnotatedParameterTypes();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      coreXMLDeserializers_Std0.getEmptyValue((DeserializationContext) defaultDeserializationContext0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std1 = new CoreXMLDeserializers.Std(class1, 0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std1.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.backticked((String) null);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3608));
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory((TypeFactory) null);
      LinkedHashSet<SimpleModule> linkedHashSet0 = new LinkedHashSet<SimpleModule>();
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) linkedHashSet0);
      objectMapper0.findAndRegisterModules();
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      coreXMLDeserializers_Std0.getEmptyValue(deserializationContext0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getClassMethods(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaredFields(class2);
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.");
      ClassUtil.throwIfIOE(sQLException0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassUtil.nonNullString("NULL");
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.backticked((String) null);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3608));
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory((TypeFactory) null);
      LinkedHashSet<SimpleModule> linkedHashSet0 = new LinkedHashSet<SimpleModule>();
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) linkedHashSet0);
      objectMapper1.readerWithView(class1);
      objectMapper0.findAndRegisterModules();
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      coreXMLDeserializers_Std0.getEmptyValue(deserializationContext0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) jsonParser0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParamCount();
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class2, true);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[6];
      accessibleObjectArray0[0] = (AccessibleObject) constructor1;
      accessibleObjectArray0[1] = (AccessibleObject) constructor1;
      accessibleObjectArray0[2] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[3] = (AccessibleObject) constructor0;
      accessibleObjectArray0[4] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[5] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      constructor1.setAccessible(true);
      constructor0.getAnnotatedReceiverType();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getOuterClass(class0);
      Class<Float> class3 = Float.class;
      ClassUtil.findConstructor(class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      ClassUtil.backticked("7S>UNG \"lh'>p>");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "&(=K.va.D'DFcu)s}", "&(=K.va.D'DFcu)s}");
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      jsonFactory0.createNonBlockingByteArrayParser();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) bufferedOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '&(=K.va.D'DFcu)s}' as a subtype of null: &(=K.va.D'DFcu)s}
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.nameOf(class0);
      ClassUtil.nullOrToString("`java.lang.Double`");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.nameOf((Class<?>) null);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getDeclaredFields(class2);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "8y}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.backticked("$VG.Qu");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "$VG.Qu", "[null]");
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) bufferedOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonParser0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '$VG.Qu' as a subtype of null: [null]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FjR{");
      int[] intArray0 = new int[4];
      intArray0[0] = (-6);
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 23;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("^", intArray0, (Throwable) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, "FjR{", "^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      int[] intArray0 = new int[0];
      MockIOException mockIOException0 = new MockIOException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Too few bytes available: missing ", "EiRq0:m6kK_~[-un", 8, intArray0, mockIOException0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) stringWriter0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: Too few bytes available: missing 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "org.hibernate.proxy.java.lang.Object");
      ClassUtil.throwIfError(jsonMappingException0);
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getClassDescription((Object) null);
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Long long0 = new Long((-1077L));
      ClassUtil.hasClass(long0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.spliterator();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("rQ5lx0^C? o_^z'~*=");
      mockRuntimeException0.fillInStackTrace();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.quotedOr(mockRuntimeException0, "xk w%c;Lc_jh[@3VEeI");
      ClassUtil.isLocalType(class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Long> class2 = Long.TYPE;
      ClassUtil.getGenericSuperclass(class2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.isProxyType(class1);
      Long long0 = new Long((-2560L));
      ClassUtil.hasClass((Object) null, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.fillInStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionException1.spliterator();
      ClassUtil.throwIfRTE(sQLTransientConnectionException1);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KF)z3+k");
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", intArray0, (Throwable) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      String string0 = "unknown";
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "unknown");
      ClassUtil.throwIfError((Throwable) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<MapType> class0 = MapType.class;
      Class<Character> class1 = Character.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.backticked((String) null);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3608));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "I_X eU:Co");
      ClassUtil.throwIfError(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Integer> class1 = Integer.TYPE;
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Long long0 = new Long((-1077L));
      assertNotNull(long0);
      assertEquals((-1077L), (long)long0);
      
      boolean boolean0 = ClassUtil.hasClass(long0, class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isBogusClass(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(boolean1);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(spliterator0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertNotNull(sQLTransientConnectionException1);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Class<Object> class3 = Object.class;
      sQLTransientConnectionException0.printStackTrace();
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.throwIfError(sQLTransientConnectionException0);
      System.setCurrentTimeMillis(2537L);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Class<RuntimeException> class0 = RuntimeException.class;
          Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
          assertEquals(1, constructor0.getModifiers());
          assertTrue(constructor0.isAccessible());
          assertEquals("public java.lang.RuntimeException()", constructor0.toString());
          assertFalse(constructor0.isSynthetic());
          assertFalse(constructor0.isVarArgs());
          assertNotNull(constructor0);
          
          Class<Annotation> class1 = Annotation.class;
          Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class1);
          assertEquals(0, annotationArray0.length);
          assertEquals(1, constructor0.getModifiers());
          assertTrue(constructor0.isAccessible());
          assertEquals("public java.lang.RuntimeException()", constructor0.toString());
          assertFalse(constructor0.isSynthetic());
          assertFalse(constructor0.isVarArgs());
          assertNotNull(annotationArray0);
          
          AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
          assertEquals(1, constructor0.getModifiers());
          assertTrue(constructor0.isAccessible());
          assertEquals("public java.lang.RuntimeException()", constructor0.toString());
          assertFalse(constructor0.isSynthetic());
          assertFalse(constructor0.isVarArgs());
          assertNotNull(annotatedType0);
          
          ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
          assertEquals(1, constructor0.getModifiers());
          assertTrue(constructor0.isAccessible());
          assertEquals("public java.lang.RuntimeException()", constructor0.toString());
          assertFalse(constructor0.isSynthetic());
          assertFalse(constructor0.isVarArgs());
          assertNotNull(classUtil_Ctor0);
          
          Type[] typeArray0 = constructor0.getGenericExceptionTypes();
          assertEquals(0, typeArray0.length);
          assertEquals(1, constructor0.getModifiers());
          assertTrue(constructor0.isAccessible());
          assertEquals("public java.lang.RuntimeException()", constructor0.toString());
          assertFalse(constructor0.isSynthetic());
          assertFalse(constructor0.isVarArgs());
          assertNotNull(typeArray0);
          
          int int0 = classUtil_Ctor0.getParamCount();
          assertEquals(1, constructor0.getModifiers());
          assertTrue(constructor0.isAccessible());
          assertEquals("public java.lang.RuntimeException()", constructor0.toString());
          assertFalse(constructor0.isSynthetic());
          assertFalse(constructor0.isVarArgs());
          assertEquals(0, int0);
          
          Class<AccessPattern> class2 = AccessPattern.class;
          Type[] typeArray1 = ClassUtil.getGenericInterfaces(class2);
          assertEquals(0, typeArray1.length);
          assertFalse(typeArray1.equals((Object)typeArray0));
          assertNotNull(typeArray1);
          
          String string0 = null;
          String string1 = ClassUtil.backticked("java.io.IOException");
          assertNotNull(string1);
          assertEquals("`java.io.IOException`", string1);
          
          TypeFactory typeFactory0 = TypeFactory.defaultInstance();
          assertNotNull(typeFactory0);
          
          Class<HashMap> class3 = HashMap.class;
          MapType mapType0 = typeFactory0.constructRawMapType(class3);
          assertFalse(mapType0.isCollectionLikeType());
          assertFalse(mapType0.isFinal());
          assertEquals(2, mapType0.containedTypeCount());
          assertFalse(mapType0.isJavaLangObject());
          assertTrue(mapType0.isConcrete());
          assertFalse(mapType0.isAbstract());
          assertFalse(mapType0.useStaticType());
          assertFalse(mapType0.hasValueHandler());
          assertFalse(mapType0.hasHandlers());
          assertFalse(mapType0.isArrayType());
          assertTrue(mapType0.hasContentType());
          assertTrue(mapType0.isMapLikeType());
          assertFalse(mapType0.isPrimitive());
          assertFalse(mapType0.isInterface());
          assertFalse(mapType0.isEnumType());
          assertTrue(mapType0.isContainerType());
          assertNotNull(mapType0);
          
          MapType mapType1 = mapType0.withKeyValueHandler((Object) null);
          assertNotSame(mapType0, mapType1);
          assertNotSame(mapType1, mapType0);
          assertTrue(mapType1.equals((Object)mapType0));
          assertFalse(mapType0.isCollectionLikeType());
          assertFalse(mapType0.isFinal());
          assertEquals(2, mapType0.containedTypeCount());
          assertFalse(mapType0.isJavaLangObject());
          assertTrue(mapType0.isConcrete());
          assertFalse(mapType0.isAbstract());
          assertFalse(mapType0.useStaticType());
          assertFalse(mapType0.hasValueHandler());
          assertFalse(mapType0.hasHandlers());
          assertFalse(mapType0.isArrayType());
          assertTrue(mapType0.hasContentType());
          assertTrue(mapType0.isMapLikeType());
          assertFalse(mapType0.isPrimitive());
          assertFalse(mapType0.isInterface());
          assertFalse(mapType0.isEnumType());
          assertTrue(mapType0.isContainerType());
          assertEquals(2, mapType1.containedTypeCount());
          assertFalse(mapType1.hasValueHandler());
          assertFalse(mapType1.isEnumType());
          assertFalse(mapType1.isJavaLangObject());
          assertFalse(mapType1.isAbstract());
          assertTrue(mapType1.isContainerType());
          assertFalse(mapType1.hasHandlers());
          assertTrue(mapType1.isMapLikeType());
          assertTrue(mapType1.hasContentType());
          assertFalse(mapType1.isFinal());
          assertFalse(mapType1.isCollectionLikeType());
          assertTrue(mapType1.isConcrete());
          assertFalse(mapType1.isInterface());
          assertFalse(mapType1.isPrimitive());
          assertFalse(mapType1.useStaticType());
          assertFalse(mapType1.isArrayType());
          assertNotNull(mapType1);
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertFalse(fileDescriptor0.valid());
          assertNotNull(fileDescriptor0);
          
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("entrySet");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("entrySet", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: entrySet", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Character> class2 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      
      Integer integer0 = Integer.getInteger("Hn(f$yu", 3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Class<Byte> class2 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, "68 O3 N9Q^}%r", "net.sf.cglib.proxy.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.lang.Byte) must override method 'net.sf.cglib.proxy.'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Double`", string0);
      
      String string1 = ClassUtil.nullOrToString("`java.lang.Double`");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      String string2 = ClassUtil.nameOf(class1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", string2);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      String string3 = ClassUtil.getPackageName(class2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("java.lang", string3);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<JsonMappingException> class3 = JsonMappingException.class;
      boolean boolean1 = ClassUtil.isConcrete(class3);
      assertSame(class3, class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = ClassUtil.backticked("$VG.Qu");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("`$VG.Qu`", string4);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "`$VG.Qu`", (String) null);
      assertEquals("`$VG.Qu`", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      
      String string5 = ClassUtil.classNameOf(invalidTypeIdException0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("`$VG.Qu`", invalidTypeIdException0.getTypeId());
      assertNotNull(string5);
      assertEquals("`com.fasterxml.jackson.databind.exc.InvalidTypeIdException`", string5);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertNotNull(methodArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("entrySet");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: entrySet", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("entrySet", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("size", sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: entrySet", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("entrySet", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: size", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("size", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        sQLTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLIntegrityConstraintViolationException: entrySet
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Integer`", string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2217);
      intArray0[1] = (-2217);
      intArray0[2] = (-2217);
      intArray0[3] = (-2217);
      intArray0[4] = (-2217);
      intArray0[5] = (-2217);
      intArray0[6] = (-2217);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("2", "SJ^du&ba[q{w^@", (-2217), intArray0, (Throwable) null);
      assertEquals(7, intArray0.length);
      assertEquals("SJ^du&ba[q{w^@", batchUpdateException0.getSQLState());
      assertEquals("2", batchUpdateException0.getMessage());
      assertEquals((-2217), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: 2", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-2217), (-2217), (-2217), (-2217), (-2217), (-2217), (-2217)}, intArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: 2
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<Error> class1 = Error.class;
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      Class<Double> class2 = Double.class;
      String string1 = ClassUtil.nameOf(class2);
      assertNotNull(string1);
      assertEquals("`java.lang.Double`", string1);
      
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class3);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      String string2 = ClassUtil.nonNullString("NULL");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("NULL", string2);
      
      Double double0 = new Double((-1253.83789));
      assertNotNull(double0);
      assertEquals((-1253.83789), (double)double0, 0.01);
      
      Class<?> class4 = ClassUtil.classOf(double0);
      assertFalse(class4.isEnum());
      assertEquals(17, class4.getModifiers());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertEquals("class java.lang.Double", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertNotNull(class4);
      
      SQLWarning sQLWarning0 = new SQLWarning("NULL", "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", 16);
      assertEquals("java.sql.SQLWarning: NULL", sQLWarning0.toString());
      assertEquals("NULL", sQLWarning0.getMessage());
      assertEquals(16, sQLWarning0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<Error> class1 = Error.class;
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("rQ5lx0^C? o_^z'~*=");
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = mockRuntimeException0.fillInStackTrace();
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(throwable0);
      
      RuntimeException runtimeException0 = ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      assertSame(mockRuntimeException0, runtimeException0);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(runtimeException0, mockRuntimeException0);
      assertSame(runtimeException0, throwable0);
      assertNotNull(runtimeException0);
      
      String string1 = ClassUtil.quotedOr(class1, (String) null);
      assertNotNull(string1);
      assertEquals("\"class java.lang.Error\"", string1);
      
      Class<SimpleModule> class2 = SimpleModule.class;
      String string2 = ClassUtil.isLocalType(class2, false);
      assertNull(string2);
      
      Class<Long> class3 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertEquals(1025, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.Module", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isPrimitive());
      assertNotNull(class4);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLWarning", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "KF)z3+k";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KF)z3+k");
      assertFalse(boolean0);
      
      String string1 = ClassUtil.nameOf((Named) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[null]", string1);
      
      int[] intArray0 = new int[0];
      Throwable throwable0 = null;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", intArray0, (Throwable) null);
      assertEquals(0, intArray0.length);
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.util.ClassUtil$Ctor", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {}, intArray0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      int int0 = 818;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "dddd[-]dd[-]dd[T]dd[:]dd(?:[:]dd)?(.d+)?(Z|[+-]dd(?:[:]?dd)?)?", "[null]", 818);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unknown");
      assertFalse(boolean0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Module> class1 = Module.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      assertEquals(2000, byteArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(byteArray0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, (OutputStream) null);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertNotNull(uTF8JsonGenerator0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(261, 0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertNotNull(uTF8JsonGenerator1);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator1, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertNotNull(jsonGeneratorDelegate0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLWarning", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Long long0 = new Long((-1077L));
      assertNotNull(long0);
      assertEquals((-1077L), (long)long0);
      
      boolean boolean0 = ClassUtil.hasClass(long0, class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isBogusClass(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(spliterator0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNotNull(sQLTransientConnectionException1);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertNotNull(list1);
      
      Class<Object> class3 = Object.class;
      sQLTransientConnectionException0.printStackTrace();
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      SQLTransientConnectionException sQLTransientConnectionException2 = (SQLTransientConnectionException)ClassUtil.throwIfError(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException2);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException2, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException2, sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException2.toString());
      assertNull(sQLTransientConnectionException2.getSQLState());
      assertNull(sQLTransientConnectionException2.getMessage());
      assertNotNull(sQLTransientConnectionException2);
      
      System.setCurrentTimeMillis(2537L);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Double`", string0);
      
      String string1 = ClassUtil.nullOrToString("`java.lang.Double`");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Short short0 = new Short((short)6414);
      assertNotNull(short0);
      assertEquals((short)6414, (short)short0);
      
      String string2 = ClassUtil.nullOrToString(short0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      String string3 = ClassUtil.nameOf(class1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", string3);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      String string4 = ClassUtil.getPackageName(class2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("java.lang", string4);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotatedType0);
      
      AnnotatedType annotatedType1 = constructor0.getAnnotatedReturnType();
      assertNotSame(annotatedType1, annotatedType0);
      assertFalse(annotatedType1.equals((Object)annotatedType0));
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotatedType1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      assertEquals(0, annotatedTypeArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertSame(annotationArray1, annotationArray0);
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray2.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray2);
      
      Class<?> class4 = ClassUtil.getDeclaringClass(class0);
      assertNull(class4);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Annotation> class5 = Annotation.class;
      String string5 = ClassUtil.canBeABeanType(class5);
      assertNull(string5);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<String> class6 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class6, (TypeBindings) null);
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class5, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      assertEquals(1, javaTypeArray0.length);
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertNotNull(mapType0);
      
      Class<Short> class7 = Short.class;
      JavaType[] javaTypeArray1 = new JavaType[0];
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class7, (TypeBindings) null, javaTypeArray0[0], javaTypeArray1, (JavaType) resolvedRecursiveType0);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertEquals(1, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isFinal());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertNotNull(collectionType0);
      
      String string6 = ClassUtil.nameOf(class0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("`java.lang.Double`", string6);
      
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals(4, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertNotNull(constructor1);
      
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals(4, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.java.io.IOException");
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = mockRuntimeException0.fillInStackTrace();
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(throwable0);
      
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      Class<Void> class3 = Void.class;
      Class<Object> class4 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class4, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<SimpleModule> class5 = SimpleModule.class;
      Class<MapLikeType>[] classArray0 = (Class<MapLikeType>[]) Array.newInstance(Class.class, 1);
      Class<MapLikeType> class6 = MapLikeType.class;
      classArray0[0] = class6;
      // Undeclared exception!
      try { 
        typeFactory1.constructParametricType(class5, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.module.SimpleModule with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertNotNull(mapType0);
      
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<String> class4 = String.class;
      Class<Short> class5 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class4, class5, false);
      assertSame(class4, class1);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.hasClass("serialVersionUID", class2);
      assertFalse(boolean0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0, "net.sf.cglib.proxy.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class2.toString());
      assertNotNull(class2);
      
      boolean boolean0 = ClassUtil.isProxyType(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class2.toString());
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotatedType0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int0);
      
      AnnotatedType annotatedType1 = constructor0.getAnnotatedReceiverType();
      assertNotSame(annotatedType1, annotatedType0);
      assertFalse(annotatedType1.equals((Object)annotatedType0));
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotatedType1);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int1);
      
      SQLDataException sQLDataException0 = new SQLDataException("", ".<h", 0);
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(".<h", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("n", sQLDataException0);
      assertNotNull(mockRuntimeException0);
      
      mockRuntimeException0.printStackTrace();
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(".<h", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      String string0 = mockRuntimeException0.toString();
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(".<h", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: n", string0);
      
      SQLDataException sQLDataException1 = (SQLDataException)sQLDataException0.initCause(mockRuntimeException0);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(".<h", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals(".<h", sQLDataException1.getSQLState());
      assertEquals("", sQLDataException1.getMessage());
      assertNotNull(sQLDataException1);
      
      // Undeclared exception!
      try { 
        mockRuntimeException0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("size", "qN\"Ueg", 58);
      assertEquals(58, sQLTransientException0.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException0.toString());
      assertEquals("size", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      Throwable[] throwableArray0 = sQLTransientException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals(58, sQLTransientException0.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException0.toString());
      assertEquals("size", sQLTransientException0.getMessage());
      assertNotNull(throwableArray0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertEquals(58, sQLTransientException0.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException0.toString());
      assertEquals("size", sQLTransientException0.getMessage());
      assertEquals(58, sQLTransientException1.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException1.getSQLState());
      assertEquals("size", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException1.toString());
      assertNotNull(sQLTransientException1);
      
      MockError mockError0 = new MockError("G>9=ZZCRDdh;{ilWD", sQLTransientException1);
      assertNotNull(mockError0);
      
      StackTraceElement[] stackTraceElementArray0 = mockError0.getStackTrace();
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertEquals(3, stackTraceElementArray0.length);
      assertEquals(58, sQLTransientException0.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException0.toString());
      assertEquals("size", sQLTransientException0.getMessage());
      assertEquals(58, sQLTransientException1.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException1.getSQLState());
      assertEquals("size", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException1.toString());
      assertNotNull(stackTraceElementArray0);
      
      String string0 = mockError0.toString();
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertEquals(58, sQLTransientException0.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException0.toString());
      assertEquals("size", sQLTransientException0.getMessage());
      assertEquals(58, sQLTransientException1.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException1.getSQLState());
      assertEquals("size", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException1.toString());
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: G>9=ZZCRDdh;{ilWD", string0);
      
      mockError0.printStackTrace();
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertEquals(58, sQLTransientException0.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException0.toString());
      assertEquals("size", sQLTransientException0.getMessage());
      assertEquals(58, sQLTransientException1.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException1.getSQLState());
      assertEquals("size", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException1.toString());
      
      String string1 = ClassUtil.getClassDescription(mockError0);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(58, sQLTransientException0.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException0.toString());
      assertEquals("size", sQLTransientException0.getMessage());
      assertEquals(58, sQLTransientException1.getErrorCode());
      assertEquals("qN\"Ueg", sQLTransientException1.getSQLState());
      assertEquals("size", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: size", sQLTransientException1.toString());
      assertNotNull(string1);
      assertEquals("`org.evosuite.runtime.mock.java.lang.MockError`", string1);
      
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<MapType> class1 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      String string0 = ClassUtil.backticked((String) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      String string1 = ClassUtil.classNameOf(class1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.Class`", string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      String string0 = ClassUtil.classNameOf(long0);
      assertNotNull(string0);
      assertEquals("`java.lang.Long`", string0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, float0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Float (of class com.fasterxml.jackson.databind.type.ReferenceType) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KF)z3+k");
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      Integer integer0 = new Integer(4942);
      assertNotNull(integer0);
      assertEquals(4942, (int)integer0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 4942;
      intArray0[1] = 4942;
      intArray0[2] = 4942;
      intArray0[3] = 4942;
      intArray0[4] = 4942;
      intArray0[5] = 4942;
      intArray0[6] = 4942;
      intArray0[7] = 4942;
      intArray0[8] = 4942;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertEquals(9, intArray0.length);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {4942, 4942, 4942, 4942, 4942, 4942, 4942, 4942, 4942}, intArray0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) integer0, "7D42(qkUwUBv!e-z'\"9");
      assertEquals(9, intArray0.length);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(jsonMappingException0);
      assertArrayEquals(new int[] {4942, 4942, 4942, 4942, 4942, 4942, 4942, 4942, 4942}, intArray0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertEquals(9, intArray0.length);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(throwable0);
      assertArrayEquals(new int[] {4942, 4942, 4942, 4942, 4942, 4942, 4942, 4942, 4942}, intArray0);
      
      String string1 = ClassUtil.classNameOf((Object) null);
      assertNotNull(string1);
      assertEquals("[null]", string1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(4, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      String string0 = ClassUtil.backticked("/_5d-a'*>..F~fh");
      assertNotNull(string0);
      assertEquals("`/_5d-a'*>..F~fh`", string0);
      
      TypeResolutionContext typeResolutionContext0 = null;
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("entrySet", (String) null, 67, sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(67, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("entrySet", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: entrySet", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("entrySet", "entrySet", sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(67, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("entrySet", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: entrySet", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("entrySet", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("entrySet", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: entrySet", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(67, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("entrySet", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: entrySet", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("entrySet", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("entrySet", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: entrySet", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("entrySet", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("entrySet", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: entrySet", sQLFeatureNotSupportedException1.toString());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      Class<Short> class1 = Short.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      String string0 = ClassUtil.quotedOr((Object) null, "entrySet");
      assertNotNull(string0);
      assertEquals("entrySet", string0);
      
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Short> class0 = Short.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(23, methodArray0.length);
      assertNotNull(methodArray0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.quotedOr((Object) null, "$_kk\"\"Y");
      assertNotNull(string0);
      assertEquals("$_kk\"\"Y", string0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string1 = "kFXx8\"I/r?*;;4^qON";
      String string2 = "a?s]f@g";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{q67dgu]rYIt$i.55_");
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: {q67dgu]rYIt$i.55_", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("{q67dgu]rYIt$i.55_", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.lang.Number", (String) null, sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: {q67dgu]rYIt$i.55_", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("{q67dgu]rYIt$i.55_", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.lang.Number", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.lang.Number", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        sQLIntegrityConstraintViolationException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = true;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray0.length);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray0);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertSame(annotationArray1, annotationArray0);
      assertEquals(0, annotationArray1.length);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray1);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNotNull(jsonParser0);
      
      String string0 = "k";
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "k", (Throwable) sQLException0);
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
      try { 
        jsonMappingException0.initCause(sQLException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLException
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<DoubleNode> class0 = DoubleNode.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<CollectionType> class1 = CollectionType.class;
      boolean boolean1 = true;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<Short> class1 = Short.TYPE;
      assertSame(class1, class0);
      assertFalse(class1.isInterface());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertSame(class1, class0);
      assertFalse(class1.isInterface());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(boolean0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      Object object0 = ClassUtil.defaultValue(class1);
      assertSame(class1, class0);
      assertFalse(class1.isInterface());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertNotNull(object0);
      assertEquals((short)0, object0);
      
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(object0);
      assertEquals(0, object0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Error> class0 = Error.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Error is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Error> class0 = Error.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Error is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      Constructor<MapLikeType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("F%}0tX;m*z=7", "F%}0tX;m*z=7", 0, (Throwable) null);
      assertEquals("java.sql.SQLTransientException: F%}0tX;m*z=7", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("F%}0tX;m*z=7", sQLTransientException0.getSQLState());
      assertEquals("F%}0tX;m*z=7", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // F%}0tX;m*z=7
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(string0);
      assertEquals("`boolean`", string0);
      
      String string1 = ClassUtil.getPackageName(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("entrySet");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: entrySet", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("entrySet", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("size", sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: entrySet", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("entrySet", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("size", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: size", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        sQLTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLIntegrityConstraintViolationException: entrySet
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Constructor<PlaceholderForType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      
      Class<Module> class1 = Module.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTransientException0.getStackTrace();
      assertEquals(14, stackTraceElementArray0.length);
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNotNull(stackTraceElementArray0);
      
      MockFile mockFile0 = new MockFile(" (from class ", "com.fasterxml.jackson.databind.type");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "elementType");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // elementType
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertNotNull(constructor0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.RuntimeException`", string0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class1, class0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Iterator<ResolvedRecursiveType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertEquals(2, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<String> class2 = String.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertSame(class2, class0);
      assertEquals(16, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Iterator<Annotation> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      ClassUtil.Ctor[] classUtil_CtorArray1 = ClassUtil.getConstructors(class0);
      assertSame(class0, class2);
      assertNotSame(classUtil_CtorArray1, classUtil_CtorArray0);
      assertEquals(16, classUtil_CtorArray1.length);
      assertFalse(classUtil_CtorArray1.equals((Object)classUtil_CtorArray0));
      assertNotNull(classUtil_CtorArray1);
      
      Class<NoClass> class3 = NoClass.class;
      String string0 = ClassUtil.nameOf(class3);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", string0);
      
      String string1 = ClassUtil.getPackageName(class3);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("com.fasterxml.jackson.databind.annotation", string1);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class4);
      assertFalse(boolean0);
      
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class5);
      assertSame(class5, class4);
      assertEquals(18, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string2 = ClassUtil.backticked("`com.fasterxml.jackson.databind.annotation.NoClass`");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("``com.fasterxml.jackson.databind.annotation.NoClass``", string2);
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      Class<Character> class6 = Character.class;
      Class<NoClass> class7 = NoClass.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertNotNull(placeholderForType0);
      
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.JsonMappingException with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("wYtJ|j0cV-E;#`}");
      assertNotNull(string0);
      assertEquals("wYtJ|j0cV-E;#`}", string0);
      
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Long long0 = new Long((-1077L));
      assertNotNull(long0);
      assertEquals((-1077L), (long)long0);
      
      boolean boolean1 = ClassUtil.hasClass(long0, class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ClassUtil.isBogusClass(class1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(spliterator0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertNotNull(sQLTransientConnectionException1);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertNotNull(list1);
      
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string0 = "vals";
      SQLDataException sQLDataException0 = new SQLDataException("vals", (Throwable) null);
      assertEquals("vals", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: vals", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      assertEquals("vals", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: vals", sQLDataException0.toString());
      assertEquals("java.sql.SQLWarning: java.sql.SQLDataException: vals", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLDataException: vals", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwIfRTE(sQLWarning0);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      assertEquals("vals", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: vals", sQLDataException0.toString());
      assertEquals("java.sql.SQLWarning: java.sql.SQLDataException: vals", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLDataException: vals", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLDataException: vals", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: java.sql.SQLDataException: vals", sQLWarning1.toString());
      assertNotNull(sQLWarning1);
      
      // Undeclared exception!
      try { 
        sQLWarning0.initCause(sQLWarning1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLWarning: java.sql.SQLDataException: vals
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<Error> class2 = Error.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class2);
      assertFalse(boolean0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class1, class0);
      assertFalse(list1.equals((Object)list0));
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(annotationArray0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(string0);
      assertEquals("`int`", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Double`", string0);
      
      String string1 = ClassUtil.nullOrToString("`java.lang.Double`");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Short short0 = new Short((short)6414);
      assertNotNull(short0);
      assertEquals((short)6414, (short)short0);
      
      String string2 = ClassUtil.nullOrToString(short0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      String string3 = ClassUtil.nameOf(class1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", string3);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      String string4 = ClassUtil.getPackageName(class2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("java.lang", string4);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotatedType0);
      
      AnnotatedType annotatedType1 = constructor0.getAnnotatedReturnType();
      assertNotSame(annotatedType1, annotatedType0);
      assertFalse(annotatedType1.equals((Object)annotatedType0));
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotatedType1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      assertEquals(0, annotatedTypeArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertSame(annotationArray1, annotationArray0);
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray2.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray2);
      
      Class<?> class4 = ClassUtil.getDeclaringClass(class0);
      assertNull(class4);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Annotation> class5 = Annotation.class;
      String string5 = ClassUtil.canBeABeanType(class5);
      assertNull(string5);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<String> class6 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class6, (TypeBindings) null);
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class5, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      assertEquals(1, javaTypeArray0.length);
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertNotNull(mapType0);
      
      Class<Short> class7 = Short.class;
      JavaType[] javaTypeArray1 = new JavaType[0];
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class7, (TypeBindings) null, javaTypeArray0[0], javaTypeArray1, (JavaType) resolvedRecursiveType0);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertEquals(1, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(0, collectionType0.containedTypeCount());
      assertNotNull(collectionType0);
      
      MapType mapType1 = mapType0.withKeyTypeHandler(collectionType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertEquals(1, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isAbstract());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(0, collectionType0.containedTypeCount());
      assertNotNull(mapType1);
      
      MapType mapType2 = mapType1.withStaticTyping();
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertEquals(1, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isAbstract());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isConcrete());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertTrue(mapType2.isInterface());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isAbstract());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(0, collectionType0.containedTypeCount());
      assertNotNull(mapType2);
      
      Class<?> class8 = ClassUtil.classOf(mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertEquals(1, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType2));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isAbstract());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isConcrete());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertTrue(mapType2.isInterface());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isAbstract());
      assertEquals(0, mapType2.containedTypeCount());
      assertEquals("class com.fasterxml.jackson.databind.type.MapType", class8.toString());
      assertFalse(class8.isAnnotation());
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertFalse(class8.isInterface());
      assertFalse(class8.isArray());
      assertFalse(class8.isPrimitive());
      assertEquals(1, class8.getModifiers());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(0, collectionType0.containedTypeCount());
      assertNotNull(class8);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      String string0 = "noQVVW;a";
      String string1 = ClassUtil.backticked("noQVVW;a");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`noQVVW;a`", string1);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class2.toString());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<ArrayType> class3 = ArrayType.class;
      boolean boolean0 = ClassUtil.isProxyType(class3);
      assertFalse(boolean0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      boolean boolean1 = ClassUtil.isProxyType(class4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockError mockError0 = new MockError("elementType");
      assertNotNull(mockError0);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) mockError0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      String string0 = ClassUtil.backticked((String) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3608));
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory((TypeFactory) null);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper1);
      
      LinkedHashSet<SimpleModule> linkedHashSet0 = new LinkedHashSet<SimpleModule>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) linkedHashSet0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(objectMapper2);
      
      ObjectMapper objectMapper3 = objectMapper0.findAndRegisterModules();
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper3);
      
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      Object object0 = coreXMLDeserializers_Std0.getEmptyValue(deserializationContext0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNull(object0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(16385, class2.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("byte", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      String string0 = ClassUtil.quotedOr(class1, " =.Ac{$2W85");
      assertEquals("byte", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertNotNull(string0);
      assertEquals("\"byte\"", string0);
      
      Integer integer0 = new Integer(45);
      assertNotNull(integer0);
      assertEquals(45, (int)integer0);
      
      boolean boolean0 = ClassUtil.hasClass(integer0, class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("'30:b^se$", "&_=eLr7_-5~@I%E#>", 45, (Throwable) null);
      assertEquals("'30:b^se$", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLNonTransientConnectionException0.toString());
      assertEquals("&_=eLr7_-5~@I%E#>", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(45, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      assertEquals("'30:b^se$", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLNonTransientConnectionException0.toString());
      assertEquals("&_=eLr7_-5~@I%E#>", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(45, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", "'30:b^se$", "&_=eLr7_-5~@I%E#>", (-2016));
      assertEquals("'30:b^se$", stackTraceElement0.getMethodName());
      assertEquals("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer.'30:b^se$(&_=eLr7_-5~@I%E#>)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", stackTraceElement0.getClassName());
      assertEquals("&_=eLr7_-5~@I%E#>", stackTraceElement0.getFileName());
      assertEquals((-2016), stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("'30:b^se$", "&_=eLr7_-5~@I%E#>", ";Zl>#6fMqhf", (-2016));
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("'30:b^se$.&_=eLr7_-5~@I%E#>(;Zl>#6fMqhf)", stackTraceElement1.toString());
      assertEquals((-2016), stackTraceElement1.getLineNumber());
      assertEquals("'30:b^se$", stackTraceElement1.getClassName());
      assertEquals("&_=eLr7_-5~@I%E#>", stackTraceElement1.getMethodName());
      assertEquals(";Zl>#6fMqhf", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("RWJ^Im5P\"jKZ`J", "[]", "; expected Class<KeyDeserializer>", (-1245));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("; expected Class<KeyDeserializer>", stackTraceElement2.getFileName());
      assertEquals((-1245), stackTraceElement2.getLineNumber());
      assertEquals("RWJ^Im5P\"jKZ`J.[](; expected Class<KeyDeserializer>)", stackTraceElement2.toString());
      assertEquals("[]", stackTraceElement2.getMethodName());
      assertEquals("RWJ^Im5P\"jKZ`J", stackTraceElement2.getClassName());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("\"byte\"", "R,2-UrhOf#", "vals", (-2016));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertEquals("vals", stackTraceElement3.getFileName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("\"byte\"", stackTraceElement3.getClassName());
      assertEquals("\"byte\".R,2-UrhOf#(vals)", stackTraceElement3.toString());
      assertEquals("R,2-UrhOf#", stackTraceElement3.getMethodName());
      assertEquals((-2016), stackTraceElement3.getLineNumber());
      assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", "qAgu5SefO2a>zDI>DF", "com.fasterxml.jackson.core.util.JsonParserSequence", 0);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertEquals("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer.qAgu5SefO2a>zDI>DF(com.fasterxml.jackson.core.util.JsonParserSequence:0)", stackTraceElement4.toString());
      assertEquals("com.fasterxml.jackson.core.util.JsonParserSequence", stackTraceElement4.getFileName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", stackTraceElement4.getClassName());
      assertEquals("qAgu5SefO2a>zDI>DF", stackTraceElement4.getMethodName());
      assertEquals(0, stackTraceElement4.getLineNumber());
      assertNotNull(stackTraceElement4);
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("\"%s\"", "local/anonymous", "&_=eLr7_-5~@I%E#>", (-2016));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertEquals((-2016), stackTraceElement5.getLineNumber());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertEquals("\"%s\".local/anonymous(&_=eLr7_-5~@I%E#>)", stackTraceElement5.toString());
      assertEquals("&_=eLr7_-5~@I%E#>", stackTraceElement5.getFileName());
      assertEquals("\"%s\"", stackTraceElement5.getClassName());
      assertEquals("local/anonymous", stackTraceElement5.getMethodName());
      assertNotNull(stackTraceElement5);
      
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("com.fasterxml.jackson.core.util.JsonParserSequence", "\"%s\"", "R,2-UrhOf#", (-2016));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement3));
      assertEquals((-2016), stackTraceElement6.getLineNumber());
      assertEquals("com.fasterxml.jackson.core.util.JsonParserSequence.\"%s\"(R,2-UrhOf#)", stackTraceElement6.toString());
      assertFalse(stackTraceElement6.isNativeMethod());
      assertEquals("com.fasterxml.jackson.core.util.JsonParserSequence", stackTraceElement6.getClassName());
      assertEquals("\"%s\"", stackTraceElement6.getMethodName());
      assertEquals("R,2-UrhOf#", stackTraceElement6.getFileName());
      assertNotNull(stackTraceElement6);
      
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      assertEquals(7, stackTraceElementArray0.length);
      assertEquals("'30:b^se$", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLNonTransientConnectionException0.toString());
      assertEquals("&_=eLr7_-5~@I%E#>", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(45, sQLNonTransientConnectionException0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "\"byte\"", (Throwable) sQLTransientConnectionException0);
      assertEquals("'30:b^se$", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLNonTransientConnectionException0.toString());
      assertEquals("&_=eLr7_-5~@I%E#>", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(45, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertEquals("'30:b^se$", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLNonTransientConnectionException0.toString());
      assertEquals("&_=eLr7_-5~@I%E#>", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(45, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(45, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("'30:b^se$", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLNonTransientConnectionException1.toString());
      assertEquals("&_=eLr7_-5~@I%E#>", sQLNonTransientConnectionException1.getSQLState());
      assertNotNull(sQLNonTransientConnectionException1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = (SQLNonTransientConnectionException)ClassUtil.getRootCause(jsonMappingException0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException2);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException0);
      assertEquals("'30:b^se$", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLNonTransientConnectionException0.toString());
      assertEquals("&_=eLr7_-5~@I%E#>", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(45, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(45, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("&_=eLr7_-5~@I%E#>", sQLNonTransientConnectionException2.getSQLState());
      assertEquals("'30:b^se$", sQLNonTransientConnectionException2.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: '30:b^se$", sQLNonTransientConnectionException2.toString());
      assertNotNull(sQLNonTransientConnectionException2);
      
      String string1 = ClassUtil.getClassDescription("&_=eLr7_-5~@I%E#>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.String`", string1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertNotNull(mapType0);
      
      String string0 = ClassUtil.quotedOr(mapType0, "serialVersionUID");
      assertNotSame(typeFactory0, typeFactory1);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertNotNull(string0);
      assertEquals("\"[map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]\"", string0);
      
      Class<Float> class1 = Float.class;
      String string1 = ClassUtil.isLocalType(class1, true);
      assertNull(string1);
      
      Class<Long> class2 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      String string0 = "keyUniverse";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "keyUniverse");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Byte) must override method 'keyUniverse'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "/(y1BnaX^Hv";
      SQLTransientException sQLTransientException0 = new SQLTransientException("/(y1BnaX^Hv");
      assertEquals("java.sql.SQLTransientException: /(y1BnaX^Hv", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("/(y1BnaX^Hv", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      String string1 = "(>pxN";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, "(>pxN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (>pxN
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.MapType`", string0);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = ClassUtil.nonNull(float0, float0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Integer integer0 = new Integer(191);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(integer0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, resolvedRecursiveType0);
      String string0 = ClassUtil.quotedOr(mapLikeType0, "com.fasterxml.jackson.databind.deser.impl.PropertyValue$Any");
      assertEquals("\"[map-like type; class com.fasterxml.jackson.databind.type.CollectionLikeType, [recursive type; UNRESOLVED -> [recursive type; UNRESOLVED]\"", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockIOException mockIOException0 = new MockIOException(sQLTransientException0);
      mockIOException0.toString();
      mockIOException0.getSuppressed();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, "t`K/J5(|wi,nW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // t`K/J5(|wi,nW
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "keyUniverse", (-3344));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLRecoverableException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", sQLIntegrityConstraintViolationException0);
      mockRuntimeException0.fillInStackTrace();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class2);
      Class<Void> class3 = Void.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      ClassUtil.hasClass(class0, class3);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "Sub-class %s (of class %s) must override method '%s'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sub-class %s (of class %s) must override method '%s'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.primitiveType(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getSuppressed();
      MockException mockException0 = new MockException((String) null, sQLClientInfoException0);
      mockException0.getMessage();
      Throwable throwable0 = ClassUtil.throwIfRTE(mockException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Numeric value (%s) out of range of int (%d - %s)", "Numeric value (%s) out of range of int (%d - %s)", hashMap0);
      sQLClientInfoException0.getStackTrace();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put((String) null, clientInfoStatus0);
      sQLClientInfoException1.fillInStackTrace();
      sQLClientInfoException1.addSuppressed(throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException1, "Numeric value (%s) out of range of int (%d - %s)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Numeric value (%s) out of range of int (%d - %s)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.hasClass(class0, class2);
      SQLWarning sQLWarning0 = new SQLWarning("%,Gjz@!DM{V");
      SQLWarning sQLWarning1 = new SQLWarning("%,Gjz@!DM{V", "%,Gjz@!DM{V", sQLWarning0);
      sQLWarning0.setNextWarning(sQLWarning1);
      MockThrowable mockThrowable0 = new MockThrowable();
      String string0 = "1i-87";
      String string1 = "6eI";
      File file0 = MockFile.createTempFile("1i-87", "6eI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 2419;
      // Undeclared exception!
      try { 
        mockPrintWriter0.write((String) null, 2419, 2419);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }
}
