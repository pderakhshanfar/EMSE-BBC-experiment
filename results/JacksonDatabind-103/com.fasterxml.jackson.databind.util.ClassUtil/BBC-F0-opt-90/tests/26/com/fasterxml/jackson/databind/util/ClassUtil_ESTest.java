/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:00:33 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(false, object0);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enum0);
      assertFalse(class1.isInterface());
      assertEquals("class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$1908795037", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-661868634);
      intArray0[1] = (-661868634);
      intArray0[2] = (-661868634);
      intArray0[3] = (-661868634);
      intArray0[4] = (-661868634);
      intArray0[5] = (-661868634);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "O$JOwAVJA]k/US", (-661868634), intArray0);
      assertArrayEquals(new int[] {(-661868634), (-661868634), (-661868634), (-661868634), (-661868634), (-661868634)}, intArray0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("O$JOwAVJA]k/US", batchUpdateException0.getSQLState());
      assertEquals((-661868634), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(6, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      assertArrayEquals(new int[] {(-661868634), (-661868634), (-661868634), (-661868634), (-661868634), (-661868634)}, intArray0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("O$JOwAVJA]k/US", batchUpdateException0.getSQLState());
      assertEquals((-661868634), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", sQLTransactionRollbackException0.getMessage());
      assertEquals(6, intArray0.length);
      assertNotNull(sQLTransactionRollbackException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jacks", (Throwable) sQLTransactionRollbackException0);
      assertArrayEquals(new int[] {(-661868634), (-661868634), (-661868634), (-661868634), (-661868634), (-661868634)}, intArray0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("O$JOwAVJA]k/US", batchUpdateException0.getSQLState());
      assertEquals((-661868634), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", sQLTransactionRollbackException0.getMessage());
      assertEquals(6, intArray0.length);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jacks
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals((byte)0, object0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0F, object0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      assertNotNull(mockFile0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(objectMapper2);
      
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(objectMapper3);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper4 = objectMapper3.enable(jsonParser_FeatureArray0);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(4, jsonParser_FeatureArray0.length);
      assertNotNull(objectMapper4);
      
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper5 = objectMapper4.disable(jsonGenerator_FeatureArray0);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper3);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(3, jsonGenerator_FeatureArray0.length);
      assertEquals(4, jsonParser_FeatureArray0.length);
      assertNotNull(objectMapper5);
      
      objectMapper5.writeValue((File) mockFile0, (Object) jsonParser_Feature1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature2);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper3);
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(78L, mockFile0.length());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature3));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature2));
      assertEquals(3, jsonGenerator_FeatureArray0.length);
      assertEquals(4, jsonParser_FeatureArray0.length);
      
      Class<NoClass> class0 = NoClass.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertNotNull(javaType0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl1.invalidTypeIdException(javaType0, "]-H.gb3?)${K", "]-H.gb3?)${K");
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals("]-H.gb3?)${K", invalidTypeIdException0.getTypeId());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(invalidTypeIdException0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, invalidTypeIdException0, false);
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals("]-H.gb3?)${K", invalidTypeIdException0.getTypeId());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) contextAttributes_Impl0);
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader2 = objectReader1.withView(class0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("]-H.gb3?)${K");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.append((CharSequence) "]-H.gb3?)${K");
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertNotNull(mockPrintStream1);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1257, objectReader2, mockPrintStream1);
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals("]-H.gb3?)${K", invalidTypeIdException0.getTypeId());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1257, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(uTF8JsonGenerator0);
      
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals("]-H.gb3?)${K", invalidTypeIdException0.getTypeId());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1257, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(1257, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(uTF8JsonGenerator1);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) uTF8JsonGenerator0, (Exception) invalidTypeIdException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id ']-H.gb3?)${K' as a subtype of [simple type, class java.lang.Object]: ]-H.gb3?)${K
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals((short)0, object0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(nonBlockingJsonParser0);
      
      Class<Short> class1 = Short.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) nonBlockingJsonParser0, (Class<?>) class1, jsonToken0, "JSON");
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(mismatchedInputException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mismatchedInputException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<InputStream> class1 = InputStream.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) null);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "!TPDi1ycp");
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("JSON", sQLWarning0.getMessage());
      assertEquals("!TPDi1ycp", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: JSON", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      MockIOException mockIOException0 = new MockIOException("JSON", sQLWarning0);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      assertNotNull(object0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      String string1 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Long`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Integer> class2 = Integer.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class2, list0);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Class<MapLikeType> class3 = MapLikeType.class;
      Class<?> class4 = ClassUtil.primitiveType(class3);
      assertNull(class4);
      
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      Class<?> class6 = ClassUtil.getOuterClass(class5);
      assertNull(class6);
      
      Class<CollectionLikeType> class7 = CollectionLikeType.class;
      Class<String> class8 = String.class;
      List<Class<?>> list2 = ClassUtil.findSuperClasses(class7, class8, false);
      assertEquals(4, list2.size());
      assertFalse(list2.isEmpty());
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotNull(list2);
      
      Class<AccessibleObject> class9 = AccessibleObject.class;
      List<Class<?>> list3 = ClassUtil.findRawSuperTypes(class8, class9, false);
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      assertEquals(3, list3.size());
      assertFalse(list3.isEmpty());
      assertFalse(list3.equals((Object)list0));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertNotNull(list3);
      
      Class<JsonMappingException> class10 = JsonMappingException.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class10);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<AccessPattern> class11 = AccessPattern.class;
      boolean boolean2 = ClassUtil.isProxyType(class11);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Class<RuntimeException> class12 = RuntimeException.class;
      Class<?> class13 = ClassUtil.primitiveType(class12);
      assertNull(class13);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class9);
      assertEquals(13, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Double> class14 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, false);
      assertNotNull(object0);
      
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class2, class0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("lBU*yF4AOU9", (Throwable) null);
      assertNotNull(mockRuntimeException0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("mzSR`m><ID");
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 11);
      assertNotNull(bufferedOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      assertNotNull(filterOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      assertNotNull(mockPrintWriter0);
      
      mockRuntimeException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "Cannot figure out type for EnumMap (odd JDK platform?)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      assertNotNull(mockFile0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      assertNotNull(mockFileWriter0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      SerializationFeature serializationFeature1 = SerializationFeature.WRAP_EXCEPTIONS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature1, serializationFeatureArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(serializationFeature1, serializationFeature0);
      assertSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(serializationFeature1.equals((Object)serializationFeature0));
      assertEquals(3, serializationFeatureArray0.length);
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(serializationFeature1, serializationFeature0);
      assertSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(serializationFeature1.equals((Object)serializationFeature0));
      assertEquals(3, serializationFeatureArray0.length);
      assertNotNull(objectReader0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(serializationFeature1, serializationFeature0);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(serializationFeature1.equals((Object)serializationFeature0));
      assertEquals(3, serializationFeatureArray0.length);
      assertNotNull(objectMapper2);
      
      JsonFactory jsonFactory2 = jsonFactory0.setCodec(objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(serializationFeature1, serializationFeature0);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(serializationFeature1.equals((Object)serializationFeature0));
      assertEquals(3, serializationFeatureArray0.length);
      assertNotNull(jsonFactory2);
      
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      Class<?> class2 = ClassUtil.classOf(serializationFeature0);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.SerializationFeature", class2.toString());
      assertTrue(class2.isEnum());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<Long> class0 = Long.TYPE;
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0L, object0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertEquals(0, enumSet0.size());
      assertNotNull(enumSet0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertEquals(0, enumSet0.size());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      assertEquals(0, enumSet0.size());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("TH|WZ;*_y=MAj]_");
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertEquals(0, enumSet0.size());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(typeBindings1);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      assertEquals(0, enumSet0.size());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertEquals(0, enumSet0.size());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertTrue(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(javaType0);
      
      Class<?> class2 = ClassUtil.rawClass(javaType0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertEquals(0, enumSet0.size());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertTrue(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(16385, class2.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockError0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(0, enumMap0.size());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertNotNull(resolvedRecursiveType0);
      
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)ClassUtil.nonNull((Object) null, (Object) resolvedRecursiveType0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertTrue(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertTrue(resolvedRecursiveType1.isFinal());
      assertNotNull(resolvedRecursiveType1);
      
      Class<CollectionType> class2 = CollectionType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`com.fasterxml.jackson.databind.type.CollectionType`", string0);
      assertNotNull(string0);
      
      Class<String> class1 = String.class;
      ClassUtil.verifyMustOverride(class1, "`com.fasterxml.jackson.databind.type.CollectionType`", (String) null);
      String string1 = ClassUtil.classNameOf(class1);
      assertEquals("`java.lang.Class`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      Class<Character> class3 = Character.class;
      boolean boolean1 = ClassUtil.isProxyType(class3);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0, object0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "O;X32|/:5(");
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(invalidTypeIdException0.getTypeId());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(invalidTypeIdException0);
      
      InvalidTypeIdException invalidTypeIdException1 = (InvalidTypeIdException)ClassUtil.throwIfError(invalidTypeIdException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(invalidTypeIdException0, invalidTypeIdException1);
      assertSame(invalidTypeIdException1, invalidTypeIdException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(invalidTypeIdException0.getTypeId());
      assertNull(invalidTypeIdException1.getTypeId());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(invalidTypeIdException1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("org.hibernate.proxy.char");
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("org.hibernate.proxy.char", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("org.hibernate.proxy.char", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("org.hibernate.proxy.char", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature0, false);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("org.hibernate.proxy.char", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("org.hibernate.proxy.char", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("org.hibernate.proxy.char", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals("org.hibernate.proxy.char", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory4);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JSON");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      MockPrintWriter mockPrintWriter2 = (MockPrintWriter)mockPrintWriter1.append('Z');
      assertNotSame(mockPrintWriter0, mockPrintWriter2);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter2);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter2, mockPrintWriter0);
      assertSame(mockPrintWriter2, mockPrintWriter1);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter2);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory4.createGenerator((Writer) mockPrintWriter2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(mockPrintWriter0, mockPrintWriter2);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter2);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter2, mockPrintWriter0);
      assertSame(mockPrintWriter2, mockPrintWriter1);
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("org.hibernate.proxy.char", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("org.hibernate.proxy.char", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("org.hibernate.proxy.char", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals("org.hibernate.proxy.char", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertNotNull(writerBasedJsonGenerator0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) invalidTypeIdException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: O;X32|/:5(
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      AnnotationMap annotationMap0 = AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      assertNull(annotationMap0);
      
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[2];
      annotationMapArray0[0] = null;
      annotationMapArray0[1] = null;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, (AnnotationMap) null, annotationMapArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, annotatedConstructor0.getModifiers());
      assertEquals(2, annotationMapArray0.length);
      assertNotNull(annotatedConstructor0);
      
      Boolean boolean0 = new Boolean("}J+J/LM2");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer((-1602));
      assertEquals((-1602), (int)integer0);
      assertNotNull(integer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "^my$vlE=", integer0, "]m1vzf 'g");
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-1602), (int)propertyMetadata0.getIndex());
      assertEquals("^my$vlE=", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("]m1vzf 'g", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNotNull(propertyMetadata0);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-1602), (int)propertyMetadata0.getIndex());
      assertEquals("^my$vlE=", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("]m1vzf 'g", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("^my$vlE=", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals((-1602), (int)propertyMetadata1.getIndex());
      assertEquals("]m1vzf 'g", propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.isRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotNull(propertyMetadata1);
      
      JsonInclude.Value jsonInclude_Value0 = annotationIntrospector0.findPropertyInclusion(annotatedConstructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, annotatedConstructor0.getModifiers());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(2, annotationMapArray0.length);
      assertNotNull(jsonInclude_Value0);
      
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector1, annotatedConstructor0, (PropertyName) null, propertyMetadata1, jsonInclude_Value0);
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyIncluded());
      assertFalse(simpleBeanPropertyDefinition0.isTypeId());
      assertNull(simpleBeanPropertyDefinition0.findReferenceName());
      assertFalse(simpleBeanPropertyDefinition0.hasField());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyNamed());
      assertFalse(simpleBeanPropertyDefinition0.hasConstructorParameter());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, annotatedConstructor0.getModifiers());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-1602), (int)propertyMetadata0.getIndex());
      assertEquals("^my$vlE=", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("]m1vzf 'g", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("^my$vlE=", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals((-1602), (int)propertyMetadata1.getIndex());
      assertEquals("]m1vzf 'g", propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.isRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertEquals(2, annotationMapArray0.length);
      assertNotNull(simpleBeanPropertyDefinition0);
      
      BeanPropertyDefinition beanPropertyDefinition0 = simpleBeanPropertyDefinition0.withMetadata(propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertSame(simpleBeanPropertyDefinition0, beanPropertyDefinition0);
      assertSame(beanPropertyDefinition0, simpleBeanPropertyDefinition0);
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyIncluded());
      assertFalse(simpleBeanPropertyDefinition0.isTypeId());
      assertNull(simpleBeanPropertyDefinition0.findReferenceName());
      assertFalse(simpleBeanPropertyDefinition0.hasField());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyNamed());
      assertFalse(simpleBeanPropertyDefinition0.hasConstructorParameter());
      assertNull(beanPropertyDefinition0.findReferenceName());
      assertFalse(beanPropertyDefinition0.hasField());
      assertFalse(beanPropertyDefinition0.isTypeId());
      assertFalse(beanPropertyDefinition0.hasConstructorParameter());
      assertFalse(beanPropertyDefinition0.isExplicitlyIncluded());
      assertFalse(beanPropertyDefinition0.isExplicitlyNamed());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, annotatedConstructor0.getModifiers());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-1602), (int)propertyMetadata0.getIndex());
      assertEquals("^my$vlE=", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("]m1vzf 'g", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("^my$vlE=", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals((-1602), (int)propertyMetadata1.getIndex());
      assertEquals("]m1vzf 'g", propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.isRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertEquals(2, annotationMapArray0.length);
      assertNotNull(beanPropertyDefinition0);
      
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanPropertyDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Integer", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      
      MockFile mockFile0 = new MockFile("NWdnG-t@:b>C");
      assertNotNull(mockFile0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      assertFalse(boolean0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory2.createGenerator((File) mockFile0, jsonEncoding0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("NWdnG-t@:b>C", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("NWdnG-t@:b>C", mockFile0.getName());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(29, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("NWdnG-t@:b>C", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("NWdnG-t@:b>C", mockFile0.getName());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(29, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(jsonGeneratorDelegate0);
      
      SQLException sQLException0 = new SQLException("JSON");
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: JSON", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("JSON", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      String string0 = ClassUtil.backticked("com.fasterxml.jackson.databind.ser.std.NumberSerializer");
      assertEquals("`com.fasterxml.jackson.databind.ser.std.NumberSerializer`", string0);
      assertNotNull(string0);
      
      Class<String> class4 = String.class;
      String string1 = ClassUtil.createInstance(class4, true);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertEquals(31, methodArray0.length);
      assertNotNull(methodArray0);
      
      System.setCurrentTimeMillis(0L);
      Class<Object> class5 = Object.class;
      Method[] methodArray1 = ClassUtil.getClassMethods(class5);
      assertNotSame(methodArray1, methodArray0);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertEquals(12, methodArray1.length);
      assertNotNull(methodArray1);
      
      String string2 = ClassUtil.classNameOf(class4);
      assertEquals("`java.lang.Class`", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Named named0 = null;
      String string3 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class2, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      SimpleModule simpleModule0 = new SimpleModule();
      assertEquals("SimpleModule-1", simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class5, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(">/ZPh='r-", ">/ZPh='r-");
      assertEquals(">/ZPh='r-", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: >/ZPh='r-", sQLNonTransientException0.toString());
      assertEquals(">/ZPh='r-", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      MockFile mockFile0 = new MockFile(">/ZPh='r-");
      assertNotNull(mockFile0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      JsonFactory jsonFactory4 = jsonFactory3.setCodec(objectMapper0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory4);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonFactory_Feature0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory5);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory5);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory3);
      assertNotSame(jsonFactory5, jsonFactory2);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory5);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory6 = jsonFactory5.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory5);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory5);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory6);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory6);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertNotSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory6);
      assertNotSame(jsonFactory6, jsonFactory1);
      assertSame(jsonFactory6, jsonFactory4);
      assertSame(jsonFactory6, jsonFactory5);
      assertNotSame(jsonFactory6, jsonFactory2);
      assertNotSame(jsonFactory6, jsonFactory0);
      assertSame(jsonFactory6, jsonFactory3);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertTrue(jsonFactory6.canParseAsync());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory5));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory5));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory2));
      assertFalse(jsonFactory6.equals((Object)jsonFactory1));
      assertFalse(jsonFactory6.equals((Object)jsonFactory2));
      assertFalse(jsonFactory6.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory6);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory6.createGenerator((File) mockFile0, jsonEncoding0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory5);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory5);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory6);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory6);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertNotSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory6);
      assertNotSame(jsonFactory6, jsonFactory1);
      assertSame(jsonFactory6, jsonFactory4);
      assertSame(jsonFactory6, jsonFactory5);
      assertNotSame(jsonFactory6, jsonFactory2);
      assertNotSame(jsonFactory6, jsonFactory0);
      assertSame(jsonFactory6, jsonFactory3);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(">", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(">/ZPh='r-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("ZPh='r-", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertTrue(jsonFactory6.canParseAsync());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory6));
      assertFalse(jsonFactory1.equals((Object)jsonFactory5));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory6));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory5));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory2));
      assertFalse(jsonFactory6.equals((Object)jsonFactory1));
      assertFalse(jsonFactory6.equals((Object)jsonFactory2));
      assertFalse(jsonFactory6.equals((Object)jsonFactory0));
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(">", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(">/ZPh='r-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("ZPh='r-", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertTrue(jsonFactory6.canParseAsync());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory6));
      assertFalse(jsonFactory1.equals((Object)jsonFactory5));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory6));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory5));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory2));
      assertFalse(jsonFactory6.equals((Object)jsonFactory1));
      assertFalse(jsonFactory6.equals((Object)jsonFactory2));
      assertFalse(jsonFactory6.equals((Object)jsonFactory0));
      assertNotNull(jsonGeneratorDelegate0);
      
      SQLException sQLException0 = new SQLException(">/ZPh='r-");
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(">/ZPh='r-", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: >/ZPh='r-", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) bufferedOutputStream0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(enumSet0);
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(16385, class0.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.classOf(enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals("class java.util.RegularEnumSet", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(0, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(class1);
      
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean1);
      assertEquals(1, enumSet0.size());
      assertEquals("class java.util.RegularEnumSet", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(0, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(boolean1 == boolean0);
      assertTrue(enumSet0.contains(accessPattern0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile("$Mj-iq]'t", "{|LyLc?N");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("{|LyLc?N", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/$Mj-iq]'t/{|LyLc?N", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/$Mj-iq]'t", mockFile0.getParent());
      assertNotNull(bufferedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, bufferedOutputStream0, byteArray0, (byte) (-1), false);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-95), (byte)3, (byte)15}, byteArray0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("{|LyLc?N", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/$Mj-iq]'t/{|LyLc?N", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/$Mj-iq]'t", mockFile0.getParent());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-95), (byte)3, (byte)15}, byteArray0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("{|LyLc?N", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/$Mj-iq]'t/{|LyLc?N", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/$Mj-iq]'t", mockFile0.getParent());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals((-1), filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(4, byteArray0.length);
      assertNotNull(filteringGeneratorDelegate0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0, (int) (byte)15, (int) (byte) (-1));
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, (String) null);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(1, charArray0.length);
      assertNotNull(mismatchedInputException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) mockPrintStream0, (Exception) mismatchedInputException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING
         //  at [Source: (char[])\"H\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-16842752);
      intArray0[1] = (-16842752);
      intArray0[2] = (-16842752);
      intArray0[3] = (-16842752);
      intArray0[4] = (-16842752);
      intArray0[5] = (-16842752);
      intArray0[6] = (-16842752);
      intArray0[7] = (-16842752);
      intArray0[8] = (-16842752);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-m{`~'", intArray0);
      assertArrayEquals(new int[] {(-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752)}, intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("-m{`~'", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: -m{`~'", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(9, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Q", "yp|A6H.DohmIK G", (-16842752), batchUpdateException0);
      assertArrayEquals(new int[] {(-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752)}, intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("-m{`~'", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: -m{`~'", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals((-16842752), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("yp|A6H.DohmIK G", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Q", sQLTransactionRollbackException0.toString());
      assertEquals("Q", sQLTransactionRollbackException0.getMessage());
      assertEquals(9, intArray0.length);
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwIfError(sQLTransactionRollbackException0);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertArrayEquals(new int[] {(-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752), (-16842752)}, intArray0);
      assertEquals("yp|A6H.DohmIK G", sQLTransactionRollbackException1.getSQLState());
      assertEquals("Q", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Q", sQLTransactionRollbackException1.toString());
      assertEquals((-16842752), sQLTransactionRollbackException1.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("-m{`~'", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: -m{`~'", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals((-16842752), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("yp|A6H.DohmIK G", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: Q", sQLTransactionRollbackException0.toString());
      assertEquals("Q", sQLTransactionRollbackException0.getMessage());
      assertEquals(9, intArray0.length);
      assertNotNull(sQLTransactionRollbackException1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Byte> class1 = Byte.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("byte", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      serializationFeatureArray0[0] = serializationFeature1;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertEquals(3, serializationFeatureArray0.length);
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("com.fasterxml.jackson.databind.ser.std.SerializableSerializer");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory3);
      
      JsonFactory jsonFactory4 = jsonFactory3.setCodec(objectMapper1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory4);
      
      MockFile mockFile0 = new MockFile("hT37UcW/ifuh[5mP=c");
      assertNotNull(mockFile0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("ifuh[5mP=c", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("hT37UcW/ifuh[5mP=c", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("hT37UcW", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("ifuh[5mP=c", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("hT37UcW/ifuh[5mP=c", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("hT37UcW", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals("com.fasterxml.jackson.databind.ser.std.SerializableSerializer", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(jsonGeneratorDelegate0);
      
      SQLException sQLException0 = new SQLException("JSON");
      assertEquals("JSON", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: JSON", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      MockException mockException0 = new MockException(sQLException0);
      assertNotNull(mockException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      assertNotNull(mockFile0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertNotNull(jsonFactory3);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertNotNull(jsonFactory4);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertEquals(0, serializationFeatureArray0.length);
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerFor(class0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertEquals(0, serializationFeatureArray0.length);
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory5 = jsonFactory4.setCodec(objectReader0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory1);
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(0, serializationFeatureArray0.length);
      assertNotNull(jsonFactory5);
      
      MockFile mockFile1 = new MockFile("JSON");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory5.createGenerator((File) mockFile1, jsonEncoding0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals("JSON", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals("JSON", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(15, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0, serializationFeatureArray0.length);
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals("JSON", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals("JSON", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(15, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0, serializationFeatureArray0.length);
      assertNotNull(jsonGeneratorDelegate0);
      
      SQLException sQLException0 = new SQLException("JSON");
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: JSON", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("JSON", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "java.lang.Double", "java.lang.Double");
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertEquals("java.lang.Double", invalidTypeIdException0.getTypeId());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(invalidTypeIdException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(invalidTypeIdException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.Double' as a subtype of null: java.lang.Double
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-93);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)107, (byte) (-1), (byte) (-71), (byte) (-93)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.hibernate.proxy.com.fasterxml.jackson.databind.deser.CreatorProperty");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.deser.CreatorProperty", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.hibernate.proxy.com.fasterxml.jackson.databind.deser.CreatorProperty", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(mockRuntimeException0);
      
      MockFile mockFile0 = new MockFile((String) null, "net.sf.cglib.proxy.java.sql.ClientInfoStatus");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadOnly();
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("net.sf.cglib.proxy.java.sql.ClientInfoStatus", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("net.sf.cglib.proxy.java.sql.ClientInfoStatus", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      File file0 = MockFile.createTempFile("org.hibernate.proxy.java.lang.reflect.AccessibleObject", "net.sf.cglib.proxy.java.sql.ClientInfoStatus", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("net.sf.cglib.proxy.java.sql.ClientInfoStatus", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("net.sf.cglib.proxy.java.sql.ClientInfoStatus", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject0net.sf.cglib.proxy.java.sql.ClientInfoStatus", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/experiment/net.sf.cglib.proxy.java.sql.ClientInfoStatus", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/net.sf.cglib.proxy.java.sql.ClientInfoStatus/org.hibernate.proxy.java.lang.reflect.AccessibleObject0net.sf.cglib.proxy.java.sql.ClientInfoStatus", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format("a?H-#6w?g<W", objectArray0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("net.sf.cglib.proxy.java.sql.ClientInfoStatus", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("net.sf.cglib.proxy.java.sql.ClientInfoStatus", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject0net.sf.cglib.proxy.java.sql.ClientInfoStatus", file0.getName());
      assertTrue(file0.exists());
      assertEquals(11L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/experiment/net.sf.cglib.proxy.java.sql.ClientInfoStatus", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/net.sf.cglib.proxy.java.sql.ClientInfoStatus/org.hibernate.proxy.java.lang.reflect.AccessibleObject0net.sf.cglib.proxy.java.sql.ClientInfoStatus", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(2, objectArray0.length);
      assertNotNull(printStream0);
      
      mockRuntimeException0.printStackTrace(printStream0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.deser.CreatorProperty", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.hibernate.proxy.com.fasterxml.jackson.databind.deser.CreatorProperty", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("net.sf.cglib.proxy.java.sql.ClientInfoStatus", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("net.sf.cglib.proxy.java.sql.ClientInfoStatus", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject0net.sf.cglib.proxy.java.sql.ClientInfoStatus", file0.getName());
      assertTrue(file0.exists());
      assertEquals(151L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/experiment/net.sf.cglib.proxy.java.sql.ClientInfoStatus", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/net.sf.cglib.proxy.java.sql.ClientInfoStatus/org.hibernate.proxy.java.lang.reflect.AccessibleObject0net.sf.cglib.proxy.java.sql.ClientInfoStatus", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(2, objectArray0.length);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
      assertFalse(boolean1);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.deser.CreatorProperty", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.hibernate.proxy.com.fasterxml.jackson.databind.deser.CreatorProperty", sQLInvalidAuthorizationSpecException0.toString());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)83;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-2), (byte)83}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      MockError mockError0 = new MockError("; expected Class<PropertyNamingStrategy>");
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "; expected Class<PropertyNamingStrategy>");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "*)!SdlD\"F1B'^h90m#");
      assertEquals("*)!SdlD\"F1B'^h90m#", string0);
      assertNotNull(string0);
      
      Class<?> class0 = ClassUtil.classOf("*)!SdlD\"F1B'^h90m#");
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<Short> class1 = Short.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertEquals(7, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE(mockThrowable0);
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNotNull(throwable0);
      
      Throwable throwable1 = ClassUtil.getRootCause(mockThrowable0);
      assertSame(mockThrowable0, throwable1);
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable1, mockThrowable0);
      assertSame(throwable1, throwable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(throwable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable1.toString());
      assertNotNull(throwable1);
      
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      Class<ArrayType> class3 = ArrayType.class;
      Class<MapLikeType> class4 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class4);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertFalse(list0.contains(class0));
      assertNotNull(list0);
      
      Class<ArrayType> class5 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class5);
      assertSame(class5, class3);
      assertEquals(31, methodArray0.length);
      assertNotNull(methodArray0);
      
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class3, false);
      assertSame(class3, class5);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      Class<Boolean> class6 = Boolean.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes((Class<?>) null, class6, list0);
      assertSame(list1, list0);
      assertSame(class3, class5);
      assertSame(list0, list1);
      assertFalse(list1.isEmpty());
      assertEquals(6, list1.size());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertFalse(list1.contains(class0));
      assertFalse(list0.contains(class0));
      assertNotNull(list1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "uW={3>RW7w&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uW={3>RW7w&
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("JSON", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "JSON", (Throwable) null);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockIOException mockIOException0 = new MockIOException(":!$Y3EVsM,Y3NBLhv^b");
      assertNotNull(mockIOException0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertNotNull(javaType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertNotNull(referenceType0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNotNull(objectNode0);
      
      ReferenceType referenceType1 = referenceType0.withTypeHandler(objectNode0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasHandlers());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotNull(referenceType1);
      
      Class<Void> class0 = Void.class;
      String string0 = mockIOException0.getLocalizedMessage();
      assertEquals(":!$Y3EVsM,Y3NBLhv^b", string0);
      assertNotNull(string0);
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType1, (Class<?>) class0, true);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasHandlers());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isJavaLangObject());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotNull(list0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = ClassUtil.nonNullString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      boolean boolean2 = ClassUtil.isProxyType(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)13;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)13}, byteArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(2, byteArray0.length);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      String string1 = ClassUtil.getPackageName(class1);
      assertEquals("com.fasterxml.jackson.databind.type", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean4 = ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackson.databind.type");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String string2 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string2);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.type");
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.type", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("[]", (String) null, sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.type", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: []", sQLNonTransientException1.toString());
      assertEquals("[]", sQLNonTransientException1.getMessage());
      assertNull(sQLNonTransientException1.getSQLState());
      assertFalse(sQLNonTransientException1.equals((Object)sQLNonTransientException0));
      assertNotNull(sQLNonTransientException1);
      
      sQLNonTransientException0.setNextException(sQLNonTransientException1);
      assertNotSame(sQLNonTransientException0, sQLNonTransientException1);
      assertNotSame(sQLNonTransientException1, sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.type", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: []", sQLNonTransientException1.toString());
      assertEquals("[]", sQLNonTransientException1.getMessage());
      assertNull(sQLNonTransientException1.getSQLState());
      assertFalse(sQLNonTransientException0.equals((Object)sQLNonTransientException1));
      assertFalse(sQLNonTransientException1.equals((Object)sQLNonTransientException0));
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "com.fasterxml.jackson.databind.type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.reflect.AccessibleObject`", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("9 vuJ");
      assertEquals("9 vuJ", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: 9 vuJ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertNotNull(class1);
      
      Object object0 = ClassUtil.defaultValue(class1);
      assertEquals('\u0000', object0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertNotNull(object0);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.springframework.cglib", "org.springframework.cglib", (-401));
      assertEquals("org.springframework.cglib", sQLTransientException0.getSQLState());
      assertEquals((-401), sQLTransientException0.getErrorCode());
      assertEquals("org.springframework.cglib", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: org.springframework.cglib", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.springframework.cglib", "org.springframework.cglib", 16, hashMap0, sQLTransientException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("org.springframework.cglib", sQLTransientException0.getSQLState());
      assertEquals((-401), sQLTransientException0.getErrorCode());
      assertEquals("org.springframework.cglib", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: org.springframework.cglib", sQLTransientException0.toString());
      assertEquals("org.springframework.cglib", sQLClientInfoException0.getSQLState());
      assertEquals("org.springframework.cglib", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: org.springframework.cglib", sQLClientInfoException0.toString());
      assertEquals(16, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)sQLTransientException0.initCause(sQLClientInfoException0);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("org.springframework.cglib", sQLTransientException0.getSQLState());
      assertEquals((-401), sQLTransientException0.getErrorCode());
      assertEquals("org.springframework.cglib", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: org.springframework.cglib", sQLTransientException0.toString());
      assertEquals("org.springframework.cglib", sQLClientInfoException0.getSQLState());
      assertEquals("org.springframework.cglib", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: org.springframework.cglib", sQLClientInfoException0.toString());
      assertEquals(16, sQLClientInfoException0.getErrorCode());
      assertEquals("org.springframework.cglib", sQLTransientException1.getMessage());
      assertEquals("org.springframework.cglib", sQLTransientException1.getSQLState());
      assertEquals((-401), sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: org.springframework.cglib", sQLTransientException1.toString());
      assertNotNull(sQLTransientException1);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) sQLTransientException0, 16);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("org.springframework.cglib", sQLTransientException0.getSQLState());
      assertEquals((-401), sQLTransientException0.getErrorCode());
      assertEquals("org.springframework.cglib", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: org.springframework.cglib", sQLTransientException0.toString());
      assertEquals("org.springframework.cglib", sQLClientInfoException0.getSQLState());
      assertEquals("org.springframework.cglib", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: org.springframework.cglib", sQLClientInfoException0.toString());
      assertEquals(16, sQLClientInfoException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.prependPath((Object) sQLClientInfoException0, (-401));
      assertSame(sQLTransientException0, sQLTransientException1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("org.springframework.cglib", sQLTransientException0.getSQLState());
      assertEquals((-401), sQLTransientException0.getErrorCode());
      assertEquals("org.springframework.cglib", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: org.springframework.cglib", sQLTransientException0.toString());
      assertEquals("org.springframework.cglib", sQLClientInfoException0.getSQLState());
      assertEquals("org.springframework.cglib", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: org.springframework.cglib", sQLClientInfoException0.toString());
      assertEquals(16, sQLClientInfoException0.getErrorCode());
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "org.springframework.cglib");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(enumSet0);
      
      enumSet0.clear();
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(accessPattern0));
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertEquals(0, enumSet0.size());
      assertFalse(class0.isPrimitive());
      assertEquals(16385, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertFalse(class0.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isSynthetic());
      assertFalse(enumSet0.contains(accessPattern0));
      assertNotNull(class0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Float> class0 = Float.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(arrayType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(arrayType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotNull(referenceType1);
      
      ArrayType arrayType1 = arrayType0.withContentValueHandler(referenceType1);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(arrayType1, arrayType0);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.useStaticType());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotNull(arrayType1);
      
      ArrayType arrayType2 = arrayType1.withTypeHandler(referenceType1);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isInterface());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isCollectionLikeType());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isFinal());
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertNotNull(arrayType2);
      
      ArrayType arrayType3 = arrayType1.withStaticTyping();
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType3, arrayType1);
      assertNotSame(arrayType3, arrayType2);
      assertNotSame(arrayType3, arrayType0);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType3.isContainerType());
      assertFalse(arrayType3.isCollectionLikeType());
      assertTrue(arrayType3.hasContentType());
      assertTrue(arrayType3.hasHandlers());
      assertTrue(arrayType3.isConcrete());
      assertTrue(arrayType3.isFinal());
      assertFalse(arrayType3.isJavaLangObject());
      assertFalse(arrayType3.hasValueHandler());
      assertEquals(0, arrayType3.containedTypeCount());
      assertFalse(arrayType3.isAbstract());
      assertTrue(arrayType3.isArrayType());
      assertFalse(arrayType3.isPrimitive());
      assertFalse(arrayType3.isEnumType());
      assertFalse(arrayType3.isInterface());
      assertTrue(arrayType3.useStaticType());
      assertFalse(arrayType3.isMapLikeType());
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType2));
      assertTrue(arrayType3.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType1));
      assertNotNull(arrayType3);
      
      ArrayType arrayType4 = arrayType2.withValueHandler(referenceType0);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType4);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType4);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType3);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType2, arrayType4);
      assertNotSame(arrayType4, arrayType0);
      assertNotSame(arrayType4, arrayType1);
      assertNotSame(arrayType4, arrayType3);
      assertNotSame(arrayType4, arrayType2);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isInterface());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isCollectionLikeType());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isFinal());
      assertEquals(0, arrayType4.containedTypeCount());
      assertTrue(arrayType4.hasHandlers());
      assertFalse(arrayType4.isEnumType());
      assertTrue(arrayType4.hasValueHandler());
      assertFalse(arrayType4.isJavaLangObject());
      assertTrue(arrayType4.isArrayType());
      assertFalse(arrayType4.isAbstract());
      assertFalse(arrayType4.useStaticType());
      assertFalse(arrayType4.isInterface());
      assertTrue(arrayType4.isFinal());
      assertFalse(arrayType4.isPrimitive());
      assertFalse(arrayType4.isMapLikeType());
      assertFalse(arrayType4.isCollectionLikeType());
      assertTrue(arrayType4.isConcrete());
      assertTrue(arrayType4.hasContentType());
      assertTrue(arrayType4.isContainerType());
      assertTrue(arrayType0.equals((Object)arrayType3));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType3));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType3));
      assertTrue(arrayType4.equals((Object)arrayType1));
      assertTrue(arrayType4.equals((Object)arrayType2));
      assertTrue(arrayType4.equals((Object)arrayType0));
      assertTrue(arrayType4.equals((Object)arrayType3));
      assertNotNull(arrayType4);
      
      Class<?> class1 = ClassUtil.rawClass(arrayType4);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType4);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType4);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType3);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType2, arrayType4);
      assertNotSame(arrayType4, arrayType0);
      assertNotSame(arrayType4, arrayType1);
      assertNotSame(arrayType4, arrayType3);
      assertNotSame(arrayType4, arrayType2);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isInterface());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isCollectionLikeType());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isFinal());
      assertEquals(0, arrayType4.containedTypeCount());
      assertTrue(arrayType4.hasHandlers());
      assertFalse(arrayType4.isEnumType());
      assertTrue(arrayType4.hasValueHandler());
      assertFalse(arrayType4.isJavaLangObject());
      assertTrue(arrayType4.isArrayType());
      assertFalse(arrayType4.isAbstract());
      assertFalse(arrayType4.useStaticType());
      assertFalse(arrayType4.isInterface());
      assertTrue(arrayType4.isFinal());
      assertFalse(arrayType4.isPrimitive());
      assertFalse(arrayType4.isMapLikeType());
      assertFalse(arrayType4.isCollectionLikeType());
      assertTrue(arrayType4.isConcrete());
      assertTrue(arrayType4.hasContentType());
      assertTrue(arrayType4.isContainerType());
      assertFalse(class1.isPrimitive());
      assertEquals("class [Ljava.lang.Float;", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isInterface());
      assertTrue(arrayType0.equals((Object)arrayType4));
      assertTrue(arrayType0.equals((Object)arrayType3));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType3));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType1.equals((Object)arrayType4));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType4));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType3));
      assertTrue(arrayType4.equals((Object)arrayType1));
      assertTrue(arrayType4.equals((Object)arrayType2));
      assertTrue(arrayType4.equals((Object)arrayType0));
      assertTrue(arrayType4.equals((Object)arrayType3));
      assertNotNull(class1);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType4);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType4);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType3);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType2, arrayType4);
      assertNotSame(arrayType4, arrayType0);
      assertNotSame(arrayType4, arrayType1);
      assertNotSame(arrayType4, arrayType3);
      assertNotSame(arrayType4, arrayType2);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isInterface());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isCollectionLikeType());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isFinal());
      assertEquals(0, arrayType4.containedTypeCount());
      assertTrue(arrayType4.hasHandlers());
      assertFalse(arrayType4.isEnumType());
      assertTrue(arrayType4.hasValueHandler());
      assertFalse(arrayType4.isJavaLangObject());
      assertTrue(arrayType4.isArrayType());
      assertFalse(arrayType4.isAbstract());
      assertFalse(arrayType4.useStaticType());
      assertFalse(arrayType4.isInterface());
      assertTrue(arrayType4.isFinal());
      assertFalse(arrayType4.isPrimitive());
      assertFalse(arrayType4.isMapLikeType());
      assertFalse(arrayType4.isCollectionLikeType());
      assertTrue(arrayType4.isConcrete());
      assertTrue(arrayType4.hasContentType());
      assertTrue(arrayType4.isContainerType());
      assertFalse(class1.isPrimitive());
      assertEquals("class [Ljava.lang.Float;", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(arrayType0.equals((Object)arrayType4));
      assertTrue(arrayType0.equals((Object)arrayType3));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType3));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType1.equals((Object)arrayType4));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType4));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType3));
      assertTrue(arrayType4.equals((Object)arrayType1));
      assertTrue(arrayType4.equals((Object)arrayType2));
      assertTrue(arrayType4.equals((Object)arrayType0));
      assertTrue(arrayType4.equals((Object)arrayType3));
      assertFalse(list0.contains(class1));
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean0);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType4);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType4);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType3);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType2, arrayType4);
      assertNotSame(arrayType4, arrayType0);
      assertNotSame(arrayType4, arrayType1);
      assertNotSame(arrayType4, arrayType3);
      assertNotSame(arrayType4, arrayType2);
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isInterface());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isCollectionLikeType());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isFinal());
      assertEquals(0, arrayType4.containedTypeCount());
      assertTrue(arrayType4.hasHandlers());
      assertFalse(arrayType4.isEnumType());
      assertTrue(arrayType4.hasValueHandler());
      assertFalse(arrayType4.isJavaLangObject());
      assertTrue(arrayType4.isArrayType());
      assertFalse(arrayType4.isAbstract());
      assertFalse(arrayType4.useStaticType());
      assertFalse(arrayType4.isInterface());
      assertTrue(arrayType4.isFinal());
      assertFalse(arrayType4.isPrimitive());
      assertFalse(arrayType4.isMapLikeType());
      assertFalse(arrayType4.isCollectionLikeType());
      assertTrue(arrayType4.isConcrete());
      assertTrue(arrayType4.hasContentType());
      assertTrue(arrayType4.isContainerType());
      assertFalse(class1.isPrimitive());
      assertEquals("class [Ljava.lang.Float;", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isInterface());
      assertTrue(arrayType0.equals((Object)arrayType4));
      assertTrue(arrayType0.equals((Object)arrayType3));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType3));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType1.equals((Object)arrayType4));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType4));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType3));
      assertTrue(arrayType4.equals((Object)arrayType1));
      assertTrue(arrayType4.equals((Object)arrayType2));
      assertTrue(arrayType4.equals((Object)arrayType0));
      assertTrue(arrayType4.equals((Object)arrayType3));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class0, list0);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("byte", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      Class<Double> class1 = Double.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertNotNull(resolvedRecursiveType0);
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class0, true);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      ReferenceType referenceType0 = ClassUtil.nonNull((ReferenceType) null, (ReferenceType) null);
      assertNull(referenceType0);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      MockFile mockFile0 = new MockFile("!/$$%+");
      assertNotNull(mockFile0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotNull(objectMapper2);
      
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotNull(objectMapper3);
      
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[6];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      ObjectMapper objectMapper4 = objectMapper3.enable(serializationFeature0, serializationFeatureArray0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertEquals(6, serializationFeatureArray0.length);
      assertNotNull(objectMapper4);
      
      ObjectMapper objectMapper5 = objectMapper4.enable(serializationFeature0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper3);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertEquals(6, serializationFeatureArray0.length);
      assertNotNull(objectMapper5);
      
      try { 
        objectMapper5.writeValue((File) mockFile0, (Object) objectMapper4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<Float> class1 = Float.class;
      boolean boolean0 = ClassUtil.hasClass(float0, class1);
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<SimpleType> class2 = SimpleType.class;
      boolean boolean2 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators((ValueInstantiators) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertNotNull(resolvedRecursiveType0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      boolean boolean1 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Error> class2 = Error.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(enumSet0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(16385, class1.getModifiers());
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Class ", "-@J@7yB. W?}v6b");
      assertEquals("Class ", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: Class ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-@J@7yB. W?}v6b", "-@J@7yB. W?}v6b", (-4), sQLNonTransientException0);
      assertEquals("Class ", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: Class ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals((-4), sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      MockIOException mockIOException0 = new MockIOException(sQLRecoverableException0);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLRecoverableException: -@J@7yB. W?}v6b
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.empty();
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertNotNull(jsonSetter_Value0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertNotNull(objectMapper1);
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
      MapperFeature mapperFeature0 = MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.AUTO_DETECT_CREATORS;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.AUTO_DETECT_SETTERS;
      mapperFeatureArray0[6] = mapperFeature6;
      MapperFeature mapperFeature7 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[7] = mapperFeature7;
      ObjectMapper objectMapper2 = objectMapper1.disable(mapperFeatureArray0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertEquals(8, mapperFeatureArray0.length);
      assertNotNull(objectMapper2);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertEquals(8, mapperFeatureArray0.length);
      assertNotNull(objectMapper3);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectMapper objectMapper4 = objectMapper3.configure(deserializationFeature0, true);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertEquals(8, mapperFeatureArray0.length);
      assertNotNull(objectMapper4);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper4);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8, mapperFeatureArray0.length);
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      
      File file0 = MockFile.createTempFile("net.sf.cglib.proxy.java.lang.Float", "JSON");
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("net.sf.cglib.proxy.java.lang.Float0JSON", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/net.sf.cglib.proxy.java.lang.Float0JSON", file0.toString());
      assertNotNull(file0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator(file0, jsonEncoding0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("net.sf.cglib.proxy.java.lang.Float0JSON", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/net.sf.cglib.proxy.java.lang.Float0JSON", file0.toString());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("net.sf.cglib.proxy.java.lang.Float0JSON", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/net.sf.cglib.proxy.java.lang.Float0JSON", file0.toString());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonGeneratorDelegate0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) mapperFeature1, "org.hibernate.proxy.java.lang.Byte");
      assertNotSame(mapperFeature1, mapperFeature5);
      assertNotSame(mapperFeature1, mapperFeature6);
      assertNotSame(mapperFeature1, mapperFeature3);
      assertNotSame(mapperFeature1, mapperFeature4);
      assertNotSame(mapperFeature1, mapperFeature7);
      assertNotSame(mapperFeature1, mapperFeature2);
      assertNotSame(mapperFeature1, mapperFeature0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertFalse(mapperFeature1.equals((Object)mapperFeature5));
      assertFalse(mapperFeature1.equals((Object)mapperFeature6));
      assertFalse(mapperFeature1.equals((Object)mapperFeature3));
      assertFalse(mapperFeature1.equals((Object)mapperFeature4));
      assertFalse(mapperFeature1.equals((Object)mapperFeature7));
      assertFalse(mapperFeature1.equals((Object)mapperFeature2));
      assertFalse(mapperFeature1.equals((Object)mapperFeature0));
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTransactionRollbackException) (through reference chain: com.fasterxml.jackson.databind.MapperFeature[\"org.hibernate.proxy.java.lang.Byte\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "Cannot access ", 1828, hashMap0, (Throwable) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLClientInfoException0.toString());
      assertEquals(1828, sQLClientInfoException0.getErrorCode());
      assertEquals("Cannot access ", sQLClientInfoException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLClientInfoException0.toString());
      assertEquals(1828, sQLClientInfoException0.getErrorCode());
      assertEquals("Cannot access ", sQLClientInfoException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLClientInfoException0.getMessage());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap1, sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLClientInfoException0.toString());
      assertEquals(1828, sQLClientInfoException0.getErrorCode());
      assertEquals("Cannot access ", sQLClientInfoException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLClientInfoException0.getMessage());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLClientInfoException1.getMessage());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(objectMapper0);
      
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<Long> class2 = Long.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class2);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Double double0 = new Double((-288.587));
      assertEquals((-288.587), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = enumMap0.put(accessPattern0, double0);
      assertEquals(1, enumMap0.size());
      assertNull(double1);
      
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      Double double2 = new Double((-334.858084369));
      assertEquals((-334.858084369), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = enumMap0.put(accessPattern1, double2);
      assertEquals((-288.587), (double)double3, 0.01);
      assertSame(accessPattern1, accessPattern0);
      assertEquals(1, enumMap0.size());
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumMap0);
      assertEquals(1, enumMap0.size());
      assertFalse(class3.isArray());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class3.toString());
      assertEquals(16385, class3.getModifiers());
      assertNotNull(class3);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1868);
      intArray0[1] = (-1868);
      intArray0[2] = (-1868);
      intArray0[3] = (-2083);
      intArray0[4] = (-1868);
      intArray0[5] = (-1868);
      intArray0[6] = (-1868);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Sub-class %s (of class %s) must override method '%s'", "Sub-class %s (of class %s) must override method '%s'", (-1868), intArray0);
      assertArrayEquals(new int[] {(-1868), (-1868), (-1868), (-2083), (-1868), (-1868), (-1868)}, intArray0);
      assertEquals("java.sql.BatchUpdateException: Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.toString());
      assertEquals((-1868), batchUpdateException0.getErrorCode());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getMessage());
      assertEquals(7, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("hHLCgU-{c(QBKdoyxR@", "hHLCgU-{c(QBKdoyxR@", (-1868), batchUpdateException0);
      assertArrayEquals(new int[] {(-1868), (-1868), (-1868), (-2083), (-1868), (-1868), (-1868)}, intArray0);
      assertEquals("java.sql.BatchUpdateException: Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.toString());
      assertEquals((-1868), batchUpdateException0.getErrorCode());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getMessage());
      assertEquals("hHLCgU-{c(QBKdoyxR@", sQLDataException0.getMessage());
      assertEquals((-1868), sQLDataException0.getErrorCode());
      assertEquals("hHLCgU-{c(QBKdoyxR@", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: hHLCgU-{c(QBKdoyxR@", sQLDataException0.toString());
      assertEquals(7, intArray0.length);
      assertNotNull(sQLDataException0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, (Throwable) sQLDataException0);
      assertArrayEquals(new int[] {(-1868), (-1868), (-1868), (-2083), (-1868), (-1868), (-1868)}, intArray0);
      assertEquals("java.sql.BatchUpdateException: Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.toString());
      assertEquals((-1868), batchUpdateException0.getErrorCode());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getMessage());
      assertEquals("hHLCgU-{c(QBKdoyxR@", sQLDataException0.getMessage());
      assertEquals((-1868), sQLDataException0.getErrorCode());
      assertEquals("hHLCgU-{c(QBKdoyxR@", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: hHLCgU-{c(QBKdoyxR@", sQLDataException0.toString());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(7, intArray0.length);
      assertNotNull(jsonMappingException0);
      
      String string0 = ClassUtil.nullOrToString(jsonMappingException0);
      assertArrayEquals(new int[] {(-1868), (-1868), (-1868), (-2083), (-1868), (-1868), (-1868)}, intArray0);
      assertEquals("java.sql.BatchUpdateException: Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.toString());
      assertEquals((-1868), batchUpdateException0.getErrorCode());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getMessage());
      assertEquals("hHLCgU-{c(QBKdoyxR@", sQLDataException0.getMessage());
      assertEquals((-1868), sQLDataException0.getErrorCode());
      assertEquals("hHLCgU-{c(QBKdoyxR@", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: hHLCgU-{c(QBKdoyxR@", sQLDataException0.toString());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(7, intArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      String string0 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertEquals("``", string0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(string0);
      
      String string1 = ClassUtil.backticked("5t#C'Gcno5V[");
      assertEquals("`5t#C'Gcno5V[`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<NoClass> class0 = NoClass.class;
      String string2 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.annotation", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference");
      assertNotNull(mockRuntimeException0);
      
      Throwable[] throwableArray0 = mockRuntimeException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(9.223372E18F);
      assertEquals(9.223372E18F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = null;
      String string1 = ClassUtil.quotedOr(float0, (String) null);
      assertEquals("\"9.223372E18\"", string1);
      assertNotNull(string1);
      
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "\"9.223372E18\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      assertNotNull(string0);
      
      Iterator<MapType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      String string1 = ClassUtil.backticked("com.fasterxml.jackson.databind.type");
      assertEquals("`com.fasterxml.jackson.databind.type`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<MapType> class1 = MapType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      String string2 = ClassUtil.quotedOr("com.fasterxml.jackson.databind.type", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
      assertEquals("\"com.fasterxml.jackson.databind.type\"", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(28, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string3 = ClassUtil.quotedOr(class0, "`com.fasterxml.jackson.databind.type`");
      assertEquals("\"class com.fasterxml.jackson.databind.type.ReferenceType\"", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(objectMapper1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(uTF8JsonGenerator0);
      
      char[] charArray0 = iOContext0.allocTokenBuffer(8);
      assertSame(iOContext0, iOContext1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(4000, charArray0.length);
      assertNotNull(charArray0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      assertSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(1, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(uTF8JsonGenerator1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference", "\"class com.fasterxml.jackson.databind.type.ReferenceType\"", 56319);
      assertEquals(56319, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference", sQLFeatureNotSupportedException0.toString());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("\"class com.fasterxml.jackson.databind.type.ReferenceType\"", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) uTF8JsonGenerator1, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<ObjectNode> class0 = ObjectNode.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      assertNotNull(list0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("non-static member class");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: non-static member class", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("non-static member class", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.initCause(sQLSyntaxErrorException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: non-static member class", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("non-static member class", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: non-static member class", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("non-static member class", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException2);
      assertSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: non-static member class", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("non-static member class", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: non-static member class", sQLInvalidAuthorizationSpecException2.toString());
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("non-static member class", sQLInvalidAuthorizationSpecException2.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, (Map<String, JsonNode>) null);
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNotNull(objectNode0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertNotNull(resolvedRecursiveType0);
      
      Class<Object> class1 = Object.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class2, true);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class1);
      assertNull(class3);
      
      Class<MapType> class4 = MapType.class;
      Class<RuntimeException> class5 = RuntimeException.class;
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class4, class5, list0);
      assertSame(class0, class5);
      assertSame(list0, list2);
      assertSame(class5, class0);
      assertSame(list2, list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(7, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, false);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, (String) null);
      assertNotNull(jsonMappingException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("style", jsonMappingException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: style", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("style", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections.functors.InvokerTransformer", "Throwable needs a default contructor, a single-String-arg constructor; or explicit @JsonCreator", sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: style", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("style", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("org.apache.commons.collections.functors.InvokerTransformer", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections.functors.InvokerTransformer", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Throwable needs a default contructor, a single-String-arg constructor; or explicit @JsonCreator", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`2$;X-+>BpiH'8Q", " (from class ", 1858, hashMap0, (Throwable) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(" (from class ", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: `2$;X-+>BpiH'8Q", sQLClientInfoException0.toString());
      assertEquals("`2$;X-+>BpiH'8Q", sQLClientInfoException0.getMessage());
      assertEquals(1858, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(" (from class ", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: `2$;X-+>BpiH'8Q", sQLClientInfoException0.toString());
      assertEquals("`2$;X-+>BpiH'8Q", sQLClientInfoException0.getMessage());
      assertEquals(1858, sQLClientInfoException0.getErrorCode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(" (from class ", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: `2$;X-+>BpiH'8Q", sQLClientInfoException0.toString());
      assertEquals("`2$;X-+>BpiH'8Q", sQLClientInfoException0.getMessage());
      assertEquals(1858, sQLClientInfoException0.getErrorCode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertNotNull(jsonGeneratorDelegate0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(179L);
      assertEquals((byte) (-77), bigDecimal0.byteValue());
      assertEquals((short)179, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Class<Double> class1 = Double.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class1, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte) (-77), bigDecimal0.byteValue());
      assertEquals((short)179, bigDecimal0.shortValue());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Double` from number 179:  is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<AccessibleObject> class0 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertNotNull(javaType0);
      
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(3, javaTypeArray0.length);
      assertNotNull(collectionType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType0, collectionType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(3, javaTypeArray0.length);
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler("[null]");
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertEquals(3, javaTypeArray0.length);
      assertNotNull(referenceType1);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      JavaType[] javaTypeArray1 = referenceType0.findTypeParameters(class1);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertEquals(3, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      assertNotNull(javaTypeArray1);
      
      JavaType javaType1 = referenceType1.getContentType();
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(collectionType0, javaType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(javaType1, collectionType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isJavaLangObject());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.isInterface());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isFinal());
      assertTrue(javaType1.hasHandlers());
      assertTrue(javaType1.hasContentType());
      assertTrue(javaType1.isCollectionLikeType());
      assertTrue(javaType1.isContainerType());
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(javaType1.equals((Object)collectionType0));
      assertEquals(3, javaTypeArray0.length);
      assertNotNull(javaType1);
      
      Class<?> class2 = ClassUtil.rawClass(javaType1);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(collectionType0, javaType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(javaType1, collectionType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isJavaLangObject());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.isInterface());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isFinal());
      assertTrue(javaType1.hasHandlers());
      assertTrue(javaType1.hasContentType());
      assertTrue(javaType1.isCollectionLikeType());
      assertTrue(javaType1.isContainerType());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.reflect.AccessibleObject", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertTrue(collectionType0.equals((Object)javaType1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(javaType1.equals((Object)collectionType0));
      assertEquals(3, javaTypeArray0.length);
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getAnnotation(class1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNull(annotation0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertTrue(int1 == int0);
      
      int int2 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int2);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Cannot access ");
      assertEquals("java.sql.SQLFeatureNotSupportedException: Cannot access ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.ObjectMapper$3", sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Cannot access ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.ObjectMapper$3", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.ObjectMapper$3", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Cannot access ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.ObjectMapper$3", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.ObjectMapper$3", sQLTransactionRollbackException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0, "VL(N1U,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VL(N1U,
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot figure out type for EnumMap (odd JDK platform?)");
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(16385, class0.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(16385, class0.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertNull(class1);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class2);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumMap0);
      assertSame(class3, class0);
      assertEquals(0, enumMap0.size());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(16385, class3.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class3.toString());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isEnum());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.CreatorProperty");
      assertFalse(boolean0);
      
      String string0 = ClassUtil.backticked("com.fasterxml.jackson.databind.deser.CreatorProperty");
      assertEquals("`com.fasterxml.jackson.databind.deser.CreatorProperty`", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$1908795037", class0.toString());
      assertNotNull(class0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.deser.CreatorProperty");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.deser.CreatorProperty", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackson.databind.deser.CreatorProperty", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        sQLIntegrityConstraintViolationException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "~cns._Bim");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", 1240);
      assertEquals(1240, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", sQLTimeoutException0.getSQLState());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertEquals("enum", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      MockIOException mockIOException0 = new MockIOException("unknown", mockError0);
      assertNotNull(mockIOException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("BYu7B9JH=", "unknown", (-34), mockIOException0);
      assertEquals((-34), sQLTransientConnectionException0.getErrorCode());
      assertEquals("unknown", sQLTransientConnectionException0.getSQLState());
      assertEquals("BYu7B9JH=", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: BYu7B9JH=", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "org.hibernate.proxy.char");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      Class<ArrayType> class2 = ArrayType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertNotNull(resolvedRecursiveType0);
      
      Class<NoClass> class3 = NoClass.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class3, true);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      Class<Error> class4 = Error.class;
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(class4);
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isArray());
      assertFalse(class5.isInterface());
      assertEquals("class java.lang.Throwable", class5.toString());
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertNotNull(class5);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Short", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{A!Iz2 eR'F<`+a6NE", ",Io$1\"$@");
      assertEquals(",Io$1\"$@", sQLSyntaxErrorException0.getSQLState());
      assertEquals("{A!Iz2 eR'F<`+a6NE", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: {A!Iz2 eR'F<`+a6NE", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {A!Iz2 eR'F<`+a6NE
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.getSuperClass();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertNull(javaType0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) integer0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<ObjectNode> class0 = ObjectNode.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      String string0 = "co8}PIFG,";
      String string1 = mockError0.getMessage();
      assertNull(string1);
      
      StackTraceElement[] stackTraceElementArray0 = mockError0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      SQLWarning sQLWarning0 = new SQLWarning("co8}PIFG,", "co8}PIFG,", mockError0);
      assertEquals("java.sql.SQLWarning: co8}PIFG,", sQLWarning0.toString());
      assertEquals("co8}PIFG,", sQLWarning0.getMessage());
      assertEquals("co8}PIFG,", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      Throwable throwable0 = mockError0.initCause(sQLWarning0);
      assertEquals("java.sql.SQLWarning: co8}PIFG,", sQLWarning0.toString());
      assertEquals("co8}PIFG,", sQLWarning0.getMessage());
      assertEquals("co8}PIFG,", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNotNull(throwable0);
      
      boolean boolean2 = ClassUtil.hasClass(mockError0, class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(74, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<Error> class2 = Error.class;
      Method[] methodArray1 = ClassUtil.getClassMethods(class2);
      assertNotSame(methodArray1, methodArray0);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertEquals(0, methodArray1.length);
      assertNotNull(methodArray1);
      
      Class<ArrayType> class3 = ArrayType.class;
      String string2 = mockError0.getLocalizedMessage();
      assertNull(string2);
      
      Method[] methodArray2 = ClassUtil.getDeclaredMethods(class3);
      assertNotSame(methodArray2, methodArray1);
      assertNotSame(methodArray2, methodArray0);
      assertFalse(methodArray2.equals((Object)methodArray1));
      assertFalse(methodArray2.equals((Object)methodArray0));
      assertEquals(31, methodArray2.length);
      assertNotNull(methodArray2);
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwIfRTE(sQLWarning0);
      assertSame(sQLWarning1, sQLWarning0);
      assertSame(sQLWarning0, sQLWarning1);
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("co8}PIFG,", sQLWarning1.getMessage());
      assertEquals("co8}PIFG,", sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: co8}PIFG,", sQLWarning1.toString());
      assertEquals("java.sql.SQLWarning: co8}PIFG,", sQLWarning0.toString());
      assertEquals("co8}PIFG,", sQLWarning0.getMessage());
      assertEquals("co8}PIFG,", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning1);
      
      Class<?> class4 = ClassUtil.classOf(sQLWarning0);
      assertSame(sQLWarning0, sQLWarning1);
      assertEquals("class java.sql.SQLWarning", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isEnum());
      assertEquals("java.sql.SQLWarning: co8}PIFG,", sQLWarning0.toString());
      assertEquals("co8}PIFG,", sQLWarning0.getMessage());
      assertEquals("co8}PIFG,", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(class4);
      
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNull(class1);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Boolean");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertNotNull(placeholderForType0);
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, (Class<?>) null, "w39yDxO-@,I", placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("w39yDxO-@,I", virtualAnnotatedMember0.getName());
      assertNotNull(virtualAnnotatedMember0);
      
      Field field0 = virtualAnnotatedMember0.getAnnotated();
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("w39yDxO-@,I", virtualAnnotatedMember0.getName());
      assertNull(field0);
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertEquals(0, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      Member member0 = annotatedField0.getMember();
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotatedField0.getAnnotationCount());
      assertNull(member0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "array");
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertNotNull(resolvedRecursiveType0);
      
      Class<Object> class1 = Object.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class0, true);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      TypeBindings typeBindings1 = TypeBindings.create(class1, list1);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(typeBindings1);
      
      Class<SimpleType> class2 = SimpleType.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings1, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[6]);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(7, javaTypeArray0.length);
      assertNotNull(referenceType0);
      
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings1, (JavaType) referenceType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isPrimitive());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isAbstract());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isFinal());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(7, javaTypeArray0.length);
      assertNotNull(collectionType0);
      
      JavaType[] javaTypeArray1 = new JavaType[9];
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      
      javaTypeArray1[0] = (JavaType) collectionType0;
      javaTypeArray1[1] = (JavaType) collectionType0;
      javaTypeArray1[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray1[3] = (JavaType) collectionType0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(653);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertNotNull(placeholderForType0);
      
      // Undeclared exception!
      try { 
        placeholderForType0.refine(class1, typeBindings1, referenceType0, javaTypeArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      boolean boolean1 = ClassUtil.isBogusClass(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
      
      boolean boolean0 = ClassUtil.isBogusClass((Class<?>) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNull(class2);
      
      Class<MapLikeType> class3 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, class3);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(class1));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      Class<ArrayType> class2 = ArrayType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertNotNull(javaType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertNotNull(arrayType0);
      
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, javaType0, javaTypeArray0, javaType0, (JavaType) arrayType0);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withStaticTyping();
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.equals((Object)mapType0));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(mapType1);
      
      MapType mapType2 = mapType1.withKeyValueHandler(class0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(mapType2);
      
      MapType mapType3 = mapType2.withKeyType(mapType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType3.hasHandlers());
      assertTrue(mapType3.hasContentType());
      assertEquals(0, mapType3.containedTypeCount());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.isFinal());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.isConcrete());
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType3.equals((Object)mapType1));
      assertFalse(mapType3.equals((Object)mapType2));
      assertFalse(mapType3.equals((Object)mapType0));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(mapType3);
      
      MapType mapType4 = mapType3.withValueHandler(javaType0);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType4, mapType3);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType3.hasHandlers());
      assertTrue(mapType3.hasContentType());
      assertEquals(0, mapType3.containedTypeCount());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.isFinal());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType4.isArrayType());
      assertTrue(mapType4.hasContentType());
      assertTrue(mapType4.isFinal());
      assertTrue(mapType4.isConcrete());
      assertFalse(mapType4.isInterface());
      assertFalse(mapType4.isPrimitive());
      assertEquals(0, mapType4.containedTypeCount());
      assertFalse(mapType4.isEnumType());
      assertTrue(mapType4.hasValueHandler());
      assertTrue(mapType4.useStaticType());
      assertFalse(mapType4.isAbstract());
      assertTrue(mapType4.isContainerType());
      assertTrue(mapType4.hasHandlers());
      assertFalse(mapType4.isJavaLangObject());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType3));
      assertFalse(mapType3.equals((Object)mapType1));
      assertFalse(mapType3.equals((Object)mapType2));
      assertFalse(mapType3.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(mapType4.equals((Object)mapType2));
      assertFalse(mapType4.equals((Object)mapType1));
      assertFalse(mapType4.equals((Object)mapType0));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(mapType4);
      
      MapType mapType5 = mapType4.withTypeHandler((Object) null);
      assertNotSame(mapType0, mapType5);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType5);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType5);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType5);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType4, mapType5);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType5, mapType0);
      assertNotSame(mapType5, mapType4);
      assertNotSame(mapType5, mapType2);
      assertNotSame(mapType5, mapType1);
      assertNotSame(mapType5, mapType3);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType3.hasHandlers());
      assertTrue(mapType3.hasContentType());
      assertEquals(0, mapType3.containedTypeCount());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.isFinal());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType4.isArrayType());
      assertTrue(mapType4.hasContentType());
      assertTrue(mapType4.isFinal());
      assertTrue(mapType4.isConcrete());
      assertFalse(mapType4.isInterface());
      assertFalse(mapType4.isPrimitive());
      assertEquals(0, mapType4.containedTypeCount());
      assertFalse(mapType4.isEnumType());
      assertTrue(mapType4.hasValueHandler());
      assertTrue(mapType4.useStaticType());
      assertFalse(mapType4.isAbstract());
      assertTrue(mapType4.isContainerType());
      assertTrue(mapType4.hasHandlers());
      assertFalse(mapType4.isJavaLangObject());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType5.isCollectionLikeType());
      assertTrue(mapType5.hasContentType());
      assertTrue(mapType5.useStaticType());
      assertTrue(mapType5.isMapLikeType());
      assertFalse(mapType5.isPrimitive());
      assertFalse(mapType5.isInterface());
      assertFalse(mapType5.isEnumType());
      assertTrue(mapType5.isContainerType());
      assertTrue(mapType5.hasValueHandler());
      assertTrue(mapType5.hasHandlers());
      assertFalse(mapType5.isArrayType());
      assertEquals(0, mapType5.containedTypeCount());
      assertTrue(mapType5.isFinal());
      assertFalse(mapType5.isJavaLangObject());
      assertFalse(mapType5.isAbstract());
      assertTrue(mapType5.isConcrete());
      assertFalse(mapType0.equals((Object)mapType4));
      assertFalse(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType3));
      assertFalse(mapType1.equals((Object)mapType4));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType4));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType3));
      assertFalse(mapType3.equals((Object)mapType1));
      assertFalse(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType4));
      assertFalse(mapType3.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(mapType4.equals((Object)mapType2));
      assertFalse(mapType4.equals((Object)mapType1));
      assertFalse(mapType4.equals((Object)mapType0));
      assertFalse(mapType5.equals((Object)mapType0));
      assertTrue(mapType5.equals((Object)mapType4));
      assertTrue(mapType5.equals((Object)mapType3));
      assertFalse(mapType5.equals((Object)mapType2));
      assertFalse(mapType5.equals((Object)mapType1));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(mapType5);
      
      javaTypeArray0[0] = (JavaType) mapType5;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType5, mapType1);
      assertNotSame(mapType0, mapType5);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType5);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType5);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType5);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType4, mapType5);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType5, mapType0);
      assertNotSame(mapType5, mapType4);
      assertNotSame(mapType5, mapType2);
      assertNotSame(mapType5, mapType1);
      assertNotSame(mapType5, mapType3);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType3.hasHandlers());
      assertTrue(mapType3.hasContentType());
      assertEquals(0, mapType3.containedTypeCount());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.isFinal());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType4.isArrayType());
      assertTrue(mapType4.hasContentType());
      assertTrue(mapType4.isFinal());
      assertTrue(mapType4.isConcrete());
      assertFalse(mapType4.isInterface());
      assertFalse(mapType4.isPrimitive());
      assertEquals(0, mapType4.containedTypeCount());
      assertFalse(mapType4.isEnumType());
      assertTrue(mapType4.hasValueHandler());
      assertTrue(mapType4.useStaticType());
      assertFalse(mapType4.isAbstract());
      assertTrue(mapType4.isContainerType());
      assertTrue(mapType4.hasHandlers());
      assertFalse(mapType4.isJavaLangObject());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType5.isCollectionLikeType());
      assertTrue(mapType5.hasContentType());
      assertTrue(mapType5.useStaticType());
      assertTrue(mapType5.isMapLikeType());
      assertFalse(mapType5.isPrimitive());
      assertFalse(mapType5.isInterface());
      assertFalse(mapType5.isEnumType());
      assertTrue(mapType5.isContainerType());
      assertTrue(mapType5.hasValueHandler());
      assertTrue(mapType5.hasHandlers());
      assertFalse(mapType5.isArrayType());
      assertEquals(0, mapType5.containedTypeCount());
      assertTrue(mapType5.isFinal());
      assertFalse(mapType5.isJavaLangObject());
      assertFalse(mapType5.isAbstract());
      assertTrue(mapType5.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(mapType0.equals((Object)mapType5));
      assertFalse(mapType0.equals((Object)mapType4));
      assertFalse(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType3));
      assertFalse(mapType1.equals((Object)mapType5));
      assertFalse(mapType1.equals((Object)mapType4));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType5));
      assertTrue(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType4));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType3));
      assertFalse(mapType3.equals((Object)mapType1));
      assertFalse(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType4));
      assertTrue(mapType3.equals((Object)mapType5));
      assertFalse(mapType3.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(mapType4.equals((Object)mapType2));
      assertFalse(mapType4.equals((Object)mapType1));
      assertTrue(mapType4.equals((Object)mapType5));
      assertFalse(mapType4.equals((Object)mapType0));
      assertFalse(mapType5.equals((Object)mapType0));
      assertTrue(mapType5.equals((Object)mapType4));
      assertTrue(mapType5.equals((Object)mapType3));
      assertFalse(mapType5.equals((Object)mapType2));
      assertFalse(mapType5.equals((Object)mapType1));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(class2);
      assertNotSame(mapType0, mapType5);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType5);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType5);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType5);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType4, mapType5);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType5, mapType0);
      assertNotSame(mapType5, mapType4);
      assertNotSame(mapType5, mapType2);
      assertNotSame(mapType5, mapType1);
      assertNotSame(mapType5, mapType3);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType3.hasHandlers());
      assertTrue(mapType3.hasContentType());
      assertEquals(0, mapType3.containedTypeCount());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.isFinal());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType4.isArrayType());
      assertTrue(mapType4.hasContentType());
      assertTrue(mapType4.isFinal());
      assertTrue(mapType4.isConcrete());
      assertFalse(mapType4.isInterface());
      assertFalse(mapType4.isPrimitive());
      assertEquals(0, mapType4.containedTypeCount());
      assertFalse(mapType4.isEnumType());
      assertTrue(mapType4.hasValueHandler());
      assertTrue(mapType4.useStaticType());
      assertFalse(mapType4.isAbstract());
      assertTrue(mapType4.isContainerType());
      assertTrue(mapType4.hasHandlers());
      assertFalse(mapType4.isJavaLangObject());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType5.isCollectionLikeType());
      assertTrue(mapType5.hasContentType());
      assertTrue(mapType5.useStaticType());
      assertTrue(mapType5.isMapLikeType());
      assertFalse(mapType5.isPrimitive());
      assertFalse(mapType5.isInterface());
      assertFalse(mapType5.isEnumType());
      assertTrue(mapType5.isContainerType());
      assertTrue(mapType5.hasValueHandler());
      assertTrue(mapType5.hasHandlers());
      assertFalse(mapType5.isArrayType());
      assertEquals(0, mapType5.containedTypeCount());
      assertTrue(mapType5.isFinal());
      assertFalse(mapType5.isJavaLangObject());
      assertFalse(mapType5.isAbstract());
      assertTrue(mapType5.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType1.isReferenceType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertTrue(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(mapType0.equals((Object)mapType5));
      assertFalse(mapType0.equals((Object)mapType4));
      assertFalse(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType3));
      assertFalse(mapType1.equals((Object)mapType5));
      assertFalse(mapType1.equals((Object)mapType4));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType5));
      assertTrue(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType4));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType3));
      assertFalse(mapType3.equals((Object)mapType1));
      assertFalse(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType4));
      assertTrue(mapType3.equals((Object)mapType5));
      assertFalse(mapType3.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(mapType4.equals((Object)mapType2));
      assertFalse(mapType4.equals((Object)mapType1));
      assertTrue(mapType4.equals((Object)mapType5));
      assertFalse(mapType4.equals((Object)mapType0));
      assertFalse(mapType5.equals((Object)mapType0));
      assertTrue(mapType5.equals((Object)mapType4));
      assertTrue(mapType5.equals((Object)mapType3));
      assertFalse(mapType5.equals((Object)mapType2));
      assertFalse(mapType5.equals((Object)mapType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(referenceType1);
      
      ReferenceType referenceType2 = (ReferenceType)referenceType1.withStaticTyping();
      assertNotSame(mapType0, mapType5);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType5);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType5);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType5);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType4, mapType5);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType5, mapType0);
      assertNotSame(mapType5, mapType4);
      assertNotSame(mapType5, mapType2);
      assertNotSame(mapType5, mapType1);
      assertNotSame(mapType5, mapType3);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertSame(referenceType2, referenceType1);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType3.hasHandlers());
      assertTrue(mapType3.hasContentType());
      assertEquals(0, mapType3.containedTypeCount());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.isFinal());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType4.isArrayType());
      assertTrue(mapType4.hasContentType());
      assertTrue(mapType4.isFinal());
      assertTrue(mapType4.isConcrete());
      assertFalse(mapType4.isInterface());
      assertFalse(mapType4.isPrimitive());
      assertEquals(0, mapType4.containedTypeCount());
      assertFalse(mapType4.isEnumType());
      assertTrue(mapType4.hasValueHandler());
      assertTrue(mapType4.useStaticType());
      assertFalse(mapType4.isAbstract());
      assertTrue(mapType4.isContainerType());
      assertTrue(mapType4.hasHandlers());
      assertFalse(mapType4.isJavaLangObject());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType5.isCollectionLikeType());
      assertTrue(mapType5.hasContentType());
      assertTrue(mapType5.useStaticType());
      assertTrue(mapType5.isMapLikeType());
      assertFalse(mapType5.isPrimitive());
      assertFalse(mapType5.isInterface());
      assertFalse(mapType5.isEnumType());
      assertTrue(mapType5.isContainerType());
      assertTrue(mapType5.hasValueHandler());
      assertTrue(mapType5.hasHandlers());
      assertFalse(mapType5.isArrayType());
      assertEquals(0, mapType5.containedTypeCount());
      assertTrue(mapType5.isFinal());
      assertFalse(mapType5.isJavaLangObject());
      assertFalse(mapType5.isAbstract());
      assertTrue(mapType5.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType1.isReferenceType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertTrue(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isMapLikeType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.useStaticType());
      assertFalse(mapType0.equals((Object)mapType5));
      assertFalse(mapType0.equals((Object)mapType4));
      assertFalse(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType3));
      assertFalse(mapType1.equals((Object)mapType5));
      assertFalse(mapType1.equals((Object)mapType4));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType5));
      assertTrue(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType4));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType3));
      assertFalse(mapType3.equals((Object)mapType1));
      assertFalse(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType4));
      assertTrue(mapType3.equals((Object)mapType5));
      assertFalse(mapType3.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(mapType4.equals((Object)mapType2));
      assertFalse(mapType4.equals((Object)mapType1));
      assertTrue(mapType4.equals((Object)mapType5));
      assertFalse(mapType4.equals((Object)mapType0));
      assertFalse(mapType5.equals((Object)mapType0));
      assertTrue(mapType5.equals((Object)mapType4));
      assertTrue(mapType5.equals((Object)mapType3));
      assertFalse(mapType5.equals((Object)mapType2));
      assertFalse(mapType5.equals((Object)mapType1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(referenceType2);
      
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withContentValueHandler(referenceType0);
      assertNotSame(mapType0, mapType5);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType5);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType5);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType5);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType4, mapType5);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType5, mapType0);
      assertNotSame(mapType5, mapType4);
      assertNotSame(mapType5, mapType2);
      assertNotSame(mapType5, mapType1);
      assertNotSame(mapType5, mapType3);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType3);
      assertSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertSame(referenceType2, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType2);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType3.hasHandlers());
      assertTrue(mapType3.hasContentType());
      assertEquals(0, mapType3.containedTypeCount());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.isFinal());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType4.isArrayType());
      assertTrue(mapType4.hasContentType());
      assertTrue(mapType4.isFinal());
      assertTrue(mapType4.isConcrete());
      assertFalse(mapType4.isInterface());
      assertFalse(mapType4.isPrimitive());
      assertEquals(0, mapType4.containedTypeCount());
      assertFalse(mapType4.isEnumType());
      assertTrue(mapType4.hasValueHandler());
      assertTrue(mapType4.useStaticType());
      assertFalse(mapType4.isAbstract());
      assertTrue(mapType4.isContainerType());
      assertTrue(mapType4.hasHandlers());
      assertFalse(mapType4.isJavaLangObject());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType5.isCollectionLikeType());
      assertTrue(mapType5.hasContentType());
      assertTrue(mapType5.useStaticType());
      assertTrue(mapType5.isMapLikeType());
      assertFalse(mapType5.isPrimitive());
      assertFalse(mapType5.isInterface());
      assertFalse(mapType5.isEnumType());
      assertTrue(mapType5.isContainerType());
      assertTrue(mapType5.hasValueHandler());
      assertTrue(mapType5.hasHandlers());
      assertFalse(mapType5.isArrayType());
      assertEquals(0, mapType5.containedTypeCount());
      assertTrue(mapType5.isFinal());
      assertFalse(mapType5.isJavaLangObject());
      assertFalse(mapType5.isAbstract());
      assertTrue(mapType5.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType1.isReferenceType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertTrue(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isMapLikeType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.useStaticType());
      assertTrue(referenceType3.isConcrete());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.isArrayType());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isEnumType());
      assertTrue(referenceType3.hasValueHandler());
      assertTrue(referenceType3.useStaticType());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType3.isAnchorType());
      assertTrue(referenceType3.hasContentType());
      assertFalse(referenceType3.isJavaLangObject());
      assertTrue(referenceType3.hasHandlers());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isAbstract());
      assertTrue(referenceType3.isFinal());
      assertFalse(mapType0.equals((Object)mapType5));
      assertFalse(mapType0.equals((Object)mapType4));
      assertFalse(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType3));
      assertFalse(mapType1.equals((Object)mapType5));
      assertFalse(mapType1.equals((Object)mapType4));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType5));
      assertTrue(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType4));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType3));
      assertFalse(mapType3.equals((Object)mapType1));
      assertFalse(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType4));
      assertTrue(mapType3.equals((Object)mapType5));
      assertFalse(mapType3.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(mapType4.equals((Object)mapType2));
      assertFalse(mapType4.equals((Object)mapType1));
      assertTrue(mapType4.equals((Object)mapType5));
      assertFalse(mapType4.equals((Object)mapType0));
      assertFalse(mapType5.equals((Object)mapType0));
      assertTrue(mapType5.equals((Object)mapType4));
      assertTrue(mapType5.equals((Object)mapType3));
      assertFalse(mapType5.equals((Object)mapType2));
      assertFalse(mapType5.equals((Object)mapType1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(referenceType3);
      
      javaTypeArray0[1] = (JavaType) referenceType3;
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      assertSame(typeBindings1, typeBindings0);
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(typeBindings1);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType1 = resolvedRecursiveType0.getSuperClass();
      assertSame(typeBindings1, typeBindings0);
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(2, javaTypeArray0.length);
      assertNull(javaType1);
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType1, (Class<?>) class1, false);
      assertSame(typeBindings0, typeBindings1);
      assertNotSame(mapType0, mapType5);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType5);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType5);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType5);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType4, mapType5);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType5, mapType0);
      assertNotSame(mapType5, mapType4);
      assertNotSame(mapType5, mapType2);
      assertNotSame(mapType5, mapType1);
      assertNotSame(mapType5, mapType3);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType3);
      assertSame(referenceType1, referenceType2);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType3.hasHandlers());
      assertTrue(mapType3.hasContentType());
      assertEquals(0, mapType3.containedTypeCount());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.isFinal());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType4.isArrayType());
      assertTrue(mapType4.hasContentType());
      assertTrue(mapType4.isFinal());
      assertTrue(mapType4.isConcrete());
      assertFalse(mapType4.isInterface());
      assertFalse(mapType4.isPrimitive());
      assertEquals(0, mapType4.containedTypeCount());
      assertFalse(mapType4.isEnumType());
      assertTrue(mapType4.hasValueHandler());
      assertTrue(mapType4.useStaticType());
      assertFalse(mapType4.isAbstract());
      assertTrue(mapType4.isContainerType());
      assertTrue(mapType4.hasHandlers());
      assertFalse(mapType4.isJavaLangObject());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType5.isCollectionLikeType());
      assertTrue(mapType5.hasContentType());
      assertTrue(mapType5.useStaticType());
      assertTrue(mapType5.isMapLikeType());
      assertFalse(mapType5.isPrimitive());
      assertFalse(mapType5.isInterface());
      assertFalse(mapType5.isEnumType());
      assertTrue(mapType5.isContainerType());
      assertTrue(mapType5.hasValueHandler());
      assertTrue(mapType5.hasHandlers());
      assertFalse(mapType5.isArrayType());
      assertEquals(0, mapType5.containedTypeCount());
      assertTrue(mapType5.isFinal());
      assertFalse(mapType5.isJavaLangObject());
      assertFalse(mapType5.isAbstract());
      assertTrue(mapType5.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType1.isReferenceType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertTrue(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(mapType0.equals((Object)mapType5));
      assertFalse(mapType0.equals((Object)mapType4));
      assertFalse(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType3));
      assertFalse(mapType1.equals((Object)mapType5));
      assertFalse(mapType1.equals((Object)mapType4));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType5));
      assertTrue(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType4));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType3));
      assertFalse(mapType3.equals((Object)mapType1));
      assertFalse(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType4));
      assertTrue(mapType3.equals((Object)mapType5));
      assertFalse(mapType3.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(mapType4.equals((Object)mapType2));
      assertFalse(mapType4.equals((Object)mapType1));
      assertTrue(mapType4.equals((Object)mapType5));
      assertFalse(mapType4.equals((Object)mapType0));
      assertFalse(mapType5.equals((Object)mapType0));
      assertTrue(mapType5.equals((Object)mapType4));
      assertTrue(mapType5.equals((Object)mapType3));
      assertFalse(mapType5.equals((Object)mapType2));
      assertFalse(mapType5.equals((Object)mapType1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType3));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType3));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(list0);
      
      Class<Float> class3 = Float.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertEquals("class java.lang.Number", class4.toString());
      assertEquals(1025, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertNotNull(class4);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertNotNull(class0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      
      Class<Integer> class1 = Integer.TYPE;
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertNotNull(class1);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = ClassUtil.nonNull(accessPattern0, accessPattern0);
      assertEquals(AccessPattern.CONSTANT, accessPattern1);
      assertSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      
      Class<Integer> class2 = Integer.TYPE;
      assertEquals("int", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<Object> class3 = Object.class;
      Object object0 = ClassUtil.createInstance(class3, true);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Constructor<PlaceholderForType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Integer integer0 = new Integer((-1763));
      assertEquals((-1763), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ClassUtil.nullOrToString(integer0);
      assertNotNull(string0);
      
      Class<?> class2 = ClassUtil.classOf("java.lang.Integer@0000000001");
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.String", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "java.lang.Integer@0000000001");
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(jsonMappingException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      Throwable throwable0 = jsonMappingException0.initCause(sQLTimeoutException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(throwable0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Integer@0000000001
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)86;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)45, (byte)52, (byte)3, (byte)86}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, byteArray0.length);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectMapper0, charArrayWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, false, false);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(filteringGeneratorDelegate0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "can only convert 1-character Strings");
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertEquals(36, charArrayWriter1.size());
      assertEquals("can only convert 1-character Strings", charArrayWriter1.toString());
      assertEquals(36, charArrayWriter0.size());
      assertEquals("can only convert 1-character Strings", charArrayWriter0.toString());
      assertNotNull(charArrayWriter1);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("can only convert 1-character Strings", "can only convert 1-character Strings");
      assertEquals("java.sql.SQLNonTransientException: can only convert 1-character Strings", sQLNonTransientException0.toString());
      assertEquals("can only convert 1-character Strings", sQLNonTransientException0.getSQLState());
      assertEquals("can only convert 1-character Strings", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) charArrayWriter0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: can only convert 1-character Strings
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7^dr$,k$Edc}r,_^0");
      assertFalse(boolean0);
      
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Class<Integer> class1 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      Class<NoClass> class4 = NoClass.class;
      Class<?> class5 = ClassUtil.getEnclosingClass(class4);
      assertNull(class5);
      
      Class<RuntimeException> class6 = RuntimeException.class;
      Class<?> class7 = ClassUtil.getDeclaringClass(class6);
      assertNull(class7);
      
      Class<Short> class8 = Short.class;
      Class<?> class9 = ClassUtil.primitiveType(class8);
      assertTrue(class9.isPrimitive());
      assertFalse(class9.isArray());
      assertFalse(class9.isEnum());
      assertFalse(class9.isSynthetic());
      assertEquals("short", class9.toString());
      assertFalse(class9.isInterface());
      assertEquals(1041, class9.getModifiers());
      assertFalse(class9.isAnnotation());
      assertNotNull(class9);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      String string0 = "')Tt IE<&0I'6r";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      assertNotNull(propertyNamingStrategy_UpperCamelCaseStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_UpperCamelCaseStrategy0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.forType(class1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader1, byteArrayBuilder0);
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(uTF8JsonGenerator0);
      
      try { 
        uTF8JsonGenerator0.writeFieldName("')Tt IE<&0I'6r");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7^dr$,k$Edc}r,_^0");
      assertFalse(boolean0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertSame(annotationArray1, annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Class<Double> class1 = Double.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class0);
      assertNull(class2);
      
      Class<MapType> class3 = MapType.class;
      Class<?> class4 = ClassUtil.getEnclosingClass(class3);
      assertNull(class4);
      
      Class<?> class5 = ClassUtil.getDeclaringClass(class0);
      assertNull(class5);
      
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "array");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<ObjectNode> class1 = ObjectNode.class;
      Class<Long> class2 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, true);
      assertSame(class2, class0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertNotNull(resolvedRecursiveType0);
      
      Class<Object> class3 = Object.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class3, false);
      assertSame(class2, class0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Short> class1 = Short.class;
      Class<Integer> class2 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Number", class3.toString());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertNotNull(resolvedRecursiveType0);
      
      ResolvedRecursiveType resolvedRecursiveType1 = ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertTrue(resolvedRecursiveType1.isFinal());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertNotNull(resolvedRecursiveType1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertNotNull(class0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertNull(class1);
      
      Class<?> class2 = ClassUtil.rawClass((JavaType) null);
      assertNull(class2);
      
      Class<Object> class3 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean0);
      
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = false;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      System.setCurrentTimeMillis((-1441L));
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLDataException sQLDataException1 = (SQLDataException)sQLDataException0.fillInStackTrace();
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNotNull(sQLDataException1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLDataException sQLDataException2 = (SQLDataException)sQLDataException0.initCause(sQLTransactionRollbackException0);
      assertSame(sQLDataException0, sQLDataException2);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException2, sQLDataException0);
      assertSame(sQLDataException2, sQLDataException1);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException2.toString());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertNull(sQLDataException2.getSQLState());
      assertNull(sQLDataException2.getMessage());
      assertNotNull(sQLDataException2);
      
      SQLDataException sQLDataException3 = new SQLDataException((String) null, (String) null, sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException3.getMessage());
      assertEquals(0, sQLDataException3.getErrorCode());
      assertNull(sQLDataException3.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException3.toString());
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertNotNull(sQLDataException3);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("!9]&");
      assertNull(sQLDataException0.getSQLState());
      assertEquals("!9]&", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: !9]&", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLDataException0.getStackTrace();
      assertNull(sQLDataException0.getSQLState());
      assertEquals("!9]&", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: !9]&", sQLDataException0.toString());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      
      int int0 = (-1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<Boolean> class0 = Boolean.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      
      String string0 = "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("F TFKA`IjHA~M;b", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNull(class1);
      
      Class<?> class2 = ClassUtil.rawClass((JavaType) null);
      assertNull(class2);
      
      Class<Object> class3 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean0);
      
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      Class<ArrayType> class4 = ArrayType.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("kUyuy&", "EYm>dy}w}TNxfo/dr");
      assertEquals("EYm>dy}w}TNxfo/dr", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: kUyuy&", sQLTimeoutException0.toString());
      assertEquals("kUyuy&", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertEquals("EYm>dy}w}TNxfo/dr", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: kUyuy&", sQLTimeoutException0.toString());
      assertEquals("kUyuy&", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
      
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertNotNull(class0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<String> class1 = String.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class1);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.quotedOr(classUtil0, "'$h$ak1'1");
      assertNotNull(string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      Class<?> class3 = ClassUtil.rawClass((JavaType) null);
      assertNull(class3);
      
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Boolean> class4 = Boolean.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class4);
      assertEquals(16, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<MapType> class5 = MapType.class;
      String string1 = ClassUtil.nameOf(class5);
      assertEquals("`com.fasterxml.jackson.databind.type.MapType`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0, object0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.quotedOr(classUtil0, "'$h$ak1'1");
      assertNotNull(string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      Class<?> class3 = ClassUtil.rawClass((JavaType) null);
      assertNull(class3);
      
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "array");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.getSuperClass();
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertNull(javaType0);
      
      Class<Object> class1 = Object.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNull(type0);
      
      ClassUtil.backticked("eJ?|)~'I,J.:p`F2hzO");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) double0, "array");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d.F<Q6-o-If");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.getSuperClass();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertNull(javaType0);
      
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) null, class0, true);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals(0, fieldArray0.length);
      assertNotNull(fieldArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`char`", string0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(string0);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      String string0 = ClassUtil.canBeABeanType(class1);
      assertEquals("primitive", string0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotatedType0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Float float0 = new Float(714.153F);
      assertEquals(714.153F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil_Ctor0, true);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      boolean boolean0 = ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      assertTrue(boolean0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Short short0 = new Short((short)1809);
      assertEquals((short)1809, (short)short0);
      assertNotNull(short0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      SQLDataException sQLDataException0 = new SQLDataException("ZERO_LENGTH_ENUM_ARRAY");
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SQLException sQLException0 = new SQLException("ZERO_LENGTH_ENUM_ARRAY", sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ZERO_LENGTH_ENUM_ARRAY", sQLException0.toString());
      assertNotNull(sQLException0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZERO_LENGTH_ENUM_ARRAY");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.printf("-rgPzrLZvZ ", (Object[]) methodArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(29, methodArray0.length);
      assertNotNull(printWriter0);
      
      sQLException0.printStackTrace(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ZERO_LENGTH_ENUM_ARRAY", sQLException0.toString());
      assertEquals(29, methodArray0.length);
      
      Spliterator<Throwable> spliterator0 = sQLException0.spliterator();
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ZERO_LENGTH_ENUM_ARRAY", sQLException0.toString());
      assertNotNull(spliterator0);
      
      SQLException sQLException1 = (SQLException)ClassUtil.throwIfRTE(sQLException0);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ZERO_LENGTH_ENUM_ARRAY", sQLException0.toString());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLException1.getMessage());
      assertNull(sQLException1.getSQLState());
      assertEquals("java.sql.SQLException: ZERO_LENGTH_ENUM_ARRAY", sQLException1.toString());
      assertNotNull(sQLException1);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Exception", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class1, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Double> class1 = Double.class;
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      
      MockError mockError0 = new MockError((String) null);
      assertNotNull(mockError0);
      
      Throwable[] throwableArray0 = mockError0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      Throwable[] throwableArray1 = mockError0.getSuppressed();
      assertSame(throwableArray1, throwableArray0);
      assertEquals(0, throwableArray1.length);
      assertNotNull(throwableArray1);
      
      Throwable[] throwableArray2 = mockError0.getSuppressed();
      assertSame(throwableArray2, throwableArray1);
      assertSame(throwableArray2, throwableArray0);
      assertEquals(0, throwableArray2.length);
      assertNotNull(throwableArray2);
      
      Throwable throwable0 = ClassUtil.getRootCause(mockError0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertNotNull(throwable0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Number", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1025, class2.getModifiers());
      assertNotNull(class2);
      
      System.setCurrentTimeMillis((-2147483648L));
      String string1 = ClassUtil.nullOrToString((Object) null);
      assertNull(string1);
      
      String string2 = ClassUtil.nameOf(class0);
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Constructor<Byte> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      Class<NoClass> class1 = NoClass.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Float float0 = new Float((double) 3);
      assertEquals(3.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, (-605166913), false);
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)110, (byte) (-69), (byte) (-69), (byte) (-69)}, byteArray0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-605166913), uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)110, (byte) (-69), (byte) (-69), (byte) (-69)}, byteArray0);
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals((-605166913), uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(130, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator1.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(130, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-605166913), uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Us<|#MDUoD", "jl`(V`Cy", (Throwable) null);
      assertEquals("jl`(V`Cy", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Us<|#MDUoD", sQLSyntaxErrorException0.toString());
      assertEquals("Us<|#MDUoD", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: Us<|#MDUoD
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      try { 
        typeFactory0.constructFromCanonical("%SD?K'1sV`E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type '%SD?K'1sV`E' (remaining: ''): Cannot locate class '%SD?K'1sV`E', problem: %SD?K'1sV`E
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      Class<Double> class3 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class3, class2, true);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class4 = ClassUtil.getOuterClass(class2);
      assertNull(class4);
      
      Class<?> class5 = ClassUtil.rawClass((JavaType) null);
      assertNull(class5);
      
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Boolean> class6 = Boolean.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class6);
      assertEquals(16, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<CollectionType> class7 = CollectionType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class7);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Object> class8 = Object.class;
      Class<Object> class9 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class9, true);
      assertSame(class9, class8);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class8, false);
      assertNotSame(constructor1, constructor0);
      assertSame(class8, class9);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(constructor1);
      
      String string0 = constructor1.getName();
      assertEquals("java.lang.Object", string0);
      assertNotSame(constructor1, constructor0);
      assertSame(class8, class9);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotSame(constructor1, constructor0);
      assertSame(annotationArray1, annotationArray0);
      assertSame(class8, class9);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotSame(constructor1, constructor0);
      assertSame(annotationArray2, annotationArray1);
      assertSame(annotationArray2, annotationArray0);
      assertSame(class8, class9);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, annotationArray2.length);
      assertNotNull(annotationArray2);
      
      Class<?> class10 = classUtil_Ctor0.getDeclaringClass();
      assertNotSame(constructor1, constructor0);
      assertSame(class8, class9);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(class10.isPrimitive());
      assertFalse(class10.isAnnotation());
      assertEquals("class java.lang.Object", class10.toString());
      assertFalse(class10.isEnum());
      assertEquals(1, class10.getModifiers());
      assertFalse(class10.isInterface());
      assertFalse(class10.isArray());
      assertFalse(class10.isSynthetic());
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(class10);
      
      Class<JsonMappingException> class11 = JsonMappingException.class;
      Class<?> class12 = ClassUtil.getDeclaringClass(class11);
      assertNull(class12);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Class<Annotation> class1 = Annotation.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Integer> class2 = Integer.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<Character> class3 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class3, class2, true);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Short short0 = new Short((short)563);
      assertEquals((short)563, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-7489));
      assertEquals((short) (-7489), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)563);
      assertEquals((short)563, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = ClassUtil.nonNull(short2, short1);
      assertEquals((short)563, (short)short3);
      assertFalse(short1.equals((Object)short2));
      assertFalse(short1.equals((Object)short0));
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)563;
      intArray0[1] = (int) (short)563;
      intArray0[2] = (int) (short) (-7489);
      intArray0[3] = (int) (short)563;
      intArray0[4] = (int) (short)563;
      intArray0[5] = (int) (short) (-7489);
      intArray0[6] = (int) (short) (-7489);
      intArray0[7] = (int) (short) (-7489);
      intArray0[8] = (int) (short) (-7489);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Z\"&<zCAT&~&D0\" r", "Z\"&<zCAT&~&D0\" r", 47);
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", sQLTransientException0.toString());
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException0.getSQLState());
      assertEquals(47, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientException0);
      assertArrayEquals(new int[] {563, 563, (-7489), 563, 563, (-7489), (-7489), (-7489), (-7489)}, intArray0);
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", sQLTransientException0.toString());
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException0.getSQLState());
      assertEquals(47, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(9, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)sQLTransientException0.initCause(batchUpdateException0);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertArrayEquals(new int[] {563, 563, (-7489), 563, 563, (-7489), (-7489), (-7489), (-7489)}, intArray0);
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", sQLTransientException0.toString());
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException0.getSQLState());
      assertEquals(47, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException1.getSQLState());
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", sQLTransientException1.toString());
      assertEquals(47, sQLTransientException1.getErrorCode());
      assertEquals(9, intArray0.length);
      assertNotNull(sQLTransientException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      assertArrayEquals(new int[] {563, 563, (-7489), 563, 563, (-7489), (-7489), (-7489), (-7489)}, intArray0);
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", sQLTransientException0.toString());
      assertEquals("Z\"&<zCAT&~&D0\" r", sQLTransientException0.getSQLState());
      assertEquals(47, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.BatchUpdateException: java.sql.SQLTransientException: Z\"&<zCAT&~&D0\" r", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(9, intArray0.length);
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(annotatedType0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Float float0 = new Float((float) 1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      boolean boolean0 = ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      assertTrue(boolean0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<String> class3 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class3, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Short short0 = new Short((short) (-7489));
      assertEquals((short) (-7489), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-3325));
      assertEquals((short) (-3325), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = ClassUtil.nonNull(short0, short2);
      assertEquals((short) (-7489), (short)short3);
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("!9]&");
      assertEquals("!9]&", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: !9]&", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, true);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<Annotation> class2 = Annotation.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Annotation> class0 = Annotation.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(4, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<Object> class3 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class3, class3, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Short short0 = new Short((short) (-7489));
      assertEquals((short) (-7489), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = ClassUtil.nonNull(short0, short1);
      assertEquals((short) (-7489), (short)short2);
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|}ngUL)y", (String) null, (short) (-7489));
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: |}ngUL)y", sQLTimeoutException0.toString());
      assertEquals("|}ngUL)y", sQLTimeoutException0.getMessage());
      assertEquals((-7489), sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2245;
      intArray0[1] = (-172);
      intArray0[2] = (int) (short) (-7489);
      intArray0[3] = (int) (short)0;
      intArray0[4] = 2245;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (-3);
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("|}ngUL)y", "Cannot figure out type for EnumMap (odd JDK platform?)", 2245, intArray0, sQLTimeoutException0);
      assertArrayEquals(new int[] {2245, (-172), (-7489), 0, 2245, 0, (-3), 0, 0}, intArray0);
      assertEquals("|}ngUL)y", batchUpdateException0.getMessage());
      assertEquals("Cannot figure out type for EnumMap (odd JDK platform?)", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: |}ngUL)y", batchUpdateException0.toString());
      assertEquals(2245, batchUpdateException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: |}ngUL)y", sQLTimeoutException0.toString());
      assertEquals("|}ngUL)y", sQLTimeoutException0.getMessage());
      assertEquals((-7489), sQLTimeoutException0.getErrorCode());
      assertEquals(9, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      sQLTimeoutException0.setNextException(batchUpdateException0);
      assertArrayEquals(new int[] {2245, (-172), (-7489), 0, 2245, 0, (-3), 0, 0}, intArray0);
      assertEquals("|}ngUL)y", batchUpdateException0.getMessage());
      assertEquals("Cannot figure out type for EnumMap (odd JDK platform?)", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: |}ngUL)y", batchUpdateException0.toString());
      assertEquals(2245, batchUpdateException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: |}ngUL)y", sQLTimeoutException0.toString());
      assertEquals("|}ngUL)y", sQLTimeoutException0.getMessage());
      assertEquals((-7489), sQLTimeoutException0.getErrorCode());
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation[] annotationArray1 = constructor0.getAnnotationsByType(class3);
      assertSame(class3, class2);
      assertNotSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Class<Object> class4 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class4, true);
      assertSame(class4, class1);
      assertNotSame(constructor1, constructor0);
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(constructor1);
      
      Annotation[][] annotationArray2 = constructor0.getParameterAnnotations();
      assertSame(class1, class4);
      assertNotSame(constructor0, constructor1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertTrue(constructor0.equals((Object)constructor1));
      assertEquals(0, annotationArray2.length);
      assertNotNull(annotationArray2);
      
      int int0 = constructor1.getParameterCount();
      assertEquals(0, int0);
      assertSame(class4, class1);
      assertNotSame(constructor1, constructor0);
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertTrue(constructor1.equals((Object)constructor0));
      
      Constructor<?> constructor2 = classUtil_Ctor0.getConstructor();
      assertSame(class1, class4);
      assertNotSame(constructor0, constructor1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor2.getModifiers());
      assertTrue(constructor2.isAccessible());
      assertFalse(constructor2.isSynthetic());
      assertEquals("public java.lang.Object()", constructor2.toString());
      assertFalse(constructor2.isVarArgs());
      assertTrue(constructor0.equals((Object)constructor1));
      assertNotNull(constructor2);
      
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      assertSame(class1, class4);
      assertNotSame(constructor0, constructor1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertTrue(constructor0.equals((Object)constructor1));
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      int int0 = constructor0.getParameterCount();
      assertEquals(0, int0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
      
      ClassUtil.checkAndFixAccess((Member) constructor1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      
      String string0 = ClassUtil.getClassDescription(class1);
      assertEquals("`java.lang.Object`", string0);
      assertNotNull(string0);
      
      Class<Long> class2 = Long.class;
      boolean boolean2 = ClassUtil.isProxyType(class2);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertEquals(7, fieldArray0.length);
      assertNotNull(fieldArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Float float0 = new Float((float) 1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      boolean boolean0 = ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      assertTrue(boolean0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(", problem: ");
      assertEquals(", problem: ", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: , problem: ", sQLSyntaxErrorException1.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLSyntaxErrorException0.printStackTrace();
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException1.getStackTrace();
      assertNotSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // , problem: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<Annotation> class2 = Annotation.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Double> class1 = Double.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean0);
      
      Class<Boolean> class2 = Boolean.TYPE;
      assertFalse(class2.isEnum());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("boolean", class2.toString());
      assertTrue(class2.isPrimitive());
      assertNotNull(class2);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, false);
      assertFalse(class2.isEnum());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("boolean", class2.toString());
      assertTrue(class2.isPrimitive());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Annotation> class3 = Annotation.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<String> class1 = String.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertEquals(77, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<?> class2 = ClassUtil.getDeclaringClass(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNull(class2);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.java.io.IOException");
      assertNotNull(mockRuntimeException0);
      
      String string0 = ClassUtil.nullOrToString(mockRuntimeException0);
      assertNotNull(string0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-32768), false, false, (-32768), (-32768));
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "net.sf.cglib.proxy.java.lang.annotation.Annotation");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Class<Void> class1 = Void.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNull(class3);
      
      Class<Object> class4 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class4, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      Annotation[][] annotationArray0 = constructor0.getParameterAnnotations();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<?>[] classArray0 = constructor0.getParameterTypes();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "keyType");
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = ClassUtil.backticked("primitive");
      assertEquals("`primitive`", string0);
      assertNotNull(string0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Double> class2 = Double.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertEquals("double", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      System.setCurrentTimeMillis(0L);
      Class<String> class4 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertNotSame(class1, class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      assertNotSame(class1, class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(list0);
      
      Class<Annotation> class3 = Annotation.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertNotNull(constructor1);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isEnum());
      assertFalse(class3.isPrimitive());
      assertEquals(16401, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.sql.ClientInfoStatus", class3.toString());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<ArrayType> class1 = ArrayType.class;
      String string1 = ClassUtil.getPackageName(class1);
      assertEquals("com.fasterxml.jackson.databind.type", string1);
      assertNotNull(string1);
      
      Short short0 = new Short((short) (-5536));
      assertEquals((short) (-5536), (short)short0);
      assertNotNull(short0);
      
      Character character0 = new Character('~');
      assertEquals('~', (char)character0);
      assertNotNull(character0);
      
      String string2 = ClassUtil.nullOrToString(character0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      String string3 = ClassUtil.getPackageName(class2);
      assertEquals("com.fasterxml.jackson.databind.util", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      String string4 = ClassUtil.getClassDescription(byte0);
      assertEquals("`java.lang.Byte`", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = ClassUtil.getPackageName(class2);
      assertEquals("com.fasterxml.jackson.databind.util", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class3);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<?> class4 = ClassUtil.primitiveType(class2);
      assertNull(class4);
      
      System.setCurrentTimeMillis((short) (-5536));
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, true);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Character> class1 = Character.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertEquals(94, methodArray0.length);
      assertNotNull(methodArray0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      String string1 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Short> class1 = Short.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getPackageName(class2);
      Short short0 = new Short((short) (-414));
      String string0 = ClassUtil.nullOrToString(short0);
      assertNotNull(string0);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getPackageName(class3);
      String string1 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string1);
      
      Class<SimpleType> class4 = SimpleType.class;
      String string2 = ClassUtil.getPackageName(class4);
      assertNotNull(string2);
      
      Class<Character> class5 = Character.class;
      ClassUtil.getGenericInterfaces(class5);
      Class<MapLikeType> class6 = MapLikeType.class;
      Class<?> class7 = ClassUtil.primitiveType(class6);
      assertNull(class7);
      
      System.setCurrentTimeMillis((short) (-414));
      Class<CollectionType> class8 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class8, class5, false);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Throwable throwable0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ClassUtil.quotedOr((Object) null, "*)!SdlD\"F1B'^h90m#");
      Class<?> class0 = ClassUtil.classOf("*)!SdlD\"F1B'^h90m#");
      Class<Short> class1 = Short.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.throwIfIOE(sQLTransientException0);
      ClassUtil.getDeclaringClass(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(482, 482);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, arrayType0, "x@<`Ol*nR(0");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.type.ArrayType (of class java.lang.Short) must override method 'x@<`Ol*nR(0'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.isJacksonStdImpl((Object) double0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(double0, class0);
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      assertSame(jsonMappingException0, throwable0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      Class<Object> class1 = Object.class;
      ClassUtil.canBeABeanType(class1);
      Class<Error> class2 = Error.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class2);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findEnumType(class1);
      try { 
        Float.valueOf("net.sf.cglib.proxy.java.lang.Long");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Double> class0 = Double.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      constructor0.getParameterCount();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      assertTrue(constructor1.isAccessible());
      
      String string0 = ClassUtil.getClassDescription("`!B");
      assertEquals("`java.lang.String`", string0);
      
      boolean boolean1 = ClassUtil.isProxyType(class2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "`!B", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      jsonFactory0.createNonBlockingByteArrayParser();
      jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-8), true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.rawClass((JavaType) null);
      Class<ObjectNode> class2 = ObjectNode.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.getDeclaredMethods(class0);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findClassAnnotations(class3);
      Class<Object> class4 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.findConstructor(class4, true);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      Class<ResolvedRecursiveType> class5 = ResolvedRecursiveType.class;
      Class<?> class6 = ClassUtil.getDeclaringClass(class5);
      assertNull(class6);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Character");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "java.lang.Character", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "net.sf.cglib.proxy.java.lang.Character");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      TypeFactory.defaultInstance();
      Class<Boolean> class0 = Boolean.class;
      Class<Double> class1 = Double.class;
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.isJacksonStdImpl((Object) double0);
      Class<Float> class0 = Float.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isLocalType(class0, false);
      Class<Character> class1 = Character.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.nullOrToString((Object) null);
      DataTruncation dataTruncation0 = new DataTruncation((-32768), false, false, (-32768), (-32768));
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0, "unknown");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, false);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(", problem: ");
      sQLSyntaxErrorException0.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "EYm>dy}w}TNxfo/dr";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("keyType", "EYm>dy}w}TNxfo/dr");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("2G}?)dw\"ke", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findConstructor(class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Character> class0 = Character.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.emptyIterator();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<Annotation> class1 = Annotation.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      AnnotatedWithParams annotatedWithParams0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class0 = NoClass.class;
      TypeBindings.emptyBindings();
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[5];
      String string0 = "T8Tnq";
      try { 
        typeFactory0.constructFromCanonical("T8Tnq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type 'T8Tnq' (remaining: ''): Cannot locate class 'T8Tnq', problem: T8Tnq
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findConstructor(class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findEnumType(class1);
      Class<String> class2 = String.class;
      ClassUtil.hasClass(class1, class2);
      ClassUtil.classOf(class1);
      Class<Short> class3 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.quotedOr((Object) null, "*)!SdlD\"F1B'^h90m#");
      ClassUtil.classOf("*)!SdlD\"F1B'^h90m#");
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      String string0 = ClassUtil.quotedOr(class0, "km1V`XsW*)F:ZZ2D03z");
      assertEquals("\"interface java.lang.annotation.Annotation\"", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.quotedOr((Object) null, "*)!SdlD\"F1B'^h90m#");
      ClassUtil.classOf("*)!SdlD\"F1B'^h90m#");
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.nullOrToString(classUtil_Ctor0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "entrySet", (-459));
      String string0 = "java.lang.Character";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "java.lang.Character");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Character
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockException mockException0 = new MockException();
      mockException0.toString();
      mockException0.getCause();
      mockException0.toString();
      mockException0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "!9]&";
      SQLDataException sQLDataException0 = new SQLDataException("!9]&");
      sQLDataException0.getSuppressed();
      sQLDataException0.getStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Class<Integer> class0 = Integer.class;
      sQLDataException0.fillInStackTrace();
      ClassUtil.getDeclaringClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: !9]&
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Integer> class0 = Integer.class;
      ClassUtil.getPackageName(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isBogusClass(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class3, class2, true);
      Class<Object> class4 = Object.class;
      ClassUtil.getOuterClass(class4);
      ClassUtil.rawClass((JavaType) null);
      Class<Annotation> class5 = Annotation.class;
      ClassUtil.hasEnclosingMethod(class5);
      ClassUtil.getDeclaredMethods(class4);
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class6);
      Class<Object> class7 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class7, false);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<?> class8 = ClassUtil.getDeclaringClass(class0);
      assertNull(class8);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLTransientException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLTransientException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLTransientException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1428);
      intArray0[1] = (-3909);
      intArray0[2] = 0;
      intArray0[3] = (-1596);
      intArray0[4] = 240;
      intArray0[5] = 51;
      intArray0[6] = 0;
      intArray0[7] = 1128;
      intArray0[8] = (-2179);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("time", "3c$5i#vd-}", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0, "vals");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vals
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      String string0 = "entrySet";
      ClassUtil.nonNullString("entrySet");
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Character> class0 = Character.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.emptyIterator();
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isLocalType(class0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Short> class1 = Short.class;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("6LL3t<B", (String) null, 46, (Map<String, ClientInfoStatus>) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, sQLClientInfoException1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class1, (Throwable) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      Class<Double> class0 = Double.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nonNullString("vals");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'a';
      charArray0[2] = ':';
      charArray0[3] = 'z';
      charArray0[4] = '*';
      charArray0[5] = 'K';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 2, 156, true);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(156, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "j.&yWdlJ#{");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // j.&yWdlJ#{
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isProxyType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class1);
      String string0 = "com.fasterxml.jackson.databind.util.ClassUtil";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.util.ClassUtil", "com.fasterxml.jackson.databind.util.ClassUtil");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "com.fasterxml.jackson.databind.util.ClassUtil");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.backticked("FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS");
      Class<Character> class1 = Character.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.classNameOf("FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS");
      int[] intArray0 = new int[3];
      intArray0[0] = 2142;
      intArray0[1] = (-2158);
      intArray0[2] = 0;
      String string0 = "]w{";
      SQLWarning sQLWarning0 = new SQLWarning("]w{", "`java.lang.String`", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("elementType", intArray0, sQLWarning0);
      batchUpdateException0.spliterator();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      String string1 = " kPxF";
      StackTraceElement stackTraceElement0 = new StackTraceElement(" kPxF", "FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS", "`FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`", 3);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS", "elementType", " kPxF", 2142);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = null;
      try {
        stackTraceElement2 = new StackTraceElement((String) null, "Class ", "com.fasterxml.jackson.databind.util.RootNameLookup", (-3287));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertFalse(boolean1 == boolean0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      constructor0.getParameterCount();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Character> class1 = Character.class;
      ClassUtil.getClassMethods(class1);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class3, false);
      constructor1.getParameterCount();
      assertFalse(constructor1.isAccessible());
      
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      assertTrue(constructor0.isAccessible());
      
      String string1 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string1);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor1.isAccessible());
      assertNotNull(constructor1);
      
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      constructor0.getParameterCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      ClassUtil.classNameOf(class0);
      ClassUtil.isConcrete(class0);
      Class<Boolean> class3 = Boolean.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getExceptionTypes();
      constructor0.isAnnotationPresent(class1);
      constructor0.getDeclaredAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      constructor0.getDeclaredAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getPackageName(class0);
      Class<IOException> class1 = IOException.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class1, false);
      Class<Character> class2 = Character.class;
      ClassUtil.getClassMethods(class2);
      String string0 = null;
      int int0 = (-1258);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("unknown", (String) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLTransientConnectionException0);
      try { 
        MockURI.URI("com.fasterxml.jackson.databind.type", (String) null, "com.fasterxml.jackson.databind.type");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme-specific part at index 36: com.fasterxml.jackson.databind.type:#com.fasterxml.jackson.databind.type
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getArrayBuilders();
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer", class0, "com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from String \"com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer\": com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NON_FINAL");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NON_FINAL", "NON_FINAL", sQLTransientConnectionException0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        sQLTransientConnectionException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findConstructor(class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<String> class3 = String.class;
      ClassUtil.hasClass(class1, class3);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class4, class2, false);
      Class<AccessPattern> class5 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getConstructors(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[4];
      accessibleObjectArray0[0] = (AccessibleObject) null;
      accessibleObjectArray0[1] = (AccessibleObject) null;
      accessibleObjectArray0[2] = (AccessibleObject) null;
      accessibleObjectArray0[3] = (AccessibleObject) null;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.nameOf(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("size", "`java.lang.Byte`", 33);
      sQLNonTransientConnectionException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      String string0 = "/.rh.' 8KSr!}\"K?b";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "/.rh.' 8KSr!}\"K?b");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.CollectionType) must override method '/.rh.' 8KSr!}\"K?b'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString((String) null);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findConstructor(class2, false);
      Class<Long> class3 = Long.class;
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, "", (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.lang.Long) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isJacksonStdImpl(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 96;
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("serialVersionUID", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeBindings typeBindings0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      JavaType javaType1 = typeFactory0.constructReferenceType(class0, collectionLikeType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      Class<MapLikeType> class1 = MapLikeType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      javaTypeArray0[1] = (JavaType) arrayType1;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = (JavaType) collectionLikeType0;
      javaTypeArray0[4] = (JavaType) collectionLikeType0;
      JavaType[] javaTypeArray1 = new JavaType[8];
      javaTypeArray1[0] = (JavaType) arrayType0;
      javaTypeArray1[1] = (JavaType) arrayType0;
      javaTypeArray1[2] = javaType1;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      MapType mapType0 = MapType.construct((Class<?>) class1, (TypeBindings) null, javaTypeArray0[2], javaTypeArray0, (JavaType) placeholderForType0, javaTypeArray1[2]);
      // Undeclared exception!
      try { 
        mapType0.withKeyValueHandler(javaTypeArray0[3]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }
}
