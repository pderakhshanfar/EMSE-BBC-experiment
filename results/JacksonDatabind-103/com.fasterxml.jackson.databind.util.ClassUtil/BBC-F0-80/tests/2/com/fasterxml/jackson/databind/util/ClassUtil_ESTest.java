/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:25:56 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.format.InputAccessor;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.TemporalField;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.nonNullString("");
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      ClassUtil.wrapperType(class2);
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockError mockError0 = new MockError("3qk`*rgo");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, ">Dp*rq:bDg=PFsZ4|");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.isConcrete(class0);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperClasses(class0, class0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.findClassAnnotations(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, mockFileReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "I%>#]");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: I%>#]
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oztdq4 `XL");
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(class1);
      ArrayType arrayType2 = arrayType1.withContentValueHandler((Object) null);
      SimpleType simpleType1 = simpleType0.withValueHandler(arrayType2);
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature1, false);
      jsonFactory4.setCodec(objectMapper0);
      jsonFactory3.createGenerator((DataOutput) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("; failed to set access: ", "JSON");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, objectMapper0, (OutputStream) null, byteArray0, 23, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: ; failed to set access: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<TemporalField> class0 = TemporalField.class;
      ClassUtil.isProxyType(class0);
      DataTruncation dataTruncation0 = new DataTruncation(5544, false, false, (-6225), 0);
      SQLWarning sQLWarning0 = new SQLWarning("[one of: '", dataTruncation0);
      dataTruncation0.initCause(sQLWarning0);
      sQLWarning0.fillInStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[one of: '", sQLWarning0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "5gk~CO#yl)lp0");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "JSON");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      jsonFactory0.copy();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(56320, class0, "WK");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` from number 56320: WK
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      PriorityQueue<Void> priorityQueue0 = new PriorityQueue<Void>();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, true);
      System.setCurrentTimeMillis(1000000000L);
      ClassUtil.isObjectOrPrimitive(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<TemporalField> class0 = TemporalField.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G~=Hyt>xG##2R");
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.wrapperType(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", problem: ", ", problem: ", 2463);
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      enumSet0.retainAll(treeSet0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getPackageName(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getGenericSuperclass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      System.setCurrentTimeMillis((-3941L));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "n";
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("n", class0, "n");
      SQLWarning sQLWarning0 = new SQLWarning(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLWarning0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from String \"n\": n
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getOuterClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qt");
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(56);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "qt", (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Object` from String \"qt\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{7sM", (int[]) null, (Throwable) null);
      MockException mockException0 = new MockException(batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("{7sM", mockException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: {7sM
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Method method0 = null;
      Class<RuntimeException> class0 = RuntimeException.class;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=v*s", (String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", 96, sQLNonTransientException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("m=q^'@Kw*>qf,k", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      ClassUtil.verifyMustOverride(class1, placeholderForType0, "gcAT8IfCYqH(P~");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.setLocale((Locale) null);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException("CwAq34ma!{x1cF!oQL[", (Throwable) null);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CwAq34ma!{x1cF!oQL[
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "virtual");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.quotedOr((Object) null, "virtual");
      Class<Integer> class0 = Integer.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      String string0 = "net.sf.cglib.proxy.java.lang.Void";
      String string1 = "vPS6s)4<XY(F#\"4~";
      MockIOException mockIOException0 = new MockIOException((String) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, list0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.util.LinkedList (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("xs+$4T", "p(;My>$O[K`H^y!=[", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.emptyIterator();
      ClassUtil.findSuperTypes(class0, class0, list0);
      ClassUtil.findSuperClasses(class0, class0, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("x!A", "Class %s not subtype of %s", hashMap0, (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLClientInfoException0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.", throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x!A
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Double double0 = new Double(0.0);
      enumMap0.put(accessPattern0, double0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 738;
      Integer integer0 = new Integer(738);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.findSuperClasses(class0, class0, false);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<Double> class1 = Double.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      NoClass noClass1 = ClassUtil.nonNull(noClass0, noClass0);
      CollectionType collectionType1 = collectionType0.withValueHandler(noClass1);
      CollectionType collectionType2 = collectionType1.withContentValueHandler((Object) null);
      ClassUtil.isJacksonStdImpl((Object) collectionType2);
      ClassUtil.findSuperTypes((JavaType) collectionType1, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.nonNullString("Cannot figure out type for EnumSet (odd JDK platform?)");
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[8];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "net.sf.cglib.proxy.java.lang.Float");
      jsonMappingException0.fillInStackTrace();
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.Float
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.hibernate.proxy.java.lang.Float", "org.hibernate.proxy.java.lang.Float");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      sQLTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.initCause(sQLTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "org.hibernate.proxy.java.lang.Float");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Long> class0 = Long.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      objectMapper0.readerFor(class1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.quotedOr(class0, "tM!P(e+MmD~=O@Q");
      Class<String> class1 = String.class;
      ClassUtil.hasClass("\"class java.io.IOException\"", class1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockError mockError0 = new MockError("): only regular white space (\r, \n, \t) is allowed between tokens");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.deser.DataFormatReaders", hashMap0, mockError0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "com.fasterxml.jackson.databind.deser.DataFormatReaders");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.lang.Long", "}T`qAtW#~xZ", 12);
      Double double0 = new Double(1.0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) double0, (-1270));
      SQLWarning sQLWarning0 = new SQLWarning("Cannot figure out type for EnumMap (odd JDK platform?)", jsonMappingException0);
      MockError mockError0 = new MockError("Cannot figure out type for EnumMap (odd JDK platform?)", sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", (Throwable) sQLDataException0);
      sQLDataException0.initCause(jsonMappingException0);
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class1);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.java.lang.Byte", "org.hibernate.proxy.java.lang.Byte", 8);
      Throwable throwable0 = ClassUtil.getRootCause(sQLWarning0);
      SQLWarning sQLWarning1 = new SQLWarning(throwable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.java.lang.Byte
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("}Afp_#.+eu! LG!?s", mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "}Afp_#.+eu! LG!?s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isBogusClass(class0);
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      SQLException sQLException0 = new SQLException("`LL$7%`1+-g68$<6G", mockRuntimeException0);
      MockException mockException0 = new MockException("|XU=.Q", sQLException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", "|XU=.Q", mockException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JQ^>ps\"", "`LL$7%`1+-g68$<6G", sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "JQ^>ps\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonGenerator_Feature0, false);
      MockFile mockFile0 = new MockFile("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("org.hibernate.proxy.com.fasterxml.jackson.databind.Module");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "JSON", objectArray0);
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((OutputStream) printStream0);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hxq}X|rI>tLdex");
      Class<ArrayNode> class0 = ArrayNode.class;
      ClassUtil.getGenericInterfaces(class0);
      Double double0 = new Double(3940.478674);
      ClassUtil.nullOrToString(double0);
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.findSuperTypes(class1, class2, list0);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(992);
      placeholderForType0.getContentType();
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('<');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      MockIOException mockIOException0 = new MockIOException("zv0ovS)$advds~$6Jy");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      Class<RuntimeException> class1 = RuntimeException.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(65534);
      JavaType[] javaTypeArray0 = new JavaType[1];
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      JavaType javaType0 = referenceType0.getContentType();
      javaTypeArray0[0] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Long> class2 = Long.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", collectionLikeType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, collectionLikeType0, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      ClassUtil.nameOf((Named) beanProperty_Std0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.wrapperType(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockThrowable.getDefaultStackTrace();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JsonFactory jsonFactory0 = new JsonFactory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"%s\"");
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3495);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      objectOutputStream0.reset();
      SQLDataException sQLDataException0 = new SQLDataException("non-static member class", "JSON");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*WcURZsKTLVj", "7f/i>rQ!:kS", 3495, sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: *WcURZsKTLVj
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getConstructors(class1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.util.LRUMap");
      sQLTimeoutException0.getStackTrace();
      ClassUtil.throwIfError(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.findConstructor(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("AU(_CLE?SOURCE", "AU(_CLE?SOURCE", intArray0, (Throwable) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: AU(_CLE?SOURCE
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<IOException> class1 = IOException.class;
      Class<Short> class2 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isProxyType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      int int0 = (-16842752);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapLikeType> class1 = MapLikeType.class;
      objectMapper0.readerFor(class1);
      MockFile mockFile0 = new MockFile("G]Z5cqYn.", "G]Z5cqYn.");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'N';
      charArray0[2] = 'S';
      charArray0[3] = 'Z';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-3600), 3);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "org.hibernate.proxy.com.fasterxml.jackson.databind.node.ArrayNode");
      ClassUtil.throwIfRTE(jsonMappingException0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Annotation> class1 = Annotation.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VrRQ");
      ClassUtil.getConstructors(class1);
      Class<NoClass> class2 = NoClass.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      Class<Short> class4 = Short.class;
      ClassUtil.getGenericSuperclass(class4);
      ClassUtil.emptyIterator();
      ClassUtil.getConstructors(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Byte> class5 = Byte.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) simpleType0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-825));
      placeholderForType0.getContentType();
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct((Class<?>) class4, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[4], javaType0);
      MapLikeType mapLikeType0 = mapType0.withContentValueHandler((Object) null);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class5, "'xJIHf%;P$;!{vs", mapLikeType0);
      virtualAnnotatedMember0.getAnnotated();
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      String string0 = "Cannot deserialize value of type %s from String %s: %s";
      ClassUtil.nonNullString("Cannot deserialize value of type %s from String %s: %s");
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isProxyType(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.weirdStringException("net.sf.cglib.proxy.java.lang.Integer", class1, "-lR*$k");
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, (String) null, "java.lang.Integer");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Character` from String [N/A]: java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isProxyType(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.weirdStringException("net.sf.cglib.proxy.java.lang.Integer", class1, "-lR*$k");
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, (String) null, "java.lang.Integer");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Character` from String [N/A]: java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.findEnumType((Enum<?>) jsonEncoding0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isBogusClass(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y@`v4A_7");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 548);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      mockFileOutputStream0.release();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.hasClass(class1, class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Character> class2 = Character.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      ClassUtil.quotedOr(class3, "?mNfPRoC8f|-|mMJ");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      List<Class<?>> list0 = new Stack<Class<AccessibleObject>>();
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("nW75E3AcO}b&`", "nW75E3AcO}b&`", sQLClientInfoException0);
      sQLNonTransientException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLClientInfoException0.initCause(sQLNonTransientException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("nW75E3AcO}b&`", sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotations();
      constructor0.getAnnotatedReturnType();
      ClassUtil.nonNullString((String) null);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, true);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassUtil.nonNullString("c4@HkrMVzx/dYxuZ");
      ClassUtil.backticked("c4@HkrMVzx/dYxuZ");
      DataTruncation dataTruncation0 = new DataTruncation((-1070), false, false, (-1070), 1830);
      dataTruncation0.getNextWarning();
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Object object0 = new Object();
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findEnumType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-384), objectMapper1, (OutputStream) null, byteArray0, 8, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-671959283));
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, (OutputStream) null, byteArray0, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature1);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[2] = 55296;
      intArray0[3] = (int) (byte) (-89);
      intArray0[4] = 1;
      intArray0[5] = 3;
      intArray0[6] = 3;
      intArray0[7] = 56320;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, (String) null, batchUpdateException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.findRawSuperTypes(class3, class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("net.sf.cglib.proxy.java.lang.Short");
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockFileOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getConstructors(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.introspect.AnnotatedField$Serialization", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, AccessPattern> hashMap0 = new HashMap<String, AccessPattern>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(booleanNode0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "com.fasterxml.jackson.databind.introspect.AnnotatedField$Serialization");
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.introspect.AnnotatedField$Serialization", "com.fasterxml.jackson.databind.introspect.AnnotatedField$Serialization");
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "net.sf.cglib.proxy.java.io.IOException";
      try { 
        Double.valueOf("net.sf.cglib.proxy.java.io.IOException");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "3l0xKN&";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3l0xKN&");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      ClassUtil.getDeclaredMethods(class0);
      Long long0 = new Long((-2072L));
      ClassUtil.isJacksonStdImpl((Object) long0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3l0xKN&");
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReturnType();
      constructor0.getParameterTypes();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) bufferedOutputStream0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterTypes();
      constructor0.getAnnotatedReturnType();
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nonNull((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jacks");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      MockError mockError0 = new MockError();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, mockError0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectMapper0.configure(jsonGenerator_Feature0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor1 = ClassUtil.findConstructor(class2, true);
      constructor1.getAnnotatedReturnType();
      classUtil_Ctor1.getParamCount();
      constructor1.getParameterTypes();
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor2.getDeclaredAnnotations();
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Object object0 = new Object();
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getOuterClass(class0);
      TypeFactory.defaultInstance();
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.canBeABeanType(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.getPackageName(class2);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "Failed to find default constructor of class ");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to find default constructor of class 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      defaultDeserializationContext_Impl0.weirdStringException("ZERO_LENGTH_ENUM_ARRAY", class0, "ZERO_LENGTH_ENUM_ARRAY");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(11);
      ClassUtil.quotedOr(placeholderForType0, "ZERO_LENGTH_ENUM_ARRAY");
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Byte> class0 = Byte.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Byte` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.hasClass(bufferRecycler0, class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, false);
      ClassUtil.nullOrToString(class1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.hasEnclosingMethod(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.hasClass("", class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.nullOrToString(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.getClassMethods(class1);
      ClassUtil.getOuterClass(class0);
      ClassUtil.nameOf(class1);
      Class<IOException> class2 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getClassDescription(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor1 = ClassUtil.findConstructor(class3, true);
      constructor1.getAnnotatedReturnType();
      classUtil_Ctor0.getParamCount();
      constructor1.getParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.isObjectOrPrimitive(class4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.hasClass(class0, class1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class2 = Object.class;
      ClassUtil.createInstance(class2, false);
      ClassUtil.canBeABeanType(class2);
      ClassUtil.getPackageName(class1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "Failed to find default constructor of class ");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to find default constructor of class 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.", "Gy+KODsFqYO7", 1343);
      sQLWarning0.spliterator();
      ClassUtil.throwIfError(sQLWarning0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, true);
      MockError mockError0 = new MockError();
      ClassUtil.nonNull((Error) null, (Error) mockError0);
      Double double0 = new Double(1343);
      ClassUtil.classNameOf(double0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getPackageName(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(9);
      ClassUtil.getClassDescription(placeholderForType0);
      ClassUtil.rawClass(placeholderForType0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("\"zy1tbVhV9", (String) null, 9, hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(",9eAn/]:,-f8CNJK:", "\"zy1tbVhV9", 200, hashMap0);
      sQLClientInfoException1.getFailedProperties();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'[3nMPU>{", (String) null);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "serialVersionUID", 9, hashMap0, sQLIntegrityConstraintViolationException0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 200;
      longArray0[1] = (long) 9;
      longArray0[2] = (long) 9;
      longArray0[3] = (long) 9;
      longArray0[4] = (long) 9;
      longArray0[5] = (long) 9;
      longArray0[6] = (long) 200;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("QUOTE_NON_NUMERIC_NUMBERS");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]W8!q<ch1~-!", "serialVersionUID", 9, longArray0, mockRuntimeException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("`com.fasterxml.jackson.databind.type.PlaceholderForType`", batchUpdateException0);
      ClassUtil.throwIfRTE(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.findSuperTypes(class0, class0, list0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)13;
      byteArray0[6] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Integer> class0 = Integer.TYPE;
      Class<Float> class1 = Float.class;
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Integer> class0 = Integer.TYPE;
      Class<Float> class1 = Float.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Void> class1 = Void.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<Long> class2 = Long.TYPE;
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.backticked((String) null);
      System.setCurrentTimeMillis(0L);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.hasClass(class0, class1);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Void> class1 = Void.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "%F @fHine/[#");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTimeoutException0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.getConstructors(class0);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      Class<IOException> class4 = IOException.class;
      ClassUtil.findSuperTypes(class3, class4);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Long long0 = new Long((-1L));
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("D3/cO3IN`5!A", "%F @fHine/[#");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTimeoutException0);
      ClassUtil.backticked("D3/cO3IN`5!A");
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<MapType> class2 = MapType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.findEnumType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Long long0 = new Long(0L);
      Class<Boolean> class3 = Boolean.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(long0, class3, "com.fasterxml.jackson.databind.type");
      ClassUtil.classNameOf(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getClassDescription(class0);
      ClassUtil.rawClass((JavaType) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`java.io.IOException`", "`java.io.IOException`", 200, hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`java.io.IOException`", "`java.io.IOException`");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("`java.io.IOException`", "`java.io.IOException`");
      Class<Float> class2 = Float.TYPE;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      Boolean boolean0 = new Boolean(false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`java.lang.Object`", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "pAN<u8tM{itpaU]G(E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pAN<u8tM{itpaU]G(E
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base");
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nameOf(class0);
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.nameOf(class1);
      ClassUtil.nonNullString("{");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      ClassUtil.backticked("com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer");
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getOuterClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class1);
      ClassUtil.nonNull((CollectionLikeType) collectionType0, (CollectionLikeType) collectionType0);
      boolean boolean0 = new Boolean(false);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base");
      Class<IOException> class0 = IOException.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.findEnumType(class0);
      ClassUtil.classNameOf("java.lang.reflect");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getClassDescription(class0);
      ClassUtil.rawClass((JavaType) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`java.io.IOException`", "`java.io.IOException`", 200, hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`java.io.IOException`", "`java.io.IOException`");
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      Class<Float> class2 = Float.TYPE;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.classOf((Object) null);
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.nameOf(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.nameOf(class2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`com.fasterxml.jackson.databind.util.AccessPattern`", "com.fasterxml.jackson.databind.util.ClassUtil");
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `com.fasterxml.jackson.databind.util.AccessPattern`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaredFields(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Object> class3 = Object.class;
      ClassUtil.findConstructor(class3, true);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = ":gX%JhM@\\:pCFC=n<";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":gX%JhM@:pCFC=n<");
      ClassUtil.nonNullString((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "net.sf.cglib.proxy.java.io.IOException");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockIOException mockIOException0 = new MockIOException();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      sQLInvalidAuthorizationSpecException0.addSuppressed(mockIOException0);
      MockException mockException0 = new MockException((String) null, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (String) null, 26, sQLDataException0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLTimeoutException0);
      ClassUtil.throwIfIOE(throwable0);
      Class<Double> class1 = Double.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Boolean boolean0 = new Boolean("keyType");
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<String> class0 = String.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-393805500);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -415
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isLocalType(class0, true);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getDeclaredAnnotations();
      classUtil_Ctor1.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = ClassUtil.nonNull(accessPattern0, accessPattern1);
      ClassUtil.classNameOf(accessPattern2);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      Class<Void> class1 = Void.class;
      ClassUtil.getPackageName(class1);
      int[] intArray0 = new int[9];
      intArray0[0] = 2179;
      intArray0[1] = 2142;
      intArray0[2] = 0;
      intArray0[3] = 127;
      intArray0[4] = 0;
      intArray0[5] = (-356);
      intArray0[6] = (-3398);
      intArray0[7] = 495;
      intArray0[8] = 52;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Failed to find default constructor of class ", (String) null, intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to find default constructor of class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassDescription(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.findClassAnnotations(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.findConstructor(class0, true);
      Class<IOException> class4 = IOException.class;
      int[] intArray0 = new int[3];
      intArray0[0] = 6337;
      intArray0[1] = 3296;
      intArray0[2] = 1718;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
      Class<IOException> class5 = IOException.class;
      ClassUtil.getClassMethods(class5);
      ClassUtil.findConstructor(class4, true);
      Class<NoClass> class6 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class6);
      ClassUtil.findConstructor(class2, false);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.backticked("size");
      ClassUtil.emptyIterator();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1869));
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler("size");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Boolean boolean0 = new Boolean("keyType");
      ClassUtil.isJacksonStdImpl((Object) boolean0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("entrySet", "keyType", 1);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("wn@~1(~u", "wn@~1(~u", "p(?,lWU}I4K)'DQgO", 241);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("entrySet", ")]&m", "\u0004h2ww754&ep*f~>z[", (-585));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("ta;3S'#/$k]/uBw]@", "keyType", "vals", 241);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("A=TaFvJXS^Ub", "ta;3S'#/$k]/uBw]@", "ad{cQJLXBSRt", 2441);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement(".", "wn@~1(~u", "ad{cQJLXBSRt", 241);
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwIfError(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isProxyType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      objectMapper0.readerFor(class1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.classNameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, true);
      Class<Short> class1 = Short.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<IOException> class2 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class2, true);
      ClassUtil.getOuterClass(class2);
      ClassUtil.classNameOf(list0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ClassLoader classLoader0 = null;
      Class<Boolean> class3 = Boolean.class;
      Class<Integer> class4 = Integer.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructMapLikeType(class2, class3, class4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$147394372) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ClassUtil.getPackageName(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.classNameOf((Object) null);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isProxyType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.findSuperClasses(class3, class3, false);
      Class<Object> class4 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLException sQLException0 = new SQLException("V=0j");
      mockError0.addSuppressed(sQLException0);
      ClassUtil.classOf(mockError0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isLocalType(class0, true);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[8];
      accessibleObjectArray0[0] = (AccessibleObject) null;
      accessibleObjectArray0[1] = (AccessibleObject) null;
      accessibleObjectArray0[2] = (AccessibleObject) null;
      accessibleObjectArray0[3] = (AccessibleObject) null;
      accessibleObjectArray0[4] = (AccessibleObject) null;
      accessibleObjectArray0[5] = (AccessibleObject) null;
      accessibleObjectArray0[6] = (AccessibleObject) null;
      accessibleObjectArray0[7] = (AccessibleObject) null;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.hasEnclosingMethod(class0);
      SQLDataException sQLDataException0 = new SQLDataException("TmDL7vFD<1iKy+", "", 1079);
      sQLDataException0.fillInStackTrace();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException(">m>~[E_Y", ">m>~[E_Y", throwable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, ">m>~[E_Y", sQLDataException1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("TmDL7vFD<1iKy+");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "TmDL7vFD<1iKy+";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "TmDL7vFD<1iKy+", objectArray0);
      sQLDataException1.printStackTrace(printStream0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("elementType", (String) null, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException0, "'0@Q+deNAa|J?6D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // '0@Q+deNAa|J?6D
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.classOf(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.getOuterClass(class2);
      String string0 = "]};h_JE{z";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]};h_JE{z");
      sQLSyntaxErrorException0.printStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException("]};h_JE{z");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      int int0 = (-14);
      StackTraceElement stackTraceElement0 = new StackTraceElement("]};h_JE{z", "]};h_JE{z", "]};h_JE{z", (-14));
      sQLDataException0.addSuppressed(sQLSyntaxErrorException0);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      sQLSyntaxErrorException0.setNextException(sQLDataException0);
      sQLSyntaxErrorException0.spliterator();
      sQLSyntaxErrorException0.spliterator();
      sQLSyntaxErrorException0.addSuppressed(sQLDataException0);
      sQLSyntaxErrorException0.printStackTrace();
      sQLSyntaxErrorException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ]};h_JE{z
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(">&7))>!gt4)#pn", "3iyoZGL@X/b{S", 0, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // >&7))>!gt4)#pn
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Character> class1 = Character.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Short short0 = new Short((short)52);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, short0, ",:S");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Short (of class com.fasterxml.jackson.databind.type.MapLikeType) must override method ',:S'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ZimUaZ\"a])@RHvf/", "ZimUaZ\"a])@RHvf/");
      sQLTimeoutException0.getStackTrace();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)56;
      byteArrayBuilder0.write(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      sQLTimeoutException0.initCause((Throwable) null);
      mockPrintStream0.flush();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "ZimUaZ\"a])@RHvf/");
      sQLTimeoutException0.printStackTrace(printStream0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        sQLTimeoutException0.initCause(sQLDataException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLDataException: java.sql.SQLTimeoutException: ZimUaZ\"a])@RHvf/
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getParameterTypes();
      ClassUtil.getClassDescription(class0);
      Class<Void> class2 = Void.class;
      constructor0.getGenericExceptionTypes();
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      Class<Character> class2 = Character.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      Class<Object> class3 = Object.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class3, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class4 = LinkedList.class;
      Class<LinkedList> class5 = LinkedList.class;
      typeFactory0.constructCollectionType((Class<? extends Collection>) class5, (JavaType) resolvedRecursiveType0);
      Float float0 = new Float(0.0F);
      ReferenceType referenceType1 = referenceType0.withValueHandler(float0);
      Class<Object> class6 = Object.class;
      referenceType1.findTypeParameters(class6);
      referenceType1.withContentTypeHandler(class4);
      Short short0 = new Short((short)2548);
      referenceType0.withContentValueHandler(short0);
      ClassUtil.quotedOr(class1, "com.fasterxml.jackson.databind.ser.std.NumberSerializers");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<Character> class1 = Character.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("; failed to set access: ", "gz1lmoyB");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTimeoutException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(", problem: ");
      sQLRecoverableException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLRecoverableException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      Class<Double> class1 = Double.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<Character> class2 = Character.class;
      Class<Long> class3 = Long.class;
      ClassUtil.findSuperTypes(class2, class3);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(false);
      constructor0.toGenericString();
      constructor0.getParameterCount();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<String> class2 = String.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getDeclaredFields(class0);
      MockIOException mockIOException0 = new MockIOException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockIOException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(mockRuntimeException0);
      ClassUtil.throwIfError(throwable0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLWarning sQLWarning0 = new SQLWarning("9{Gx&,4-q.=", "AyQ=zrH", (-514));
      sQLWarning0.spliterator();
      Throwable throwable0 = ClassUtil.throwIfError(sQLWarning0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, true);
      MockError mockError0 = new MockError();
      MockError mockError1 = (MockError)ClassUtil.nonNull((Error) mockError0, (Error) mockError0);
      ClassUtil.classNameOf(mockError1);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.throwIfIOE(throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(" (from class ", " (from class ");
      ClassUtil.quotedOr((Object) null, ",(V^");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getParameterCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[8];
      accessibleObjectArray0[0] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[1] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[2] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[3] = (AccessibleObject) constructor0;
      accessibleObjectArray0[4] = (AccessibleObject) constructor0;
      accessibleObjectArray0[5] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[6] = (AccessibleObject) classUtil_Ctor0._ctor;
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, true);
      accessibleObjectArray0[7] = (AccessibleObject) null;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Long long0 = new Long((-1L));
      ClassUtil.quotedOr(long0, "Cannot coerce %s to Null value %s (%s `%s.%s` to allow)");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"-1\"", "Cannot coerce %s to Null value %s (%s `%s.%s` to allow)");
      classUtil_Ctor0.getParamCount();
      sQLTimeoutException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      sQLTimeoutException0.getStackTrace();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.throwIfError(sQLTimeoutException0);
      classUtil_Ctor0.getParamCount();
      constructor0.getParameterTypes();
      ClassUtil.getClassDescription(long0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`com.fasterxml.jackson.databind.type.SimpleType`", string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Character> class1 = Character.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      simpleType0.withStaticTyping();
      Class<MapType> class2 = MapType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      referenceType0.withHandlersFrom(arrayType1);
      ArrayType arrayType2 = arrayType1.withTypeHandler(class0);
      arrayType0.isTypeOrSubTypeOf(class1);
      arrayType2.isThrowable();
      arrayType2.toString();
      Class<Float> class3 = Float.class;
      typeBindings0.asKey(class3);
      Class<?> class4 = ClassUtil.rawClass(arrayType2);
      Class<Locale.LanguageRange> class5 = Locale.LanguageRange.class;
      ClassUtil.getConstructors(class5);
      Class<JsonMappingException> class6 = JsonMappingException.class;
      ClassUtil.isLocalType(class6, false);
      ClassUtil.isCollectionMapOrArray(class4);
      ClassUtil.isBogusClass(class0);
      Class<Double> class7 = Double.class;
      ClassUtil.canBeABeanType(class7);
      Class<Float> class8 = Float.class;
      ClassUtil.isObjectOrPrimitive(class8);
      ClassUtil.getPackageName(class5);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      // Undeclared exception!
      try { 
        beanSerializerBuilder0.getClassInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<Double> class3 = Double.TYPE;
      ClassUtil.nameOf(class3);
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isJacksonStdImpl((Object) class0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "9m(#xO/\"!@}p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getClassDescription(class0);
      ClassUtil.rawClass((JavaType) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`java.io.IOException`", "`java.io.IOException`", 200, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`java.io.IOException`", "`java.io.IOException`");
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("`java.io.IOException`", (String) null, 200, map0, sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("`java.io.IOException`", sQLClientInfoException1);
      ClassUtil.throwIfRTE(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(class0);
      ClassUtil.getClassDescription(arrayType1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getDeclaringClass(class2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Throwable throwable0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Default constructor for ", "vals", hashMap0, (Throwable) null);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("-qj2 |Y!HR<UlSWG$Q", "-qj2 |Y!HR<UlSWG$Q", map0);
      MockError mockError0 = new MockError("-qj2 |Y!HR<UlSWG$Q", sQLClientInfoException1);
      // Undeclared exception!
      try { 
        mockError0.initCause(sQLClientInfoException1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLClientInfoException: -qj2 |Y!HR<UlSWG$Q
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      ClassUtil.backticked("com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer");
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getOuterClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class1);
      ClassUtil.nonNull((CollectionLikeType) collectionType0, (CollectionLikeType) collectionType0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isConcrete(class0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.rawClass((JavaType) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "unknown", 200, hashMap0);
      sQLClientInfoException0.getFailedProperties();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("aed2xXg%^", "OoCS&x4?[|~ED^_h");
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("elementType", "unknown", 200, hashMap0, sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLClientInfoException1);
      SQLClientInfoException sQLClientInfoException2 = (SQLClientInfoException)ClassUtil.throwIfRTE(sQLClientInfoException0);
      assertEquals(200, sQLClientInfoException2.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil.isLocalType(class0, false);
      Class<Character> class1 = Character.class;
      ClassUtil.hasEnclosingMethod(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonFactory2.enable(jsonParser_Feature0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, "local/anonymous", (-1), "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.hasClass(type0, class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class3 = String.class;
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class3, class4, false);
      Class<String> class5 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      Class<Character> class6 = Character.class;
      try { 
        ClassUtil.createInstance(class6, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
