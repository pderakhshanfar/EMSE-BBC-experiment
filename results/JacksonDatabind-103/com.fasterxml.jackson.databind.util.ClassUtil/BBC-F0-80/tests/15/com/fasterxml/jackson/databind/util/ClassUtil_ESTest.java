/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:41:55 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind");
      ClassUtil.classOf(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mffjmr");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<String> class2 = String.class;
      ClassUtil.nameOf(class2);
      MockError mockError0 = new MockError("`java.lang.String`");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.databind.ser.BasicSerializerFactory", true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      objectMapper1.readerForUpdating(defaultSerializerProvider_Impl0);
      ClassUtil.isConcrete(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findEnumType(class1);
      SQLDataException sQLDataException0 = new SQLDataException("6O_'#0@UAY\"Y<sNz");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) simpleType0);
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) simpleType0, jsonToken0, ", problem: ");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected token (null), expected END_ARRAY: , problem: 
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string0 = "$y9W@Y";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "$y9W@Y", (-1));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.spliterator();
      sQLTransactionRollbackException0.printStackTrace();
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      Class<JsonNode> class1 = JsonNode.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.JsonNode, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1657472572);
      intArray0[1] = (-251);
      intArray0[2] = (-2355);
      intArray0[3] = (-326);
      intArray0[4] = 40;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLWarning sQLWarning0 = new SQLWarning("", "java.lang.Double", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "GuW%xS#+90,}ll");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GuW%xS#+90,}ll
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.allOf(class1);
      EnumSet.complementOf(enumSet0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.allOf(class1);
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.complementOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockError mockError0 = new MockError("Decimal point not followed by a digit");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      Object object0 = new Object();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(object0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      BufferRecycler bufferRecycler0 = null;
      ByteArrayBuilder byteArrayBuilder0 = null;
      try {
        byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class0, class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature1);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.copy();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Class<Byte> class0 = Byte.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nonNull((MapType) null, (MapType) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "Non-hex character '%c' (value 0x%s), not valid for UUID String";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.toString();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockRuntimeException0);
      mockRuntimeException0.toString();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Non-hex character '%c' (value 0x%s), not valid for UUID String", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isNonStaticInnerClass(class0);
      System.setCurrentTimeMillis(0L);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.hasEnclosingMethod(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectReader1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-5), false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, accessPattern0);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = new EnumMap<AccessPattern, AccessPattern>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
      Class<Long> class1 = Long.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Float float0 = new Float(0.8);
      ClassUtil.verifyMustOverride(class0, float0, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLException sQLException0 = new SQLException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) sQLException0);
      ClassUtil.quotedOr(jsonMappingException0, "");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, AccessPattern> enumMap2 = new EnumMap<AccessPattern, AccessPattern>(enumMap1);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap2);
      Class<Long> class2 = Long.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.rawClass((JavaType) null);
      Class<Double> class4 = Double.class;
      ClassUtil.getDeclaredMethods(class4);
      ClassUtil.findRawSuperTypes(class1, (Class<?>) null, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Failed to instantiate class ", "Failed to instantiate class ", 8000);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.empty();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, (-243));
      MockIOException mockIOException0 = new MockIOException("JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Float> class0 = Float.class;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.isThrowable();
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
      CollectionType collectionType2 = collectionType1.withContentValueHandler((Object) null);
      DoubleNode doubleNode0 = new DoubleNode((-1909.69078607));
      CollectionType collectionType3 = collectionType2.withValueHandler(doubleNode0);
      ClassUtil.rawClass(collectionType3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getConstructors(class0);
      MockError mockError0 = new MockError("java.lang.reflect.Ac");
      mockError0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "Failed to instantiate class ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class1);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(collectionType0);
      ArrayType arrayType2 = arrayType1.withTypeHandler(typeFactory0);
      ClassUtil.rawClass(arrayType2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nonNull((String) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class1);
      Boolean boolean0 = new Boolean(" ud999W)'&");
      collectionType0.withContentValueHandler(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"p|/+/2<$mZzyntN_");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", sQLInvalidAuthorizationSpecException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ha'X):Z?@aZLbR_nB?-", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType((Class<?>) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "P;/p|");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // P;/p|
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("qZIV9E6Q`IP]3n");
      Class<List> class0 = List.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.quotedOr(class0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      Class<Object> class1 = Object.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, true);
      Class<Integer> class3 = Integer.class;
      ClassUtil.isLocalType(class3, true);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.getDeclaringClass(class4);
      ClassUtil.nullOrToString((Object) null);
      Class<SimpleType> class5 = SimpleType.class;
      ClassUtil.findConstructor(class5, true);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/cX6(4fp{g");
      ClassUtil.getPackageName(class0);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("NI-g^aB%b{,l1e", "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionLikeType collectionLikeType0 = collectionType1.withTypeHandler(typeFactory0);
      Short short0 = new Short((short)360);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(short0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperTypes(class0, class1);
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      typeBindings0.findBoundType("java.lang.reflect.Ac");
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Double> class0 = Double.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class0, false);
      int[] intArray0 = new int[5];
      intArray0[0] = 119;
      intArray0[1] = (-520);
      intArray0[2] = (-684);
      intArray0[3] = (-1653959476);
      intArray0[4] = (-2174);
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.primitiveType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockError mockError0 = new MockError();
      String string0 = "`8-6ChP`HWcs";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "`8-6ChP`HWcs");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "\\";
      ClassUtil.isJacksonStdImpl((Object) "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Byte> class0 = Byte.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1.0));
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(doubleNode0);
      String string1 = "com.fasterxml.jackson.databind.util.LRUMap";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(javaType0, "net.sf.cglib.proxy.java.lang.RuntimeException", "com.fasterxml.jackson.databind.util.LRUMap");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'net.sf.cglib.proxy.java.lang.RuntimeException' as a subtype of [recursive type; UNRESOLVED: com.fasterxml.jackson.databind.util.LRUMap
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Float> class0 = Float.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.lang.RuntimeExc");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.lang.annotation", "java.lang.annotation", (int[]) null, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("Internal error: should never end up through this code path", sQLRecoverableException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Internal error: should never end up through this code path
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Integer> class0 = Integer.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-546));
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      SQLWarning sQLWarning0 = new SQLWarning("MIME-NO-LINEFEEDS", "MIME-NO-LINEFEEDS");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "F*SNgH.&XN8'dGY1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // F*SNgH.&XN8'dGY1
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(83);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-57);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4), objectMapper2, byteArrayOutputStream0, byteArray0, 45, false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLException sQLException0 = new SQLException("b", "b", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("b", "b", sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("b", "b", sQLFeatureNotSupportedException0);
      sQLDataException0.getStackTrace();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLInvalidAuthorizationSpecException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-94);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper2, byteArrayOutputStream0, byteArray0, 1536, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: b
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.nonNullString("java.lang.annotation");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("pcK6f.Z4ej");
      SQLWarning sQLWarning0 = new SQLWarning("; failed to set access: ", mockRuntimeException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "com.fasterxml.jackson.databind.introspect.AnnotatedClass", (Throwable) sQLWarning0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.introspect.AnnotatedClass
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.isLocalType(class1, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.nonNullString("|80fTpYFA1c2XM");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getGenericInterfaces(class1);
      boolean boolean0 = false;
      ClassUtil.findSuperClasses(class1, class1, false);
      Throwable throwable0 = null;
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.java.lang.Character", "org.hibernate.proxy.java.lang.Character", 3145, (int[]) null, (Throwable) null);
      batchUpdateException0.printStackTrace();
      batchUpdateException0.getUpdateCounts();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(batchUpdateException0);
      mockRuntimeException0.toString();
      mockRuntimeException0.getMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.lang.Character");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.throwIfError((Throwable) null);
      Class<NoClass> class1 = NoClass.class;
      Class<Byte> class2 = Byte.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "%C&cQXKq");
      jsonMappingException0.getOriginalMessage();
      Class<Long> class0 = Long.TYPE;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl1.weirdKeyException(class0, "%C&cQXKq", "Sub-class %s (of class %s) must override method '%s'");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `long` from String \"%C&cQXKq\": Sub-class %s (of class %s) must override method '%s'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class1, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator("h+");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.disable(jsonFactory_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "org.hibernate.proxy.java.lang.Long");
      jsonMappingException0.getOriginalMessage();
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdStringException("LSwz3I~z", class0, "S*FP}Jj%sSji");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from String \"LSwz3I~z\": S*FP}Jj%sSji
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      Class<DoubleNode> class2 = DoubleNode.class;
      ClassUtil.isLocalType(class2, true);
      Class<Double> class3 = Double.class;
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<DoubleNode> class0 = DoubleNode.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotations();
      constructor0.getParameterCount();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      constructor0.getAnnotatedReturnType();
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<String> class3 = String.class;
      ClassUtil.createInstance(class3, true);
      ClassUtil.isLocalType(class1, true);
      MockIOException mockIOException0 = new MockIOException("", (Throwable) null);
      mockIOException0.getMessage();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("m0eAMhPyl.", "d4hq6");
      sQLNonTransientException0.initCause(mockThrowable0);
      mockThrowable0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0, "0$2<A:F]Hg1L");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ClassUtil.isJacksonStdImpl((Object) class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.nameOf(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("h+");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) pipedOutputStream0);
      jsonFactory2.enable(jsonFactory_Feature0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("sg5", "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "`com.fasterxml.jackson.databind.JsonMappingException`", (Throwable) sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(jsonMappingException0);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", (String) null, sQLNonTransientConnectionException0);
      sQLDataException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getDeclaringClass(class1);
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTransientException0);
      ClassUtil.throwIfError(throwable0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "_zo>ulW", (-551));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("_zo>ulW", "_zo>ulW", "com.fasterxml.jackson.databind.ser.std.CalendarSerializer", 1878);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getClassDescription(class0);
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, true);
      Short short0 = new Short((short)11963);
      Short short1 = new Short((short)11963);
      ClassUtil.nonNull(short0, short1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTransientException0);
      ClassUtil.throwIfError(throwable0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "_zo>ulW", (-551));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("_zo>ulW", "_zo>ulW", "com.fasterxml.jackson.databind.ser.std.CalendarSerializer", 1878);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      ClassUtil.throwIfError(throwable0);
      ClassUtil.throwIfError(throwable0);
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.primitiveType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.primitiveType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.getEnclosingClass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getOuterClass(class2);
      ClassUtil.isJacksonStdImpl((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1121);
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1121);
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete(class1);
      ClassUtil.rawClass(placeholderForType0);
      MockError mockError0 = new MockError("!#RM]Zw");
      ClassUtil.classNameOf(mockError0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "ZERO_LENGTH_ENUM_ARRAY");
      Class<Short> class0 = Short.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.findSuperTypes(class2, class3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class2, class1, false);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Error> class0 = Error.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-283));
      placeholderForType0.findSuperType(class0);
      Class<?> class1 = ClassUtil.classOf(placeholderForType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      MockIOException mockIOException0 = new MockIOException("BgP9<J,Mit6p5W_^");
      defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class1);
      Class<Object> class2 = Object.class;
      ClassUtil.nameOf(class2);
      try { 
        defaultDeserializationContext_Impl0.resolveSubType((JavaType) null, "Infinity");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'Infinity' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "1!yR-UD0!.");
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(jsonMappingException0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "+.G?uL", javaType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("G4w0OX", "G4w0OX", sQLNonTransientException0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, true);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getEnclosingClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1430));
      Class<Short> class1 = Short.class;
      placeholderForType0.findSuperType(class1);
      ClassUtil.classOf((Object) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.databind.util.ClassUtil");
      ClassUtil.getPackageName(class0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.util.ClassUtil
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2175);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError("Infinity", (Throwable) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "java.lang.Short");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Short
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getPackageName(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.lang", "serialVersionUID");
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(class0);
      CollectionLikeType collectionLikeType0 = collectionType1.withTypeHandler(typeFactory1);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperTypes(class1, class0);
      Byte byte0 = new Byte((byte)71);
      Object object0 = new Object();
      Object object1 = new Object();
      Class<Object> class2 = Object.class;
      ClassUtil.hasClass(object1, class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.backticked("'-XYP90xS^!M]3~`");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 1121;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1121);
      Class<Error> class0 = Error.class;
      placeholderForType0.findSuperType(class0);
      ClassUtil.classOf(placeholderForType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Infinity");
      MockIOException mockIOException0 = new MockIOException("Infinity");
      Class<ArrayType> class1 = ArrayType.class;
      defaultDeserializationContext0.weirdNativeValueException(mockIOException0, class1);
      ClassUtil.nameOf(class0);
      try { 
        defaultDeserializationContext0.resolveSubType((JavaType) null, "8D");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '8D' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.hasEnclosingMethod(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.hasEnclosingMethod(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class1 = CollectionType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<String> class2 = String.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(class2);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, "]E,Z0CSet 2=Dp", javaType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.canBeABeanType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getDeclaringClass(class0);
      Class<String> class2 = String.class;
      ClassUtil.findRawSuperTypes(class2, class2, false);
      ClassUtil.getClassDescription((Object) null);
      Class<Integer> class3 = Integer.class;
      Class<Void> class4 = Void.class;
      ClassUtil.findRawSuperTypes(class3, class4, true);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      MockError mockError0 = new MockError("java.lang.Integer", batchUpdateException0);
      ClassUtil.hasClass(mockError0, class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLException sQLException0 = new SQLException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("u$qx~n%*ZWX__tlL", ";iB-s@/h!(J", sQLException0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.nameOf(class0);
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, sQLTransactionRollbackException0, ";iB-s@/h!(J");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.sql.SQLTransactionRollbackException (of class java.lang.Double) must override method ';iB-s@/h!(J'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Byte> class1 = Byte.TYPE;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.isJacksonStdImpl(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Double> class0 = Double.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class2, (Class<?>) null, true);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getAnnotationsByType(class4);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      ClassUtil.getClassDescription(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.canBeABeanType(class0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1673;
      intArray0[1] = 116;
      intArray0[2] = (-2602);
      intArray0[3] = (-4159);
      intArray0[4] = (-1080);
      intArray0[5] = 116;
      intArray0[6] = (-3460);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("6b", (String) null, intArray0);
      batchUpdateException0.spliterator();
      batchUpdateException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<NoClass> class1 = NoClass.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.canBeABeanType(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class2);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getClassDescription(class2);
      classUtil_Ctor0.getParamCount();
      Class<Long> class4 = Long.class;
      ClassUtil.getDeclaringClass(class4);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 1121;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1121);
      Class<Error> class0 = Error.class;
      placeholderForType0.findSuperType(class0);
      ClassUtil.classOf(placeholderForType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Infinity");
      jsonMappingException0.getOriginalMessage();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinity
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.canBeABeanType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getDeclaringClass(class0);
      Class<String> class2 = String.class;
      ClassUtil.findRawSuperTypes(class2, class2, false);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, constructor0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      objectMapper0.configure(jsonParser_Feature0, false);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.hasClass((Object) null, class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class2);
      Byte byte0 = new Byte((byte) (-46));
      ClassUtil.nullOrToString(byte0);
      Class<Short> class3 = Short.class;
      ClassUtil.hasClass(class1, class3);
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("size", "<", 14);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Float> class0 = Float.class;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassLoader.getSystemClassLoader();
      Boolean boolean0 = new Boolean(" m999)'&");
      Byte byte0 = new Byte((byte) (-65));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" m999)'&");
      ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassUtil.quotedOr("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY");
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Short> class1 = Short.class;
      boolean boolean0 = true;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<String> class3 = String.class;
      Class<ReferenceType> class4 = ReferenceType.class;
      Class<JsonMappingException> class5 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class4, class5, list0);
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.util.ClassUtil", "com.fasterxml.jackson.databind.util.ClassUtil", 2134);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("elementType", sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0, "5MGYRqDw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5MGYRqDw
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassLoader.getSystemClassLoader();
      Class<LinkedList> class1 = LinkedList.class;
      String string0 = " d999)'&";
      Boolean boolean0 = new Boolean(" d999)'&");
      byte byte0 = (byte) (-65);
      Class<String> class2 = String.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IOContext iOContext0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class1 = String.class;
      ClassUtil.isLocalType(class1, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      hashMap0.entrySet();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Object> class2 = Object.class;
      ClassUtil.hasEnclosingMethod(class2);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      ClassUtil.canBeABeanType(class1);
      Class<Long> class3 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.isProxyType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.quotedOr(byte0, "(5i/4<}>QqS<:");
      System.setCurrentTimeMillis((byte)0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findEnumType(class0);
      Object object0 = new Object();
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaringClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      Class<Void> class3 = Void.TYPE;
      ClassUtil.findClassAnnotations(class3);
      Class<Byte> class4 = Byte.class;
      Class<Character> class5 = Character.class;
      ClassUtil.findSuperClasses(class4, class5, true);
      Class<String> class6 = String.class;
      Class<NoClass> class7 = NoClass.class;
      ClassUtil.findSuperTypes(class6, class7);
      Class<RuntimeException> class8 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class8);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassLoader.getSystemClassLoader();
      Boolean boolean0 = new Boolean(" d999)'&");
      Byte byte0 = new Byte((byte) (-65));
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.nameOf((Named) null);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getOuterClass(class2);
      DataTruncation dataTruncation0 = new DataTruncation(3, true, true, (-1), 8000);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[null]", dataTruncation0);
      MockError mockError0 = new MockError(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getGenericInterfaces(class0);
      int[] intArray0 = new int[3];
      intArray0[0] = 126;
      intArray0[1] = 1306;
      intArray0[2] = (-63);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getUpdateCounts();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("NULL", (String) null);
      batchUpdateException0.initCause(sQLTransientConnectionException0);
      batchUpdateException0.getNextException();
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 1121;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1121);
      Class<Error> class0 = Error.class;
      placeholderForType0.findSuperType(class0);
      Class<?> class1 = ClassUtil.classOf(placeholderForType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      Class<ReferenceType> class2 = ReferenceType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 1121);
      coreXMLDeserializers_Std0.getObjectIdReader();
      Class<IOException> class3 = IOException.class;
      boolean boolean0 = true;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.getClassMethods(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.isObjectOrPrimitive(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.getStackTrace();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("enum");
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLFeatureNotSupportedException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassUtil.quotedOr("ZERO_LENGTH_ENUM_ARRAY", (String) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.findSuperTypes(class1, class0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findEnumType(class0);
      Object object0 = new Object();
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaringClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      Class<Void> class3 = Void.TYPE;
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.backticked("IUE8Xo!r@2~>NR,J");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.deser.impl.MethodProperty");
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "com.fasterxml.jackson.databind.deser.impl.MethodProperty");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.emptyIterator();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class1);
      Boolean boolean0 = new Boolean(" ud999W)'&");
      collectionType0.withContentValueHandler(boolean0);
      Byte byte0 = new Byte((byte) (-65));
      ClassUtil.isJacksonStdImpl((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<IOException> class1 = IOException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[6], javaTypeArray0[2]);
      Double double0 = new Double(0.0);
      referenceType0.withTypeHandler(double0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      referenceType1.withContentTypeHandler((Object) null);
      ClassUtil.nullOrToString((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Qg lcc4D", "Qg lcc4D", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 1121;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1121);
      Class<Error> class0 = Error.class;
      placeholderForType0.findSuperType(class0);
      Class<?> class1 = ClassUtil.classOf(placeholderForType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      Class<ReferenceType> class2 = ReferenceType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 1121);
      coreXMLDeserializers_Std0.getObjectIdReader();
      Class<IOException> class3 = IOException.class;
      boolean boolean0 = false;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getClassMethods(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.isObjectOrPrimitive(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.getStackTrace();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("enum");
      mockPrintWriter0.println((-2507.6309F));
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLFeatureNotSupportedException0.spliterator();
      sQLFeatureNotSupportedException0.getStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      ClassUtil classUtil0 = new ClassUtil();
      sQLFeatureNotSupportedException0.spliterator();
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getEnclosingClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findEnumType(class0);
      Object object0 = new Object();
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaringClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility", (Throwable) null);
      ClassUtil.throwIfIOE(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.backticked("java.lang.annotation");
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperTypes(class2, class2);
      Class<Short> class3 = Short.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("size", "<", 14);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      ClassUtil.getRootCause(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findEnumType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 114, 2243);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("NULL", "NULL", "NULL", 793);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("NULL", "FcQdTmt`NufP.[[", "FcQdTmt`NufP.[[", (-892));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("FcQdTmt`NufP.[[", "?G2^x:uI>5;O", "serialVersionUID", 114);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Internal error: unknown key type ", "NULL", "9C,4uM;U;Za", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("9C,4uM;U;Za", "H ;(qy@n$LWus)", "BJQR[58.V:_Z", (-892));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("BJQR[58.V:_Z", "NULL", (String) null, 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = null;
      try {
        stackTraceElement6 = new StackTraceElement((String) null, ",4N}AY$y?88", "NULL", (-892));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.isConcrete(class2);
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("F;", (String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException0.initCause((Throwable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with a null
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, constructor0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isLocalType(class0, false);
      int int0 = 0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.entrySet();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      File file0 = MockFile.createTempFile("JSON", "elementType");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.DeserializationContext");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: java.sql.SQLNonTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.nameOf((Named) null);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isNonStaticInnerClass(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("START_OBJECT", "size", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 33, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // START_OBJECT
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.nonNullString("");
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getDeclaringClass(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("keyType", "keyType", (-4103), hashMap0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("keyType", sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockRuntimeException0);
      ClassUtil.throwIfIOE(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Long> class1 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(simpleType0);
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler((Object) null);
      ClassUtil.nullOrToString(referenceType2);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.fasterxml.jackson.databind.type.ReferenceType@0000000004", "Qg lcc4D", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLClientInfoException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("u$qx~n%*ZWX__tlL", ";iB-s@/h!(J", sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isObjectOrPrimitive(class0);
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      String string1 = "]IK\"p' n7YT<[[";
      int int0 = (-1848);
      try { 
        Integer.valueOf("]IK\"p' n7YT<[[", (-1848));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1848 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = 1121;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1121);
      Class<Error> class0 = Error.class;
      placeholderForType0.findSuperType(class0);
      ClassUtil.classOf(placeholderForType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Infinity");
      jsonMappingException0.getOriginalMessage();
      Class<ReferenceType> class1 = ReferenceType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 1121);
      coreXMLDeserializers_Std0.getObjectIdReader();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) "Infinity");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(114, true, false, 4185, 4185);
      StackTraceElement stackTraceElement0 = new StackTraceElement("Don't know how to convert embedded Object of type %s into %s", "Default constructor for ", ") decorated with @JsonCreator (for Enum type ", 4185);
      StackTraceElement stackTraceElement1 = new StackTraceElement("Internal error: unknown key type ", "?G2^x:uI>5;O", "keyUniverse", 0);
      StackTraceElement stackTraceElement2 = new StackTraceElement("H ;(qy@n$LWus)", "com.fasterxml.jackson.databind.exc.InvalidDefinitionException", "local/anonymous", (-818));
      StackTraceElement stackTraceElement3 = new StackTraceElement("Default constructor for ", "NULL", (String) null, (-133));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      stackTraceElementArray0[0] = stackTraceElement1;
      stackTraceElementArray0[1] = stackTraceElement2;
      stackTraceElementArray0[2] = stackTraceElement3;
      dataTruncation0.fillInStackTrace();
      stackTraceElementArray0[3] = stackTraceElement1;
      stackTraceElementArray0[4] = stackTraceElement3;
      dataTruncation0.setStackTrace(stackTraceElementArray0);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getClassMethods(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.isObjectOrPrimitive(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.getStackTrace();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("enum");
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLFeatureNotSupportedException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<List> class0 = List.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getPackageName(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getLargeUpdateCounts();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "java.lang");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.emptyIterator();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class1);
      Boolean boolean0 = new Boolean(" ud999W)'&");
      collectionType0.withContentValueHandler(boolean0);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[8];
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<ArrayType> class2 = ArrayType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      MapType mapType0 = MapType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      MapType mapType1 = mapType0.withKeyValueHandler(class2);
      MapType mapType2 = mapType1.withKeyType(resolvedRecursiveType0);
      MapType mapType3 = mapType2.withKeyTypeHandler(class0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class1, (JavaType) mapType3, (JavaType) mapType2);
      javaTypeArray0[0] = (JavaType) mapLikeType0;
      JavaType javaType0 = typeFactory0.constructReferenceType(class2, mapLikeType0);
      javaTypeArray0[1] = javaType0;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructSimpleType(class3, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.JsonMappingException with 8 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("(@JsonValue serializer for method ");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("(@JsonValue serializer for method ", "", "(@JsonValue serializer for method ", 96);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "(@JsonValue serializer for method ", "(@JsonValue serializer for method ", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLWarning0, "(@JsonValue serializer for method ");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(@JsonValue serializer for method ", "(@JsonValue serializer for method ", jsonMappingException0);
      jsonMappingException_Reference0.toString();
      sQLSyntaxErrorException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (@JsonValue serializer for method 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }
}
