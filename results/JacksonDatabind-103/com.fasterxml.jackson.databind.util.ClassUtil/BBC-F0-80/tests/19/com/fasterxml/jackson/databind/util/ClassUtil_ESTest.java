/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:45:28 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      Class<List> class1 = List.class;
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.wrapperType(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.java.lang.Boolean", "3", (-628), (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0, "3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      Class<Character> class2 = Character.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(class0);
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      CollectionLikeType collectionLikeType0 = collectionType2.withValueHandler(typeFactory0);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, filterOutputStream0, byteArray0, (-1744094291), true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("LGf%wATqv!l>&yQ");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) filterOutputStream0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isProxyType(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jsonFactory3;
      objectArray0[1] = (Object) jsonFactory3;
      objectArray0[2] = (Object) "Class ";
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, false);
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) jsonFactory3;
      objectArray0[6] = (Object) jsonFactory1;
      PrintStream printStream0 = mockPrintStream0.format("Class ", objectArray0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) printStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = null;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "Class ", "Class ");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) printStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'Class ' as a subtype of null: Class 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getConstructors(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Void> class1 = Void.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class2, class2);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler(accessPattern0);
      enumMap0.put(accessPattern0, mapLikeType1);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.isConcrete(class0);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class1);
      ClassUtil.findEnumType(enumMap0);
      Class<Float> class2 = Float.class;
      ClassUtil.findConstructor(class2, true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase");
      SQLDataException sQLDataException0 = new SQLDataException("+x/HAD:", "^UwQbfQo", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+x/HAD:", "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", (Map<String, ClientInfoStatus>) null, sQLDataException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", true);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockFileOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockFileOutputStream0, class1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `org.evosuite.runtime.mock.java.io.MockFileOutputStream`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Long> class1 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      TypeBindings typeBindings1 = arrayType0.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      resolvedRecursiveType0.hasGenericTypes();
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(arrayType0);
      ClassUtil.rawClass(javaType0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4000);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Integer integer0 = new Integer(3);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLFeatureNotSupportedException) (through reference chain: java.lang.Integer[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonSerializer");
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonGenerator_Feature0);
      BufferRecycler bufferRecycler0 = jsonFactory4._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory3, true);
      ObjectMapper objectMapper1 = new ObjectMapper();
      JsonFactory jsonFactory5 = new JsonFactory(objectMapper1);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory4);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      ObjectMapper objectMapper3 = objectMapper1.setDateFormat(dateFormat0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper3.readerFor(class0);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1536);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, objectReader0, byteArrayBuilder0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 4, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, "R'3Q sG");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of [null]: R'3Q sG
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("INF");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLTransientConnectionException1);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("non-static member class");
      MockError mockError0 = new MockError("non-static member class", sQLDataException0);
      sQLDataException0.initCause(mockError0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "non-static member class");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      List<Class<?>> list0 = new ArrayList<Class<MapType>>();
      Class<Module> class0 = Module.class;
      ClassUtil.getPackageName(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(269);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader2 = objectReader1.withHandler(deserializationProblemHandler0);
      ObjectReader objectReader3 = objectReader2.without(formatFeature0);
      TypeFactory typeFactory0 = objectReader3.getTypeFactory();
      Class<Character> class0 = Character.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      Class<Object> class0 = Object.class;
      objectMapper1.readerFor(class0);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.getClassDescription((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      Object object0 = ClassUtil.createInstance(class1, true);
      ClassUtil.verifyMustOverride(class1, object0, "#[5~uwCnImkUjnv[yfp");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      ClassUtil.quotedOr((Object) null, "");
      int int0 = 1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "write a number");
      Integer integer0 = new Integer(1);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.classOf(enumSet0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, ",LZl/dfl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      ClassUtil.canBeABeanType(class0);
      Class<Long> class1 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Long with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = new Boolean("java.io.InputStream");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      MockFile mockFile0 = new MockFile("java.io.InputStream");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, objectMapper1, mockPrintStream0, byteArray0, 1, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonpCharacterEscapes0.getEscapeSequence((-726559425));
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("L0#>.&C-Wa$WUG)V");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("L0#>.&C-Wa$WUG)V", "rn)SK", (Map<String, ClientInfoStatus>) null, throwable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "java.io.InputStream", (Throwable) sQLClientInfoException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.io.InputStream
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
      JsonGenerator jsonGenerator0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("P'P'di{{:j?", "t");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("t", "t", 1024, sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("t", sQLRecoverableException0);
      sQLTransientConnectionException0.printStackTrace();
      sQLTransientConnectionException0.getSuppressed();
      // Undeclared exception!
      try { 
        sQLRecoverableException0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isNonStaticInnerClass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("xp1,,");
      mockRuntimeException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getParameters();
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.quotedOr(list0, "2;");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+^^9yG M@N`P_Oqs`Y7", "x", 0, hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLClientInfoException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2;", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0, "org.hibernate.proxy.java.lang.RuntimeException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.java.lang.RuntimeException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Double> class0 = Double.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nullOrToString((Object) null);
      Class<Void> class1 = Void.class;
      ClassUtil.getConstructors(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.primitiveType(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      Class<SimpleType> class4 = SimpleType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.findRawSuperTypes(class3, class4, true);
      ClassUtil.isJacksonStdImpl(class2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      ClassUtil.throwIfError(sQLNonTransientException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Boolean boolean0 = new Boolean(true);
      ClassUtil.wrapperType(class0);
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.quotedOr(class0, "lAA3cp2g2=n1VA*l.X");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLFeatureNotSupportedException0);
      MockError mockError0 = new MockError(sQLTransientConnectionException0);
      mockError0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(mockError0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "10");
      Byte byte0 = new Byte((byte)1);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) byte0, "10");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 10 (through reference chain: java.lang.Byte[\"10\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern0, accessPattern1);
      enumSet0.add(accessPattern1);
      ArrayDeque<RuntimeException> arrayDeque0 = new ArrayDeque<RuntimeException>();
      enumSet0.retainAll(arrayDeque0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<Short> class0 = Short.class;
      ClassUtil.isProxyType(class0);
      DataTruncation dataTruncation0 = new DataTruncation((-661868634), true, true, (-3089), (-661868634), sQLTimeoutException0);
      sQLTimeoutException0.initCause(dataTruncation0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Error> class3 = Error.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class2, class3, false);
      Class<Annotation> class4 = Annotation.class;
      ClassUtil.getDeclaringClass(class4);
      ClassUtil.getDeclaringClass(class4);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "not a valid representation, problem: (%s) %s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<?> class2 = ClassUtil.classOf(class1);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.getOuterClass(class4);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Float> class0 = Float.class;
      Class<IOException> class1 = IOException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class1 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class0);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Object> class1 = Object.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      typeFactory0.withModifier(typeModifier0);
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withValueHandler(class1);
      resolvedRecursiveType0.withValueHandler(mapType2);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.findSuperTypes((JavaType) mapType2, (Class<?>) class3, true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Class<Character> class0 = Character.class;
      Class<Object> class1 = Object.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Version version0 = new Version(16384, 16384, 58, " following 0xEF; should get 0xBB as part of UTF-8 BOM", " following 0xEF; should get 0xBB as part of UTF-8 BOM", "");
      SimpleModule simpleModule0 = new SimpleModule("\"%s\"", version0);
      Class<Annotation> class2 = Annotation.class;
      JsonSerializer<Annotation> jsonSerializer0 = (JsonSerializer<Annotation>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends Annotation>) class2, jsonSerializer0);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(simpleModule1);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription(" following 0xEF; should get 0xBB as part of UTF-8 BOM");
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls0);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, (AnnotatedMember) null, propertyMetadata2);
      ClassUtil.nameOf((Named) beanProperty_Std0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Double> class0 = Double.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<String> class1 = String.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getClassDescription((Object) null);
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isProxyType(class1);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      MockThrowable mockThrowable0 = new MockThrowable();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 0, intArray0, mockThrowable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, batchUpdateException0);
      MockError mockError0 = new MockError(sQLTransientConnectionException0);
      ClassUtil.throwIfRTE(mockError0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("N}DG[Ui5ZCf]zo", "v/gui <4~ge,1Up&", 1542, hashMap0);
      hashMap0.remove((Object) class1);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("v/gui <4~ge,1Up&", clientInfoStatus0);
      String string0 = "AUTO";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException1, "AUTO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AUTO
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?I/}t\"x n0a6(");
      ClassUtil.primitiveType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.isBogusClass(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getConstructors(class0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ClassUtil.quotedOr(byteArrayInputStream0, "i5Tvmd=[R*{'");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("enum", "i5Tvmd=[R*{'", 687);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "\"java.io.ByteArrayInputStream@18606fc1\"", (Throwable) sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException("SJjU", jsonMappingException0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("4YJ/2JE{CcI~)~E<2#[");
      MockError mockError0 = new MockError(sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<AccessibleObject>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.String");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
      Class<Object> class3 = Object.class;
      ClassUtil.findEnumType(class3);
      Class<Void> class4 = Void.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class4);
      ClassUtil.nullOrToString(list0);
      Class<Double> class5 = Double.class;
      ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.backticked("org.hibernate.proxy.");
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      MockIOException mockIOException0 = new MockIOException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, ":1``9:&", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Integer` from String \":1``9:&\": org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 6);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, bufferedOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      MockIOException mockIOException0 = new MockIOException((String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) bufferedOutputStream0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      SQLTransientException sQLTransientException0 = new SQLTransientException("M2jOdDr ]S;m}u)", "org.hibernate.proxy.");
      ClassUtil.throwIfIOE(sQLTransientException0);
      ClassUtil.classOf(jsonGenerator_Feature0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Boolean boolean0 = new Boolean(false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "com.fasterxml.jackson.databind.MapperFeature");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      AccessPattern accessPattern3 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern0, accessPattern3);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1, accessPattern2, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class0, class2, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IntNode intNode0 = IntNode.valueOf(13);
      intNode0.isContainerNode();
      ClassUtil.nonNull((IntNode) null, intNode0);
      Class<Character> class0 = Character.class;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.nonNull((IntNode) null, (IntNode) null);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = new Object();
      Class<Object> class1 = Object.class;
      ClassUtil.hasClass(object0, class1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "net.sf.cglib.proxy.java.lang.Double";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.java.lang.Double");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.java.lang.Double
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Short> class1 = Short.class;
      ClassUtil.findEnumType(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.hasClass(class0, class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Short> class1 = Short.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<IntNode> class1 = IntNode.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.nonNull((IntNode) null, (IntNode) null);
      ClassUtil.nameOf(class2);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ClassUtil.hasEnclosingMethod(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "Cannot refine serialization content type %s into %s; types not related", "Cannot refine serialization content type %s into %s; types not related");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultDeserializationContext_Impl0, "Cannot refine serialization content type %s into %s; types not related");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.io.IOException` from String \"Cannot refine serialization content type %s into %s; types not related\": Cannot refine serialization content type %s into %s; types not related (through reference chain: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"Cannot refine serialization content type %s into %s; types not related\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<Double> class0 = Double.TYPE;
      Class<Short> class1 = Short.TYPE;
      List<Class<?>> list0 = new LinkedList<Class<Double>>();
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.hasEnclosingMethod(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTransientConnectionException) (through reference chain: com.fasterxml.jackson.databind.type.ResolvedRecursiveType[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getDeclaredFields(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findEnumType(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Error> class0 = Error.class;
      ClassUtil.findConstructor(class0, true);
      Class<Void> class1 = Void.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      TypeFactory.defaultInstance();
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.hasClass(class0, class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findConstructor(class1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, tokenFilter0, false, false);
      MockException mockException0 = new MockException("zYL]; n$~");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("zYL]; n$~");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature1);
      MockFile mockFile0 = new MockFile("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: zYL]; n$~
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isConcrete(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
      MockException mockException0 = new MockException("zYL]; n$~");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("zYL]; n$~", "zYL]; n$~", (-1743199137));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(34);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "PWi");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("PWi", jsonMappingException0);
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.primitiveType(class0);
      Class<Integer> class2 = Integer.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.canBeABeanType(class1);
      PropertyName propertyName0 = new PropertyName("Vx$.'wBQnVOg");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyName0.withSimpleName("Vx$.'wBQnVOg");
      propertyMetadata0.withDescription("Vx$.'wBQnVOg");
      int int0 = (-4839);
      Integer integer0 = new Integer((-4839));
      propertyMetadata0.withIndex(integer0);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, (JavaType) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(serializerProvider0);
      // Undeclared exception!
      try { 
        beanProperty_Std1.depositSchemaProperty(jsonObjectFormatVisitor_Base0, serializerProvider0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Instances of com.fasterxml.jackson.databind.BeanProperty$Std should not get visited
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Module> class2 = Module.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, list0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2334), objectMapper0, (OutputStream) null, byteArray0, 3, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, (TokenFilter) null, true, true);
      MockException mockException0 = new MockException("JSON");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[]", hashMap0, mockException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate1, (Exception) sQLClientInfoException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findClassAnnotations(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getDeclaredAnnotations();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isLocalType(class2, true);
      Class<Error> class3 = Error.class;
      ClassUtil.getClassMethods(class3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-98);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y");
      byteArray0[2] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", (int[]) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      batchUpdateException0.fillInStackTrace();
      batchUpdateException0.forEach(consumer0);
      Throwable throwable0 = ClassUtil.throwIfIOE(batchUpdateException0);
      ClassUtil.throwIfError(throwable0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.isLocalType(class1, true);
      ClassUtil.getClassMethods(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getDeclaredFields(class2);
      System.setCurrentTimeMillis(1L);
      Class<Annotation> class3 = Annotation.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.rawClass((JavaType) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      String string0 = ">=+>3o";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(">=+>3o", ">=+>3o", 49);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      List<Class<?>> list0 = new Vector<Class<PlaceholderForType>>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ClassUtil.isProxyType(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      int[] intArray0 = new int[8];
      intArray0[0] = (-2098);
      intArray0[1] = (-2098);
      intArray0[2] = 0;
      intArray0[3] = (-2098);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[4] = (-1403);
      intArray0[5] = (-2098);
      intArray0[6] = (-2098);
      intArray0[7] = 11;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("|!rPBi?>", "JSON", (-2098), intArray0, mockThrowable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      batchUpdateException0.addSuppressed(sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", sQLSyntaxErrorException0);
      MockError mockError0 = new MockError(mockThrowable0);
      ClassUtil.throwIfRTE(mockThrowable0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class1);
      Class<Long> class2 = Long.class;
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<Object> class4 = Object.class;
      ClassUtil.getDeclaringClass(class4);
      Class<IntNode> class5 = IntNode.class;
      ClassUtil.findSuperTypes((Class<?>) null, class5, list0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class1 = NoClass.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(class0);
      Class<Integer> class2 = Integer.class;
      JavaType[] javaTypeArray0 = collectionLikeType0.findTypeParameters(class2);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentValueHandler(class0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType2, (Class<?>) class1, false);
      ClassUtil.canBeABeanType(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, "", collectionLikeType0);
      Class<Error> class3 = Error.class;
      typeFactory0.constructParametricType(class3, javaTypeArray0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.isConcrete(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getConstructors(class2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.printStackTrace();
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Integer> class4 = Integer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class3, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(javaTypeArray0[0]);
      ReferenceType referenceType2 = referenceType1.withValueHandler(javaTypeArray0[2]);
      ReferenceType referenceType3 = referenceType2.withStaticTyping();
      Class<String> class5 = String.class;
      JavaType javaType0 = referenceType3.refine(class5, typeBindings0, javaTypeArray0[1], javaTypeArray0);
      Class<String> class6 = String.class;
      ClassUtil.findSuperTypes(javaType0, class6, false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor1.getConstructor();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findClassAnnotations(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Cannot figure out type for EnumSet (odd JDK platform?)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1955);
      placeholderForType0.getContentType();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor1._ctor);
      classUtil_Ctor2.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor2._ctor);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.nameOf(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.canBeABeanType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(15);
      ClassUtil.hasClass(placeholderForType0, class2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "nZ*eroGrM9");
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("keyType");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[4] = (Object) "keyType";
      objectArray0[5] = (Object) "nZ*eroGrM9";
      objectArray0[6] = (Object) deserializerFactoryConfig0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      sQLDataException0.printStackTrace(printStream0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "nZ*eroGrM9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nZ*eroGrM9
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedParameterTypes();
      classUtil_Ctor0.getParamCount();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1955);
      placeholderForType0.getContentType();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor1.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Character.valueOf('G');
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.isConcrete(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.getOuterClass(class2);
      ClassUtil.getOuterClass(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.java.lang.Short", "");
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.lang.Double", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("keyType", "non-static member class", map0, sQLClientInfoException0);
      sQLClientInfoException1.getLocalizedMessage();
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfIOE((Throwable) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class0, class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getConstructors(class0);
      ClassUtil.quotedOr((Object) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      ClassUtil.nullOrToString((Object) null);
      Class<Object> class2 = Object.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.getPackageName(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.getDeclaredFields(class3);
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.getOuterClass(class4);
      Class<Integer> class5 = Integer.class;
      ClassUtil.getDeclaredFields(class5);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      ClassUtil.nullOrToString(short0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findClassAnnotations(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isProxyType(class1);
      MockThrowable mockThrowable0 = new MockThrowable();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", (String) null, 0, intArray0, mockThrowable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JSON");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", 0, 0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockThrowable0.printStackTrace((PrintWriter) mockPrintWriter1);
      batchUpdateException0.addSuppressed(mockThrowable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", batchUpdateException0);
      MockError mockError0 = new MockError(sQLTransientConnectionException0);
      ClassUtil.throwIfRTE(mockThrowable0);
      Class<Character> class2 = Character.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.hasClass((Object) null, class3);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getPackageName(class0);
      Class<Error> class1 = Error.class;
      Class<Byte> class2 = Byte.class;
      ClassUtil.isConcrete(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class3 = Short.class;
      Class<AccessPattern> class4 = AccessPattern.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class4);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std0);
      JavaType javaType0 = objectMapper3.constructType(class3);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, collectionLikeType0);
      referenceType0.withValueHandler(class1);
      ClassUtil.rawClass(referenceType0);
      Class<Object> class5 = Object.class;
      ClassUtil.getEnclosingClass(class5);
      Class<JsonMappingException> class6 = JsonMappingException.class;
      ClassUtil.findConstructor(class6, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Annotation> class1 = Annotation.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes(class2, class1);
      ClassUtil.isObjectOrPrimitive(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      Byte byte0 = new Byte((byte) (-125));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getOuterClass(class1);
      Class<Module> class2 = Module.class;
      ClassUtil.findConstructor(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<ArrayType> class1 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getDeclaringClass(class0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes(class2, (Class<?>) null, list0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      Class<IOException> class1 = IOException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getDeclaredFields(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(19);
      placeholderForType0.getContentType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 19;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ex^Oy4", "Mtm'n:yW\u0000B", 7, intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLRecoverableException0);
      ClassUtil.getRootCause(sQLTransientException0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(19);
      placeholderForType0.getContentType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor1.getConstructor();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("88FK", "88FK", (Throwable) null);
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1934));
      placeholderForType0.getGenericSignature();
      ClassUtil.classOf(placeholderForType0);
      Class<Long> class0 = Long.TYPE;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "$-1933");
      ClassUtil.getRootCause(jsonMappingException0);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      Byte byte0 = new Byte((byte)93);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.emptyIterator();
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<String> class3 = String.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Long> class4 = Long.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class4);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      SimpleType simpleType0 = referenceType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class0, false);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isProxyType(class1);
      MockThrowable mockThrowable0 = new MockThrowable();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", (String) null, 0, intArray0, mockThrowable0);
      batchUpdateException0.addSuppressed(mockThrowable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", batchUpdateException0);
      MockError mockError0 = new MockError(sQLTransientConnectionException0);
      ClassUtil.throwIfRTE(mockThrowable0);
      Class<Character> class2 = Character.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaredMethods(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-107), objectMapper0, filterOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassUtil.nonNullString("v#899h)9");
      ClassUtil.quotedOr("v#899h)9", " (from class ");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isBogusClass(class0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2048);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<NoClass> class3 = NoClass.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, javaTypeArray0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, typeBindings0);
      ClassUtil.classNameOf(class4);
      JavaType[] javaTypeArray1 = new JavaType[2];
      javaTypeArray1[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray1[1] = (JavaType) resolvedRecursiveType0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(javaTypeArray1[0]);
      ArrayType arrayType1 = arrayType0.withValueHandler(class2);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray1, (JavaType) arrayType1);
      ClassUtil.rawClass(collectionType0);
      Long long0 = new Long(626L);
      ClassUtil.quotedOr(javaTypeArray0[1], (String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.nonNullString("ZERO_LENGTH_ENUM_ARRAY");
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Annotation> class3 = Annotation.class;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constructor0.isAnnotationPresent(class3);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Double> class4 = Double.TYPE;
      ClassUtil.getOuterClass(class4);
      Class<Object> class5 = Object.class;
      ClassUtil.getClassMethods(class5);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Byte byte0 = new Byte((byte) (-125));
      assertNotNull(byte0);
      assertEquals((byte) (-125), (byte)byte0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory1, beanDeserializerFactory0);
      assertNotSame(deserializerFactory1, deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class1 = Integer.class;
      Class<CollectionType> class2 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) stack0);
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte) (-125));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      assertNotNull(arrayType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType0, (JavaType[]) null, (JavaType) placeholderForType0);
      assertNotNull(referenceType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Class<Error> class4 = Error.class;
      ReferenceType referenceType1 = (ReferenceType)referenceType0.refine(class4, typeBindings0, arrayType0, (JavaType[]) null);
      assertNotNull(referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(referenceType1.equals((Object)referenceType0));
      
      ReferenceType referenceType2 = ReferenceType.upgradeFrom(referenceType1, referenceType0);
      assertNotNull(referenceType2);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.isAnchorType());
      assertFalse(referenceType2.isFinal());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isArrayType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isReferenceType());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType2.equals((Object)referenceType0));
      assertFalse(referenceType2.equals((Object)referenceType1));
      
      ReferenceType referenceType3 = referenceType2.withValueHandler(deserializerFactoryConfig0);
      assertNotNull(referenceType3);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.isAnchorType());
      assertFalse(referenceType2.isFinal());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isArrayType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType3.isContainerType());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isEnumType());
      assertFalse(referenceType3.isAbstract());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.isFinal());
      assertFalse(referenceType3.isJavaLangObject());
      assertTrue(referenceType3.isConcrete());
      assertTrue(referenceType3.hasContentType());
      assertTrue(referenceType3.hasHandlers());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType3.isMapLikeType());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.useStaticType());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isArrayType());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(referenceType0.equals((Object)referenceType2));
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertFalse(referenceType1.equals((Object)referenceType2));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType2.equals((Object)referenceType0));
      assertFalse(referenceType2.equals((Object)referenceType1));
      assertFalse(referenceType3.equals((Object)referenceType1));
      assertFalse(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType2));
      
      String string0 = ClassUtil.getClassDescription(referenceType3);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.ReferenceType`", string0);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.isAnchorType());
      assertFalse(referenceType2.isFinal());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isArrayType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType3.isContainerType());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isEnumType());
      assertFalse(referenceType3.isAbstract());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.isFinal());
      assertFalse(referenceType3.isJavaLangObject());
      assertTrue(referenceType3.isConcrete());
      assertTrue(referenceType3.hasContentType());
      assertTrue(referenceType3.hasHandlers());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType3.isMapLikeType());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.useStaticType());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isArrayType());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(referenceType0.equals((Object)referenceType2));
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertFalse(referenceType0.equals((Object)referenceType3));
      assertFalse(referenceType1.equals((Object)referenceType3));
      assertFalse(referenceType1.equals((Object)referenceType2));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType3));
      assertFalse(referenceType2.equals((Object)referenceType0));
      assertFalse(referenceType2.equals((Object)referenceType1));
      assertFalse(referenceType3.equals((Object)referenceType1));
      assertFalse(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType2));
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<Error> class5 = Error.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class5);
      assertFalse(boolean1);
      assertSame(class5, class4);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Long> class2 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      Class<?> class4 = ClassUtil.primitiveType(class2);
      assertNotNull(class4);
      assertFalse(class4.isArray());
      assertFalse(class4.isInterface());
      assertEquals(1041, class4.getModifiers());
      assertEquals("long", class4.toString());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      
      Class<RuntimeException> class5 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class5, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      Class<Annotation> class0 = Annotation.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
      
      boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = (SQLSyntaxErrorException)sQLSyntaxErrorException1.fillInStackTrace();
      assertNotNull(sQLSyntaxErrorException2);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertNotSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException2.toString());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertNull(sQLSyntaxErrorException2.getMessage());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorException0.printStackTrace();
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Object> class3 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class3);
      assertNull(type0);
      
      boolean boolean2 = ClassUtil.isConcrete(class1);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Byte byte0 = new Byte((byte) (-125));
      assertNotNull(byte0);
      assertEquals((byte) (-125), (byte)byte0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory1, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      assertSame(class1, class0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class2 = Integer.class;
      Class<CollectionType> class3 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class3, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ArrayType arrayType0 = typeFactory0.constructArrayType(class3);
      assertNotNull(arrayType0);
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      assertNotNull(referenceType0);
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isFinal());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withStaticTyping();
      assertNotNull(referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isFinal());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isConcrete());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.equals((Object)referenceType0));
      
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) referenceType1, (Class<?>) class0, true);
      assertNotNull(list1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertSame(class0, class1);
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAbstract());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isFinal());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isConcrete());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1954));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      
      Class<Void> class0 = Void.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<AccessPattern> class2 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      assertNotNull(typeBindings0);
      assertEquals(3, javaTypeArray0.length);
      assertSame(class2, class1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(3, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      
      String string0 = ClassUtil.classNameOf(class2);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      assertSame(class2, class1);
      
      Class<?> class3 = ClassUtil.rawClass(javaTypeArray0[0]);
      assertNotNull(class3);
      assertEquals(3, javaTypeArray0.length);
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      
      Long long0 = new Long((-2013L));
      assertNotNull(long0);
      assertEquals((-2013L), (long)long0);
      
      String string1 = ClassUtil.quotedOr(resolvedRecursiveType0, "%x@) 'BO;NLrz");
      assertNotNull(string1);
      assertEquals(3, javaTypeArray0.length);
      assertEquals("\"[recursive type; UNRESOLVED\"", string1);
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(string1.equals((Object)string0));
      
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class2);
      assertNotNull(class4);
      assertSame(class2, class1);
      assertTrue(class4.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isSynthetic());
      assertEquals(16385, class4.getModifiers());
      assertFalse(class4.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<Boolean> class1 = Boolean.class;
      Class<IOException>[] classArray0 = (Class<IOException>[]) Array.newInstance(Class.class, 9);
      Class<IOException> class2 = IOException.class;
      String string0 = ClassUtil.classNameOf((Object) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      classArray0[0] = class2;
      Class<ArrayType> class3 = ArrayType.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      Class<Long> class5 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      
      Class<?> class6 = ClassUtil.getOuterClass(class5);
      assertNull(class6);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) character0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.fillInStackTrace();
      assertNotNull(sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNull(sQLSyntaxErrorException1.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.fillInStackTrace();
      assertNotNull(sQLSyntaxErrorException2);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertNull(sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException2.toString());
      
      sQLSyntaxErrorException0.printStackTrace();
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<MapType> class1 = MapType.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Short> class2 = Short.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertNotNull(class3);
      assertEquals("class java.lang.Number", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertNotNull(class4);
      assertEquals("class java.lang.Number", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertEquals("class java.lang.Object", class4.toString());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      
      Class<CollectionType> class5 = CollectionType.class;
      boolean boolean2 = ClassUtil.isProxyType(class5);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = ClassUtil.getClassDescription(class2);
      assertNotNull(string0);
      assertEquals("`java.lang.Short`", string0);
      
      String string1 = ClassUtil.backticked("`java.lang.Short`");
      assertNotNull(string1);
      assertEquals("``java.lang.Short``", string1);
      assertFalse(string1.equals((Object)string0));
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isContainerType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class2, (JavaType) simpleType0, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Short with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Byte byte0 = new Byte((byte) (-125));
      assertNotNull(byte0);
      assertEquals((byte) (-125), (byte)byte0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory1);
      assertNotSame(deserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory1, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory1));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotationsByType(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertNull(annotation0);
      assertSame(class2, class1);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      constructor0.setAccessible(false);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor1 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor1);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class4 = Integer.class;
      Class<CollectionType> class5 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class4, class5, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = ClassUtil.nonNull(accessPattern0, accessPattern1);
      assertEquals(AccessPattern.DYNAMIC, accessPattern2);
      assertSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern2, accessPattern1);
      assertSame(accessPattern2, accessPattern0);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern1));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ", problem: ");
      assertNotNull(jsonMappingException0);
      
      Throwable throwable0 = ClassUtil.getRootCause(jsonMappingException0);
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) character0);
      assertFalse(boolean0);
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Boolean> class0 = Boolean.class;
      Class<Character> class1 = Character.class;
      boolean boolean1 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1954));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      
      Class<Void> class0 = Void.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<AccessPattern> class2 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      assertNotNull(typeBindings0);
      assertEquals(3, javaTypeArray0.length);
      assertSame(class2, class1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(3, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      
      String string0 = ClassUtil.classNameOf(class2);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      assertSame(class2, class1);
      
      Class<?> class3 = ClassUtil.rawClass(javaTypeArray0[0]);
      assertNotNull(class3);
      assertEquals(3, javaTypeArray0.length);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      
      Long long0 = new Long((-2013L));
      assertNotNull(long0);
      assertEquals((-2013L), (long)long0);
      
      String string1 = ClassUtil.quotedOr(resolvedRecursiveType0, "%x@) 'BO;NLrz");
      assertNotNull(string1);
      assertEquals(3, javaTypeArray0.length);
      assertEquals("\"[recursive type; UNRESOLVED\"", string1);
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(string1.equals((Object)string0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(19);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor1);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      Constructor<?> constructor0 = classUtil_Ctor1.getConstructor();
      assertNull(constructor0);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1954));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      
      String string0 = placeholderForType0.getGenericSignature();
      assertNotNull(string0);
      assertEquals("$-1953", string0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      
      Class<?> class0 = ClassUtil.classOf(placeholderForType0);
      assertNotNull(class0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals("class com.fasterxml.jackson.databind.type.PlaceholderForType", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<Long> class1 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<Object> class2 = Object.class;
      boolean boolean0 = ClassUtil.isConcrete(class2);
      assertTrue(boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("$-1953");
      assertNotNull(sQLRecoverableException0);
      assertEquals("$-1953", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: $-1953", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLRecoverableException0);
      assertNotNull(sQLTransientException0);
      assertEquals("$-1953", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: $-1953", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLRecoverableException: $-1953", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: $-1953", sQLTransientException0.getMessage());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{m2&n@4d-<|<j`", "com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer", sQLTransientException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("$-1953", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: $-1953", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLRecoverableException: $-1953", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: $-1953", sQLTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer", sQLNonTransientException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // $-1953
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Byte byte0 = new Byte((byte) (-125));
      assertNotNull(byte0);
      assertEquals((byte) (-125), (byte)byte0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory1);
      assertNotSame(deserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory1, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory1));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      Class<AccessibleObject> class0 = AccessibleObject.class;
      AccessibleObject accessibleObject0 = ClassUtil.createInstance(class0, true);
      assertNotNull(accessibleObject0);
      assertFalse(accessibleObject0.isAccessible());
      
      Class<Object> class1 = Object.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNativeValueException(accessibleObject0, class1);
      assertNotNull(invalidFormatException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory1);
      assertNotSame(deserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory1, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(accessibleObject0.isAccessible());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory1));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) invalidFormatException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.reflect.AccessibleObject`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-1382L));
      assertNotNull(long0);
      assertEquals((-1382L), (long)long0);
      
      String string1 = ClassUtil.quotedOr(long0, (String) null);
      assertNotNull(string1);
      assertEquals("\"-1382\"", string1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(19);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor0 = classUtil_Ctor0.getConstructor();
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      assertNotNull(typeBindings0);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      
      String string0 = ClassUtil.classNameOf(resolvedRecursiveType0);
      assertNotNull(string0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`", string0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      
      Class<?> class2 = ClassUtil.rawClass(resolvedRecursiveType0);
      assertNotNull(class2);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(class2.isEnum());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Long", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      List<JavaType> list0 = resolvedRecursiveType0.getInterfaces();
      assertNotNull(list0);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Long long0 = new Long((-3604L));
      assertNotNull(long0);
      assertEquals((-3604L), (long)long0);
      
      String string1 = ClassUtil.quotedOr(long0, "`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`");
      assertNotNull(string1);
      assertEquals("\"-3604\"", string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<AccessPattern> class3 = AccessPattern.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean0);
      assertSame(class3, class1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Long> class1 = Long.class;
      Class<CollectionType> class2 = CollectionType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      assertSame(class2, class0);
      
      String string0 = ClassUtil.nonNullString("ZERO_LENGTH_ENUM_ARRAY");
      assertNotNull(string0);
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", string0);
      
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Class<AccessibleObject> class4 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class4, true);
      assertNotNull(constructor0);
      assertSame(class4, class3);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertNotNull(annotatedTypeArray0);
      assertEquals(0, annotatedTypeArray0.length);
      assertSame(class4, class3);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      
      Class<Annotation> class5 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class5);
      assertFalse(boolean0);
      assertSame(class4, class3);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertSame(class4, class3);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int1);
      assertSame(class4, class3);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(int1 == int0);
      
      Class<?> class6 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class6);
      assertSame(class4, class3);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(1, class6.getModifiers());
      assertEquals("class java.lang.reflect.AccessibleObject", class6.toString());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isArray());
      assertFalse(class6.isInterface());
      assertFalse(class6.isAnnotation());
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertSame(class3, class4);
      
      Class<Integer> class7 = Integer.class;
      Class<ArrayType> class8 = ArrayType.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class7, class8, true);
      assertNotNull(list1);
      assertFalse(list1.contains(class6));
      assertEquals(4, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.equals((Object)list0));
      
      Class<JsonMappingException> class9 = JsonMappingException.class;
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class9, class1);
      assertNotNull(list2);
      assertFalse(list2.contains(class6));
      assertNotSame(list2, list1);
      assertFalse(list2.isEmpty());
      assertEquals(8, list2.size());
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      assertNotNull(classUtil_Ctor1);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class2);
      assertFalse(boolean1);
      assertSame(class2, class0);
      assertTrue(boolean1 == boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(7, fieldArray0.length);
      
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Member member0 = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      Class<Boolean> class1 = Boolean.class;
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      Class<Long> class3 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class3);
      assertFalse(boolean0);
      
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(7, fieldArray0.length);
      
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Class<Annotation> class2 = Annotation.class;
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertNotNull(annotatedType0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotationsByType(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class3);
      assertNull(annotation0);
      assertSame(class3, class2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      constructor0.setAccessible(false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Class<Short> class4 = Short.class;
      Constructor<Short> constructor1 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor1);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      String string0 = ClassUtil.nonNullString(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      assertNotNull(string0);
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", string0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<RuntimeException> class5 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class5, false);
      assertNotNull(list0);
      assertSame(class3, class2);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = ClassUtil.nonNull(accessPattern0, accessPattern1);
      assertEquals(AccessPattern.CONSTANT, accessPattern2);
      assertSame(accessPattern0, accessPattern1);
      assertSame(accessPattern0, accessPattern2);
      assertSame(accessPattern1, accessPattern0);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern2, accessPattern0);
      assertSame(accessPattern2, accessPattern1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(19);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.createKeyDeserializer(defaultDeserializationContext_Impl0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class3 = Annotation.class;
      Class<Annotation> class4 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotationsByType(class4);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertSame(class4, class3);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class5 = Annotation.class;
      Annotation[] annotationArray1 = constructor0.getAnnotationsByType(class5);
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertSame(class5, class4);
      assertSame(class5, class3);
      assertNotSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      
      Annotation annotation0 = constructor0.getAnnotation(class3);
      assertNull(annotation0);
      assertSame(class3, class4);
      assertSame(class3, class5);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class6 = Annotation.class;
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertNotNull(annotatedType0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray2 = constructor0.getDeclaredAnnotationsByType(class6);
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertSame(class6, class4);
      assertSame(class6, class5);
      assertSame(class6, class3);
      assertNotSame(annotationArray2, annotationArray0);
      assertNotSame(annotationArray2, annotationArray1);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(annotationArray2.equals((Object)annotationArray0));
      assertFalse(annotationArray2.equals((Object)annotationArray1));
      
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class6);
      assertNull(annotation1);
      assertSame(class6, class4);
      assertSame(class6, class5);
      assertSame(class6, class3);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      constructor0.setAccessible(false);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = ClassUtil.nonNullString("8`s");
      assertNotNull(string0);
      assertEquals("8`s", string0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class3, false);
      assertNotNull(list0);
      assertSame(class3, class4);
      assertSame(class3, class5);
      assertSame(class3, class6);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = ClassUtil.nonNull(accessPattern0, accessPattern1);
      assertEquals(AccessPattern.CONSTANT, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern2, accessPattern0);
      assertNotSame(accessPattern2, accessPattern1);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern1));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, "]!yg[9/#>0");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method ']!yg[9/#>0'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<Short> class2 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, true);
      assertNotNull(list0);
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Byte byte0 = new Byte((byte) (-125));
      assertNotNull(byte0);
      assertEquals((byte) (-125), (byte)byte0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(byte0, class1);
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.TypeBase` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Byte`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      File file0 = MockFile.createTempFile("JSON", "+XC[,~W%*");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("JSON0+XC[,~W%*", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/JSON0+XC[,~W%*", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      assertNotNull(mockFileWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((Writer) mockFileWriter0);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("JSON0+XC[,~W%*", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/JSON0+XC[,~W%*", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(23, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) mockFileWriter0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1954));
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      
      String string0 = placeholderForType0.getGenericSignature();
      assertNotNull(string0);
      assertEquals("$-1953", string0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      
      Class<?> class0 = ClassUtil.classOf(placeholderForType0);
      assertNotNull(class0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.type.PlaceholderForType", class0.toString());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      Class<Long> class1 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<Object> class2 = Object.class;
      boolean boolean0 = ClassUtil.isConcrete(class2);
      assertTrue(boolean0);
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, class0, true);
      assertNotNull(list0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.type.PlaceholderForType", class0.toString());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Byte> class1 = Byte.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      Stack<JavaType> stack0 = new Stack<JavaType>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      assertNotNull(typeBindings0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2374));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      assertNotNull(referenceType0);
      assertEquals(4, javaTypeArray0.length);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      
      // Undeclared exception!
      try { 
        referenceType0.withContentTypeHandler(class1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = true;
      Constructor<Double> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(31, methodArray0.length);
      
      Class<ArrayType> class1 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      assertSame(class1, class0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, ",ty4DQrW7g)DN=FL");
      assertNotNull(string0);
      assertEquals(",ty4DQrW7g)DN=FL", string0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Error> class2 = Error.class;
      boolean boolean0 = ClassUtil.isConcrete(class2);
      assertTrue(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Short> class3 = Short.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class3);
      assertNotNull(collectionLikeType0);
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      assertNotNull(referenceType0);
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      
      ReferenceType referenceType1 = referenceType0.withValueHandler(typeFactory0);
      assertNotNull(referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType1.isContainerType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.equals((Object)referenceType0));
      
      Class<?> class4 = ClassUtil.rawClass(referenceType1);
      assertNotNull(class4);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType1.isContainerType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals("class java.lang.Short", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(17, class4.getModifiers());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      
      Class<ArrayType> class5 = ArrayType.class;
      Class<?> class6 = ClassUtil.getEnclosingClass(class5);
      assertNull(class6);
      
      Class<JsonMappingException> class7 = JsonMappingException.class;
      Constructor<JsonMappingException> constructor0 = ClassUtil.findConstructor(class7, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<IOException> class2 = IOException.class;
      Class<Long> class3 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      String string0 = "6sHu`$@&jvYy'B:";
      String string1 = ClassUtil.nonNullString("6sHu`$@&jvYy'B:");
      assertNotNull(string1);
      assertEquals("6sHu`$@&jvYy'B:", string1);
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("elementType");
      assertNotNull(string0);
      assertEquals("elementType", string0);
      
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      int int0 = 0;
      SQLWarning sQLWarning0 = new SQLWarning("elementType", ":H{", 0);
      assertNotNull(sQLWarning0);
      assertEquals("elementType", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: elementType", sQLWarning0.toString());
      assertEquals(":H{", sQLWarning0.getSQLState());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      assertEquals("elementType", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: elementType", sQLWarning0.toString());
      assertEquals(":H{", sQLWarning0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<MapType> class1 = MapType.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Short> class2 = Short.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertNotNull(class3);
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Number", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertNotNull(class4);
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Number", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertEquals(1, class4.getModifiers());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      
      Class<CollectionType> class5 = CollectionType.class;
      boolean boolean2 = ClassUtil.isProxyType(class5);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = ClassUtil.getClassDescription(class2);
      assertNotNull(string0);
      assertEquals("`java.lang.Short`", string0);
      
      String string1 = ClassUtil.backticked((String) null);
      assertNotNull(string1);
      assertEquals("[null]", string1);
      assertFalse(string1.equals((Object)string0));
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class2, (JavaType) simpleType0, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Short with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char char0 = 'G';
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) character0);
      assertFalse(boolean0);
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      sQLSyntaxErrorException0.printStackTrace();
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Long> class1 = Long.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      assertNotNull(typeBindings0);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      
      String string0 = ClassUtil.classNameOf(resolvedRecursiveType0);
      assertNotNull(string0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`", string0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      
      Class<?> class3 = ClassUtil.rawClass(resolvedRecursiveType0);
      assertNotNull(class3);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.Long", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      Long long0 = new Long((-3604L));
      assertNotNull(long0);
      assertEquals((-3604L), (long)long0);
      
      String string1 = ClassUtil.quotedOr(long0, "`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`");
      assertNotNull(string1);
      assertEquals("\"-3604\"", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      String string0 = ClassUtil.nonNullString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class<Integer> class2 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("6^L]NDhR8", sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("6^L]NDhR8", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: 6^L]NDhR8", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      sQLNonTransientException0.setNextException(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("6^L]NDhR8", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: 6^L]NDhR8", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLNonTransientConnectionException0, 3600);
      assertNotNull(jsonMappingException_Reference0);
      assertEquals("java.sql.SQLNonTransientConnectionException: Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(3600, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      String string1 = sQLNonTransientException0.getLocalizedMessage();
      assertNotNull(string1);
      assertEquals("6^L]NDhR8", string1);
      assertEquals("java.sql.SQLNonTransientConnectionException: Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("6^L]NDhR8", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: 6^L]NDhR8", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = jsonMappingException_Reference0.toString();
      assertNotNull(string2);
      assertEquals("java.sql.SQLNonTransientConnectionException[3600]", string2);
      assertEquals("java.sql.SQLNonTransientConnectionException: Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(3600, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("6^L]NDhR8", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: 6^L]NDhR8", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(3600, jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertNotNull(collectionType0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      assertNotNull(collectionLikeType0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) collectionType0);
      assertNotNull(typeBindings0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(typeBindings0.isEmpty());
      assertEquals(1, typeBindings0.size());
      
      Character character0 = Character.valueOf('/');
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionType0, typeBindings0, (Object) typeFactory0, (Object) character0);
      assertNotNull(arrayType0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(typeBindings0.isEmpty());
      assertEquals(1, typeBindings0.size());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertEquals(1, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType1 = typeFactory0.constructRawCollectionType(class1);
      assertNotNull(collectionType1);
      assertSame(class1, class0);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.equals((Object)collectionType0));
      
      ArrayType arrayType1 = arrayType0.withValueHandler(collectionType1);
      assertNotNull(arrayType1);
      assertSame(class0, class1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(arrayType0, arrayType1);
      assertSame(class1, class0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(arrayType1, arrayType0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(typeBindings0.isEmpty());
      assertEquals(1, typeBindings0.size());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertEquals(1, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(1, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType1.equals((Object)collectionType0));
      assertTrue(arrayType1.equals((Object)arrayType0));
      
      Integer integer0 = new Integer((-2510));
      assertNotNull(integer0);
      assertEquals((-2510), (int)integer0);
      
      ArrayType arrayType2 = arrayType1.withContentTypeHandler(integer0);
      assertNotNull(arrayType2);
      assertSame(class0, class1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertSame(class1, class0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(typeBindings0.isEmpty());
      assertEquals(1, typeBindings0.size());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertEquals(1, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(1, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.isFinal());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isJavaLangObject());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isInterface());
      assertEquals(1, arrayType2.containedTypeCount());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isArrayType());
      assertTrue(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.hasHandlers());
      assertTrue(arrayType2.hasContentType());
      assertTrue(arrayType2.isContainerType());
      assertFalse(collectionType0.equals((Object)collectionType1));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertFalse(collectionType1.equals((Object)collectionType0));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler(arrayType2);
      assertNotNull(collectionLikeType1);
      assertSame(class0, class1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertSame(class1, class0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(typeBindings0.isEmpty());
      assertEquals(1, typeBindings0.size());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertEquals(1, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(1, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.isFinal());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isJavaLangObject());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isInterface());
      assertEquals(1, arrayType2.containedTypeCount());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isArrayType());
      assertTrue(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.hasHandlers());
      assertTrue(arrayType2.hasContentType());
      assertTrue(arrayType2.isContainerType());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isFinal());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertTrue(collectionLikeType1.isContainerType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.isEnumType());
      assertEquals(1, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionType0.equals((Object)collectionType1));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertFalse(collectionType1.equals((Object)collectionType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      
      Class<?> class2 = ClassUtil.rawClass(collectionLikeType1);
      assertNotNull(class2);
      assertSame(class0, class1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertSame(class1, class0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(typeBindings0.isEmpty());
      assertEquals(1, typeBindings0.size());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertEquals(1, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.hasHandlers());
      assertEquals(1, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.isFinal());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isJavaLangObject());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isInterface());
      assertEquals(1, arrayType2.containedTypeCount());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isArrayType());
      assertTrue(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.hasHandlers());
      assertTrue(arrayType2.hasContentType());
      assertTrue(arrayType2.isContainerType());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isFinal());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertTrue(collectionLikeType1.isContainerType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.isEnumType());
      assertEquals(1, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.util.LinkedList", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionLikeType0.equals((Object)collectionLikeType1));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertFalse(collectionType1.equals((Object)collectionType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(7, fieldArray0.length);
      
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class2 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class2);
      assertFalse(boolean0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2298;
      intArray0[3] = (-190);
      String string0 = "[PrefixTransformer('";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[PrefixTransformer('", (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLRecoverableException0);
      mockRuntimeException0.toString();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0, "[PrefixTransformer('");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [PrefixTransformer('
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        mockRuntimeException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.getPackageName(class0);
      Class<CollectionType> class1 = CollectionType.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getPackageName(class0);
      String string0 = " in a value";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Throwable needs a default contructor, a single-String-arg constructor; or explicit @JsonCreator", " in a value");
      long long0 = (-2434L);
      String string1 = "upwtV~ASV";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("upwtV~ASV", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        sQLRecoverableException0.initCause(sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLFeatureNotSupportedException: Throwable needs a default contructor, a single-String-arg constructor; or explicit @JsonCreator
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getPackageName(class1);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }
}
