/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:57:20 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.verifyMustOverride(class1, class1, "java.lang.Integer");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
      System.setCurrentTimeMillis(2147483647L);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("'<I;'bmj", "'<I;'bmj", (-6));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "JSON", (Throwable) sQLTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.defaultValue(class0);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      List<JsonNode> list0 = arrayNode0.findParents("b1q{MQo60o3#f|a7ZX");
      ArrayNode arrayNode1 = new ArrayNode((JsonNodeFactory) null, list0);
      JsonParser jsonParser0 = arrayNode1.traverse();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, javaType0, jsonToken0, "b1q{MQo60o3#f|a7ZX");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, "c.:sv JXM-M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // c.:sv JXM-M
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isLocalType(class0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapType mapType1 = mapType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) mapType1, (Class<?>) class1, false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":", ":", sQLTransactionRollbackException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("keyType", "serialVersionUID", 76, mockRuntimeException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, sQLTransientConnectionException0);
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      Class<IOException> class0 = IOException.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getClassMethods(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      ObjectReader objectReader1 = objectReader0.withRootName("need JSON String that contains type id (for subtype of ");
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      ClassUtil.nullOrToString(collectionType0);
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      MockError mockError0 = new MockError();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("cNRDZW!M#&~%/Pd`", "cNRDZW!M#&~%/Pd`", "cNRDZW!M#&~%/Pd`", (-2184));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("net.sf.cglib.proxy.java.lang.String", "net.sf.cglib.proxy.java.lang.String", "cNRDZW!M#&~%/Pd`", (-2184));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("cNRDZW!M#&~%/Pd`", "net.sf.cglib.proxy.java.lang.String", "cNRDZW!M#&~%/Pd`", (-1810600065));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("cNRDZW!M#&~%/Pd`", "net.sf.cglib.proxy.java.lang.String", "cNRDZW!M#&~%/Pd`", (-1810600065));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement(": was expecting rest of token (internal state: ", "Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)", "enum", (-2184));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("enum", "net.sf.cglib.proxy.", ": was expecting rest of token (internal state: ", (-1810600065));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)", "enum", "net.sf.cglib.proxy.", 902);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("cNRDZW!M#&~%/Pd`", "7&;3YqF", (String) null, 902);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("7&;3YqF", "net.sf.cglib.proxy.java.lang.String", "AKQ", (-1));
      stackTraceElementArray0[8] = stackTraceElement8;
      mockError0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cNRDZW!M#&~%/Pd`", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "sF?D)QiY@z}Yv|xs4h%");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "]X{_c2Dfa9VG]Wo&Ik\"");
      ClassUtil.backticked("java.lang.String");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLDataException sQLDataException0 = new SQLDataException("x>&'&_G+0yd/ +H%gA", "x>&'&_G+0yd/ +H%gA", 1517);
      SQLTransientException sQLTransientException0 = new SQLTransientException("wdN/Z!XJV1l5dU;)", sQLDataException0);
      sQLDataException0.setNextException(sQLTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      sQLTransientException0.spliterator();
      sQLDataException0.initCause(sQLTransientException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<SimpleModule>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLWarning0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<Module> class1 = Module.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl(class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      String string0 = "com.fasterxml.jackso";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackso");
      ClassUtil.primitiveType(class2);
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.isBogusClass(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<String> class1 = String.class;
      ClassUtil.getOuterClass(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<Error> class2 = Error.class;
      ClassUtil.findSuperTypes(class0, class2, list0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.getConstructors(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(clientInfoStatus0);
      ObjectReader objectReader1 = objectReader0.withRootName("Instantiation of ");
      Locale locale0 = Locale.ENGLISH;
      locale0.toLanguageTag();
      objectReader1.with(locale0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      int[] intArray0 = new int[1];
      intArray0[0] = 289;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ObO");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Instantiation of ", intArray0, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "Cannot call setValue() on constructor of ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot call setValue() on constructor of 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(clientInfoStatus0);
      ObjectReader objectReader1 = objectReader0.withRootName("Instantiation of ");
      Locale locale0 = Locale.ENGLISH;
      ObjectReader objectReader2 = objectReader1.with(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader3 = objectReader2.with(deserializationFeature0);
      // Undeclared exception!
      try { 
        objectReader3.withFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "java.lang.Object");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Float> class0 = Float.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      ArrayType arrayType1 = typeFactory0.constructArrayType((JavaType) arrayType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
      objectMapper0.acceptJsonFormatVisitor((JavaType) arrayType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Float> class0 = Float.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      objectMapper0.getSerializerProvider();
      Class<Object> class1 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      javaTypeArray0[2] = (JavaType) arrayType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withValueHandler(javaTypeArray0[2]);
      ReferenceType referenceType2 = (ReferenceType)referenceType1.withValueHandler(referenceType0);
      Double double0 = new Double((-1623.175289));
      ReferenceType referenceType3 = referenceType0.withValueHandler(double0);
      ReferenceType referenceType4 = referenceType1.withContentValueHandler(referenceType3);
      ReferenceType referenceType5 = (ReferenceType)referenceType2.withContentValueHandler(referenceType4);
      typeFactory0.constructArrayType((JavaType) referenceType5);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base1 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      objectMapper0.acceptJsonFormatVisitor((JavaType) referenceType2, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base1);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isConcrete(class0);
      Class<Float> class1 = Float.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(class1);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findSuperTypes((JavaType) referenceType2, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Float> class0 = Float.TYPE;
      typeFactory1.constructArrayType(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.java.lang.Float");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "Class ", (Throwable) sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(jsonMappingException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      enumSet0.add(clientInfoStatus1);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<TextNode> class0 = TextNode.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      Class<?> class0 = ClassUtil.classOf(object0);
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("X;:zQ", "X;:zQ", sQLTransactionRollbackException0);
      MockIOException mockIOException0 = new MockIOException("X;:zQ", sQLNonTransientException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // X;:zQ
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      MockFile.createTempFile("JSON", "JSON", (File) mockFile0);
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.classOf(class1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "U)uObm;$yj~{4B@4}2", "]RARizGnAnstYB7WG#");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'U)uObm;$yj~{4B@4}2' as a subtype of null: ]RARizGnAnstYB7WG#
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Long");
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class2);
      JavaType[] javaTypeArray0 = new JavaType[0];
      Class<HashMap> class3 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class3);
      Class<Double> class4 = Double.class;
      collectionLikeType0.isTypeOrSuperTypeOf(class4);
      collectionLikeType0.containedTypeOrUnknown((-1));
      Long long0 = new Long((-2110L));
      Long long1 = Long.getLong("java.lang.Long", long0);
      MapType mapType1 = mapType0.withContentTypeHandler(long1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) mapType1);
      Class<Short> class5 = Short.class;
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class5, true);
      Class<Long> class6 = Long.class;
      ClassUtil.isCollectionMapOrArray(class6);
      Class<SimpleType> class7 = SimpleType.class;
      ClassUtil.findConstructor(class7, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.nameOf(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.module.SimpleModule) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "com.fasterxml.jackson.databind.node.MissingNode");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, objectMapper0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4001), (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 33, 33, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLDataException sQLDataException0 = new SQLDataException(")Le>>j_266", ")Le>>j_266");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.emptyIterator();
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile(")+~P~>");
      MockFile mockFile1 = new MockFile(")+~P~>");
      File file0 = MockFile.createTempFile("JSON", ")+~P~>", (File) mockFile1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      file0.setReadable(false, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator(file0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockError mockError0 = new MockError();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.classOf(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isLocalType(class0, true);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getClassMethods(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findEnumType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.nameOf(class0);
      ClassUtil.quotedOr("`java.io.IOException`", "), trying to assign ");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      int int0 = 1;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("%M:RS");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.java.lang.Boolean", intArray0, sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.java.lang.Integer", "<PD<uQMVr(l_JiN3X<^", 1, hashMap0, batchUpdateException0);
      batchUpdateException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("}^Qf", "\"`java.io.IOException`\"", sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "}^Qf", (Throwable) sQLNonTransientConnectionException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // }^Qf
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "X8q4");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterAnnotations();
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.Long");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Cannot access ", sQLTransactionRollbackException0);
      mockRuntimeException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasClass("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType", class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      Class<Error> class0 = Error.class;
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLWarning0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getClassMethods(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      arrayType0.withValueHandler(typeFactory1);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
      ObjectMapper objectMapper4 = objectMapper3.addMixIn(class0, class0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper5 = objectMapper4.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializerProvider serializerProvider0 = objectMapper5.getSerializerProvider();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType1);
      Double double0 = new Double((-340.0));
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(double0);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      // Undeclared exception!
      try { 
        objectMapper4.acceptJsonFormatVisitor((JavaType) referenceType2, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getTypeParameters();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Integer integer0 = new Integer(2);
      ClassUtil.classOf(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Float> class0 = Float.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withValueHandler(typeFactory1);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
      objectMapper0.acceptJsonFormatVisitor((JavaType) arrayType2, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = false;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<MapLikeType> class1 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      ArrayList<Class<RuntimeException>> arrayList0 = new ArrayList<Class<RuntimeException>>();
      Class<Short> class0 = Short.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.emptyIterator();
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isBogusClass(class1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLDataException sQLDataException0 = new SQLDataException("FMpaB$bBg@a]", (String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "FMpaB$bBg@a]", (Throwable) sQLDataException0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // FMpaB$bBg@a]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class0, class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLException sQLException0 = new SQLException("no delegate creator specified", (String) null, sQLTransactionRollbackException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.introspect.ObjectIdInfo", "com.fasterxml.jackson.databind.introspect.ObjectIdInfo");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", setter(s): ", sQLWarning0);
      sQLWarning0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassUtil.nonNullString("&:1=Nvm,1D\";V.X");
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.primitiveType(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      placeholderForType0.getContentType();
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) null, javaTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classOf("r|}x\"dL5{");
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class1, (Class<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaredMethods(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.getDeclaredMethods(class0);
      Class<MapLikeType> class3 = MapLikeType.class;
      // Undeclared exception!
      try { 
        deserializationContext0.instantiationException(class3, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
      HashMap<AccessPattern, Object> hashMap0 = new HashMap<AccessPattern, Object>();
      ClassUtil.nonNull((HashMap<AccessPattern, Object>) null, hashMap0);
      ClassUtil.getPackageName(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.backticked("java.lang.reflect");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$%ePf+");
      ClassUtil.checkAndFixAccess((Member) constructor0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.findConstructor(class0, true);
      Class<SimpleModule> class1 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class2);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getTypeParameters();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Integer integer0 = new Integer((-1655));
      ArrayList<Class<RuntimeException>> arrayList0 = new ArrayList<Class<RuntimeException>>();
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.createInstance(class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<TextNode> class0 = TextNode.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.classNameOf(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Integer> class2 = Integer.class;
      Class<Void> class3 = Void.class;
      ClassUtil.findSuperTypes(class2, class3);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M#>0HJU+!", "M#>0HJU+!", (-1152));
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory5 = jsonFactory4.configure(jsonGenerator_Feature1, true);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory6 = jsonFactory5.configure(jsonFactory_Feature1, true);
      MockFile mockFile0 = new MockFile(";}=a");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory6.createGenerator((Writer) mockFileWriter0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(";}=a");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "No ObjectCodec defined for parser, needed for deserialization");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, ";}=a", "(yk6FqwLYI{");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileWriter0, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidTypeIdException): Could not resolve type id ';}=a' as a subtype of null: (yk6FqwLYI{
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M#>0HJU+!", "M#>0HJU+!", (-1152));
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      ClassUtil.rawClass(javaTypeArray0[2]);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M#>0HJU+!", "M#>0HJU+!", (-1152));
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning("M#>0HJU+!");
      ClassUtil.throwIfRTE(sQLWarning0);
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      Class<Character> class1 = Character.class;
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      ArrayList<Class<Float>> arrayList0 = new ArrayList<Class<Float>>();
      ClassUtil.primitiveType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, (String) null, ",'/");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, jsonMappingException0);
      ClassUtil.throwIfError(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Double double0 = new Double(616.501);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.isLocalType(class0, false);
      Class<Short> class1 = Short.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl((Object) "unknown");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M#>0HJU+!", "M#>0HJU+!", (-1152));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findEnumType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Byte byte0 = new Byte((byte) (-79));
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.nameOf((Class<?>) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[null]", "[null]", (Throwable) null);
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isConcrete(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassUtil.backticked("Nt");
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isBogusClass(class0);
      ClassUtil.getPackageName(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Nt", "Nt", (-1654975209));
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      ClassUtil.throwIfIOE(sQLNonTransientException0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ArrayList<Class<Float>> arrayList0 = new ArrayList<Class<Float>>();
      Class<Long> class3 = Long.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.nameOf(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassUtil.backticked("t");
      Class<Byte> class0 = Byte.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.getPackageName(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("elementType", "t", (-708825413));
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      ClassUtil.throwIfIOE(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findEnumType(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Short short0 = new Short((short) (-1));
      SQLWarning sQLWarning1 = new SQLWarning("@25{9L4ILn^E");
      ClassUtil.throwIfRTE(sQLWarning1);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.canBeABeanType(class0);
      Long long0 = new Long(0L);
      Class<SimpleModule> class1 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      Class<AccessPattern> class2 = AccessPattern.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class2);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.isLocalType(class2, true);
      Class<Object> class3 = Object.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.isJacksonStdImpl((Object) class2);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.primitiveType(class2);
      Class<SimpleType> class5 = SimpleType.class;
      ClassUtil.getClassMethods(class5);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Void> class0 = Void.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n6aw5CBSGj'");
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.findRawSuperTypes(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot access ");
      Class<Integer> class0 = Integer.TYPE;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("V8c/0blUYb[?,ON~}e", "5L+d#KXoaW$KY*'=Q");
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Character> class2 = Character.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperClasses(class3, class1, true);
      ClassUtil.isProxyType(class2);
      TypeBindings.emptyBindings();
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.canBeABeanType(class4);
      Short short0 = new Short((short) (-1388));
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      Class<Void> class2 = Void.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Void> class0 = Void.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n6aw5CBSGj'");
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isLocalType(class0, false);
      Class<Object> class1 = Object.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl((Object) "n6aw5CBSGj'");
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class2, true);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.primitiveType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = " is not a primitive type";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not a primitive type");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      HashMap<AccessPattern, Object> hashMap0 = new HashMap<AccessPattern, Object>();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nonNullString("MXJX0C%rhV[0=kzU}");
      ClassUtil.isJacksonStdImpl((Object) "MXJX0C%rhV[0=kzU}");
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.setRootValueSeparator("MXJX0C%rhV[0=kzU}");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.setRootValueSeparator("MXJX0C%rhV[0=kzU}");
      jsonFactory0.disable(jsonGenerator_Feature0);
      jsonFactory1.enable(jsonParser_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(" has no default (no arg) constructor");
      SQLWarning sQLWarning0 = new SQLWarning("Current token not available: can not call this method", " has no default (no arg) constructor", mockRuntimeException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("r$Z*b", "JSON", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: r$Z*b
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassUtil.nonNullString("EUJ*CS %0rkGlE");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericInterfaces(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      ClassUtil.throwIfError(throwable0);
      ClassUtil.getRootCause(jsonMappingException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "EUJ*CS %0rkGlE", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('w');
      ClassUtil.getPackageName(class0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "com.fasterxml.jackson.databind.annotation");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1902), objectReader0, stringWriter2);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.nameOf(class0);
      Class<Error> class1 = Error.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isConcrete(class3);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.primitiveType(class4);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonParser_Feature0);
      jsonFactory4.createGenerator((Writer) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("u0R4ej");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("V8Hy", mockRuntimeException0);
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "java.lang.Void", sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("L)}G{^A''Q~U}>", " bytes (out of ", sQLTransientConnectionException0);
      Class<Short> class5 = Short.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class5);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(class2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0);
      try { 
        objectReader2.readValues("?hlv)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('?' (code 63)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (String)\"?hlv)\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class2);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.nameOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findEnumType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.primitiveType(class3);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.isNonStaticInnerClass(class4);
      ClassUtil.nonNullString("kf,HP(3SO6-0G");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-718));
      placeholderForType0.toString();
      ClassUtil.nonNull(placeholderForType0, (PlaceholderForType) null);
      ClassUtil.backticked("BeanAsArraySerializer for ");
      Class<IOException> class5 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.nameOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findEnumType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.primitiveType(class3);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonParser_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((Writer) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Current token not available: can not call this method");
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "java.lang.Float", mockRuntimeException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("u0R4ej", "i", sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: u0R4ej
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      Short short0 = new Short((short)8);
      ClassUtil.hasClass(short0, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Double double0 = new Double((short)8);
      ClassUtil.isJacksonStdImpl((Object) short0);
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<ResolvedRecursiveType>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getParameterAnnotations();
      constructor0.getTypeParameters();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Float> class2 = Float.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.primitiveType(class2);
      ClassUtil.hasClass(constructor0, class2);
      Integer integer0 = new Integer(2);
      ClassUtil.classOf(class1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("primitive", "g");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLNonTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "primitive");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      sQLNonTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Long> class3 = Long.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.hasClass(sQLNonTransientConnectionException0, class3);
      Integer integer0 = new Integer(0);
      Short short0 = new Short((short)2020);
      ClassUtil.classOf(short0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaredFields(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "elementType");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Byte> class1 = Byte.class;
      Class<Void> class2 = Void.TYPE;
      ClassUtil.getClassMethods(class2);
      ClassUtil.isNonStaticInnerClass(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      ClassUtil.nameOf((Named) null);
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<IOException> class3 = IOException.class;
      typeFactory1.constructRawCollectionLikeType(class3);
      Class<Boolean> class4 = Boolean.class;
      typeFactory1.constructCollectionLikeType(class1, class4);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[null]", hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [null]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*kIG]D;4],");
      StackTraceElement stackTraceElement0 = new StackTraceElement("*kIG]D;4],", "0pq^ BXK0h*u6]T.|E", "0pq^ BXK0h*u6]T.|E", (-646));
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isProxyType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaredFields(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Short> class0 = Short.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.String");
      ClassUtil.getOuterClass(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil");
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      Short short0 = new Short((short)8);
      ClassUtil.hasClass(short0, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Double double0 = new Double((short)8);
      ClassUtil.isJacksonStdImpl((Object) short0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class2);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil");
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.withValueHandler(class1);
      ClassUtil.rawClass(simpleType0);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<Double> class3 = Double.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<String> class4 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(class3, class4);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, jsonMappingException0, "com.fasterxml.jackson.databind.util.ClassUtil");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.exc.InvalidFormatException (of class java.lang.Double) must override method 'com.fasterxml.jackson.databind.util.ClassUtil'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.nonNullString("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)97;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 79, objectMapper0, (OutputStream) null, byteArray0, 1, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.java.lang.String", "elementType");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: org.hibernate.proxy.java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.canBeABeanType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Long long0 = new Long(0L);
      SimpleType simpleType1 = simpleType0.withValueHandler(long0);
      ClassUtil.rawClass(simpleType1);
      SQLWarning sQLWarning0 = new SQLWarning("w~3ju;<ijB", (String) null, (-641314725));
      DataTruncation dataTruncation0 = new DataTruncation(1616, false, true, 1616, 1616, sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Void> class0 = Void.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n6aw5CBSGj'");
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNull((HashMap<AccessPattern, Object>) null, (HashMap<AccessPattern, Object>) null);
      ClassUtil.getPackageName(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.classNameOf((Object) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*kIG]D;4],");
      StackTraceElement stackTraceElement0 = new StackTraceElement("*kIG]D;4],", "0pq^ BXK0h*u6]T.|E", "0pq^ BXK0h*u6]T.|E", (-646));
      StackTraceElement stackTraceElement1 = new StackTraceElement("*kIG]D;4],", "0pq^ BXK0h*u6]T.|E", (String) null, (-646));
      Class<SimpleModule> class0 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.lang.String", sQLSyntaxErrorException0);
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
      Class<TextNode> class1 = TextNode.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Object> class2 = Object.class;
      ClassUtil.nameOf(class1);
      Short short0 = new Short((short)0);
      Class<MapType> class3 = MapType.class;
      ClassUtil.hasClass(class0, class3);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl((Object) class3);
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.nonNullString("Cannot figure out type for EnumMap (odd JDK platform?)");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      placeholderForType0.toString();
      ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      ClassUtil.backticked("Cannot figure out type for EnumMap (odd JDK platform?)");
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterAnnotations();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<MapLikeType> class0 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.getClassDescription(double0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.backticked("`java.lang.Double`");
      Class<Object> class1 = Object.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl((Object) "`java.lang.Double`");
      ClassUtil.findConstructor(class0, false);
      ClassUtil.backticked((String) null);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*kIG]D;4],");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("*kIG]D;4],", "0pq^ BXK0h*u6]T.|E", "0pq^ BXK0h*u6]T.|E", (-646));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("*kIG]D;4],", "0pq^ BXK0h*u6]T.|E", (String) null, 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      Class<SimpleModule> class1 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      Class<Object> class3 = Object.class;
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getGenericParameterTypes();
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getAnnotatedReceiverType();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      constructor0.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      constructor0.getDeclaredAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<IOException> class4 = IOException.class;
      ClassUtil.getGenericInterfaces(class4);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getDeclaredAnnotations();
      ClassUtil.isBogusClass(class4);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature1);
      JsonFactory jsonFactory4 = jsonFactory3.setInputDecorator((InputDecorator) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(429);
      JsonFactory.Feature jsonFactory_Feature2 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory4.enable(jsonFactory_Feature2);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "BIG_DECIMAL");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(jsonMappingException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "JSON", sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", sQLWarning0);
      ClassUtil.getRootCause(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil");
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      Short short0 = new Short((short)8);
      ClassUtil.hasClass(short0, class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      PlaceholderForType placeholderForType1 = ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      ClassUtil.quotedOr(placeholderForType1, "(): return type is not instance of java.util.Map");
      Class<Float> class2 = Float.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.getDeclaringClass(class3);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.isProxyType(class4);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Byte> class1 = Byte.class;
      Class<Void> class2 = Void.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.isNonStaticInnerClass(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      ClassUtil.nameOf((Named) null);
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Boolean> class3 = Boolean.class;
      typeFactory1.constructCollectionLikeType(class1, class3);
      // Undeclared exception!
      try { 
        AbstractDeserializer.constructForNonPOJO((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Void> class0 = Void.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n6aw5CBSGj'");
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNull((HashMap<AccessPattern, Object>) null, (HashMap<AccessPattern, Object>) null);
      ClassUtil.getPackageName(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isProxyType(class0);
      ClassUtil.classNameOf((Object) null);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      AccessibleObject.setAccessible((AccessibleObject[]) fieldArray0, false);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      Class<Object> class4 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class4, false);
      constructor1.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor0.getConstructor();
      Long long0 = new Long(367L);
      ClassUtil.getClassDescription(class4);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getGenericParameterTypes();
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getAnnotatedReceiverType();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      constructor0.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      constructor0.getDeclaredAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<?> class4 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.findClassAnnotations(class4);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("; expected type PropertyNamingStrategy or Class<PropertyNamingStrategy> instead");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "size");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterAnnotations();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.primitiveType(class0);
      ClassUtil.hasClass((Object) null, (Class<?>) null);
      Integer integer0 = new Integer(0);
      ClassUtil.classOf(integer0);
      ClassUtil.nullOrToString((Object) null);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "0 [PwN");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.canBeABeanType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class2, false);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      SimpleType simpleType1 = simpleType0.withValueHandler(class1);
      ClassUtil.rawClass(simpleType1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      Class<Byte> class2 = Byte.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.isNonStaticInnerClass(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      ClassUtil.nameOf((Named) null);
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class1, class2);
      ClassUtil.classNameOf(collectionLikeType0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.quotedOr(class0, "_vto]0DU.l");
      ClassUtil.hasEnclosingMethod(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("write raw value", (Throwable) null);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.hasEnclosingMethod(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaredMethods(class3);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.getLocalizedMessage();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Aeo}~q", sQLRecoverableException0);
      sQLNonTransientConnectionException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "Aeo}~q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Aeo}~q
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature1);
      JsonFactory jsonFactory4 = jsonFactory3.setInputDecorator((InputDecorator) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(429);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*kIG]D;4],");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      String string0 = "0pq^ BXK0h*u6]T.|E";
      StackTraceElement stackTraceElement0 = new StackTraceElement("*kIG]D;4],", "0pq^ BXK0h*u6]T.|E", "0pq^ BXK0h*u6]T.|E", (-646));
      stackTraceElementArray0[0] = stackTraceElement0;
      int int0 = 0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("*kIG]D;4],", "0pq^ BXK0h*u6]T.|E", (String) null, 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("*kIG]D;4],", "Vz)om0u5w<ti>1", (String) null, 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      String string1 = "0Fv.&S~G5";
      String string2 = "ZERO_LENGTH_ENUM_ARRAY";
      StackTraceElement stackTraceElement3 = null;
      try {
        stackTraceElement3 = new StackTraceElement((String) null, "0Fv.&S~G5", "ZERO_LENGTH_ENUM_ARRAY", (-646));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.getClassDescription(double0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      Class<Byte> class2 = Byte.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.isNonStaticInnerClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.classNameOf(classUtil0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl((Object) classUtil0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("enum");
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("enum");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0);
      mockPrintStream0.print((double) (-2));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '4';
      charArray0[2] = 'q';
      charArray0[3] = 'D';
      charArray0[4] = 'n';
      charArray0[5] = 'C';
      charArray0[6] = '2';
      charArray0[7] = 'Q';
      charArray0[8] = 'a';
      filteringGeneratorDelegate0.writeString(charArray0, (-1), (-2));
      CharacterEscapes characterEscapes0 = filteringGeneratorDelegate0.getCharacterEscapes();
      jsonFactory2.setCharacterEscapes(characterEscapes0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(252);
      placeholderForType0.getErasedSignature();
      placeholderForType0.hasGenericTypes();
      ClassUtil.getClassDescription(placeholderForType0);
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(252);
      placeholderForType0.actualType((JavaType) placeholderForType1);
      ClassUtil.classOf(placeholderForType1);
      ClassUtil.getClassMethods(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.isConcrete(class2);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentType(placeholderForType1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer.getInteger(")5^");
      ClassUtil.quotedOr((Object) null, "keyUniverse");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isProxyType(class3);
      TypeBindings.emptyBindings();
      ClassUtil.isConcrete(class2);
      ClassUtil.getDeclaredMethods(class1);
      Class<Integer> class4 = Integer.class;
      ClassUtil.nameOf(class4);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.isBogusClass(class5);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class2);
      SQLWarning sQLWarning0 = new SQLWarning();
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        sQLWarning0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*kIG]D;4],");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("*kIG]D;4],", "0pq^ BXK0h*u6]T.|E", "0pq^ BXK0h*u6]T.|E", (-646));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("*kIG]D;4],", "0pq^ BXK0h*u6]T.|E", (String) null, 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      Class<SimpleModule> class1 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Character> class3 = Character.class;
      ClassUtil.getGenericInterfaces(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isBogusClass(class3);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class2);
      SQLWarning sQLWarning0 = new SQLWarning();
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        sQLWarning0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.backticked("K{");
      ClassUtil.nonNullString((String) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<MapType> class2 = MapType.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.hasClass((Object) null, class1);
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "serialVersionUID";
      ClassUtil.nonNullString("serialVersionUID");
      ClassUtil.nonNullString("serialVersionUID");
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.primitiveType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("keyType");
      sQLRecoverableException0.spliterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("F7P?J`1SK=.G=ridCK0", "K__tEd>9]-2*)h]o", (-833));
      sQLRecoverableException0.getStackTrace();
      sQLRecoverableException0.initCause(sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(", problem: ", "Ga9823h70^WhpF");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("0y']m;NB6R", "serialVersionUID", "K__tEd>9]-2*)h]o", (-833));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("NULL", "size", "K__tEd>9]-2*)h]o", 8);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "Class ", "serialVersionUID", (-833));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("F7P?J`1SK=.G=ridCK0", "serialVersionUID", "5!];=3bO:m,/1S]}", 484);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = null;
      try {
        stackTraceElement4 = new StackTraceElement("Cannot figure out type for EnumSet (odd JDK platform?)", (String) null, (String) null, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      byte[] byteArray0 = new byte[0];
      jsonFactory0.createParser(byteArray0);
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = '^';
      charArray0[2] = 'p';
      charArray0[3] = '&';
      charArray0[4] = 'M';
      jsonFactory1.createParser("JSON");
      charArray0[5] = ')';
      charArray0[6] = ':';
      charArray0[7] = '|';
      jsonFactory1.createParser(charArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      jsonMappingException0.fillInStackTrace();
      ClassUtil.nullOrToString(jsonMappingException0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      typeResolutionContext_Basic0.resolveType(javaType0);
      typeFactory0.constructType((Type) class1, typeBindings0);
      ClassUtil.findConstructor(class1, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[2];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, (Constructor<?>) null, annotationMap0, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassUtil.backticked("/_3<`3k");
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getDeclaringClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getPackageName(class1);
      ClassUtil.hasClass(class0, class1);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class3, true);
      ClassUtil.emptyIterator();
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.isProxyType(class4);
      ClassUtil.isLocalType(class0, true);
      Class<Object> class5 = Object.class;
      ClassUtil.getClassMethods(class5);
      Class<Object> class6 = Object.class;
      ClassUtil.nameOf(class6);
      Class<ResolvedRecursiveType> class7 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class7, true);
      Class<AccessPattern> class8 = AccessPattern.class;
      ClassUtil.getPackageName(class8);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<NoClass> class1 = NoClass.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      Class<String> class3 = String.class;
      ClassUtil.getClassMethods(class3);
      Class<String> class4 = String.class;
      ClassUtil.isNonStaticInnerClass(class4);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class4, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isProxyType(class3);
      Class<Boolean> class4 = Boolean.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      // Undeclared exception!
      try { 
        ReferenceType.construct(class4, typeBindings0, (JavaType) null, javaTypeArray0, javaTypeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockIOException mockIOException0 = new MockIOException();
      MockFile mockFile0 = new MockFile("ZERO_LENGTH_ENUM_ARRAY", "com.fasterxml.jackson.core.json.JsonWriteContext");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockIOException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.core.json.JsonWriteContext", hashMap0, mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.emptyIterator();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class0);
      Byte byte0 = new Byte((byte) (-67));
      ClassUtil.quotedOr(byte0, "HFFbHJ0XW");
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "7F&;/hxTa7&f");
      sQLTransientException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLTransientException0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (byte) (-67));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1877;
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getOuterClass(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.hasClass(class0, (Class<?>) null);
      ClassUtil.findRawSuperTypes(class2, class2, false);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getOuterClass(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.hasClass(class0, (Class<?>) null);
      ClassUtil.findRawSuperTypes(class2, class2, false);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "pK^X";
      ClassUtil.nonNullString("pK^X");
      ClassUtil.emptyIterator();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      Long long0 = new Long(0L);
      Class<Double> class1 = Double.class;
      ClassUtil.hasClass(long0, class1);
      Byte byte0 = new Byte((byte)0);
      String string1 = "keyUniverse";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, byte0, "keyUniverse");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Byte (of class java.lang.Double) must override method 'keyUniverse'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Error> class0 = Error.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class0, false);
      Class<Void> class1 = Void.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericInterfaces(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cB,Co,%$9<-H.");
      Class<Object> class1 = Object.class;
      ClassUtil.nameOf(class1);
      Short short0 = new Short((short)8);
      Class<Module> class2 = Module.class;
      ClassUtil.hasClass(class0, class2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((short)8);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      Double double0 = new Double(6226.23679057);
      Class<Double> class3 = Double.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Character> class0 = Character.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      String string0 = "g";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("primitive", "g");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLNonTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      ClassUtil.throwIfRTE(throwable0);
      ClassUtil.nullOrToString(sQLInvalidAuthorizationSpecException0);
      ClassUtil.nonNullString("java.sql.SQLInvalidAuthorizationSpecException@0000000005");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockRuntimeException0, false);
      int int0 = 0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      int int1 = (-1203);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "java.sql.SQLInvalidAuthorizationSpecException@0000000005", (-1203));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      Class<Boolean> class2 = Boolean.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertEquals(2, typeArray0.length);
  }
}
