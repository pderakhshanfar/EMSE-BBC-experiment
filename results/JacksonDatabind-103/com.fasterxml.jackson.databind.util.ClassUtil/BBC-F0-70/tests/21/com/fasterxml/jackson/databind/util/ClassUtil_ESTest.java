/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:46:04 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.isConcrete((Member) constructor0);
      Class<Double> class1 = Double.class;
      ClassUtil.isLocalType(class1, false);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isJacksonStdImpl(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, referenceType0);
      CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType2 = ClassUtil.nonNull(collectionLikeType0, collectionLikeType1);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withTypeHandler(collectionLikeType2);
      ReferenceType referenceType2 = (ReferenceType)referenceType1.withStaticTyping();
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType2, (JavaType[]) null, (JavaType) collectionLikeType2);
      ClassUtil.rawClass(collectionType0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("^,&", "^,&");
      MockError mockError0 = new MockError(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(mockError0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<DoubleNode> class1 = DoubleNode.class;
      ClassUtil.findSuperTypes(class1, class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes(class0, class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<Integer> class3 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(resolvedRecursiveType0, class3);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.type.ResolvedRecursiveType`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<AccessibleObject>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<Float> class1 = Float.TYPE;
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, true);
      int[] intArray0 = new int[2];
      intArray0[0] = (-741590252);
      intArray0[1] = (-741590252);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockIOException mockIOException0 = new MockIOException(mockRuntimeException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("!Tm(?oQN$v", "!Tm(?oQN$v", (-741590252), intArray0, mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.primitiveType(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Long long0 = new Long(0L);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(long0, class0, ", problem: ");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      MockFile mockFile0 = new MockFile("3i)]:jJUk*{\"DM|a", "JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('k');
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) printStream0);
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      JsonMappingException.from(jsonGenerator0, "JSON", throwable0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from number 0: , problem: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1853514379));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (Throwable) null);
      Throwable throwable0 = ClassUtil.getRootCause(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Iterator<ArrayType> iterator0 = ClassUtil.emptyIterator();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class0, false);
      objectMapper0.readerForUpdating(iterator0);
      Class<MapType> class1 = MapType.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      ClassUtil.getDeclaredFields(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      MockFile.createTempFile("IdnTmr*aT", ";8Z6=e[Dqg_)AL9uAG");
      try { 
        MockURL.URL(";8Z6=e[Dqg_)AL9uAG", (String) null, ";8Z6=e[Dqg_)AL9uAG");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: ;8z6=e[dqg_)al9uag
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      MockException mockException0 = new MockException();
      SQLDataException sQLDataException0 = new SQLDataException(mockException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("UTF-16BE", sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: UTF-16BE
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(accessPattern0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      // Undeclared exception!
      try { 
        objectReader0.at("Current context not Array but ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"Current context not Array but \"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = Character.valueOf('\\');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-nJi6-]bHi1kq,2bt-", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper1, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-1345), (-1149));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileReader0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isJacksonStdImpl(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@<V");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockError mockError0 = new MockError("Null passed for `valueType` of `findValueSerializer()`");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.isConcrete((Member) constructor0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal(40.0806);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "q;Gq=,A>4g");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("q;Gq=,A>4g", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from number 40.08059999999999689634933019988238811492919921875: q;Gq=,A>4g
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassUtil.nonNull((Annotation) null, (Annotation) null);
      Character character0 = Character.valueOf('m');
      ClassUtil.nonNull((Character) null, character0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isConcrete(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "o$YOvu");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", jsonMappingException0);
      mockRuntimeException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.canBeABeanType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionType0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(javaTypeArray0[0]);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(arrayType1, arrayType0);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 4112);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.nonNullString("Mw),*_.KQm.A@;o@vp");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findEnumType(class1);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, ";^iAF.a");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.module.SimpleModule` from number 1: ;^iAF.a
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('}');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      byte[] byteArray0 = new byte[1];
      iOContext1.allocTokenBuffer();
      byteArray0[0] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1536, objectMapper1, (OutputStream) null, byteArray0, 2, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("D3s\"TiSAd`Wq", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: D3s\"TiSAd`Wq
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      Class<DoubleNode> class1 = DoubleNode.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<CollectionType> class2 = CollectionType.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-708825413));
      placeholderForType0.getErasedSignature();
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
      MockIOException mockIOException0 = new MockIOException("$-708825412");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.backticked("com.fasterxml.jacks");
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Short short0 = new Short((short)1966);
      Class<?> class0 = ClassUtil.classOf(short0);
      ClassUtil.verifyMustOverride(class0, short0, "@'(vV");
      ClassUtil.backticked("@'(vV");
      ClassUtil.getClassDescription(short0);
      Class<Character> class1 = Character.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.findConstructor(class2, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.lang.String", "`java.lang.Short`");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<MapType> class1 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Character character0 = Character.valueOf('Z');
      ClassUtil.nullOrToString(character0);
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperTypes(class2, class2, list0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isNonStaticInnerClass(class0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Integer> class1 = Integer.TYPE;
      List<Class<?>> list0 = new LinkedList<Class<CollectionLikeType>>();
      ClassUtil.getConstructors(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getConstructors(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isConcrete(class1);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "v^ I9NW");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_EMBEDDED_OBJECT: v^ I9NW
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<AccessibleObject>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLException sQLException0 = new SQLException("r9W8aC0");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("r9W8aC0", "PfD>e++86J", sQLException0);
      sQLException0.initCause(sQLIntegrityConstraintViolationException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("=Ad2DGu", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 2806;
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2806);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rPfD5B");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2806, objectReader0, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getClassDescription(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Z* T{yQNV|=\"$t", "com.fasterxml.jackson.databind.util.NameTransformer$Chained", hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`java.lang.reflect.AccessibleObject`", "", sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLSyntaxErrorException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "X0i", 2, hashMap0, sQLClientInfoException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y*i6YM_$5Qn{^9QA`");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.hasClass(accessPattern0, class0);
      ClassUtil.getConstructors(class0);
      MockException mockException0 = new MockException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, false);
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.nameOf(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      CollectionLikeType collectionLikeType0 = collectionType0.withValueHandler("`com.fasterxml.jackson.databind.util.AccessPattern`");
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType1, collectionLikeType1);
      ReferenceType referenceType1 = referenceType0.withValueHandler(collectionLikeType1);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(class1);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentTypeHandler(referenceType2);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType2, (Class<?>) class0, false);
      ClassUtil.findEnumType(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`com.fasterxml.jackson.databind.util.AccessPattern`", "`com.fasterxml.jackson.databind.util.AccessPattern`");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "`com.fasterxml.jackson.databind.util.AccessPattern`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `com.fasterxml.jackson.databind.util.AccessPattern`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.nonNull((Annotation) null, (Annotation) null);
      Class<Double> class2 = Double.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      Class<String> class3 = String.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class3, true);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("Cannot figure out type for EnumMap (odd JDK platform?)");
      DataTruncation dataTruncation0 = new DataTruncation(2048, true, true, 3, 3, mockIOException0);
      dataTruncation0.getNextWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.io.IOException", "Cannot figure out type for EnumMap (odd JDK platform?)", (Throwable) null);
      ClassUtil.throwIfError(sQLTransientConnectionException0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot figure out type for EnumMap (odd JDK platform?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.findConstructor(class0, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-708825413));
      placeholderForType0.getErasedSignature();
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
      ClassUtil.nonNullString("byte[]");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class0);
      MapType mapType1 = mapType0.withKeyType(placeholderForType0);
      Object object0 = ClassUtil.defaultValue(class0);
      MapType mapType2 = mapType1.withTypeHandler(object0);
      ClassUtil.quotedOr(mapType2, "$-708825412");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "enum", (Throwable) mockError0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.java.lang.String", "enum", jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.java.lang.String", sQLRecoverableException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",Wja r:C {g0");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "h B");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockError mockError0 = new MockError();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientConnectionException0);
      sQLTimeoutException0.getLocalizedMessage();
      sQLNonTransientConnectionException0.initCause(sQLTimeoutException0);
      sQLNonTransientConnectionException0.getSuppressed();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.nonNull((Annotation) null, (Annotation) null);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Function<Object, AccessPattern> function0 = (Function<Object, AccessPattern>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      enumMap0.computeIfAbsent(accessPattern0, function0);
      Object object0 = new Object();
      ClassUtil.findEnumType(enumMap0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isLocalType(class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L=!@G,uNI$");
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.findSuperTypes(class0, class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.nonNullString("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      Byte byte0 = new Byte((byte)25);
      Class<?> class3 = ClassUtil.classOf(byte0);
      ClassUtil.hasClass("L=!@G,uNI$", class3);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class4);
      Class<MapLikeType> class5 = MapLikeType.class;
      Class<Integer> class6 = Integer.class;
      ClassUtil.findSuperTypes(class5, class6, list0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isLocalType(class4, true);
      ClassUtil.nonNullString((String) null);
      Class<MapType> class7 = MapType.class;
      ClassUtil.findEnumType(class7);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ObjectReader objectReader1 = objectReader0.withRootName("y9Tb7]#");
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0, deserializationFeatureArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectReader2, byteArrayOutputStream0, byteArray0, 1, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Byte byte0 = new Byte((byte)5);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(byte0, class0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Short` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Byte`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jacks");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-5728));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jacks", integer0, "ENL{SA8VpRC.fLpp");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, placeholderForType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, placeholderForType0);
      ClassUtil.nameOf((Named) beanProperty_Std1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-708825413));
      placeholderForType0.getErasedSignature();
      placeholderForType0.getSuperClass();
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericInterfaces(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Class<?> class1 = ClassUtil.rawClass(javaType0);
      ClassUtil.getClassDescription(javaType0);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.isConcrete(class2);
      ClassUtil.getClassDescription((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassUtil.nonNullString("jFu[x]tJ+3FhoYUA157");
      MockException mockException0 = new MockException();
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.getDeclaringClass(class2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.type", sQLNonTransientConnectionException0);
      sQLTimeoutException0.getSuppressed();
      ClassUtil.throwIfError(sQLTimeoutException0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<IOException> class3 = IOException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class3, ";[T?@]eel>+!`$mQV", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      Class<Double> class4 = Double.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[0];
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, (AnnotationMap) null, annotationMapArray0);
      Class<Annotation> class5 = Annotation.class;
      annotatedConstructor0.getAnnotation(class5);
      AnnotationMap.of(class4, (Annotation) null);
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, false);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Long> class1 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 8);
      coreXMLDeserializers_Std0.getValueType();
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      placeholderForType0.getErasedSignature();
      Class<String> class0 = String.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.isConcrete((Member) constructor0);
      Class<Object> class2 = Object.class;
      ClassUtil.hasEnclosingMethod(class2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = ClassUtil.nonNull((Object) class0, (Object) bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, (-1192), dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, tokenFilter0, false, false);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) filteringParserDelegate0, "com.fasterxml.jacks", (Throwable) batchUpdateException0);
      ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%s[visible=%b,ignore=%b,explicitName=%b]");
      Class<Short> class0 = Short.TYPE;
      Class<AccessPattern> class1 = AccessPattern.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.createInstance(class1, true);
      ClassUtil.emptyIterator();
      Class<AccessPattern> class2 = AccessPattern.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nameOf(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.backticked("`com.fasterxml.jackson.databind.util.AccessPattern`");
      Class<Void> class4 = Void.class;
      ClassUtil.hasEnclosingMethod(class4);
      ClassUtil.getDeclaredFields(class4);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(5);
      placeholderForType0.isReferenceType();
      ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('`');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerWithView(class4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectReader0, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Throwable throwable0 = null;
      SQLWarning sQLWarning0 = new SQLWarning("k(k3`(", "`com.fasterxml.jackson.databind.util.AccessPattern`", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: k(k3`(
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-708825413));
      DataTruncation dataTruncation0 = new DataTruncation((-708825413), true, false, (-708825413), (-708825413));
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "1Oi)Y,Od");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-708825413));
      placeholderForType0.getInterfaces();
      placeholderForType0.getErasedSignature();
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReturnType();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.nonNull((Annotation) null, (Annotation) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.classNameOf("G0Sh");
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.nullOrToString(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.isBogusClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class2);
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Object> enumMap2 = new EnumMap<AccessPattern, Object>(enumMap0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      enumMap1.containsValue(typeBindings0);
      enumMap1.put(accessPattern0, resolvedRecursiveType0);
      enumMap2.remove((Object) class2);
      ClassUtil.findEnumType(enumMap1);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getPackageName(class3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Float> class1 = Float.class;
      ClassUtil.isBogusClass(class1);
      Class<Short> class2 = Short.TYPE;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.isBogusClass(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class4);
      enumMap0.clone();
      EnumMap<AccessPattern, Object> enumMap1 = new EnumMap<AccessPattern, Object>(enumMap0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Byte> class5 = Byte.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class5, typeBindings0);
      enumMap0.put(accessPattern0, resolvedRecursiveType0);
      enumMap1.remove((Object) null);
      ClassUtil.findEnumType(enumMap0);
      Class<String> class6 = String.class;
      ClassUtil.getEnclosingClass(class6);
      Class<Integer> class7 = Integer.class;
      ClassUtil.findConstructor(class7, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constructor0.getGenericParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<Error> class1 = Error.class;
      ClassUtil.getPackageName(class1);
      SQLException sQLException0 = new SQLException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.lang", sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "net.sf.cglib.proxy.java.lang.String");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.nameOf(class0);
      SQLException sQLException0 = new SQLException("elementType");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      ClassUtil.throwIfError(sQLException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver((SubtypeResolver) null);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility((JsonAutoDetect.Value) null);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getClassDescription(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Z* T{yQNV|=\"$t", "com.fasterxml.jackson.databind.util.NameTransformer$Chained", hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "X0i", 2, hashMap0, sQLClientInfoException0);
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException1);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isLocalType(class0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.isCollectionMapOrArray(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      constructor0.getGenericParameterTypes();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      Locale locale0 = Locale.ROOT;
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper2);
      ObjectMapper objectMapper3 = new ObjectMapper(jsonFactory1);
      JsonFactory jsonFactory2 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory2.disable(jsonFactory_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassUtil.backticked("G0Sh");
      MockException mockException0 = new MockException();
      Class<Short> class0 = Short.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<AccessibleObject> class0 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.quotedOr((Object) null, "N<]>9%bxQ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      stringWriter1.close();
      stringWriter1.append((CharSequence) "N<]>9%bxQ");
      stringWriter0.close();
      ClassUtil.emptyIterator();
      Class<Float> class0 = Float.class;
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.classNameOf((Object) null);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getPackageName(class3);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isCollectionMapOrArray(class1);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class4);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil classUtil0 = new ClassUtil();
      MockError mockError0 = new MockError(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.TYPE;
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<Byte> class3 = Byte.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ClassUtil.getDeclaredMethods(class3);
      Class<String> class4 = String.class;
      ClassUtil.primitiveType(class4);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.isBogusClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class2);
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Object> enumMap2 = new EnumMap<AccessPattern, Object>(enumMap1);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      enumMap0.put(accessPattern0, resolvedRecursiveType0);
      enumMap2.remove((Object) class1);
      ClassUtil.findEnumType(enumMap1);
      Class<Void> class4 = Void.TYPE;
      ClassUtil.getEnclosingClass(class4);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getPackageName(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.isBogusClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class2);
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Object> enumMap2 = new EnumMap<AccessPattern, Object>(enumMap0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      enumMap1.put(accessPattern0, resolvedRecursiveType0);
      enumMap2.remove((Object) class2);
      ClassUtil.findEnumType(enumMap1);
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassUtil.nonNullString("");
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<IOException> class1 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapType mapType1 = mapType0.withContentTypeHandler(class1);
      MapType mapType2 = mapType1.withKeyType(mapType0);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<NoClass> class3 = NoClass.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      MapLikeType mapLikeType0 = mapType2.withKeyValueHandler(resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("r9tp", class0, "Failed to find default constructor of class ");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(jsonMappingException0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(mockRuntimeException0);
      referenceType2.withValueHandler(referenceType0);
      referenceType0.withStaticTyping();
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.util.AccessPattern` from String \"r9tp\": Failed to find default constructor of class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0007f# Cd#+h]P");
      System.setCurrentTimeMillis(0L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ArrayType> class0 = ArrayType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">R;");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(tokenFilter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, ">R;", jsonLocation0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "net.sf.cglib.proxy.java.lang.String", 500);
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      Class<Object> class1 = Object.class;
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, (Map<String, ClientInfoStatus>) null);
      ClassUtil.throwIfIOE(sQLClientInfoException0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaredMethods(class3);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser");
      Class<String> class1 = String.class;
      Class<Byte> class2 = Byte.TYPE;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.defaultValue(class2);
      ClassUtil.isProxyType(class1);
      Class<String> class3 = String.class;
      ClassUtil.findConstructor(class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      Class<Short> class2 = Short.TYPE;
      ClassUtil.isBogusClass(class2);
      ClassUtil.findClassAnnotations(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class3);
      Class<Character> class4 = Character.class;
      ClassUtil.isLocalType(class4, false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.nullOrToString(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short short0 = new Short((short)1227);
      ClassUtil.nullOrToString(short0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class2);
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Object> enumMap2 = new EnumMap<AccessPattern, Object>(enumMap1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "u)XM");
      objectMapper1.getDeserializationContext();
      Throwable throwable0 = null;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("java.lang.Short@0000000001");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Short short0 = new Short((short)1227);
      ClassUtil.nullOrToString(short0);
      Class<NoClass> class0 = NoClass.class;
      Class<Long> class1 = Long.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findRawSuperTypes(class2, class2, true);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findSuperTypes(class3, class0);
      ClassUtil.emptyIterator();
      Class<Short> class4 = Short.class;
      ClassUtil.findSuperClasses(class1, class4, true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.nullOrToString(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.getClassDescription("java.lang.Class@0000000001");
      Class<Object> class3 = Object.class;
      ClassUtil.createInstance(class3, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<Character> class0 = Character.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<cH");
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.isLocalType(class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class3);
      ClassUtil.emptyIterator();
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.findSuperClasses(class2, class4, true);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(":k?q1HxT-RMyrJ8CR|z");
      ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException(":f;|4txQ@Y#GR-Z_j", sQLIntegrityConstraintViolationException0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getEnclosingClass(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, "com.fasterxml.jackso");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Float) must override method 'com.fasterxml.jackso'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isLocalType(class2, false);
      Class<Double> class3 = Double.class;
      Class<Void> class4 = Void.class;
      Class<AccessPattern> class5 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class4, class5, false);
      Class<SimpleType> class6 = SimpleType.class;
      ClassUtil.findSuperTypes(class3, class6);
      ClassUtil.emptyIterator();
      Class<Object> class7 = Object.class;
      ClassUtil.findSuperClasses(class7, class0, false);
      ClassUtil.getPackageName(class4);
      Class<JsonMappingException> class8 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class8, class5);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Short short0 = new Short((short)1227);
      ClassUtil.nullOrToString(short0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      System.setCurrentTimeMillis((-2147483648L));
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1147);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) bufferedWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) charArrayWriter0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-4017));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocation jsonLocation0 = new JsonLocation(mapType0, 0L, 2, 304);
      JsonMappingException jsonMappingException0 = new JsonMappingException(filterOutputStream0, "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", jsonLocation0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException("", throwable0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getRootCause(mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil classUtil0 = new ClassUtil();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("local/anonymous");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException("", throwable0);
      Class<Double> class2 = Double.class;
      ClassUtil.getEnclosingClass(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: local/anonymous
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.defaultValue(class0);
      ClassUtil.isConcrete(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getClassMethods(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.getDeclaredFields(class1);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class3);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.getDeclaringClass(class2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.type", sQLNonTransientConnectionException0);
      sQLTimeoutException0.getSuppressed();
      Class<Short> class3 = Short.TYPE;
      Class<String> class4 = String.class;
      ClassUtil.isBogusClass(class4);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getUpdateCounts();
      batchUpdateException0.getNextException();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (-5291), (Throwable) null);
      sQLWarning0.setNextException(sQLNonTransientConnectionException0);
      ClassUtil.throwIfRTE(batchUpdateException0);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class5);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isConcrete(class1);
      ClassUtil.nameOf(class3);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isJacksonStdImpl(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      MockThrowable mockThrowable0 = new MockThrowable("size");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "size";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) objectOutputStream0;
      objectArray0[4] = (Object) "size";
      objectArray0[5] = (Object) "size";
      objectArray0[6] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("size", objectArray0);
      mockThrowable0.printStackTrace(printWriter0);
      mockThrowable0.printStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", mockThrowable0);
      mockThrowable0.addSuppressed(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0, "YPe'dTvbt9H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YPe'dTvbt9H
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      Class<IOException> class2 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "'): found multiple explicit names: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Void> class0 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.primitiveType(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.isLocalType(class3, true);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil classUtil0 = new ClassUtil();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("local/anonymous");
      ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(97);
      placeholderForType0.getContentType();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, " is not a primitive type", "org.hibernate.proxy.");
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Iterator<Double> iterator0 = ClassUtil.emptyIterator();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      referenceType0.withStaticTyping();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasClass(iterator0, class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classOf((Object) null);
      Class<ReferenceType> class1 = ReferenceType.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.weirdStringException("vals", (Class<?>) null, "local/anonymous");
      Class<Error> class2 = Error.class;
      Class<Object> class3 = Object.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = null;
      try {
        resolvedRecursiveType0 = new ResolvedRecursiveType((Class<?>) null, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil classUtil0 = new ClassUtil();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("local/anonymous");
      ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException("", sQLIntegrityConstraintViolationException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("NOT_AVAILABLE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.throwRootCauseIfIOE(mockIOException0);
      Class<Long> class2 = Long.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, "X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I'");
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = (-683);
      intArray0[2] = 1;
      intArray0[3] = 1146;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.util.ClassUtil", "com.fasterxml.jackson.databind.util.ClassUtil", intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.util.ClassUtil", "array", batchUpdateException0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassUtil.backticked("Argument #%d of factory method %s has no property name annotation; must have name when multiple-parameter constructor annotated as Creator");
      ClassUtil.emptyIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = new Integer(5);
      ClassUtil.classOf(integer0);
      Class<CollectionType> class0 = CollectionType.class;
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, constructor0, "Simple types have no content types; cannot call withContentType()");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.reflect.Constructor (of class com.fasterxml.jackson.databind.type.CollectionType) must override method 'Simple types have no content types; cannot call withContentType()'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.isLocalType(class2, false);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      Class<Annotation> class2 = Annotation.class;
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.isAnnotationPresent(class2);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getAnnotations();
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getGenericSuperclass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.isJacksonStdImpl(class3);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      Class<Short> class2 = Short.TYPE;
      ClassUtil.isBogusClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class3);
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Object> enumMap2 = new EnumMap<AccessPattern, Object>(enumMap0);
      enumMap2.remove((Object) class3);
      ClassUtil.findEnumType(enumMap1);
      ClassUtil.isJacksonStdImpl((Object) enumMap0);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getEnclosingClass(class0);
      String string0 = "DlMcY[IoW9to{S";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DlMcY[IoW9to{S");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockError mockError0 = new MockError();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("DlMcY[IoW9to{S", mockError0);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-383));
      placeholderForType0.getContentType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "|bhIjZ}e&;", " is not a primitive type");
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      Class<String> class2 = String.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.getEnclosingClass(class1);
      Class<Integer> class3 = Integer.class;
      ClassUtil.canBeABeanType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.isLocalType(class2, false);
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class3, class0, true);
      ClassUtil.findSuperTypes(class3, class1);
      ClassUtil.emptyIterator();
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      Class<ResolvedRecursiveType> class5 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class4, class5, false);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<Error> class0 = Error.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, false);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findEnumType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Double> class1 = Double.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.hasClass(class0, class2);
      ClassUtil.emptyIterator();
      ClassUtil.nonNullString("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("serialVersionUID", "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", (-2353));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0^>ZQi 57Ag)zH9k", "'k\"-N2D\"*bz4vk", (-2353), sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("'k\"-N2D\"*bz4vk", "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", (-2353), sQLInvalidAuthorizationSpecException0);
      ClassUtil.getRootCause(sQLTransientConnectionException0);
      MockException mockException0 = new MockException();
      // Undeclared exception!
      try { 
        sQLTransientConnectionException0.initCause(mockException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      constructor0.getGenericParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<Error> class2 = Error.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.getDeclaringClass(class2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.type", sQLNonTransientConnectionException0);
      sQLTimeoutException0.getSuppressed();
      ClassUtil.throwIfError(sQLTimeoutException0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<IOException> class3 = IOException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class3, ";[T?@]eel>+!`$mQV", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      Class<Double> class4 = Double.class;
      boolean boolean0 = false;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[0];
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, (AnnotationMap) null, annotationMapArray0);
      Class<Annotation> class5 = Annotation.class;
      annotatedConstructor0.getAnnotation(class5);
      AnnotationMap annotationMap0 = AnnotationMap.of(class4, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      annotatedField0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperTypes((Class<?>) null, class1);
      ClassUtil.classOf(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.nameOf(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getOuterClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isNonStaticInnerClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      Class<Annotation> class3 = Annotation.class;
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.isAnnotationPresent(class3);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getAnnotations();
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isBogusClass(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.isBogusClass(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class5);
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Object> enumMap2 = new EnumMap<AccessPattern, Object>(enumMap1);
      enumMap2.remove((Object) null);
      ClassUtil.findEnumType(enumMap2);
      ClassUtil.isJacksonStdImpl((Object) enumMap2);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Character character0 = Character.valueOf('+');
      ClassUtil.isJacksonStdImpl((Object) character0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("LuVupI+ tUr&s", ", problem: ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("!+{*>", "!+{*>", (-1607), sQLIntegrityConstraintViolationException0);
      ClassUtil.throwIfError(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classOf((Object) null);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.hasClass(class0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = "#'H407}#-O9=0^n";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "#'H407}#-O9=0^n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method '#'H407}#-O9=0^n'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class0, ", problem: ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Byte) must override method ', problem: '
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getClassMethods(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.canBeABeanType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Float> class2 = Float.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.canBeABeanType(class0);
      String string0 = "vals";
      String string1 = "3#0khhGjwx.+Mfi";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("vals", "3#0khhGjwx.+Mfi", 96);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      String string2 = "keyType";
      String string3 = "a-s&d;l[~|~<";
      int int0 = 0;
      StackTraceElement stackTraceElement0 = new StackTraceElement("keyType", "a-s&d;l[~|~<", "3#0khhGjwx.+Mfi", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string4 = null;
      int int1 = 0;
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement("keyType", (String) null, "vals", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("tj%qd[Q.D-iQFBJ", "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("keyUniverse", " (", 0, intArray0, sQLWarning0);
      batchUpdateException0.getUpdateCounts();
      batchUpdateException0.getNextException();
      sQLWarning0.setNextException((SQLException) null);
      ClassUtil.throwIfRTE(sQLWarning0);
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class1 = Double.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, jsonMappingException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/x+Ic5I8", sQLSyntaxErrorException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Short short0 = new Short((short)1277);
      ClassUtil.nullOrToString(short0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findClassAnnotations(class2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ClassUtil.emptyIterator();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("local/anonymous", class0, "vals");
      ReferenceType referenceType2 = referenceType1.withValueHandler(jsonMappingException0);
      SimpleType simpleType0 = referenceType2.withStaticTyping();
      ClassUtil.rawClass(simpleType0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from String \"local/anonymous\": vals
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      Short short0 = new Short((short) (-1));
      ClassUtil.classOf(short0);
      String string0 = "$\"~$A*vlQ";
      ClassUtil.quotedOr(class0, "$\"~$A*vlQ");
      Throwable throwable0 = null;
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      int int0 = (-1078);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil classUtil0 = new ClassUtil();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("local/anonymous");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException("", throwable0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.throwRootCauseIfIOE(mockIOException0);
      Class<Long> class2 = Long.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object object0 = new Object();
      Class<?> class0 = ClassUtil.classOf(object0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
