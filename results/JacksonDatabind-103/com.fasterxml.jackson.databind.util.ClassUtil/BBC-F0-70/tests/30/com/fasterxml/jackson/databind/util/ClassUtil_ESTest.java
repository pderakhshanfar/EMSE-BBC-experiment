/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:57:46 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double0 = new Double((-2358.51));
      MockError mockError0 = new MockError();
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext0);
      ObjectReader objectReader1 = objectReader0.at((JsonPointer) null);
      ObjectReader objectReader2 = objectReader1.with((InjectableValues) null);
      Class<NoClass> class0 = NoClass.class;
      objectReader2.withView(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("annotation");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "-J)ih");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -J)ih
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader2 = objectReader1.forType(javaType0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[8];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader2;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader1;
      Locale locale0 = Locale.ITALIAN;
      ObjectReader objectReader3 = objectReader1.with(locale0);
      objectReaderArray0[4] = objectReader3;
      objectReaderArray0[5] = objectReader1;
      objectReaderArray0[6] = objectReader0;
      objectReaderArray0[7] = objectReader0;
      ObjectReader objectReader4 = objectReader2.withFormatDetection(objectReaderArray0);
      Class<Module> class0 = Module.class;
      ObjectReader objectReader5 = objectReader4.withView(class0);
      TypeFactory typeFactory0 = objectReader5.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      typeFactory1.constructRawMapType(class1);
      ClassUtil.findSuperTypes(javaType0, class0, false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.canBeABeanType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      objectMapper0.reader(deserializationFeature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<?> class2 = ClassUtil.wrapperType(class1);
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 333);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.hasClass(accessPattern0, class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, MapType> enumMap0 = new EnumMap<ClientInfoStatus, MapType>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<PipedInputStream> class0 = PipedInputStream.class;
      ClassUtil.isConcrete(class0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("k-Ud4qAXn?,;^%JkW/9");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockFileWriter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "k-Ud4qAXn?,;^%JkW/9");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // k-Ud4qAXn?,;^%JkW/9
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("-?`X=nX1*|5#GMvjyx", sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLIntegrityConstraintViolationException0);
      sQLTimeoutException0.printStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ClassUtil.classOf((Object) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      String string0 = "7y76MjFh";
      ClassUtil.nonNullString("7y76MjFh");
      ClassUtil.isJacksonStdImpl((Object) "7y76MjFh");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Character> class0 = Character.class;
      placeholderForType0.isTypeOrSuperTypeOf(class0);
      placeholderForType0.getErasedSignature();
      ClassUtil.getClassDescription(placeholderForType0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory((SerializerFactory) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 236, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperTypes(class0, class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<AccessPattern> class2 = AccessPattern.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      ClassUtil.rawClass(arrayType0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassUtil.backticked("%q}[Q80))l<");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Float> class1 = Float.class;
      Class<Float> class2 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.createInstance(class3, true);
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.isJacksonStdImpl(class3);
      Class<Float> class4 = Float.class;
      ClassUtil.findSuperTypes(class1, class4, list0);
      ClassUtil.primitiveType(class1);
      Class<Integer> class5 = Integer.class;
      Class<Void> class6 = Void.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class5, class6, false);
      ClassUtil.getConstructors(class6);
      Class<ReferenceType> class7 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class7, class0, true);
      ClassUtil.findSuperTypes(class2, class3, list1);
      Class<ArrayType> class8 = ArrayType.class;
      ClassUtil.hasClass(class5, class8);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(5);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("JSON", class1, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.reflect.AccessibleObject` from String \"JSON\": JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Boolean boolean0 = new Boolean("[Vull]");
      ClassUtil.getGenericSuperclass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      FileSystemHandling.shouldAllThrowIOExceptions();
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.range(clientInfoStatus0, clientInfoStatus0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(clientInfoStatus0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasClass(class0, class0);
      Class<InputStream> class1 = InputStream.class;
      Class<SimpleType> class2 = SimpleType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withStaticTyping();
      Long long0 = Long.getLong("Failed to find default constructor of class ", 2030L);
      Long long1 = Long.getLong("Failed to find default constructor of class ", long0);
      ReferenceType referenceType2 = (ReferenceType)referenceType1.withTypeHandler(long1);
      referenceType2.hasGenericTypes();
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withContentValueHandler(long1);
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withContentTypeHandler(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) referenceType4, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Float float0 = Float.valueOf(1.0F);
      ClassUtil.nonNull((Object) null, (Object) float0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      Long long0 = new Long(0L);
      ClassUtil.quotedOr(long0, "O {<j");
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, MapType> enumMap0 = new EnumMap<ClientInfoStatus, MapType>(class0);
      ClassUtil.findEnumType(enumMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassUtil.nonNull((IOException) null, (IOException) null);
      MockIOException mockIOException0 = new MockIOException("\"8Nyn/,?^$8xe");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      enumSet1.clear();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException("write a st_ring", mockThrowable0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("write a st_ring");
      ClassUtil.throwIfError(mockRuntimeException0);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReceiverType();
      Class<Integer> class2 = Integer.class;
      ClassUtil.isLocalType(class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.isJacksonStdImpl((Object) class3);
      Class<Float> class4 = Float.class;
      ClassUtil.primitiveType(class2);
      Class<Double> class5 = Double.class;
      ClassUtil.findConstructor(class5, true);
      ClassUtil.findClassAnnotations(class4);
      Boolean boolean0 = Boolean.valueOf(true);
      ClassUtil.nonNull(boolean0, boolean0);
      SQLDataException sQLDataException0 = new SQLDataException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getParameterTypes();
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.isConcrete((Member) constructor0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      StringReader stringReader0 = new StringReader("Pw");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'Q';
      charArray0[2] = '<';
      charArray0[3] = ':';
      charArray0[4] = 's';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 16777215, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-989), 0, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(1536, (-989));
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "p3&6/@0");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // p3&6/@0
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, false);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isLocalType(class1, false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Integer> class3 = Integer.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ArrayType> class4 = ArrayType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class3, class4, false);
      ClassUtil.isBogusClass(class2);
      ClassUtil.isCollectionMapOrArray(class4);
      ClassUtil.hasEnclosingMethod(class4);
      Class<SimpleType> class5 = SimpleType.class;
      ClassUtil.getConstructors(class5);
      Class<ReferenceType> class6 = ReferenceType.class;
      Class<SimpleType> class7 = SimpleType.class;
      ClassUtil.findSuperTypes(class6, class7, list0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      mockRuntimeException0.getMessage();
      ClassUtil.getClassDescription(mockRuntimeException0);
      ClassUtil.classNameOf(class7);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.java.lang.Integer");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("HV");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("HV", "HV", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "HV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile((File) null, "JSON");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", " kjy27k~U", sQLTransientConnectionException0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) sequenceInputStream0);
      Class<MapLikeType> class0 = MapLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(objectMapper0);
      MappingIterator<ReferenceType> mappingIterator0 = objectMapper1.readValues(jsonParser0, (ResolvedType) simpleType1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) mappingIterator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<String> class1 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      SimpleModule simpleModule0 = new SimpleModule();
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(simpleModule1);
      javaTypeArray0[1] = (JavaType) referenceType2;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType3 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[4]);
      Integer integer0 = Integer.valueOf(56320);
      ReferenceType referenceType4 = referenceType3.withContentValueHandler(integer0);
      ReferenceType referenceType5 = referenceType4.withValueHandler(javaTypeArray0[4]);
      JavaType javaType0 = referenceType5.getAnchorType();
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.nullOrToString((Object) null);
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("zW@u1?iXJKI0Jbu3c", "org.hibernate.proxy.java.lang.Byte");
      MockError mockError0 = new MockError("org.hibernate.proxy.java.lang.Byte", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "K*t T]KIi");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile((File) null, "JSON");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", " kjy27k~U", sQLTransientConnectionException0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) sequenceInputStream0);
      Class<MapLikeType> class0 = MapLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(objectMapper0);
      MappingIterator<ReferenceType> mappingIterator0 = objectMapper1.readValues(jsonParser0, (ResolvedType) simpleType1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) mappingIterator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, MapType> enumMap0 = new EnumMap<ClientInfoStatus, MapType>(class0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      enumMap0.containsValue(decimalNode0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(262144);
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double((-2268.821271546175));
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      objectMapper3.readerFor(class0);
      SQLDataException sQLDataException0 = new SQLDataException("O7|Da!)a<'eACbn\"erE");
      SQLDataException sQLDataException1 = new SQLDataException("JSON", sQLDataException0);
      int int0 = 512;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "O7|Da!)a<'eACbn\"erE", 0, (-1852831698));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getEnclosingClass(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
      ClassUtil.getRootCause(sQLNonTransientException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class1, (TypeBindings) null);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(771, 1702);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<LinkedList> class2 = LinkedList.class;
      typeFactory0.constructCollectionType(class2, javaType0);
      Class<String> class3 = String.class;
      typeFactory1.withCache(lRUMap0);
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class0, class3, class1);
      MapLikeType mapLikeType1 = mapLikeType0.withContentValueHandler((Object) null);
      MapLikeType mapLikeType2 = mapLikeType1.withTypeHandler(typeFactory1);
      ClassUtil.nullOrToString(mapLikeType2);
      Class<Character> class4 = Character.class;
      ClassUtil.findSuperTypes(class2, class4);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ClassUtil.rawClass(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.hasEnclosingMethod(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDeserializationContext_Impl0.getContextualType();
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Short> class0 = Short.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1505);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "org.hibernate.proxy.java.lang.Float");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) byteArrayBuilder0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.hibernate.proxy.java.lang.Float
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, MapType> enumMap0 = new EnumMap<ClientInfoStatus, MapType>(class1);
      ClassUtil.findEnumType(enumMap0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      Class<Double> class1 = Double.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findClassAnnotations(class1);
      Class<Float> class2 = Float.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      ClassUtil.getGenericInterfaces(class3);
      Class<Double> class4 = Double.class;
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(class4);
      ClassUtil.isNonStaticInnerClass(class5);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("/(i0:EgPlAT", class3, "/(i0:EgPlAT");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `float` from String \"/(i0:EgPlAT\": /(i0:EgPlAT
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.backticked("java.lang.Character");
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.hasClass((Object) null, class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, MapType> enumMap0 = new EnumMap<ClientInfoStatus, MapType>(class1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader0);
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory2.constructRawMapType(class2);
      MapType mapType1 = mapType0.withContentValueHandler(typeFactory2);
      enumMap0.put(clientInfoStatus0, mapType1);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      enumMap0.put(clientInfoStatus1, (MapType) null);
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.sql.ClientInfoStatus is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, MapType> enumMap0 = new EnumMap<ClientInfoStatus, MapType>(class0);
      EnumMap<ClientInfoStatus, MapType> enumMap1 = new EnumMap<ClientInfoStatus, MapType>(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(737);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      enumMap1.put(clientInfoStatus0, mapType0);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, MapType> enumMap0 = new EnumMap<ClientInfoStatus, MapType>(class2);
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class0 = IOException.class;
      ClassUtil.findEnumType(class0);
      MockError mockError0 = new MockError();
      mockError0.getCause();
      mockError0.getStackTrace();
      String string0 = "~#}o+x6~$-h22luR^";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "~#}o+x6~$-h22luR^");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      Class<HashMap> class0 = HashMap.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory1.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withContentTypeHandler(typeFactory0);
      mapType1.withStaticTyping();
      MapType mapType2 = mapType0.withKeyValueHandler("Cannot pass `null` as %s");
      mapType2.withContentTypeHandler(classLoader0);
      MapType mapType3 = mapType1.withKeyType(mapType2);
      ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.nonNullString("PIJOP/(9ex7ALIQ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Integer integer0 = new Integer((-717));
      ClassUtil.verifyMustOverride(class0, integer0, "com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer");
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      MockThrowable.getDefaultStackTrace();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withContentTypeHandler(class0);
      MapType mapType3 = mapType2.withKeyType(mapType1);
      ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Double> class0 = Double.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      ClassUtil.nonNull((IOException) null, (IOException) null);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("De=}_rz&&wrR]0LS0r", "De=}_rz&&wrR]0LS0r");
      sQLTimeoutException0.getSuppressed();
      MockIOException mockIOException0 = new MockIOException(", problem: ");
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Double> class1 = Double.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.nonNull((IOException) null, (IOException) null);
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Void> class0 = Void.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "non-static member class");
      ClassUtil.isConcrete(class0);
      Double double0 = new Double(0.0);
      ClassUtil.hasClass(double0, class0);
      ClassUtil.findClassAnnotations(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) pipedOutputStream0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", sQLClientInfoException0);
      MockException mockException0 = new MockException("JSON", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isLocalType(class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(1005.0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer(3);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1246572939), objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", 710, (Map<String, ClientInfoStatus>) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "Can not construct IdKey for null key", (-1246572939), sQLClientInfoException1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor1.getParameterAnnotations();
      Short short0 = new Short((short)2036);
      ClassUtil.isJacksonStdImpl((Object) short0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('[');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 856, objectMapper1, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "serializer");
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      SimpleType simpleType1 = simpleType0.withTypeHandler(class0);
      ClassUtil.rawClass(simpleType1);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Double> class1 = Double.TYPE;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, false);
      Class<Double> class2 = Double.TYPE;
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      ClassUtil.primitiveType(class2);
      Class<Character> class4 = Character.class;
      ClassUtil.isObjectOrPrimitive(class4);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getPackageName(class0);
      Long long0 = new Long(288L);
      ClassUtil.isJacksonStdImpl((Object) long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Double double0 = new Double(1.0);
      Long long0 = new Long(0L);
      ClassUtil.classNameOf(class0);
      Boolean boolean0 = new Boolean(false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("`java.lang.Class`", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`java.lang.Class`", "", (-1853514379), sQLTransientConnectionException0);
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class1, false);
      Short short0 = new Short((short)144);
      ClassUtil.classOf(short0);
      System.setCurrentTimeMillis((short)144);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class2);
      Class<Error> class3 = Error.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Class<Character> class4 = Character.class;
      ClassUtil.findSuperTypes(class2, class4, list0);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      ClassUtil.quotedOr((Object) null, "com.fasterxml.jackson.databind.module.SimpleSerializers");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Throwable throwable0 = ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      ClassUtil.getRootCause(throwable0);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nullOrToString(class0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "java.lang.Class@0000000001");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor1.getParameterAnnotations();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<Long> class2 = Long.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class2, "ATv");
      ClassUtil.throwIfError(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Long` from number -31145977540460781: ATv
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getConstructors(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isConcrete(class0);
      Class<Character> class1 = Character.class;
      Class<Double> class2 = Double.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.findSuperClasses(class0, class2, false);
      ClassUtil.isLocalType(class1, true);
      Class<ArrayType> class3 = ArrayType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class3, (-393805500));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      MockError mockError0 = new MockError(sQLNonTransientException0);
      ClassUtil.classOf(mockError0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getOuterClass(class2);
      Class<Long> class3 = Long.class;
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.findSuperClasses(class3, class4, true);
      Class<Character> class5 = Character.class;
      ClassUtil.isLocalType(class5, false);
      Class<ReferenceType> class6 = ReferenceType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class6, 2187);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(class4);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      MockIOException mockIOException0 = new MockIOException("v^W%Jc;q", sQLTimeoutException0);
      ClassUtil.nonNull((IOException) mockIOException0, (IOException) mockIOException0);
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = false;
      ClassUtil.createInstance(class0, false);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Throwable throwable0 = ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      ClassUtil.nameOf(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.getRootCause(throwable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("zET-q2d+]p", sQLIntegrityConstraintViolationException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLIntegrityConstraintViolationException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getOuterClass(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("array", "array");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: array
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isLocalType(class1, false);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.primitiveType(class1);
      Class<Double> class3 = Double.TYPE;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.primitiveType(class0);
      int[] intArray0 = new int[4];
      intArray0[0] = 114;
      intArray0[1] = 114;
      intArray0[2] = 114;
      intArray0[3] = 114;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Throwable throwable0 = ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.java.io.IOException", "org.hibernate.proxy.java.io.IOException", 114, intArray0, throwable0);
      ClassUtil.throwIfError(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Double> class1 = Double.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-932));
      coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf("com.fasterxml.jackson.databind.node.ShortNode");
      Class<AccessPattern> class2 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "com.fasterxml.jackson.databind.node.ShortNode");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.nonNullString("Failed to instantiate class ");
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "Failed to instantiate class ");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      boolean boolean0 = true;
      mockFile0.setReadable(true, true);
      jsonFactory0.configure(jsonParser_Feature0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Failed to instantiate class ");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: Failed to instantiate class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class2);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet.of(clientInfoStatus0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern0);
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.getPackageName(class2);
      Double double0 = new Double(0.0);
      ClassUtil.nullOrToString(class3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.databind.util", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonpCharacterEscapes0.getEscapeSequence(0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getPackageName(class0);
      ClassUtil.isJacksonStdImpl((Object) "v^W%Jc;q");
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.primitiveType(class1);
      Class<Double> class2 = Double.class;
      Class<Double> class3 = Double.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getDeclaredAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.primitiveType(class1);
      ClassUtil.classNameOf((Object) null);
      Boolean boolean0 = new Boolean(false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getDeclaredAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      Double double0 = new Double(1693.543182);
      Long long0 = new Long(48L);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassUtil.nonNullString("5lV&Ab,[onL");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" at ", " at ", 96);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.setNextException(sQLTimeoutException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("|'0FsM|r`?", throwable0);
      Throwable throwable1 = ClassUtil.throwRootCauseIfIOE(throwable0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<Object> class1 = Object.class;
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<ReferenceType> class3 = ReferenceType.class;
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.getClassMethods(class4);
      ClassUtil.hasClass((Object) null, class1);
      ClassUtil.throwIfRTE(throwable1);
      ClassUtil.isProxyType(class3);
      ClassUtil.nonNullString(" at ");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReceiverType();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.isBogusClass(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findSuperClasses((Class<?>) null, class3, true);
      ClassUtil.isLocalType(class1, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("wyB01w2(oD", hashMap1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "keyType", sQLClientInfoException0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      ClassUtil.isConcrete(class2);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Float> class1 = Float.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumSet.allOf(class3);
      Class<Character> class4 = Character.class;
      ClassUtil.findSuperTypes(class4, class4);
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.lang.Boolean");
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.isProxyType(class5);
      ClassUtil.getGenericInterfaces(class3);
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class6);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getName();
      Class<String> class1 = String.class;
      Constructor<String> constructor1 = ClassUtil.findConstructor(class1, true);
      constructor1.getDeclaredAnnotations();
      boolean boolean0 = new Boolean(true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class2 = Annotation.class;
      constructor1.getDeclaredAnnotation(class2);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getDeclaringClass();
      Class<Byte> class3 = Byte.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.rawClass((JavaType) null);
      classUtil_Ctor1.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor1._ctor, true);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isProxyType(class0);
      Object object0 = new Object();
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.nameOf(class2);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.RuntimeExc", "net.sf.cglib.proxy.java.lang.Error", 778);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.setNextException(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.lang.RuntimeExc", sQLSyntaxErrorException0);
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getClassMethods(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.hasClass(sQLInvalidAuthorizationSpecException0, class3);
      ClassUtil.throwIfRTE(sQLTimeoutException0);
      Class<Void> class4 = Void.class;
      ClassUtil.isProxyType(class4);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getPackageName(class1);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<Float> class2 = Float.class;
      ClassUtil.primitiveType(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.findConstructor(class3, false);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class4);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperTypes(class1, class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getClassDescription(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("0123456789abcdef", "com.fasterxml.jackson.core.json.JsonReadContext");
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Float> class1 = Float.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class4);
      Class<Integer> class5 = Integer.class;
      ClassUtil.isProxyType(class5);
      Object object0 = new Object();
      ClassUtil.getClassDescription(class2);
      Class<Double> class6 = Double.class;
      ClassUtil.findRawSuperTypes(class6, class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<CollectionType> class7 = CollectionType.class;
      ClassUtil.nameOf(class7);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short) (-2639));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.classOf(short0);
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getEnclosingClass(class0);
      SQLWarning sQLWarning0 = new SQLWarning("7>N2Rk}<");
      sQLWarning0.getLocalizedMessage();
      sQLWarning0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7>N2Rk}<
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getPackageName(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.nonNullString("java.lang");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o:qwJn)ee[1i4y? |");
      Class<MapType> class0 = MapType.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o:qwJn)ee[1i4y? |");
      ClassUtil.isCollectionMapOrArray(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getClassMethods(class1);
      ClassUtil.backticked("o:qwJn)ee[1i4y? |");
      ClassUtil.isConcrete(class1);
      System.setCurrentTimeMillis(2710L);
      ClassUtil.classNameOf(class0);
      ClassUtil.getDeclaringClass(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)95;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "c");
      sQLNonTransientException0.addSuppressed(jsonMappingException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("o:qwJn)ee[1i4y? |", "Yg{");
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLNonTransientException0.initCause(sQLIntegrityConstraintViolationException0);
      ClassUtil.throwIfError(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      sQLSyntaxErrorException0.getStackTrace();
      sQLSyntaxErrorException0.fillInStackTrace();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ip-address");
      sQLSyntaxErrorException0.setNextException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-74);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Character> class0 = Character.class;
      ClassUtil.isNonStaticInnerClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Short> class1 = Short.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "T[qgjYIJVPj]!d!O", "T[qgjYIJVPj]!d!O");
      ClassUtil.nonNull((IOException) jsonMappingException0, (IOException) jsonMappingException0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findSuperClasses(class2, class0, false);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getPackageName(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("a djv@W)~e{'\"G", "PlG1]", (-3));
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.nonNullString("V8e]i;i!a34R@");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " has no default (no arg) constructor");
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      Class<Object> class3 = Object.class;
      ClassUtil.createInstance(class3, false);
      Short short0 = new Short((short) (-2086));
      ClassUtil.getClassDescription(short0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((short) (-2086));
      placeholderForType0.hasGenericTypes();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct(class2, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class3, (JavaType) referenceType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Object with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      MockIOException mockIOException0 = new MockIOException("v^W%Jc;q", sQLTimeoutException0);
      ClassUtil.nonNull((IOException) mockIOException0, (IOException) mockIOException0);
      Class<Void> class0 = Void.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class2);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.of(clientInfoStatus0);
      enumSet0.add(accessPattern0);
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumSet1);
      ClassUtil.getPackageName(class3);
      Double double0 = new Double(2091.96924748);
      ClassUtil.nullOrToString(class2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-74);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isNonStaticInnerClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Short> class2 = Short.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class2, "T[qgjYIJVPj]!d!O", "T[qgjYIJVPj]!d!O");
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Boolean boolean0 = new Boolean("[Vull]");
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getClassDescription((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, type0, "java.lang.RuntimeExc");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.String) must override method 'java.lang.RuntimeExc'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-74);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isNonStaticInnerClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Short> class2 = Short.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, "T[qgjYIJVPj]!d!O", "T[qgjYIJVPj]!d!O");
      ClassUtil.nonNull((IOException) jsonMappingException0, (IOException) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Short short0 = new Short((short) (-1609));
      ClassUtil.quotedOr(short0, "Li<9|z(*_6O_4G");
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getClassMethods(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, false);
      ClassUtil.getEnclosingClass(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Throwable throwable0 = ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.nameOf(class2);
      ClassUtil.getRootCause(throwable0);
      Class<Short> class3 = Short.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.classNameOf(double0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.isProxyType(class0);
      ClassUtil.nonNullString("local/anonymous");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      SQLDataException sQLDataException0 = new SQLDataException("z[tIL_F");
      ClassUtil.throwIfRTE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isConcrete(class0);
      Class<CollectionType> class1 = CollectionType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.findClassAnnotations(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Float> class1 = Float.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class3);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet.of(clientInfoStatus0);
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.getPackageName(class0);
      Double double0 = new Double(2091.96924748);
      ClassUtil.nullOrToString(double0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isProxyType(class1);
      Object object0 = new Object();
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.nameOf(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      MockIOException mockIOException0 = new MockIOException("v^W%Jc;q", sQLTimeoutException0);
      ClassUtil.nonNull((IOException) mockIOException0, (IOException) mockIOException0);
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      classUtil_Ctor0.getParamCount();
      Class<Byte> class2 = Byte.class;
      TypeBindings.create(class2, (JavaType[]) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findConstructor(class1, true);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class3 = Annotation.class;
      annotationMap0.get(class3);
      AnnotationMap annotationMap1 = AnnotationMap.of(class2, (Annotation) null);
      // Undeclared exception!
      try { 
        AnnotationMap.merge(annotationMap1, annotationMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.backticked("v>j[/v2r|<Xb{h.hBD");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.rawClass((JavaType) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("k[.|UaKg^k:r", "`v>j[/v2r|<Xb{h.hBD`", 3292, (Throwable) null);
      sQLNonTransientException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "v>j[/v2r|<Xb{h.hBD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // v>j[/v2r|<Xb{h.hBD
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getPackageName(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Throwable throwable0 = ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<Short> class2 = Short.class;
      ClassUtil.nameOf(class2);
      ClassUtil.getRootCause(throwable0);
      Class<Short> class3 = Short.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)70;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper0, (OutputStream) null, byteArray0, 8, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLDataException sQLDataException0 = new SQLDataException("ly*y$DgC<nKwy:");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("u", "_withValueTypeSerializer", "_withValueTypeSerializer", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      sQLDataException0.setNextException(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.spliterator();
      sQLDataException0.initCause(sQLSyntaxErrorException0);
      sQLDataException0.fillInStackTrace();
      sQLDataException0.fillInStackTrace();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("elementType", "keyUniverse", 0, (int[]) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("; failed to set access: ", sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("size", "elementType", sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("size", "elementType", 34, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      deserializerFactoryConfig0.valueInstantiators();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "elementType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.backticked("Cannot deserialize Map key of type %s from String %s: %s");
      ClassUtil.nameOf((Named) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "`Cannot deserialize Map key of type %s from String %s: %s`");
      String string0 = "Gl~";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("keyUniverse");
      sQLWarning0.getStackTrace();
      ClassUtil.throwIfIOE(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.getEnclosingClass(class1);
      String string0 = null;
      ClassUtil.nonNullString((String) null);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaredMethods(class1);
      String string0 = "Failed to instantiate class ";
      ClassUtil.backticked("Failed to instantiate class ");
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("`Failed to instantiate class `");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      mockFile0.setReadable(true, true);
      jsonFactory0.configure(jsonParser_Feature0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Failed to instantiate class ");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: Failed to instantiate class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaredMethods(class1);
      String string0 = "Failed to instantiate class ";
      ClassUtil.nonNullString("Failed to instantiate class ");
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("Failed to instantiate class ");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      mockFile0.setReadable(true, true);
      jsonFactory0.configure(jsonParser_Feature0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Failed to instantiate class ");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: Failed to instantiate class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nullOrToString((Object) null);
      SQLException sQLException0 = new SQLException((String) null, "size", (-3));
      sQLException0.spliterator();
      sQLException0.fillInStackTrace();
      sQLException0.getLocalizedMessage();
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nullOrToString(class0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "java.lang.Class@0000000001");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nullOrToString(class0);
      SQLException sQLException0 = new SQLException("keyUniverse", "^nqe", (-816));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", sQLException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      sQLException0.fillInStackTrace();
      sQLException0.getLocalizedMessage();
      MockException mockException0 = new MockException("", sQLTransientConnectionException0);
      mockException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockException0, "^nqe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ^nqe
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getDeclaredAnnotations();
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotation(class4);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      Class<IOException> class6 = IOException.class;
      Class<Character> class7 = Character.class;
      ClassUtil.findSuperTypes(class6, class7);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.isBogusClass(class3);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<MapLikeType> class8 = MapLikeType.class;
      ClassUtil.hasClass(placeholderForType0, class8);
      try { 
        Integer.decode("O7>#S T,w@olGi");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"O7>#S T,w@olGi\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.printStackTrace();
      MockIOException mockIOException0 = new MockIOException("v^W%Jc;q", sQLTimeoutException0);
      ClassUtil.nonNull((IOException) mockIOException0, (IOException) mockIOException0);
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      classUtil_Ctor0.getParamCount();
      Class<Byte> class2 = Byte.class;
      JavaType[] javaTypeArray0 = null;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (JavaType[]) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<Long> class3 = Long.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class3, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      // Undeclared exception!
      try { 
        collectionType0.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.nameOf(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`java.lang.RuntimeException`", hashMap0);
      SQLDataException sQLDataException0 = new SQLDataException("`java.lang.RuntimeException`");
      sQLClientInfoException0.setNextException(sQLDataException0);
      ClassUtil.throwIfError(sQLClientInfoException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<HashMap> class1 = HashMap.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3027));
      // Undeclared exception!
      try { 
        typeFactory1.constructMapType((Class<? extends Map>) class1, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1294881575) return null for type $-3026
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isConcrete(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<CollectionType> class2 = CollectionType.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      ClassUtil.findClassAnnotations(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Object> class2 = Object.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.backticked((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.findEnumType(class2);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "miT?;HYO+J3_G5da*9n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Float> class1 = Float.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumSet.allOf(class3);
      Class<Character> class4 = Character.class;
      ClassUtil.findSuperTypes(class4, class4);
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.lang.Boolean");
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.isProxyType(class5);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getName();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReceiverType();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.isBogusClass(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findSuperClasses((Class<?>) null, class3, true);
      ClassUtil.isLocalType(class1, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put(";E(brH5Z$<kT1wi,", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("", clientInfoStatus1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("wyB01w2noD", hashMap1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "keyType", sQLClientInfoException0);
      classUtil_Ctor0.getDeclaredAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0, "java.lang.RuntimeException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.RuntimeException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean0 = true;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      Class<Object> class2 = Object.class;
      MapType mapType0 = typeFactory1.constructMapType(class1, class2, class2);
      MapType mapType1 = mapType0.withValueHandler(constructor0);
      MapType mapType2 = mapType0.withContentTypeHandler(mapType1);
      MapType mapType3 = mapType2.withContentValueHandler("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty");
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Short> class3 = Short.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) mapType2;
      javaTypeArray0[1] = (JavaType) mapType0;
      javaTypeArray0[2] = (JavaType) mapType0;
      javaTypeArray0[3] = (JavaType) mapType3;
      javaTypeArray0[4] = (JavaType) mapType3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class3, typeBindings0, (JavaType) mapType3, javaTypeArray0, (JavaType) mapType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType3, typeBindings0, (Object) referenceType0, (Object) javaTypeArray0[4]);
      referenceType0.withValueHandler(mapType3);
      ArrayType arrayType1 = arrayType0.withValueHandler(javaTypeArray0[0]);
      Long long0 = new Long(0L);
      arrayType1.withContentTypeHandler(long0);
      Class<Annotation> class4 = Annotation.class;
      MapType.construct((Class<?>) class4, typeBindings0, (JavaType) mapType1, javaTypeArray0, (JavaType) arrayType1, (JavaType) mapType3);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.setAccessible(true);
      constructor0.getExceptionTypes();
      constructor0.getAnnotatedReturnType();
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<String> class3 = String.class;
      ClassUtil.findSuperTypes(class0, class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class4);
      Class<Character> class5 = Character.class;
      ClassUtil.getOuterClass(class5);
      String string0 = "Cannot access ";
      ClassUtil.backticked("Cannot access ");
      Class<JsonMappingException> class6 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Short short0 = new Short((short)40);
      Short short1 = new Short((short)77);
      Short short2 = ClassUtil.nonNull(short0, short1);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.nonNull("elementType", "elementType");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "NULL";
      Class<Void> class2 = Void.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class2, short2, "Missing property '%s' for external type id '%s'", classUtil_CtorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      
      constructor0.getParameterCount();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      String string0 = ClassUtil.getClassDescription(object0);
      assertEquals("`java.lang.Object`", string0);
      
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isAccessible());
      assertNotNull(annotationArray0);
      
      String string1 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.RuntimeException`", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isProxyType(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getOuterClass(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.getConstructors(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      classArray0[0] = class0;
      Class<String> class4 = String.class;
      classArray0[1] = class4;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[5] = class0;
      classArray0[6] = class0;
      classArray0[7] = class0;
      classArray0[8] = class0;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = ClassUtil.classNameOf(double0);
      assertEquals("`java.lang.Double`", string0);
      
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }
}
