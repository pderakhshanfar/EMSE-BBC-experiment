/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:43:13 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = 'B';
      charArray0[2] = 'K';
      charArray0[3] = 'q';
      charArray0[4] = 'L';
      charArray0[5] = 'A';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, (Reader) null, objectMapper1, charsToNameCanonicalizer0, charArray0, 2, 1, true);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(6, charArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'s', 'B', 'K', 'q', 'L', 'A'}, charArray0);
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(6, charArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'s', 'B', 'K', 'q', 'L', 'A'}, charArray0);
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 730, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1222), true);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(6, charArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'s', 'B', 'K', 'q', 'L', 'A'}, charArray0);
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1222), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(730, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(6, charArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'s', 'B', 'K', 'q', 'L', 'A'}, charArray0);
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-1222), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(730, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(730, uTF8JsonGenerator1.getFeatureMask());
      assertEquals((-1222), uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("5UN=E2$4*hkrP1hN)");
      assertNotNull(sQLNonTransientException0);
      assertEquals("5UN=E2$4*hkrP1hN)", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: 5UN=E2$4*hkrP1hN)", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) readerBasedJsonParser0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: 5UN=E2$4*hkrP1hN)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<ArrayType> class1 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<?> class2 = ClassUtil.wrapperType(class0);
      assertNotNull(class2);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Boolean", class2.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.java.lang.Character");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.hibernate.proxy.java.lang.Character", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.Character", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.RuntimeExc", sQLTimeoutException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.hibernate.proxy.java.lang.Character", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.Character", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.lang.RuntimeExc", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.lang.RuntimeExc", sQLSyntaxErrorException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ccb", "java.lang.RuntimeExc", 366, sQLSyntaxErrorException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.hibernate.proxy.java.lang.Character", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.Character", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.lang.RuntimeExc", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.lang.RuntimeExc", sQLSyntaxErrorException0.getMessage());
      assertEquals(366, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Ccb", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ccb", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.lang.RuntimeExc", sQLFeatureNotSupportedException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning("Ccb", "Ccb", 1, sQLFeatureNotSupportedException0);
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.hibernate.proxy.java.lang.Character", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.Character", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.lang.RuntimeExc", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.lang.RuntimeExc", sQLSyntaxErrorException0.getMessage());
      assertEquals(366, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Ccb", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ccb", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.lang.RuntimeExc", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Ccb", sQLWarning0.getMessage());
      assertEquals("Ccb", sQLWarning0.getSQLState());
      assertEquals(1, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Ccb", sQLWarning0.toString());
      
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockIOException0, "org.hibernate.proxy.java.lang.Character");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.java.lang.Character
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<Annotation> class2 = Annotation.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class0);
      assertNotNull(list0);
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(class1));
      
      Double double0 = new Double(1316.5795320149);
      assertEquals(1316.5795320149, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ClassUtil.classNameOf(double0);
      assertEquals("`java.lang.Double`", string0);
      assertNotNull(string0);
      
      Class<NoClass> class3 = NoClass.class;
      boolean boolean1 = ClassUtil.isProxyType(class3);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Nou!(BfFNQ.");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("Nou!(BfFNQ.", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Nou!(BfFNQ.", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLTransactionRollbackException0);
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nou!(BfFNQ.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Character", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Class<?> class2 = ClassUtil.classOf(class1);
      assertFalse(class2.equals((Object)class1));
      assertNotNull(class2);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Character", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Class", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      Class<ArrayType> class3 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class3);
      assertNotNull(methodArray0);
      assertEquals(31, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Integer", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(3, enumSet0.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertNotNull(class1);
      assertEquals(3, enumSet0.size());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<?> class2 = ClassUtil.classOf(enumSet0);
      assertNotNull(class2);
      assertEquals(3, enumSet0.size());
      assertEquals("class java.util.RegularEnumSet", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(0, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.class;
      Constructor<Short> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      String string0 = ClassUtil.quotedOr((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Annotation> class1 = Annotation.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "unknown");
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      Throwable throwable0 = ClassUtil.getRootCause(jsonMappingException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(throwable0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unknown
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("~CmcKi");
      assertNotNull(readerBasedJsonParser0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      
      Class<Boolean> class0 = Boolean.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, "JSON");
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(mismatchedInputException0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mismatchedInputException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected NOT_AVAILABLE: JSON
         //  at [Source: (String)\"~CmcKi\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      assertFalse(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class0 = LinkedList.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Double> class1 = Double.class;
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      boolean boolean2 = ClassUtil.isProxyType(class2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature1, false);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory3.createGenerator((OutputStream) null);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(uTF8JsonGenerator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      Class<CollectionType> class1 = CollectionType.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class1, "JSON");
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(invalidFormatException0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) null, (Exception) invalidFormatException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from number 10: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<?> class2 = ClassUtil.classOf(class0);
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Class", class2.toString());
      
      Class<Object> class3 = Object.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class3);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNull(string0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Class", class2.toString());
      
      Class<MapType> class4 = MapType.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-12);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-1), (byte) (-12)}, byteArray0);
      
      Method[] methodArray1 = ClassUtil.getDeclaredMethods(class4);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertNotNull(methodArray1);
      assertEquals(28, methodArray1.length);
      assertNotSame(methodArray1, methodArray0);
      
      Short short0 = new Short((short)828);
      assertEquals((short)828, (short)short0);
      assertNotNull(short0);
      
      String string1 = ClassUtil.quotedOr(short0, (String) null);
      assertEquals("\"828\"", string1);
      assertNotNull(string1);
      
      ClassUtil.verifyMustOverride(class2, class4, "/D5Qh+Q #u3KMxZ$Q");
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Class", class2.toString());
      
      Class<NoClass> class5 = NoClass.class;
      boolean boolean1 = ClassUtil.isConcrete(class5);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class6, "\"828\"", "p");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from String \"\"828\"\": p
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("zq");
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("zq", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("zq", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonFactory_Feature0, true);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("zq", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("zq", jsonFactory2.getRootValueSeparator());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("zq", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("zq", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.org.evosuite.runtime.mock.java.io.MockFileInputStream");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.hibernate.proxy.org.evosuite.runtime.mock.java.io.MockFileInputStream", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("org.hibernate.proxy.org.evosuite.runtime.mock.java.io.MockFileInputStream", sQLTimeoutException0.getMessage());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) jsonFactory2, (-1744094291));
      assertNotNull(jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("zq", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("zq", jsonFactory2.getRootValueSeparator());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: org.hibernate.proxy.org.evosuite.runtime.mock.java.io.MockFileInputStream", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("org.hibernate.proxy.org.evosuite.runtime.mock.java.io.MockFileInputStream", sQLTimeoutException0.getMessage());
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.hibernate.proxy.org.evosuite.runtime.mock.java.io.MockFileInputStream (through reference chain: com.fasterxml.jackson.core.JsonFactory[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      assertFalse(boolean0);
      
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(3, fieldArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = ClassUtil.nonNullString("java.lang.Float");
      assertEquals("java.lang.Float", string0);
      assertNotNull(string0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class0, list0);
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Long", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enum0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$364084886", class1.toString());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Module> class0 = Module.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "whc7X8Q:%");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      MockIOException mockIOException0 = new MockIOException("java.lang.RuntimeEx");
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.hasClass(accessPattern0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Short", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<Void> class2 = Void.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Iterator<Double> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Long> class1 = Long.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertNotNull(objectReader0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(16777215);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)23;
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8000, byteArray1.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      
      byteArray0[3] = (byte) (-8);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectReader0, dataOutputStream0, byteArray0, (-8), true);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(4, byteArray0.length);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-12), (byte)23, (byte) (-8)}, byteArray0);
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-8), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(4, byteArray0.length);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-12), (byte)23, (byte) (-8)}, byteArray0);
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-8), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals((-8), uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) uTF8JsonGenerator1, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Float> enumMap0 = new EnumMap<ClientInfoStatus, Float>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<String> class0 = String.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("JH0=Bn6S]^`z7n:X.+");
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = mockRuntimeException0.getCause();
      assertNull(throwable0);
      
      MockError mockError0 = new MockError((String) null, mockRuntimeException0);
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Error> class0 = Error.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.Module");
      assertFalse(boolean0);
      
      boolean boolean1 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "12H");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      String string0 = ClassUtil.nameOf(class1);
      assertEquals("`java.lang.reflect.AccessibleObject`", string0);
      assertNotNull(string0);
      
      Class<Byte> class2 = Byte.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertEquals("byte", class3.toString());
      
      String string1 = ClassUtil.quotedOr(class1, (String) null);
      assertEquals("\"class java.lang.reflect.AccessibleObject\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      MockError mockError0 = new MockError("`java.lang.reflect.AccessibleObject`");
      assertNotNull(mockError0);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) mockError0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-10);
      boolean boolean1 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " (from class ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-76), (byte)34, (byte) (-98), (byte) (-10)}, byteArray0);
      
      Class<Boolean> class0 = Boolean.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(16, methodArray0.length);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals((short)0, object0);
      assertNotNull(object0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Zh");
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^P(Y<&&8fy/D/)vp");
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ^P(Y<&&8fy/D/)vp", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("^P(Y<&&8fy/D/)vp", sQLRecoverableException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("=^0c0~TFcl!Ei#&X3P", "u*L!", "^P(Y<&&8fy/D/)vp", 8000);
      assertNotNull(stackTraceElement0);
      assertEquals("u*L!", stackTraceElement0.getMethodName());
      assertEquals("=^0c0~TFcl!Ei#&X3P.u*L!(^P(Y<&&8fy/D/)vp:8000)", stackTraceElement0.toString());
      assertEquals("=^0c0~TFcl!Ei#&X3P", stackTraceElement0.getClassName());
      assertEquals(8000, stackTraceElement0.getLineNumber());
      assertEquals("^P(Y<&&8fy/D/)vp", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("FLNA'2", "/}tbK-;NW>e", "u*L!", 8000);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      assertEquals("FLNA'2./}tbK-;NW>e(u*L!:8000)", stackTraceElement1.toString());
      assertEquals("u*L!", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("FLNA'2", stackTraceElement1.getClassName());
      assertEquals(8000, stackTraceElement1.getLineNumber());
      assertEquals("/}tbK-;NW>e", stackTraceElement1.getMethodName());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      assertEquals(2, stackTraceElementArray0.length);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ^P(Y<&&8fy/D/)vp", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("^P(Y<&&8fy/D/)vp", sQLRecoverableException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException("^P(Y<&&8fy/D/)vp", "^P(Y<&&8fy/D/)vp", sQLRecoverableException0);
      assertNotNull(sQLDataException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ^P(Y<&&8fy/D/)vp", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("^P(Y<&&8fy/D/)vp", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("^P(Y<&&8fy/D/)vp", sQLDataException0.getSQLState());
      assertEquals("^P(Y<&&8fy/D/)vp", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ^P(Y<&&8fy/D/)vp", sQLDataException0.toString());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.initCause(sQLDataException0);
      assertNotNull(sQLRecoverableException1);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ^P(Y<&&8fy/D/)vp", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("^P(Y<&&8fy/D/)vp", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("^P(Y<&&8fy/D/)vp", sQLDataException0.getSQLState());
      assertEquals("^P(Y<&&8fy/D/)vp", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ^P(Y<&&8fy/D/)vp", sQLDataException0.toString());
      assertEquals("java.sql.SQLRecoverableException: ^P(Y<&&8fy/D/)vp", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("^P(Y<&&8fy/D/)vp", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "^P(Y<&&8fy/D/)vp");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("^dZRXuX", "org.hibernate.proxy.org.evosuite.runtime.mock.java.io.MockFileInputStream", (-605166913));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals((-605166913), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("^dZRXuX", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ^dZRXuX", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("org.hibernate.proxy.org.evosuite.runtime.mock.java.io.MockFileInputStream", sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("$bQK3{hi!rzl#Zl", "$bQK3{hi!rzl#Zl", 4293, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals((-605166913), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("^dZRXuX", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ^dZRXuX", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("org.hibernate.proxy.org.evosuite.runtime.mock.java.io.MockFileInputStream", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: $bQK3{hi!rzl#Zl", sQLNonTransientConnectionException0.toString());
      assertEquals(4293, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("$bQK3{hi!rzl#Zl", sQLNonTransientConnectionException0.getMessage());
      assertEquals("$bQK3{hi!rzl#Zl", sQLNonTransientConnectionException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      Class<CollectionType> class1 = CollectionType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<Module> class2 = Module.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-140));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, true);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0, byteArray0, (byte) (-1), true);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(7, byteArray0.length);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)30, (byte)117, (byte)68, (byte) (-70), (byte) (-32), (byte)2}, byteArray0);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      SerializedString serializedString0 = new SerializedString("Cannot figure out type for EnumSet (odd JDK platform?)");
      assertNotNull(serializedString0);
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", serializedString0.toString());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", serializedString0.getValue());
      assertEquals(54, serializedString0.charLength());
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(7, byteArray0.length);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)30, (byte)117, (byte)68, (byte) (-70), (byte) (-32), (byte)2}, byteArray0);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", serializedString0.toString());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", serializedString0.getValue());
      assertEquals(54, serializedString0.charLength());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals((-1), uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator1);
      assertNotNull(jsonGeneratorDelegate0);
      assertEquals(7, byteArray0.length);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)30, (byte)117, (byte)68, (byte) (-70), (byte) (-32), (byte)2}, byteArray0);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", serializedString0.toString());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", serializedString0.getValue());
      assertEquals(54, serializedString0.charLength());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals((-1), uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertNotNull(list0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      Object object0 = ClassUtil.defaultValue(class1);
      assertEquals(0, object0);
      assertNotNull(object0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      
      String string0 = ClassUtil.nonNullString("BG5LC;");
      assertEquals("BG5LC;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.classNameOf(double0);
      assertEquals("`java.lang.Double`", string0);
      assertNotNull(string0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Iterator<MapLikeType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertNotNull(fieldArray0);
      assertEquals(4, fieldArray0.length);
      
      String string1 = ClassUtil.nonNullString("+SK0&_E\"#");
      assertEquals("+SK0&_E\"#", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Float> enumMap0 = new EnumMap<ClientInfoStatus, Float>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      EnumMap<ClientInfoStatus, Float> enumMap1 = new EnumMap<ClientInfoStatus, Float>(enumMap0);
      assertTrue(enumMap1.equals((Object)enumMap0));
      assertNotNull(enumMap1);
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      
      Float float0 = new Float((-365.0F));
      assertEquals((-365.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-365.0F));
      assertEquals((-365.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertTrue(enumMap0.equals((Object)enumMap1));
      assertNotNull(class1);
      assertNotSame(enumMap0, enumMap1);
      assertEquals(0, enumMap0.size());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Float> enumMap0 = new EnumMap<ClientInfoStatus, Float>(class2);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      EnumMap<ClientInfoStatus, Float> enumMap1 = new EnumMap<ClientInfoStatus, Float>(enumMap0);
      assertTrue(enumMap1.equals((Object)enumMap0));
      assertNotNull(enumMap1);
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = enumMap1.put(clientInfoStatus0, float0);
      assertFalse(enumMap0.equals((Object)enumMap1));
      assertFalse(enumMap1.equals((Object)enumMap0));
      assertNull(float1);
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap1, enumMap0);
      assertEquals(0, enumMap0.size());
      assertEquals(1, enumMap1.size());
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumMap1);
      assertFalse(enumMap0.equals((Object)enumMap1));
      assertFalse(enumMap1.equals((Object)enumMap0));
      assertNotNull(class3);
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap1, enumMap0);
      assertEquals(0, enumMap0.size());
      assertEquals(1, enumMap1.size());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isEnum());
      assertEquals(16401, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.sql.ClientInfoStatus", class3.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = true;
      Class<RuntimeException> class0 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      assertNotNull(mapLikeType0);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) mapLikeType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = (JavaType) mapLikeType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = (JavaType) mapLikeType0;
      javaTypeArray0[8] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapLikeType0, javaTypeArray0, javaTypeArray0[1]);
      assertNotNull(referenceType0);
      assertEquals(9, javaTypeArray0.length);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      assertNotNull(referenceType1);
      assertEquals(9, javaTypeArray0.length);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertNotNull(referenceType2);
      assertEquals(9, javaTypeArray0.length);
      assertNotSame(referenceType0, referenceType2);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      
      JavaType javaType1 = referenceType2.getReferencedType();
      assertTrue(javaType1.equals((Object)javaType0));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertNotNull(javaType1);
      assertEquals(9, javaTypeArray0.length);
      assertNotSame(javaType1, javaType0);
      assertNotSame(javaType0, javaType1);
      assertNotSame(referenceType0, referenceType2);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertTrue(javaType1.useStaticType());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.isAbstract());
      assertTrue(javaType1.isJavaLangObject());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.isCollectionLikeType());
      assertFalse(javaType1.hasContentType());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isFinal());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.hasHandlers());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      
      Class<Byte> class1 = Byte.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType1, class1, false);
      assertTrue(javaType1.equals((Object)javaType0));
      assertTrue(javaType0.equals((Object)javaType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertNotNull(list0);
      assertEquals(9, javaTypeArray0.length);
      assertNotSame(javaType1, javaType0);
      assertNotSame(javaType0, javaType1);
      assertNotSame(referenceType0, referenceType2);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertTrue(javaType1.useStaticType());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.isAbstract());
      assertTrue(javaType1.isJavaLangObject());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.isCollectionLikeType());
      assertFalse(javaType1.hasContentType());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isFinal());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.hasHandlers());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      
      boolean boolean0 = simpleType0.isTypeOrSuperTypeOf(class0);
      assertTrue(boolean0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      
      String string0 = simpleType0.getErasedSignature();
      assertEquals("J", string0);
      assertNotNull(string0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<?> class1 = ClassUtil.rawClass(simpleType0);
      assertNotNull(class1);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals("long", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("\"xgnKj*lW\u0018", "Failed to narrow type %s with annotation (value %s), from '%s': %s");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("Failed to narrow type %s with annotation (value %s), from '%s': %s", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("\"xgnKj*lW\u0018", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"xgnKj*lW\u0018", sQLNonTransientConnectionException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("EZgzC#G{q\"Vf-ig`?", ")D$+V-W-XxJx8", (-393805500), sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("Failed to narrow type %s with annotation (value %s), from '%s': %s", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("\"xgnKj*lW\u0018", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"xgnKj*lW\u0018", sQLNonTransientConnectionException0.toString());
      assertEquals(")D$+V-W-XxJx8", sQLTransactionRollbackException0.getSQLState());
      assertEquals("EZgzC#G{q\"Vf-ig`?", sQLTransactionRollbackException0.getMessage());
      assertEquals((-393805500), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: EZgzC#G{q\"Vf-ig`?", sQLTransactionRollbackException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.initCause(sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertEquals("Failed to narrow type %s with annotation (value %s), from '%s': %s", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("\"xgnKj*lW\u0018", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"xgnKj*lW\u0018", sQLNonTransientConnectionException0.toString());
      assertEquals(")D$+V-W-XxJx8", sQLTransactionRollbackException0.getSQLState());
      assertEquals("EZgzC#G{q\"Vf-ig`?", sQLTransactionRollbackException0.getMessage());
      assertEquals((-393805500), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: EZgzC#G{q\"Vf-ig`?", sQLTransactionRollbackException0.toString());
      assertEquals("\"xgnKj*lW\u0018", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"xgnKj*lW\u0018", sQLNonTransientConnectionException1.toString());
      assertEquals("Failed to narrow type %s with annotation (value %s), from '%s': %s", sQLNonTransientConnectionException1.getSQLState());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      sQLNonTransientConnectionException0.printStackTrace();
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertEquals("Failed to narrow type %s with annotation (value %s), from '%s': %s", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("\"xgnKj*lW\u0018", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"xgnKj*lW\u0018", sQLNonTransientConnectionException0.toString());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("\"xgnKj*lW\u0018", "FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS", "FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS", (-1246572939));
      assertNotNull(stackTraceElement0);
      assertEquals("\"xgnKj*lW\u0018", stackTraceElement0.getClassName());
      assertEquals("FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS", stackTraceElement0.getMethodName());
      assertEquals("FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS", stackTraceElement0.getFileName());
      assertEquals((-1246572939), stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("\"xgnKj*lW\u0018.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS(FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS)", stackTraceElement0.toString());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      assertEquals(1, stackTraceElementArray0.length);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertEquals("Failed to narrow type %s with annotation (value %s), from '%s': %s", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("\"xgnKj*lW\u0018", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"xgnKj*lW\u0018", sQLNonTransientConnectionException0.toString());
      
      sQLNonTransientConnectionException0.printStackTrace();
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertEquals("Failed to narrow type %s with annotation (value %s), from '%s': %s", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("\"xgnKj*lW\u0018", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"xgnKj*lW\u0018", sQLNonTransientConnectionException0.toString());
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      
      enumSet0.clear();
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(accessPattern0));
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertNotNull(class0);
      assertEquals(0, enumSet0.size());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertEquals(16385, class0.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(enumSet0.contains(accessPattern0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<NoClass>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class0 = LinkedList.class;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      
      CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isPrimitive());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isPrimitive());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isAbstract());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isContainerType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.isArrayType());
      assertTrue(collectionType2.hasHandlers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Class<Double> class2 = Double.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockRuntimeException0, class2);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      CollectionType collectionType3 = (CollectionType)ClassUtil.nonNull((CollectionLikeType) null, (CollectionLikeType) collectionType0);
      assertTrue(collectionType3.equals((Object)collectionType2));
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertNotNull(collectionType3);
      assertNotSame(collectionType3, collectionType1);
      assertSame(collectionType3, collectionType0);
      assertNotSame(collectionType3, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertSame(collectionType0, collectionType3);
      assertFalse(collectionType3.useStaticType());
      assertFalse(collectionType3.isMapLikeType());
      assertFalse(collectionType3.isJavaLangObject());
      assertFalse(collectionType3.hasValueHandler());
      assertFalse(collectionType3.isPrimitive());
      assertTrue(collectionType3.isContainerType());
      assertFalse(collectionType3.isArrayType());
      assertFalse(collectionType3.hasHandlers());
      assertFalse(collectionType3.isAbstract());
      assertEquals(1, collectionType3.containedTypeCount());
      assertTrue(collectionType3.isCollectionLikeType());
      assertTrue(collectionType3.isConcrete());
      assertFalse(collectionType3.isEnumType());
      assertFalse(collectionType3.isFinal());
      assertFalse(collectionType3.isInterface());
      assertTrue(collectionType3.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Error> class0 = Error.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      Class<ReferenceType> class1 = ReferenceType.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j/k=P4G");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      MockError mockError0 = new MockError("%Z}l9ca");
      assertNotNull(mockError0);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      Throwable[] throwableArray0 = mockError0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      Throwable throwable0 = mockError0.getCause();
      assertNull(throwable0);
      
      boolean boolean5 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      
      String string0 = ClassUtil.nullOrToString(mockError0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      assertNotNull(collectionType0);
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters((JavaType) collectionType0, (Class<?>) class2);
      assertNotNull(javaTypeArray0);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, true);
      assertNotNull(list0);
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertEquals(11, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<Object> class3 = Object.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class3, false);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertEquals(10, list1.size());
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class0 = LinkedList.class;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      
      CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isContainerType());
      
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.isArrayType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isEnumType());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertNotNull(deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Class<Double> class2 = Double.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockRuntimeException0, class2);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      CollectionType collectionType3 = collectionType2.withContentTypeHandler(beanDeserializerFactory0);
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertTrue(collectionType3.equals((Object)collectionType2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType3);
      assertNotSame(collectionType3, collectionType0);
      assertNotSame(collectionType3, collectionType1);
      assertNotSame(collectionType3, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType3);
      assertTrue(collectionType3.useStaticType());
      assertTrue(collectionType3.isCollectionLikeType());
      assertFalse(collectionType3.hasValueHandler());
      assertFalse(collectionType3.isMapLikeType());
      assertFalse(collectionType3.isInterface());
      assertFalse(collectionType3.isEnumType());
      assertFalse(collectionType3.isArrayType());
      assertFalse(collectionType3.isPrimitive());
      assertTrue(collectionType3.isContainerType());
      assertTrue(collectionType3.hasContentType());
      assertFalse(collectionType3.isFinal());
      assertTrue(collectionType3.hasHandlers());
      assertFalse(collectionType3.isJavaLangObject());
      assertTrue(collectionType3.isConcrete());
      assertEquals(1, collectionType3.containedTypeCount());
      assertFalse(collectionType3.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.isArrayType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isEnumType());
      
      Class<CollectionType> class3 = CollectionType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionType3, (Class<?>) class3, true);
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertTrue(collectionType3.equals((Object)collectionType2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType3));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType3));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType3));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(list0);
      assertNotSame(collectionType3, collectionType0);
      assertNotSame(collectionType3, collectionType1);
      assertNotSame(collectionType3, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType3);
      assertTrue(collectionType3.useStaticType());
      assertTrue(collectionType3.isCollectionLikeType());
      assertFalse(collectionType3.hasValueHandler());
      assertFalse(collectionType3.isMapLikeType());
      assertFalse(collectionType3.isInterface());
      assertFalse(collectionType3.isEnumType());
      assertFalse(collectionType3.isArrayType());
      assertFalse(collectionType3.isPrimitive());
      assertTrue(collectionType3.isContainerType());
      assertTrue(collectionType3.hasContentType());
      assertFalse(collectionType3.isFinal());
      assertTrue(collectionType3.hasHandlers());
      assertFalse(collectionType3.isJavaLangObject());
      assertTrue(collectionType3.isConcrete());
      assertEquals(1, collectionType3.containedTypeCount());
      assertFalse(collectionType3.isAbstract());
      assertEquals(11, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.isArrayType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isEnumType());
      
      Class<Short> class4 = Short.TYPE;
      assertNotNull(class4);
      assertTrue(class4.isPrimitive());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertEquals("short", class4.toString());
      
      Class<RuntimeException> class5 = RuntimeException.class;
      boolean boolean0 = ClassUtil.hasClass(class3, class5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class0 = LinkedList.class;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertNotNull(collectionType0);
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      
      CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasHandlers());
      
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isConcrete());
      assertTrue(collectionType2.isCollectionLikeType());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Class<Double> class2 = Double.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockRuntimeException0, class2);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      CollectionType collectionType3 = collectionType2.withContentTypeHandler(beanDeserializerFactory0);
      assertTrue(collectionType3.equals((Object)collectionType2));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType3);
      assertNotSame(collectionType3, collectionType1);
      assertNotSame(collectionType3, collectionType2);
      assertNotSame(collectionType3, collectionType0);
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType3);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertFalse(collectionType3.isJavaLangObject());
      assertFalse(collectionType3.isMapLikeType());
      assertEquals(1, collectionType3.containedTypeCount());
      assertFalse(collectionType3.isEnumType());
      assertFalse(collectionType3.isArrayType());
      assertFalse(collectionType3.isInterface());
      assertFalse(collectionType3.hasValueHandler());
      assertFalse(collectionType3.isPrimitive());
      assertTrue(collectionType3.useStaticType());
      assertTrue(collectionType3.hasHandlers());
      assertTrue(collectionType3.isCollectionLikeType());
      assertTrue(collectionType3.isConcrete());
      assertFalse(collectionType3.isAbstract());
      assertTrue(collectionType3.isContainerType());
      assertTrue(collectionType3.hasContentType());
      assertFalse(collectionType3.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isConcrete());
      assertTrue(collectionType2.isCollectionLikeType());
      
      Class<CollectionType> class3 = CollectionType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionType3, (Class<?>) class3, true);
      assertTrue(collectionType3.equals((Object)collectionType2));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType3));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.equals((Object)collectionType3));
      assertTrue(collectionType2.equals((Object)collectionType3));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(list0);
      assertNotSame(collectionType3, collectionType1);
      assertNotSame(collectionType3, collectionType2);
      assertNotSame(collectionType3, collectionType0);
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType3);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertFalse(collectionType3.isJavaLangObject());
      assertFalse(collectionType3.isMapLikeType());
      assertEquals(1, collectionType3.containedTypeCount());
      assertFalse(collectionType3.isEnumType());
      assertFalse(collectionType3.isArrayType());
      assertFalse(collectionType3.isInterface());
      assertFalse(collectionType3.hasValueHandler());
      assertFalse(collectionType3.isPrimitive());
      assertTrue(collectionType3.useStaticType());
      assertTrue(collectionType3.hasHandlers());
      assertTrue(collectionType3.isCollectionLikeType());
      assertTrue(collectionType3.isConcrete());
      assertFalse(collectionType3.isAbstract());
      assertTrue(collectionType3.isContainerType());
      assertTrue(collectionType3.hasContentType());
      assertFalse(collectionType3.isFinal());
      assertFalse(list0.isEmpty());
      assertEquals(11, list0.size());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isConcrete());
      assertTrue(collectionType2.isCollectionLikeType());
      
      Class<Short> class4 = Short.TYPE;
      assertNotNull(class4);
      assertFalse(class4.isAnnotation());
      assertEquals("short", class4.toString());
      assertFalse(class4.isInterface());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isArray());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class0, class2, true);
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(5, list1.size());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 7);
      Class<Boolean> class5 = Boolean.class;
      classArray0[0] = class5;
      Class<Boolean> class6 = Boolean.class;
      classArray0[1] = class6;
      Class<Boolean> class7 = Boolean.class;
      classArray0[2] = class7;
      Class<Boolean> class8 = Boolean.class;
      classArray0[3] = class8;
      Class<Boolean> class9 = Boolean.class;
      classArray0[4] = class9;
      Class<Boolean> class10 = Boolean.class;
      classArray0[5] = class10;
      Class<Boolean> class11 = Boolean.class;
      classArray0[6] = class11;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(class1, class0);
      
      String string0 = ClassUtil.backticked("8&");
      assertEquals("`8&`", string0);
      assertNotNull(string0);
      
      Byte byte0 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean2 = ClassUtil.hasClass(byte0, class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(class0, class1);
      
      boolean boolean3 = ClassUtil.hasClass(byte0, class1);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertSame(class1, class0);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      boolean boolean4 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertSame(class1, class0);
      
      Class<?> class3 = ClassUtil.primitiveType(class1);
      assertNotNull(class3);
      assertSame(class1, class0);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("long", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, false);
      assertNotNull(list0);
      assertSame(class0, class1);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.contains(class3));
      
      Class<IOException> class4 = IOException.class;
      String string1 = ClassUtil.nameOf(class4);
      assertEquals("`java.io.IOException`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = ClassUtil.classNameOf(class1);
      assertEquals("`java.lang.Class`", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertSame(class1, class0);
      
      Class<IOException> class5 = IOException.class;
      String string3 = ClassUtil.isLocalType(class5, false);
      assertNull(string3);
      assertSame(class5, class4);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)68;
      intArray0[1] = (int) (byte)68;
      intArray0[2] = (int) (byte)68;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("8&", intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {68, 68, 68}, intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("8&", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: 8&", batchUpdateException0.toString());
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertNull(sQLException0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {68, 68, 68}, intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("8&", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: 8&", batchUpdateException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<Long> class2 = Long.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      ClassUtil.Ctor[] classUtil_CtorArray1 = ClassUtil.getConstructors(class2);
      assertFalse(classUtil_CtorArray1.equals((Object)classUtil_CtorArray0));
      assertNotNull(classUtil_CtorArray1);
      assertEquals(2, classUtil_CtorArray1.length);
      assertNotSame(classUtil_CtorArray1, classUtil_CtorArray0);
      
      Class<?> class3 = ClassUtil.getOuterClass(class1);
      assertNull(class3);
      
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNotNull(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class5 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      int int1 = constructor0.getParameterCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      int int2 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Annotation annotation0 = constructor0.getAnnotation(class5);
      assertNull(annotation0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertNotNull(annotatedTypeArray0);
      assertEquals(0, annotatedTypeArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class6 = Annotation.class;
      Annotation[] annotationArray2 = constructor0.getAnnotationsByType(class6);
      assertFalse(annotationArray2.equals((Object)annotationArray0));
      assertFalse(annotationArray2.equals((Object)annotationArray1));
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertSame(class6, class5);
      assertNotSame(annotationArray2, annotationArray0);
      assertNotSame(annotationArray2, annotationArray1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      int int3 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Type[] typeArray1 = constructor0.getGenericExceptionTypes();
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertNotNull(typeArray1);
      assertEquals(0, typeArray1.length);
      assertNotSame(typeArray1, typeArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      int int4 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      int int5 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int5);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class7 = ClassUtil.classOf((Object) null);
      assertNull(class7);
      
      Class<ReferenceType> class8 = ReferenceType.class;
      boolean boolean1 = true;
      try { 
        ClassUtil.createInstance(class8, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("7@|1dl_~-V8Fi6", "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", 101, (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", sQLTransientConnectionException0.getSQLState());
      assertEquals("7@|1dl_~-V8Fi6", sQLTransientConnectionException0.getMessage());
      assertEquals(101, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: 7@|1dl_~-V8Fi6", sQLTransientConnectionException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwIfError(sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", sQLTransientConnectionException0.getSQLState());
      assertEquals("7@|1dl_~-V8Fi6", sQLTransientConnectionException0.getMessage());
      assertEquals(101, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: 7@|1dl_~-V8Fi6", sQLTransientConnectionException0.toString());
      assertEquals("7@|1dl_~-V8Fi6", sQLTransientConnectionException1.getMessage());
      assertEquals(101, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: 7@|1dl_~-V8Fi6", sQLTransientConnectionException1.toString());
      assertEquals("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", sQLTransientConnectionException1.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("7@|1dl_~-V8Fi6", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: 7@|1dl_~-V8Fi6", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("7@|1dl_~-V8Fi6", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.core.type.WritableTypeId$Inclusion", sQLNonTransientConnectionException0);
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertNotNull(annotatedTypeArray0);
      assertEquals(0, annotatedTypeArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      
      ClassUtil.checkAndFixAccess((Member) constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("j|]", class0, ",");
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      SQLException sQLException0 = new SQLException("j|]", (String) null, jsonMappingException0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(sQLException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: j|]", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("j|]", sQLException0.getMessage());
      
      SQLException sQLException1 = (SQLException)sQLException0.fillInStackTrace();
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(sQLException1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: j|]", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("j|]", sQLException0.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("j|]", sQLException1.getMessage());
      assertEquals("java.sql.SQLException: j|]", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      
      String string0 = jsonMappingException0.getOriginalMessage();
      assertEquals("Cannot deserialize value of type `java.lang.RuntimeException` from String \"j|]\": ,", string0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(string0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      sQLException0.addSuppressed(jsonMappingException0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertSame(sQLException0, sQLException1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: j|]", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("j|]", sQLException0.getMessage());
      
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)ClassUtil.getRootCause(sQLException0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(invalidFormatException0);
      assertSame(invalidFormatException0, jsonMappingException0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertSame(jsonMappingException0, invalidFormatException0);
      assertSame(sQLException0, sQLException1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: j|]", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("j|]", sQLException0.getMessage());
      
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from String \"j|]\": ,
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`float`", string0);
      assertNotNull(string0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      assertFalse(boolean0);
      
      Class<String> class2 = String.class;
      boolean boolean1 = ClassUtil.isProxyType(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(23.0613075280598);
      assertEquals(23.0613075280598, (double)double0, 0.01);
      assertNotNull(double0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      SQLException sQLException0 = new SQLException(mockError0);
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("float", class2.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
      
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.io.IOException");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.io.IOException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.io.IOException", sQLNonTransientConnectionException0.toString());
      
      MockError mockError0 = new MockError("java.io.IOException", sQLNonTransientConnectionException0);
      assertNotNull(mockError0);
      
      mockError0.addSuppressed(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.io.IOException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.io.IOException", sQLNonTransientConnectionException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VALUE_STRING");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "U|~O}+`?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("primitive", string0);
      assertNotNull(string0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = constructor0.getName();
      assertEquals("com.fasterxml.jackson.databind.annotation.NoClass", string0);
      assertNotNull(string0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray1);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class0 = LinkedList.class;
      Class<LinkedList> class1 = LinkedList.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      assertNotNull(collectionType0);
      assertSame(class1, class0);
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertSame(class1, class0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isJavaLangObject());
      
      Class<Short> class3 = Short.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class3, (JavaType) collectionType0);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertNotNull(typeBindings0);
      assertSame(class1, class0);
      assertNotSame(collectionType0, collectionType1);
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Jr*}Ul", "U&S'#pYa(a&P");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Jr*}Ul", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("U&S'#pYa(a&P", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Jr*}Ul", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning("Jr*}Ul", "net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Jr*}Ul", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("U&S'#pYa(a&P", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Jr*}Ul", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("Jr*}Ul", sQLWarning0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Jr*}Ul", sQLWarning0.toString());
      
      Class<Boolean> class4 = Boolean.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) collectionType0;
      javaTypeArray0[1] = (JavaType) collectionType0;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      
      CollectionType collectionType2 = CollectionType.construct((Class<?>) class4, typeBindings0, (JavaType) collectionType0, javaTypeArray0, javaType0);
      assertFalse(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      assertEquals(2, javaTypeArray0.length);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertSame(class1, class0);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isArrayType());
      assertEquals(0, collectionType2.containedTypeCount());
      assertFalse(collectionType2.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(collectionType2);
      assertFalse(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType0.equals((Object)collectionType2));
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(2, javaTypeArray0.length);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isArrayType());
      assertEquals(0, collectionType2.containedTypeCount());
      assertFalse(collectionType2.useStaticType());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType0.equals((Object)collectionType2));
      assertFalse(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)collectionType1));
      assertNotNull(jsonMappingException0);
      assertEquals(2, javaTypeArray0.length);
      assertSame(class1, class0);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isArrayType());
      assertEquals(0, collectionType2.containedTypeCount());
      assertFalse(collectionType2.useStaticType());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Jr*}Ul", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("U&S'#pYa(a&P", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Jr*}Ul", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("Jr*}Ul", sQLWarning0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Jr*}Ul", sQLWarning0.toString());
      
      MockError mockError0 = new MockError(jsonMappingException0);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType0.equals((Object)collectionType2));
      assertFalse(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)collectionType1));
      assertNotNull(mockError0);
      assertEquals(2, javaTypeArray0.length);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockError0, class4);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType0.equals((Object)collectionType2));
      assertFalse(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)collectionType1));
      assertNotNull(jsonMappingException1);
      assertEquals(2, javaTypeArray0.length);
      assertSame(class1, class0);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Jr*}Ul", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("U&S'#pYa(a&P", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Jr*}Ul", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("Jr*}Ul", sQLWarning0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: Jr*}Ul", sQLWarning0.toString());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isArrayType());
      assertEquals(0, collectionType2.containedTypeCount());
      assertFalse(collectionType2.useStaticType());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaTypeArray0[1], class1, false);
      assertNotNull(list0);
      assertEquals(2, javaTypeArray0.length);
      assertSame(class1, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<Short> class5 = Short.class;
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class0, class5, false);
      assertNotNull(list1);
      assertSame(class0, class1);
      assertSame(class5, class3);
      assertFalse(list1.isEmpty());
      assertEquals(4, list1.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class0);
      assertNull(annotation0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) integer0);
      assertFalse(boolean0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<Byte> class2 = Byte.class;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(integer0, class2, "com.fasterxml.jackson.databind.util.ClassUtil");
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<NoClass> class3 = NoClass.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class3, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class0);
      assertNull(annotation0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<Byte> class2 = Byte.class;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class2, "com.fasterxml.jackson.databind.util.ClassUtil");
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class2, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertEquals("enum", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      assertNotNull(collectionType0);
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isFinal());
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      
      Class<MockFileInputStream> class2 = MockFileInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) collectionType1);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(typeBindings0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException("U&S'#pYa(a&P", class1);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionType1, typeBindings0, (Object) jsonMappingException0, (Object) class1);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(arrayType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      
      Class<CollectionType> class3 = CollectionType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class3, false);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(list0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Short> class4 = Short.class;
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class3, class4, false);
      assertNotNull(list1);
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<Void> class0 = Void.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("void", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertEquals("void", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals("void", class1.toString());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      
      String string0 = constructor0.getName();
      assertEquals("com.fasterxml.jackson.databind.annotation.NoClass", string0);
      assertNotNull(string0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class1, true);
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(constructor1);
      assertSame(class1, class0);
      assertNotSame(constructor1, constructor0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertEquals(2, constructor1.getModifiers());
      
      Annotation[] annotationArray0 = constructor1.getAnnotations();
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertSame(class1, class0);
      assertNotSame(constructor1, constructor0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertEquals(2, constructor1.getModifiers());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor1);
      assertTrue(boolean0);
      assertTrue(constructor1.equals((Object)constructor0));
      assertSame(class1, class0);
      assertNotSame(constructor1, constructor0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertEquals(2, constructor1.getModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      String string1 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertEquals("``", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      Class<?>[] classArray0 = constructor1.getExceptionTypes();
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      assertSame(class1, class0);
      assertNotSame(constructor1, constructor0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertEquals(2, constructor1.getModifiers());
      
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      assertTrue(constructor1.equals((Object)constructor0));
      assertSame(class1, class0);
      assertNotSame(constructor1, constructor0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertEquals(2, constructor1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[-N=<;W+c6!%R", "[-N=<;W+c6!%R", (-1808662384));
      assertNotNull(sQLTimeoutException0);
      assertEquals((-1808662384), sQLTimeoutException0.getErrorCode());
      assertEquals("[-N=<;W+c6!%R", sQLTimeoutException0.getSQLState());
      assertEquals("[-N=<;W+c6!%R", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [-N=<;W+c6!%R", sQLTimeoutException0.toString());
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.getRootCause(sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertEquals((-1808662384), sQLTimeoutException0.getErrorCode());
      assertEquals("[-N=<;W+c6!%R", sQLTimeoutException0.getSQLState());
      assertEquals("[-N=<;W+c6!%R", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [-N=<;W+c6!%R", sQLTimeoutException0.toString());
      assertEquals((-1808662384), sQLTimeoutException1.getErrorCode());
      assertEquals("[-N=<;W+c6!%R", sQLTimeoutException1.getSQLState());
      assertEquals("[-N=<;W+c6!%R", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: [-N=<;W+c6!%R", sQLTimeoutException1.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Void> class0 = Void.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      Class<Annotation> class2 = Annotation.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertNotNull(fieldArray0);
      assertEquals(7, fieldArray0.length);
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class2);
      assertFalse(boolean0);
      
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      MockError mockError0 = new MockError((String) null);
      assertNotNull(mockError0);
      
      MockThrowable mockThrowable0 = new MockThrowable("Q7e?X4!xsZ5+rS[MJ3$", mockError0);
      assertNotNull(mockThrowable0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, mockThrowable0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("Q7e?X4!xsZ5+rS[MJ3$", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Q7e?X4!xsZ5+rS[MJ3$", mockThrowable0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("Q7e?X4!xsZ5+rS[MJ3$", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Q7e?X4!xsZ5+rS[MJ3$", mockThrowable0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "Q7e?X4!xsZ5+rS[MJ3$");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<FloatNode> class0 = FloatNode.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      String string0 = constructor0.getName();
      assertEquals("com.fasterxml.jackson.databind.annotation.NoClass", string0);
      assertNotNull(string0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      MockIOException mockIOException0 = new MockIOException(sQLSyntaxErrorException0);
      assertNotNull(mockIOException0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLSyntaxErrorException
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      ClientInfoStatus clientInfoStatus2 = ClassUtil.nonNull(clientInfoStatus0, clientInfoStatus1);
      assertEquals(ClientInfoStatus.REASON_UNKNOWN_PROPERTY, clientInfoStatus2);
      assertFalse(clientInfoStatus0.equals((Object)clientInfoStatus1));
      assertFalse(clientInfoStatus1.equals((Object)clientInfoStatus0));
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus1));
      assertNotSame(clientInfoStatus0, clientInfoStatus1);
      assertSame(clientInfoStatus0, clientInfoStatus2);
      assertNotSame(clientInfoStatus1, clientInfoStatus2);
      assertNotSame(clientInfoStatus1, clientInfoStatus0);
      assertNotSame(clientInfoStatus2, clientInfoStatus1);
      assertSame(clientInfoStatus2, clientInfoStatus0);
      
      Class<Double> class0 = Double.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("A3b.+Y", class0, "A3b.+Y");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from String \"A3b.+Y\": A3b.+Y
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      MockIOException mockIOException0 = new MockIOException(sQLSyntaxErrorException0);
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = ClassUtil.classNameOf(class0);
      assertEquals("`java.lang.Class`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      
      DataTruncation dataTruncation0 = new DataTruncation((-80), false, false, (-478), (-478));
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      DataTruncation dataTruncation1 = (DataTruncation)ClassUtil.throwIfError(dataTruncation0);
      assertNotNull(dataTruncation1);
      assertSame(dataTruncation0, dataTruncation1);
      assertSame(dataTruncation1, dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      Throwable throwable0 = ClassUtil.getRootCause(mockException0);
      assertNotNull(throwable0);
      assertSame(mockException0, throwable0);
      assertSame(throwable0, mockException0);
      
      SQLException sQLException0 = new SQLException(throwable0);
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.getMessage());
      
      Throwable throwable1 = ClassUtil.getRootCause(sQLException0);
      assertNotNull(throwable1);
      assertSame(mockException0, throwable0);
      assertSame(mockException0, throwable1);
      assertSame(throwable0, mockException0);
      assertSame(throwable0, throwable1);
      assertSame(throwable1, mockException0);
      assertSame(throwable1, throwable0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      boolean boolean2 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      SQLException sQLException0 = new SQLException(mockRuntimeException0);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.getMessage());
      
      Throwable throwable0 = mockRuntimeException0.initCause(sQLException0);
      assertNotNull(throwable0);
      assertEquals("java.sql.SQLException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLException0.getMessage());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      
      boolean boolean3 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      String string0 = constructor0.getName();
      assertEquals("com.fasterxml.jackson.databind.annotation.NoClass", string0);
      assertNotNull(string0);
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      boolean boolean2 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      String string1 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertEquals("``", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Object> class1 = Object.class;
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      
      Class<Module> class2 = Module.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, class0, "; expected type JsonSerializer or Class<JsonSerializer> instead");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.Module) must override method '; expected type JsonSerializer or Class<JsonSerializer> instead'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      
      Class<Boolean> class2 = Boolean.class;
      Constructor<Boolean> constructor1 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      Class<?> class2 = ClassUtil.classOf(accessPattern0);
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isArray());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<?> class1 = ClassUtil.classOf((Object) null);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<Void> class0 = Void.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("~F^Ij8DrNnKEZ]", "~F^Ij8DrNnKEZ]");
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: ~F^Ij8DrNnKEZ]", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("~F^Ij8DrNnKEZ]", sQLNonTransientException0.getSQLState());
      assertEquals("~F^Ij8DrNnKEZ]", sQLNonTransientException0.getMessage());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientException0);
      assertNotNull(mockRuntimeException0);
      
      String string0 = ClassUtil.getClassDescription(mockRuntimeException0);
      assertEquals("`org.evosuite.runtime.mock.java.lang.MockRuntimeException`", string0);
      assertNotNull(string0);
      assertEquals("java.sql.SQLNonTransientException: ~F^Ij8DrNnKEZ]", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("~F^Ij8DrNnKEZ]", sQLNonTransientException0.getSQLState());
      assertEquals("~F^Ij8DrNnKEZ]", sQLNonTransientException0.getMessage());
      
      Class<?> class0 = ClassUtil.classOf(sQLNonTransientException0);
      assertNotNull(class0);
      assertEquals("java.sql.SQLNonTransientException: ~F^Ij8DrNnKEZ]", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("~F^Ij8DrNnKEZ]", sQLNonTransientException0.getSQLState());
      assertEquals("~F^Ij8DrNnKEZ]", sQLNonTransientException0.getMessage());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.sql.SQLNonTransientException", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<Void> class2 = Void.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Class<Byte> class3 = Byte.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class3);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)ClassUtil.getRootCause(sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isArray());
      
      String string0 = ClassUtil.getPackageName(class0);
      assertNull(string0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isArray());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLClientInfoException1);
      assertNotNull(mockRuntimeException0);
      
      boolean boolean1 = ClassUtil.hasClass(mockRuntimeException0, class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
      assertNotNull(string0);
      
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CollectionLikeType collectionLikeType0 = null;
      CollectionLikeType collectionLikeType1 = ClassUtil.nonNull((CollectionLikeType) null, (CollectionLikeType) null);
      assertNull(collectionLikeType1);
      
      MapLikeType mapLikeType0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      Class<ArrayType> class1 = ArrayType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      assertNotNull(mapType0);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      
      // Undeclared exception!
      try { 
        mapType0.withKeyType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CollectionLikeType collectionLikeType0 = ClassUtil.nonNull((CollectionLikeType) null, (CollectionLikeType) null);
      assertNull(collectionLikeType0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      Class<ArrayType> class1 = ArrayType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      assertNotNull(mapType0);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray2 = constructor0.getAnnotations();
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray1);
      assertSame(annotationArray2, annotationArray0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class2);
      assertNull(annotation1);
      assertSame(class2, class1);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("8T9(:");
      assertNotNull(mockRuntimeException0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray3 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray3);
      assertEquals(0, annotationArray3.length);
      assertSame(annotationArray3, annotationArray2);
      assertSame(annotationArray3, annotationArray1);
      assertSame(annotationArray3, annotationArray0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      
      boolean boolean2 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      Class<Long> class2 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray2 = constructor0.getAnnotations();
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray1);
      assertSame(annotationArray2, annotationArray0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      boolean boolean2 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      
      Annotation[] annotationArray2 = constructor0.getAnnotations();
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray1);
      assertSame(annotationArray2, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      
      boolean boolean2 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      
      Annotation[] annotationArray3 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray3);
      assertEquals(0, annotationArray3.length);
      assertSame(annotationArray3, annotationArray2);
      assertSame(annotationArray3, annotationArray1);
      assertSame(annotationArray3, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      
      Annotation[] annotationArray4 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray4);
      assertEquals(0, annotationArray4.length);
      assertSame(annotationArray4, annotationArray0);
      assertSame(annotationArray4, annotationArray2);
      assertSame(annotationArray4, annotationArray1);
      assertSame(annotationArray4, annotationArray3);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = false;
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern4 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern1, accessPattern2, accessPattern3, accessPattern4);
      assertFalse(accessPattern1.equals((Object)accessPattern4));
      assertFalse(accessPattern1.equals((Object)accessPattern2));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern1));
      assertFalse(accessPattern3.equals((Object)accessPattern4));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern4.equals((Object)accessPattern1));
      assertFalse(accessPattern4.equals((Object)accessPattern0));
      assertFalse(accessPattern4.equals((Object)accessPattern3));
      assertNotNull(enumSet0);
      assertSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern4);
      assertNotSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertSame(accessPattern2, accessPattern4);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern3, accessPattern4);
      assertNotSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern0);
      assertNotSame(accessPattern3, accessPattern1);
      assertNotSame(accessPattern4, accessPattern1);
      assertSame(accessPattern4, accessPattern2);
      assertNotSame(accessPattern4, accessPattern0);
      assertNotSame(accessPattern4, accessPattern3);
      assertEquals(3, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern4));
      
      AccessPattern accessPattern5 = AccessPattern.DYNAMIC;
      AccessPattern[] accessPatternArray0 = new AccessPattern[6];
      accessPatternArray0[0] = accessPattern3;
      accessPatternArray0[1] = accessPattern5;
      accessPatternArray0[2] = accessPattern3;
      accessPatternArray0[3] = accessPattern4;
      accessPatternArray0[4] = accessPattern0;
      accessPatternArray0[5] = accessPattern3;
      EnumSet<AccessPattern> enumSet1 = EnumSet.of(accessPattern5, accessPatternArray0);
      assertFalse(accessPattern5.equals((Object)accessPattern2));
      assertFalse(accessPattern5.equals((Object)accessPattern4));
      assertFalse(accessPattern5.equals((Object)accessPattern3));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(6, accessPatternArray0.length);
      assertSame(accessPattern5, accessPattern0);
      assertNotSame(accessPattern5, accessPattern2);
      assertNotSame(accessPattern5, accessPattern4);
      assertSame(accessPattern5, accessPattern1);
      assertNotSame(accessPattern5, accessPattern3);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(3, enumSet1.size());
      assertTrue(enumSet1.contains(accessPattern4));
      
      EnumSet<AccessPattern> enumSet2 = enumSet1.clone();
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(accessPattern5.equals((Object)accessPattern2));
      assertFalse(accessPattern5.equals((Object)accessPattern4));
      assertFalse(accessPattern5.equals((Object)accessPattern3));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet2);
      assertEquals(6, accessPatternArray0.length);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertSame(accessPattern5, accessPattern0);
      assertNotSame(accessPattern5, accessPattern2);
      assertNotSame(accessPattern5, accessPattern4);
      assertSame(accessPattern5, accessPattern1);
      assertNotSame(accessPattern5, accessPattern3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertEquals(3, enumSet2.size());
      assertEquals(3, enumSet1.size());
      assertTrue(enumSet2.contains(accessPattern4));
      assertTrue(enumSet1.contains(accessPattern4));
      
      EnumSet<AccessPattern> enumSet3 = EnumSet.copyOf(enumSet1);
      assertTrue(enumSet3.equals((Object)enumSet0));
      assertTrue(enumSet3.equals((Object)enumSet1));
      assertTrue(enumSet3.equals((Object)enumSet2));
      assertFalse(accessPattern5.equals((Object)accessPattern2));
      assertFalse(accessPattern5.equals((Object)accessPattern4));
      assertFalse(accessPattern5.equals((Object)accessPattern3));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertNotNull(enumSet3);
      assertEquals(6, accessPatternArray0.length);
      assertNotSame(enumSet3, enumSet0);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet2);
      assertSame(accessPattern5, accessPattern0);
      assertNotSame(accessPattern5, accessPattern2);
      assertNotSame(accessPattern5, accessPattern4);
      assertSame(accessPattern5, accessPattern1);
      assertNotSame(accessPattern5, accessPattern3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertEquals(3, enumSet3.size());
      assertEquals(3, enumSet1.size());
      assertTrue(enumSet3.contains(accessPattern4));
      assertTrue(enumSet1.contains(accessPattern4));
      
      EnumSet<AccessPattern> enumSet4 = EnumSet.copyOf(enumSet2);
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet3));
      assertTrue(enumSet4.equals((Object)enumSet1));
      assertTrue(enumSet4.equals((Object)enumSet2));
      assertTrue(enumSet4.equals((Object)enumSet3));
      assertTrue(enumSet4.equals((Object)enumSet0));
      assertFalse(accessPattern5.equals((Object)accessPattern2));
      assertFalse(accessPattern5.equals((Object)accessPattern4));
      assertFalse(accessPattern5.equals((Object)accessPattern3));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertNotNull(enumSet4);
      assertEquals(6, accessPatternArray0.length);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet4);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet4, enumSet3);
      assertNotSame(enumSet4, enumSet0);
      assertNotSame(enumSet4, enumSet2);
      assertNotSame(enumSet4, enumSet1);
      assertSame(accessPattern5, accessPattern0);
      assertNotSame(accessPattern5, accessPattern2);
      assertNotSame(accessPattern5, accessPattern4);
      assertSame(accessPattern5, accessPattern1);
      assertNotSame(accessPattern5, accessPattern3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet4);
      assertEquals(3, enumSet2.size());
      assertEquals(3, enumSet4.size());
      assertEquals(3, enumSet1.size());
      assertTrue(enumSet2.contains(accessPattern4));
      assertTrue(enumSet4.contains(accessPattern4));
      assertTrue(enumSet1.contains(accessPattern4));
      
      boolean boolean1 = enumSet1.add(accessPattern3);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(accessPattern3.equals((Object)accessPattern5));
      assertFalse(accessPattern3.equals((Object)accessPattern4));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern5.equals((Object)accessPattern2));
      assertFalse(accessPattern5.equals((Object)accessPattern4));
      assertFalse(accessPattern5.equals((Object)accessPattern3));
      assertTrue(enumSet1.equals((Object)enumSet4));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertEquals(6, accessPatternArray0.length);
      assertNotSame(accessPattern3, accessPattern5);
      assertNotSame(accessPattern3, accessPattern4);
      assertNotSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern0);
      assertNotSame(accessPattern3, accessPattern1);
      assertSame(accessPattern5, accessPattern0);
      assertNotSame(accessPattern5, accessPattern2);
      assertNotSame(accessPattern5, accessPattern4);
      assertSame(accessPattern5, accessPattern1);
      assertNotSame(accessPattern5, accessPattern3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet4);
      assertEquals(3, enumSet1.size());
      assertTrue(enumSet1.contains(accessPattern4));
      
      EnumSet<AccessPattern> enumSet5 = EnumSet.complementOf(enumSet4);
      assertTrue(enumSet2.equals((Object)enumSet4));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet3));
      assertTrue(enumSet4.equals((Object)enumSet1));
      assertTrue(enumSet4.equals((Object)enumSet2));
      assertTrue(enumSet4.equals((Object)enumSet3));
      assertTrue(enumSet4.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet1));
      assertFalse(enumSet5.equals((Object)enumSet4));
      assertFalse(enumSet5.equals((Object)enumSet3));
      assertFalse(enumSet5.equals((Object)enumSet2));
      assertFalse(accessPattern5.equals((Object)accessPattern2));
      assertFalse(accessPattern5.equals((Object)accessPattern4));
      assertFalse(accessPattern5.equals((Object)accessPattern3));
      assertTrue(enumSet1.equals((Object)enumSet4));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertNotNull(enumSet5);
      assertEquals(6, accessPatternArray0.length);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet4);
      assertNotSame(enumSet2, enumSet5);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet4, enumSet5);
      assertNotSame(enumSet4, enumSet3);
      assertNotSame(enumSet4, enumSet0);
      assertNotSame(enumSet4, enumSet2);
      assertNotSame(enumSet4, enumSet1);
      assertNotSame(enumSet5, enumSet0);
      assertNotSame(enumSet5, enumSet1);
      assertNotSame(enumSet5, enumSet4);
      assertNotSame(enumSet5, enumSet3);
      assertNotSame(enumSet5, enumSet2);
      assertSame(accessPattern5, accessPattern0);
      assertNotSame(accessPattern5, accessPattern2);
      assertNotSame(accessPattern5, accessPattern4);
      assertSame(accessPattern5, accessPattern1);
      assertNotSame(accessPattern5, accessPattern3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet4);
      assertNotSame(enumSet1, enumSet5);
      assertEquals(3, enumSet2.size());
      assertEquals(3, enumSet4.size());
      assertEquals(0, enumSet5.size());
      assertEquals(3, enumSet1.size());
      assertTrue(enumSet2.contains(accessPattern4));
      assertTrue(enumSet4.contains(accessPattern4));
      assertFalse(enumSet5.contains(accessPattern4));
      assertTrue(enumSet1.contains(accessPattern4));
      
      boolean boolean2 = enumSet5.add(accessPattern0);
      assertTrue(boolean2);
      assertTrue(enumSet2.equals((Object)enumSet4));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet3));
      assertFalse(enumSet2.equals((Object)enumSet5));
      assertFalse(accessPattern0.equals((Object)accessPattern4));
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertTrue(enumSet4.equals((Object)enumSet1));
      assertTrue(enumSet4.equals((Object)enumSet2));
      assertFalse(enumSet4.equals((Object)enumSet5));
      assertTrue(enumSet4.equals((Object)enumSet3));
      assertTrue(enumSet4.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet1));
      assertFalse(enumSet5.equals((Object)enumSet4));
      assertFalse(enumSet5.equals((Object)enumSet3));
      assertFalse(enumSet5.equals((Object)enumSet2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(accessPattern5.equals((Object)accessPattern2));
      assertFalse(accessPattern5.equals((Object)accessPattern4));
      assertFalse(accessPattern5.equals((Object)accessPattern3));
      assertTrue(enumSet1.equals((Object)enumSet4));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet5));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertEquals(6, accessPatternArray0.length);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet4);
      assertNotSame(enumSet2, enumSet5);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(accessPattern0, accessPattern4);
      assertSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern2);
      assertSame(accessPattern0, accessPattern5);
      assertNotSame(enumSet4, enumSet5);
      assertNotSame(enumSet4, enumSet3);
      assertNotSame(enumSet4, enumSet0);
      assertNotSame(enumSet4, enumSet2);
      assertNotSame(enumSet4, enumSet1);
      assertNotSame(enumSet5, enumSet0);
      assertNotSame(enumSet5, enumSet1);
      assertNotSame(enumSet5, enumSet4);
      assertNotSame(enumSet5, enumSet3);
      assertNotSame(enumSet5, enumSet2);
      assertSame(accessPattern5, accessPattern0);
      assertNotSame(accessPattern5, accessPattern2);
      assertNotSame(accessPattern5, accessPattern4);
      assertSame(accessPattern5, accessPattern1);
      assertNotSame(accessPattern5, accessPattern3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet4);
      assertNotSame(enumSet1, enumSet5);
      assertEquals(3, enumSet2.size());
      assertEquals(3, enumSet4.size());
      assertEquals(1, enumSet5.size());
      assertEquals(3, enumSet1.size());
      assertTrue(enumSet2.contains(accessPattern4));
      assertTrue(enumSet4.contains(accessPattern4));
      assertFalse(enumSet5.contains(accessPattern4));
      assertTrue(enumSet5.contains(accessPattern1));
      assertTrue(enumSet1.contains(accessPattern4));
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<Object> class1 = Object.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Class<FloatNode> class0 = FloatNode.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.node.FloatNode has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotationsByType(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertSame(class2, class1);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      boolean boolean1 = constructor0.isAnnotationPresent(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(class1, class2);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Iterator<Short> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Constructor constructor1 = (Constructor)ClassUtil.nonNull((AccessibleObject) constructor0, (AccessibleObject) constructor0);
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      
      Class<?> class3 = ClassUtil.getOuterClass(class1);
      assertNull(class3);
      assertSame(class1, class2);
      
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<MapType> class4 = MapType.class;
      boolean boolean2 = ClassUtil.isObjectOrPrimitive(class4);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = constructor0.getParameterCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class2 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotationsByType(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      boolean boolean1 = constructor0.isAnnotationPresent(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = ClassUtil.isConcrete((Member) constructor1);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      
      Class<ReferenceType> class3 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class3);
      assertNotNull(methodArray0);
      assertEquals(34, methodArray0.length);
      
      boolean boolean4 = ClassUtil.isJacksonStdImpl(class3);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      Class<MapLikeType> class4 = MapLikeType.class;
      Constructor<MapLikeType> constructor2 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor2);
      
      Class<AccessPattern> class5 = AccessPattern.class;
      boolean boolean5 = ClassUtil.isConcrete(class5);
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      
      Method[] methodArray1 = ClassUtil.getClassMethods(class0);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertNotNull(methodArray1);
      assertEquals(0, methodArray1.length);
      assertNotSame(methodArray1, methodArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(mockIOException0);
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLNonTransientException0.getMessage());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      boolean boolean0 = true;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      assertNotNull(byteArrayBuilder0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory3.createGenerator((OutputStream) byteArrayBuilder0);
      assertNotNull(uTF8JsonGenerator0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Constructor<ResolvedRecursiveType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = new JsonInclude.Value(jsonInclude0);
      assertNotNull(jsonInclude_Value0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertNotNull(objectReader1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      ObjectReader objectReader2 = objectReader0.withFeatures(formatFeatureArray0);
      assertNotNull(objectReader2);
      assertEquals(2, formatFeatureArray0.length);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      assertNotNull(typeFactory0);
      assertEquals(2, formatFeatureArray0.length);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertNotNull(arrayType0);
      assertEquals(2, formatFeatureArray0.length);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      Class<String> class1 = String.class;
      String string0 = ClassUtil.createInstance(class1, true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayType arrayType1 = arrayType0.withContentTypeHandler("");
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotNull(arrayType1);
      assertEquals(2, formatFeatureArray0.length);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(arrayType0, arrayType1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.useStaticType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.hasContentType());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      ObjectReader objectReader3 = objectReader0.withAttribute(arrayType1, list0);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertEquals(2, formatFeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.useStaticType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.hasContentType());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader3;
      objectReaderArray0[2] = objectReader3;
      objectReaderArray0[3] = objectReader3;
      ObjectReader objectReader4 = objectReader3.withFormatDetection(objectReaderArray0);
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertNotNull(objectReader4);
      assertEquals(4, objectReaderArray0.length);
      assertEquals(2, formatFeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader4);
      assertSame(objectReader2, objectReader1);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader4);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.useStaticType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.hasContentType());
      
      TypeFactory typeFactory1 = objectReader0.getTypeFactory();
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertNotNull(typeFactory1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertSame(typeFactory1, typeFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      Class<String> class2 = String.class;
      Class<Error> class3 = Error.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class2, class3);
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader4));
      assertNotNull(mapLikeType0);
      assertEquals(2, formatFeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader4);
      assertSame(objectReader2, objectReader1);
      assertSame(typeFactory0, typeFactory1);
      assertSame(class2, class1);
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      
      Class<?> class4 = ClassUtil.rawClass(arrayType1);
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader4));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotNull(class4);
      assertEquals(2, formatFeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader4);
      assertSame(objectReader2, objectReader1);
      assertSame(typeFactory0, typeFactory1);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertEquals("class [Lcom.fasterxml.jackson.databind.type.ResolvedRecursiveType;", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(1041, class4.getModifiers());
      assertTrue(class4.isArray());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.useStaticType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.hasContentType());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Double double0 = new Double(673.7231286481);
      assertEquals(673.7231286481, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = ClassUtil.hasClass(double0, class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Constructor<ResolvedRecursiveType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Long> class1 = Long.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean0);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class0);
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      
      SQLException sQLException0 = new SQLException("K", "K");
      assertNotNull(sQLException0);
      assertEquals("K", sQLException0.getMessage());
      assertEquals("K", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: K", sQLException0.toString());
      
      MockThrowable mockThrowable0 = new MockThrowable("K", sQLException0);
      assertNotNull(mockThrowable0);
      
      Throwable throwable0 = ClassUtil.throwIfError(mockThrowable0);
      assertNotNull(throwable0);
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertEquals("K", sQLException0.getMessage());
      assertEquals("K", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: K", sQLException0.toString());
      assertEquals("K", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: K", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: K", throwable0.toString());
      assertEquals("K", throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<NoClass> class1 = NoClass.class;
      Class<Integer> class2 = Integer.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNull(string0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Long> class3 = Long.class;
      boolean boolean1 = ClassUtil.hasClass(class1, class3);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.java.lang.Short", "net.sf.cglib.proxy.java.lang.Short");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: net.sf.cglib.proxy.java.lang.Short", sQLWarning0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLWarning0.getSQLState());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLWarning0.getMessage());
      
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<NoClass> class2 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class2);
      assertFalse(boolean0);
      
      Class<Integer> class3 = Integer.class;
      String string0 = ClassUtil.canBeABeanType(class3);
      assertNull(string0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.lang.Float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern1);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertNotNull(enumSet0);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern1));
      
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertTrue(enumSet0.contains(accessPattern1));
      assertTrue(enumSet1.contains(accessPattern1));
      
      EnumSet<AccessPattern> enumSet2 = EnumSet.copyOf(enumSet1);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotNull(enumSet2);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertTrue(enumSet0.contains(accessPattern1));
      assertTrue(enumSet1.contains(accessPattern1));
      assertTrue(enumSet2.contains(accessPattern1));
      
      EnumSet<AccessPattern> enumSet3 = EnumSet.copyOf(enumSet2);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet3.equals((Object)enumSet1));
      assertTrue(enumSet3.equals((Object)enumSet2));
      assertTrue(enumSet3.equals((Object)enumSet0));
      assertNotNull(enumSet3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertEquals(2, enumSet3.size());
      assertTrue(enumSet0.contains(accessPattern1));
      assertTrue(enumSet1.contains(accessPattern1));
      assertTrue(enumSet2.contains(accessPattern1));
      assertTrue(enumSet3.contains(accessPattern1));
      
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      boolean boolean0 = enumSet3.add(accessPattern3);
      assertTrue(boolean0);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet3));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet3));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertFalse(enumSet3.equals((Object)enumSet1));
      assertFalse(enumSet3.equals((Object)enumSet0));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      assertNotSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern1);
      assertNotSame(accessPattern3, accessPattern0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertEquals(3, enumSet3.size());
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet0.contains(accessPattern1));
      assertFalse(enumSet1.contains(accessPattern3));
      assertTrue(enumSet1.contains(accessPattern1));
      assertTrue(enumSet2.contains(accessPattern1));
      assertFalse(enumSet2.contains(accessPattern3));
      assertTrue(enumSet3.contains(accessPattern1));
      
      boolean boolean1 = enumSet1.add(accessPattern3);
      assertTrue(boolean1);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern1);
      assertNotSame(accessPattern3, accessPattern0);
      assertEquals(2, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet0.contains(accessPattern1));
      assertTrue(enumSet1.contains(accessPattern1));
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumSet3);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet3));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertTrue(enumSet3.equals((Object)enumSet1));
      assertFalse(enumSet3.equals((Object)enumSet0));
      assertNotNull(class3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertEquals(3, enumSet3.size());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class3.toString());
      assertTrue(class3.isEnum());
      assertEquals(16385, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet0.contains(accessPattern1));
      assertTrue(enumSet1.contains(accessPattern1));
      assertTrue(enumSet2.contains(accessPattern1));
      assertFalse(enumSet2.contains(accessPattern3));
      assertTrue(enumSet3.contains(accessPattern1));
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      String string0 = ClassUtil.nullOrToString(character0);
      assertNotNull(string0);
      
      boolean boolean2 = enumSet2.add(accessPattern0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet3));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet3);
      assertEquals(2, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet0.contains(accessPattern1));
      assertTrue(enumSet1.contains(accessPattern1));
      assertTrue(enumSet2.contains(accessPattern1));
      assertFalse(enumSet2.contains(accessPattern3));
      
      Class<RuntimeException> class4 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class4, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      
      Short short0 = new Short((short) (-7489));
      assertEquals((short) (-7489), (short)short0);
      assertNotNull(short0);
      
      Class<NoClass> class5 = NoClass.class;
      String string1 = ClassUtil.isLocalType(class5, false);
      assertNull(string1);
      
      Class<JsonMappingException> class6 = JsonMappingException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class6);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      boolean boolean3 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern1);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertNotNull(enumSet0);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      
      EnumSet<AccessPattern> enumSet2 = EnumSet.copyOf(enumSet1);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotNull(enumSet2);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertTrue(enumSet2.contains(accessPattern0));
      
      EnumSet<AccessPattern> enumSet3 = EnumSet.copyOf(enumSet2);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet3.equals((Object)enumSet0));
      assertTrue(enumSet3.equals((Object)enumSet2));
      assertTrue(enumSet3.equals((Object)enumSet1));
      assertNotNull(enumSet3);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertEquals(2, enumSet3.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertTrue(enumSet2.contains(accessPattern0));
      assertTrue(enumSet3.contains(accessPattern0));
      
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      boolean boolean0 = enumSet3.add(accessPattern3);
      assertTrue(boolean0);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet3));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet3));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertFalse(enumSet3.equals((Object)enumSet1));
      assertFalse(enumSet3.equals((Object)enumSet0));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      assertNotSame(accessPattern3, accessPattern1);
      assertNotSame(accessPattern3, accessPattern0);
      assertNotSame(accessPattern3, accessPattern2);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertEquals(3, enumSet3.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertFalse(enumSet0.contains(accessPattern3));
      assertFalse(enumSet1.contains(accessPattern3));
      assertTrue(enumSet1.contains(accessPattern0));
      assertFalse(enumSet2.contains(accessPattern3));
      assertTrue(enumSet2.contains(accessPattern0));
      assertTrue(enumSet3.contains(accessPattern0));
      
      boolean boolean1 = enumSet1.add(accessPattern3);
      assertTrue(boolean1);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(accessPattern3, accessPattern1);
      assertNotSame(accessPattern3, accessPattern0);
      assertNotSame(accessPattern3, accessPattern2);
      assertEquals(2, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet1.contains(accessPattern0));
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumSet3);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet3));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertFalse(enumSet3.equals((Object)enumSet0));
      assertTrue(enumSet3.equals((Object)enumSet1));
      assertNotNull(class3);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertEquals(3, enumSet3.size());
      assertFalse(class3.isPrimitive());
      assertEquals(16385, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class3.toString());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertTrue(enumSet0.contains(accessPattern0));
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet1.contains(accessPattern0));
      assertFalse(enumSet2.contains(accessPattern3));
      assertTrue(enumSet2.contains(accessPattern0));
      assertTrue(enumSet3.contains(accessPattern0));
      
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      Class<CollectionType> class4 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JavaType javaType0 = objectMapper0.constructType(class2);
      assertNotNull(javaType0);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class4, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[3]);
      assertNotNull(referenceType0);
      assertEquals(5, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasValueHandler());
      
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertNotNull(referenceType1);
      assertEquals(5, javaTypeArray0.length);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isConcrete());
      assertTrue(referenceType1.isAnchorType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isFinal());
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, referenceType1, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<NoClass> class2 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class2);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-100);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-17), (byte)6, (byte)39, (byte) (-100)}, byteArray0);
      
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      String string1 = ClassUtil.nonNullString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("keyType", "", (byte) (-100));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("keyType", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-100), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: keyType", sQLIntegrityConstraintViolationException0.toString());
      
      SQLException sQLException0 = new SQLException("_|n{89},IAQ-FZVy", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLException0);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("keyType", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-100), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: keyType", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("_|n{89},IAQ-FZVy", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: _|n{89},IAQ-FZVy", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      
      sQLIntegrityConstraintViolationException0.setNextException(sQLException0);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("keyType", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-100), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: keyType", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("_|n{89},IAQ-FZVy", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: _|n{89},IAQ-FZVy", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "l[ )5Ru6oC()tH=!mP";
      Class<?> class0 = ClassUtil.classOf("l[ )5Ru6oC()tH=!mP");
      assertNotNull(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      
      Class<SimpleType> class1 = SimpleType.class;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("(-ZW7>#y");
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("(-ZW7>#y", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: (-ZW7>#y", sQLNonTransientException0.toString());
      
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(mockException0);
      assertNotNull(throwable0);
      assertSame(mockException0, throwable0);
      assertSame(throwable0, mockException0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      String string0 = ClassUtil.getPackageName(class3);
      assertEquals("com.fasterxml.jackson.databind.util", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern1);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertNotNull(enumSet0);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern2));
      
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertTrue(enumSet0.contains(accessPattern2));
      assertTrue(enumSet1.contains(accessPattern2));
      
      EnumSet<AccessPattern> enumSet2 = EnumSet.copyOf(enumSet1);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotNull(enumSet2);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertTrue(enumSet0.contains(accessPattern2));
      assertTrue(enumSet1.contains(accessPattern2));
      assertTrue(enumSet2.contains(accessPattern2));
      
      EnumSet<AccessPattern> enumSet3 = EnumSet.copyOf(enumSet2);
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet3.equals((Object)enumSet1));
      assertTrue(enumSet3.equals((Object)enumSet0));
      assertTrue(enumSet3.equals((Object)enumSet2));
      assertNotNull(enumSet3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertEquals(2, enumSet3.size());
      assertTrue(enumSet0.contains(accessPattern2));
      assertTrue(enumSet1.contains(accessPattern2));
      assertTrue(enumSet2.contains(accessPattern2));
      assertTrue(enumSet3.contains(accessPattern2));
      
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      boolean boolean0 = enumSet3.add(accessPattern3);
      assertTrue(boolean0);
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet3));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet3));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet3.equals((Object)enumSet1));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertFalse(enumSet3.equals((Object)enumSet0));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet0);
      assertNotSame(accessPattern3, accessPattern1);
      assertNotSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertEquals(3, enumSet3.size());
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet0.contains(accessPattern2));
      assertFalse(enumSet1.contains(accessPattern3));
      assertTrue(enumSet1.contains(accessPattern2));
      assertFalse(enumSet2.contains(accessPattern3));
      assertTrue(enumSet2.contains(accessPattern2));
      assertTrue(enumSet3.contains(accessPattern3));
      
      boolean boolean1 = enumSet1.add(accessPattern3);
      assertTrue(boolean1);
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(accessPattern3, accessPattern1);
      assertNotSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern0);
      assertEquals(2, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet0.contains(accessPattern2));
      assertTrue(enumSet1.contains(accessPattern3));
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumSet3);
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertFalse(enumSet2.equals((Object)enumSet3));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet3.equals((Object)enumSet1));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertFalse(enumSet3.equals((Object)enumSet0));
      assertNotNull(class3);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet2, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertEquals(3, enumSet3.size());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertEquals(16385, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class3.toString());
      assertTrue(class3.isEnum());
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet0.contains(accessPattern2));
      assertTrue(enumSet1.contains(accessPattern3));
      assertFalse(enumSet2.contains(accessPattern3));
      assertTrue(enumSet2.contains(accessPattern2));
      assertTrue(enumSet3.contains(accessPattern3));
      
      String string0 = ClassUtil.nullOrToString(enumSet1);
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet3));
      assertNotNull(string0);
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet0.contains(accessPattern2));
      assertTrue(enumSet1.contains(accessPattern3));
      
      Class<RuntimeException> class4 = RuntimeException.class;
      boolean boolean2 = enumSet0.add(accessPattern2);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet2);
      assertEquals(2, enumSet0.size());
      assertFalse(enumSet0.contains(accessPattern3));
      assertTrue(enumSet0.contains(accessPattern2));
      
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      Short short0 = new Short((short)1287);
      assertEquals((short)1287, (short)short0);
      assertNotNull(short0);
      
      Class<ArrayType> class5 = ArrayType.class;
      String string1 = ClassUtil.isLocalType(class5, true);
      assertNull(string1);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class4);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      String string0 = ClassUtil.backticked("NULL");
      assertEquals("`NULL`", string0);
      assertNotNull(string0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`NULL`");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `NULL`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("`NULL`", sQLIntegrityConstraintViolationException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `NULL`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Throwable throwable0 = null;
      Throwable throwable1 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable1);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = true;
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      Member member0 = null;
      Throwable[] throwableArray0 = mockException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNull(jsonParser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string0 = "rmEE_tk*P]";
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.Void", "rmEE_tk*P]", sQLWarning0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Void", sQLTransactionRollbackException0.getMessage());
      assertEquals("rmEE_tk*P]", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Void", sQLTransactionRollbackException0.toString());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "net.sf.cglib.proxy.java.lang.Void", sQLTransactionRollbackException0);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn("f]##]1'g)(0").when(noClass0).toString();
      NoClass noClass1 = ClassUtil.nonNull(noClass0, noClass0);
      assertNotNull(noClass1);
      assertSame(noClass1, noClass0);
      
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertNotNull(configOverrides1);
      assertNotSame(configOverrides0, configOverrides1);
      assertNotSame(configOverrides1, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(configOverrides1.getDefaultMergeable());
      
      Boolean boolean1 = configOverrides1.getDefaultMergeable();
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertNull(boolean1);
      assertNotSame(configOverrides0, configOverrides1);
      assertNotSame(configOverrides1, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(configOverrides1.getDefaultMergeable());
      
      String string0 = ClassUtil.nullOrToString(class0);
      assertNotNull(string0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.print('9');
      assertEquals("9", stringWriter0.toString());
      
      JsonLocation jsonLocation0 = new JsonLocation(mockPrintWriter0, 0L, 1536, (-1));
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("9", stringWriter0.toString());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals(1536, jsonLocation0.getLineNr());
      
      String string1 = jsonLocation0.toString();
      assertEquals("[Source: (org.evosuite.runtime.mock.java.io.MockPrintWriter); line: 1536, column: -1]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("9", stringWriter0.toString());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals(1536, jsonLocation0.getLineNr());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "com.fasterxml.jackson.databind.ser.ContainerSerializer", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("9", stringWriter0.toString());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals(1536, jsonLocation0.getLineNr());
      
      String string2 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        ClassUtil.throwIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<Character> class1 = Character.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<ArrayType> class2 = ArrayType.class;
      boolean boolean2 = ClassUtil.isConcrete(class2);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string0 = ClassUtil.nonNullString("p3h 4~Ff");
      assertEquals("p3h 4~Ff", string0);
      assertNotNull(string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1741);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((Writer) charArrayWriter0);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      assertNotNull(mockIOException0);
      
      MockIOException mockIOException1 = new MockIOException("W", mockIOException0);
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertNotNull(mockIOException1);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) mockIOException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      Boolean boolean1 = configOverrides0.getDefaultMergeable();
      assertNull(boolean1);
      assertNull(configOverrides0.getDefaultMergeable());
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.print('9');
      assertEquals("9", stringWriter0.toString());
      
      JsonLocation jsonLocation0 = new JsonLocation(mockPrintWriter0, 0L, (-1), (-1));
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("9", stringWriter0.toString());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "elementType", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      assertEquals("9", stringWriter0.toString());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      String string1 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Class<Integer> class0 = Integer.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Number", class1.toString());
      
      String string0 = ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      assertEquals("`ZERO_LENGTH_ENUM_ARRAY`", string0);
      assertNotNull(string0);
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class1, true);
      assertNotNull(list0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = ClassUtil.hasClass(class2, class0);
      assertFalse(boolean0);
      
      SQLDataException sQLDataException0 = new SQLDataException("nDJoQP1?w V`Q;kNG");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("nDJoQP1?w V`Q;kNG", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: nDJoQP1?w V`Q;kNG", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZERO_LENGTH_ENUM_ARRAY", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("s", objectArray0);
      assertNotNull(printStream0);
      assertEquals(1, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      sQLDataException0.printStackTrace(printStream0);
      assertEquals(1, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("nDJoQP1?w V`Q;kNG", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: nDJoQP1?w V`Q;kNG", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      Throwable[] throwableArray0 = sQLDataException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("nDJoQP1?w V`Q;kNG", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: nDJoQP1?w V`Q;kNG", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLDataException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("nDJoQP1?w V`Q;kNG", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: nDJoQP1?w V`Q;kNG", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      assertNotNull(sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertSame(sQLDataException0, sQLDataException1);
      assertEquals("java.sql.SQLDataException: nDJoQP1?w V`Q;kNG", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("nDJoQP1?w V`Q;kNG", sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("nDJoQP1?w V`Q;kNG", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: nDJoQP1?w V`Q;kNG", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      Class<IOException> class3 = IOException.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      Class<Object> class5 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1572, objectMapper0, (OutputStream) null);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1572, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1572, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(1572, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      
      boolean boolean0 = true;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator1, true);
      assertNotNull(jsonGeneratorDelegate0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1572, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(1572, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      SQLWarning sQLWarning0 = new SQLWarning("l4V", "l4V", (Throwable) null);
      assertNotNull(sQLWarning0);
      assertEquals("l4V", sQLWarning0.getMessage());
      assertEquals("l4V", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: l4V", sQLWarning0.toString());
      
      int int0 = jsonGeneratorDelegate0.getFeatureMask();
      assertEquals(1572, int0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1572, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(1572, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      
      MockException mockException0 = new MockException(sQLWarning0);
      assertNotNull(mockException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("l4V", "l4V", 0, mockException0);
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: l4V", sQLTransientException0.toString());
      assertEquals("l4V", sQLTransientException0.getSQLState());
      assertEquals("l4V", sQLTransientException0.getMessage());
      assertEquals("l4V", sQLWarning0.getMessage());
      assertEquals("l4V", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: l4V", sQLWarning0.toString());
      
      sQLWarning0.addSuppressed(mockException0);
      assertEquals("l4V", sQLWarning0.getMessage());
      assertEquals("l4V", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: l4V", sQLWarning0.toString());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: l4V", sQLTransientException0.toString());
      assertEquals("l4V", sQLTransientException0.getSQLState());
      assertEquals("l4V", sQLTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTransientException: l4V", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: l4V", sQLNonTransientException0.getMessage());
      assertEquals("l4V", sQLWarning0.getMessage());
      assertEquals("l4V", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: l4V", sQLWarning0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) uTF8JsonGenerator1, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: java.sql.SQLTransientException: l4V
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(7, classUtil_CtorArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      SQLWarning sQLWarning0 = new SQLWarning(".xYZ]/v[m](&S_", ".xYZ]/v[m](&S_", 23);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: .xYZ]/v[m](&S_", sQLWarning0.toString());
      assertEquals(23, sQLWarning0.getErrorCode());
      assertEquals(".xYZ]/v[m](&S_", sQLWarning0.getMessage());
      assertEquals(".xYZ]/v[m](&S_", sQLWarning0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Integer> class1 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertSame(class1, class0);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("E5zr]tm=", "Unmatched second part of surrogate pair (0x", 3);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("Unmatched second part of surrogate pair (0x", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E5zr]tm=", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLIntegrityConstraintViolationException0.toString());
      
      Spliterator<Throwable> spliterator0 = sQLIntegrityConstraintViolationException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("Unmatched second part of surrogate pair (0x", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E5zr]tm=", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLIntegrityConstraintViolationException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLDataException0);
      assertEquals("Unmatched second part of surrogate pair (0x", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E5zr]tm=", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.toString());
      
      Spliterator<Throwable> spliterator1 = sQLDataException0.spliterator();
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotNull(spliterator1);
      assertNotSame(spliterator1, spliterator0);
      assertEquals("Unmatched second part of surrogate pair (0x", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E5zr]tm=", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.toString());
      
      Spliterator<Throwable> spliterator2 = sQLDataException0.spliterator();
      assertFalse(spliterator2.equals((Object)spliterator0));
      assertFalse(spliterator2.equals((Object)spliterator1));
      assertNotNull(spliterator2);
      assertNotSame(spliterator2, spliterator0);
      assertNotSame(spliterator2, spliterator1);
      assertEquals("Unmatched second part of surrogate pair (0x", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E5zr]tm=", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.toString());
      
      SQLDataException sQLDataException1 = (SQLDataException)sQLDataException0.fillInStackTrace();
      assertNotNull(sQLDataException1);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals("Unmatched second part of surrogate pair (0x", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E5zr]tm=", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException1.toString());
      assertNull(sQLDataException1.getSQLState());
      
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLDataException0);
      assertSame(sQLDataException0, sQLDataException1);
      assertEquals("Unmatched second part of surrogate pair (0x", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("E5zr]tm=", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLIntegrityConstraintViolationException: E5zr]tm=", sQLDataException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "-Af[8DHN)]~<XJuQqd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -Af[8DHN)]~<XJuQqd
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      Class<Long> class3 = Long.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Constructor<ResolvedRecursiveType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, "keyUniverse");
      assertEquals("keyUniverse", string0);
      assertNotNull(string0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      
      Class<Long> class1 = Long.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("long", class1.toString());
      
      String string0 = ClassUtil.getPackageName(class1);
      assertNull(string0);
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("long", class1.toString());
      
      String string1 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "4l0z:-7XKF:RT+V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<Double> class0 = Double.class;
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", mockError0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLTransientConnectionException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLTransientConnectionException0.getSQLState());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<FloatNode> class0 = FloatNode.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE(mockRuntimeException0);
      assertNotNull(throwable0);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      
      Class<Float> class0 = Float.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean0 = false;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<Integer> class2 = Integer.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class3, list0);
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class3, ")J:m=E<UCxt1N+BK", (JavaType) null);
      assertNotNull(virtualAnnotatedMember0);
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(")J:m=E<UCxt1N+BK", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      Member member0 = virtualAnnotatedMember0.getMember();
      assertNull(member0);
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(")J:m=E<UCxt1N+BK", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<Void> class2 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "E&9mxFfdb");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "bz;RHA}VBD");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "E&9mxFfdb", (Throwable) jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException2);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException2);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from((JsonGenerator) null, "com.fasterxml.jackson.databind.DeserializationFeature");
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException1));
      assertNotNull(jsonMappingException3);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertNotSame(jsonMappingException3, jsonMappingException0);
      assertNotSame(jsonMappingException3, jsonMappingException1);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertEquals(0, stackTraceElementArray0.length);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      IOException iOException0 = ClassUtil.nonNull((IOException) jsonMappingException0, (IOException) jsonMappingException0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException2));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException3));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(iOException0.equals((Object)jsonMappingException2));
      assertFalse(iOException0.equals((Object)jsonMappingException1));
      assertFalse(iOException0.equals((Object)jsonMappingException3));
      assertNotNull(iOException0);
      assertSame(jsonMappingException0, iOException0);
      assertNotSame(jsonMappingException0, jsonMappingException2);
      assertNotSame(jsonMappingException0, jsonMappingException3);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(iOException0, jsonMappingException2);
      assertNotSame(iOException0, jsonMappingException1);
      assertNotSame(iOException0, jsonMappingException3);
      assertSame(iOException0, jsonMappingException0);
      
      String string0 = ClassUtil.backticked("4");
      assertEquals("`4`", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Class<Integer> class0 = Integer.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      String string0 = ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      assertEquals("`ZERO_LENGTH_ENUM_ARRAY`", string0);
      assertNotNull(string0);
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class1, true);
      assertNotNull(list0);
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      boolean boolean0 = ClassUtil.hasClass(class2, class0);
      assertFalse(boolean0);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      Short short0 = new Short((short)1536);
      assertEquals((short)1536, (short)short0);
      assertNotNull(short0);
      
      String string1 = ClassUtil.getClassDescription(short0);
      assertEquals("`java.lang.Short`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      String string0 = null;
      String string1 = ClassUtil.quotedOr(class0, (String) null);
      assertEquals("\"class com.fasterxml.jackson.databind.type.MapType\"", string1);
      assertNotNull(string1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("BhBu[iWx[jg;QA-?");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, (byte)0, false);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(5, byteArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray2 = constructor0.getAnnotations();
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray0);
      assertSame(annotationArray2, annotationArray1);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      boolean boolean2 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Iterator<PlaceholderForType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<MapType> class0 = MapType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      Class<CollectionType> class1 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(7, classUtil_CtorArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("R<u");
      assertNotNull(sQLNonTransientException0);
      assertEquals("R<u", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: R<u", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      assertNotNull(sQLNonTransientException1);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      assertEquals("R<u", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: R<u", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException1.getSQLState());
      assertEquals("R<u", sQLNonTransientException1.getMessage());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: R<u", sQLNonTransientException1.toString());
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      String string0 = ClassUtil.getPackageName(class3);
      assertEquals("com.fasterxml.jackson.databind.util", string0);
      assertNotNull(string0);
      
      Class<Double> class4 = Double.class;
      boolean boolean0 = ClassUtil.isProxyType(class4);
      assertFalse(boolean0);
      
      SQLNonTransientException sQLNonTransientException2 = (SQLNonTransientException)ClassUtil.getRootCause(sQLNonTransientException0);
      assertNotNull(sQLNonTransientException2);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException0, sQLNonTransientException2);
      assertSame(sQLNonTransientException2, sQLNonTransientException0);
      assertSame(sQLNonTransientException2, sQLNonTransientException1);
      assertEquals("R<u", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: R<u", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException2.getSQLState());
      assertEquals("R<u", sQLNonTransientException2.getMessage());
      assertEquals(0, sQLNonTransientException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: R<u", sQLNonTransientException2.toString());
      
      Class<MapType> class5 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class5, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)7;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)124, (byte) (-60), (byte)16, (byte)5, (byte)50, (byte)96, (byte)0, (byte)39, (byte)7}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean2 = ClassUtil.isConcrete(class0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", string0);
      assertNotNull(string0);
      
      Class<?> class1 = ClassUtil.classOf(class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`com.fasterxml.jackson.databind.JsonMappingException`", "(P,3l", 1020, hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1020, sQLClientInfoException0.getErrorCode());
      assertEquals("(P,3l", sQLClientInfoException0.getSQLState());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: `com.fasterxml.jackson.databind.JsonMappingException`", sQLClientInfoException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "`com.fasterxml.jackson.databind.JsonMappingException`", (Throwable) sQLClientInfoException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1020, sQLClientInfoException0.getErrorCode());
      assertEquals("(P,3l", sQLClientInfoException0.getSQLState());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: `com.fasterxml.jackson.databind.JsonMappingException`", sQLClientInfoException0.toString());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // `com.fasterxml.jackson.databind.JsonMappingException`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      NoClass noClass1 = ClassUtil.nonNull(noClass0, noClass0);
      assertNotNull(noClass1);
      assertSame(noClass1, noClass0);
      
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ClassUtil.quotedOr(object0, "[ChainedTransformer(");
      assertNotNull(string0);
      
      Class<ReferenceType> class1 = ReferenceType.class;
      String string1 = ClassUtil.canBeABeanType(class1);
      assertNull(string1);
      
      SQLWarning sQLWarning0 = new SQLWarning("Failed to instantiate class ");
      assertNotNull(sQLWarning0);
      assertEquals("Failed to instantiate class ", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Failed to instantiate class ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      String string2 = sQLWarning0.getLocalizedMessage();
      assertEquals("Failed to instantiate class ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Failed to instantiate class ", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Failed to instantiate class ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      assertNotNull(sQLWarning1);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      assertEquals("Failed to instantiate class ", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Failed to instantiate class ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("Failed to instantiate class ", sQLWarning1.getMessage());
      assertEquals("java.sql.SQLWarning: Failed to instantiate class ", sQLWarning1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertEquals(0, sQLWarning1.getErrorCode());
      
      Iterator<Integer> iterator1 = ClassUtil.emptyIterator();
      assertNotNull(iterator1);
      
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Class<?> class3 = ClassUtil.getEnclosingClass(class1);
      assertNull(class3);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      MockError mockError0 = new MockError("Default constructor for ", sQLWarning0);
      assertNotNull(mockError0);
      
      String string3 = ClassUtil.getClassDescription(mockError0);
      assertEquals("`org.evosuite.runtime.mock.java.lang.MockError`", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertSame(sQLWarning0, sQLWarning1);
      assertEquals("Failed to instantiate class ", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Failed to instantiate class ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Void> class0 = Void.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JavaType javaType0 = null;
      Class<JsonMappingException> class0 = JsonMappingException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) null, class0, true);
      assertNotNull(list1);
      assertSame(list1, list0);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Constructor<Short> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      Version version0 = Version.unknownVersion();
      assertNotNull(version0);
      assertEquals("", version0.getGroupId());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(0, version0.getMajorVersion());
      assertEquals("", version0.getArtifactId());
      assertEquals(0, version0.getMinorVersion());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUnknownVersion());
      assertTrue(version0.isUknownVersion());
      
      SimpleModule simpleModule0 = new SimpleModule(version0);
      assertNotNull(simpleModule0);
      assertEquals("", version0.getGroupId());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(0, version0.getMajorVersion());
      assertEquals("", version0.getArtifactId());
      assertEquals(0, version0.getMinorVersion());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUnknownVersion());
      assertTrue(version0.isUknownVersion());
      assertEquals("", simpleModule0.getModuleName());
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(simpleModule0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("", version0.getGroupId());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(0, version0.getMajorVersion());
      assertEquals("", version0.getArtifactId());
      assertEquals(0, version0.getMinorVersion());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUnknownVersion());
      assertTrue(version0.isUknownVersion());
      assertEquals("", simpleModule0.getModuleName());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"%s\"");
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, true);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream1.format("java.sql.ClientInfoS", objectArray0);
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(printStream0);
      assertEquals(2, objectArray0.length);
      assertNotSame(printStream0, mockPrintStream0);
      assertSame(printStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-22);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, objectReader0, printStream0, byteArray0, (-1053), false);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(mockPrintStream0.equals((Object)printStream0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-22)}, byteArray0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("", version0.getGroupId());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(0, version0.getMajorVersion());
      assertEquals("", version0.getArtifactId());
      assertEquals(0, version0.getMinorVersion());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUnknownVersion());
      assertTrue(version0.isUknownVersion());
      assertEquals("", simpleModule0.getModuleName());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1053), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1000, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      assertNotNull(defaultPrettyPrinter0);
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(mockPrintStream0.equals((Object)printStream0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, objectArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream0);
      assertSame(printStream0, mockPrintStream1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-22)}, byteArray0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("", version0.getGroupId());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(0, version0.getMajorVersion());
      assertEquals("", version0.getArtifactId());
      assertEquals(0, version0.getMinorVersion());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUnknownVersion());
      assertTrue(version0.isUknownVersion());
      assertEquals("", simpleModule0.getModuleName());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1053), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1000, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(1000, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals((-1053), uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals("class java.lang.Float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<CollectionType> class2 = CollectionType.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      Class<Integer> class2 = Integer.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNull(string0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      Class<Long> class3 = Long.class;
      boolean boolean2 = ClassUtil.hasClass(class1, class3);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.classNameOf(hashMap0);
      assertEquals("`java.util.HashMap`", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getConstructors(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.hasClass(class0, class1);
      Class<Float> class2 = Float.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
      ClassUtil.getClassMethods(class0);
      ClassUtil classUtil0 = new ClassUtil();
      MockIOException mockIOException0 = new MockIOException();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getPackageName(class1);
      Class<Double> class2 = Double.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", name: ");
      ClassUtil.isProxyType(class2);
      Throwable throwable0 = ClassUtil.getRootCause(mockIOException0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.hasClass(list0, class3);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "com.fasterxml.jackson.databind");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = ClassUtil.nonNull(double0, double0);
      Class<Integer> class0 = Integer.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class2, class1, true);
      ClassUtil.hasClass(class2, class0);
      Class<RuntimeException> class3 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, double1, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Double (of class java.lang.RuntimeException) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getCause();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("size", "size", "size", 1536);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockError0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwIfRTE(mockError0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isProxyType(class0);
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil classUtil0 = new ClassUtil();
      MockIOException mockIOException0 = new MockIOException();
      SQLException sQLException0 = new SQLException("keyUniverse", "primitive", 948, mockIOException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("|O", (String) null, 0, sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("S", "serialVersionUID", 0, sQLSyntaxErrorException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.findClassAnnotations(class0);
      MockException mockException0 = new MockException();
      String string0 = "pNUmb~fKCM4Pt";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, "pNUmb~fKCM4Pt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pNUmb~fKCM4Pt
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
      
      Class<String> class2 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class1, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?A,=8 czUv");
      System.setCurrentTimeMillis(3L);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<IOException> class3 = IOException.class;
      String string0 = ClassUtil.getPackageName(class3);
      assertEquals("java.io", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nullOrToString("ax^Qa.KYmfwN 5`}h9");
      Class<RuntimeException> class1 = RuntimeException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      ClassUtil.quotedOr(resolvedRecursiveType0, "keyUniverse");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZERO_LENGTH_ENUM_ARRAY", "76%");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("RDn", "ZERO_LENGTH_ENUM_ARRAY", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("B+#TL7_A@gL#mw");
      sQLSyntaxErrorException0.printStackTrace();
      sQLSyntaxErrorException0.setNextException(sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("76%");
      sQLInvalidAuthorizationSpecException0.initCause(sQLSyntaxErrorException0);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<Character> class1 = Character.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isConcrete(class2);
      Class<Character> class3 = Character.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      ClassUtil.getGenericSuperclass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.findRawSuperTypes(class4, class1, false);
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
      
      ClassUtil.findClassAnnotations(class0);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      Boolean boolean1 = Boolean.FALSE;
      ClassUtil.nullOrToString(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, true);
      Class<AccessPattern> class3 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findConstructor(class0, false);
      Class<Double> class1 = Double.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ClassUtil.rawClass(resolvedRecursiveType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      SQLException sQLException0 = new SQLException(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: com.fasterxml.jackson.databind.JsonMappingException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Boolean> class1 = Boolean.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(7, classUtil_CtorArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isJacksonStdImpl(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, true);
      MapType mapType1 = mapType0.withKeyValueHandler((Object) null);
      ClassUtil.classNameOf(mapType1);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findEnumType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, class2, "com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Integer) must override method 'com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.classNameOf((Object) null);
      ClassUtil.nullOrToString((Object) null);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getClassMethods(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.nameOf(class2);
      ClassUtil.isNonStaticInnerClass(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: java.sql.SQLSyntaxErrorException: java.sql.SQLTimeoutException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      EnumSet<AccessPattern> enumSet2 = EnumSet.copyOf(enumSet1);
      EnumSet<AccessPattern> enumSet3 = EnumSet.copyOf(enumSet2);
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      enumSet1.add(accessPattern3);
      ClassUtil.findEnumType(enumSet3);
      ClassUtil.nullOrToString(enumSet1);
      Class<RuntimeException> class2 = RuntimeException.class;
      enumSet0.add(accessPattern2);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nonNullString("com.fasterxml.jackson.core.io.IOContext");
      assertEquals("com.fasterxml.jackson.core.io.IOContext", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class0, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isConcrete(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isConcrete(class2);
      Class<Character> class3 = Character.class;
      Class<Short> class4 = Short.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      ObjectReader objectReader2 = objectReader1.withFeatures(formatFeatureArray0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[8];
      objectReaderArray0[0] = objectReader2;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader1;
      objectReaderArray0[4] = objectReader2;
      objectReaderArray0[5] = objectReader1;
      objectReaderArray0[6] = objectReader1;
      objectReaderArray0[7] = objectReader2;
      ObjectReader objectReader3 = objectReader2.withFormatDetection(objectReaderArray0);
      TypeFactory typeFactory0 = objectReader3.getTypeFactory();
      Class<Object> class5 = Object.class;
      Class<IOException> class6 = IOException.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class5, class6, class6);
      Class<?> class7 = ClassUtil.rawClass(mapLikeType0);
      assertFalse(class7.isArray());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
