/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 25 21:27:36 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.findRawSuperTypes(class0, (Class<?>) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      Class<Object> class1 = Object.class;
      ObjectReader objectReader1 = objectReader0.forType(class1);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<HashMap> class2 = HashMap.class;
      Class<Float> class3 = Float.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class0, class3);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class4, false);
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      ClassUtil.verifyMustOverride(class1, objectIdGenerators_UUIDGenerator0, "Default constructor for ");
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructRawMapType(class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 1295460665 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$549045160) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "d=Szx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getOuterClass(class2);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<AccessibleObject>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.wrapperType(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[null]");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("N9C{PEA>=D", hashMap0, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0, "Cannot figure out type for EnumMap (odd JDK platform?)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot figure out type for EnumMap (odd JDK platform?)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      System.setCurrentTimeMillis((-1112L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 150, true);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[RawValue of type %s]");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[RawValue of type %s]", sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException("[RawValue of type %s]", "[RawValue of type %s]", 0, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: [RawValue of type %s]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasClass(class0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getDeclaredFields(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getPackageName(class1);
      Short short0 = new Short((short)1);
      ClassUtil.nullOrToString(short0);
      ClassUtil.getClassDescription("java.lang.Short@0000000001");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1213);
      pipedInputStream0.mark((short)1);
      ClassUtil.hasClass(pipedInputStream0, class1);
      ClassUtil.getOuterClass(class1);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getDeclaredMethods(class3);
      Class<Void> class4 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getEnclosingClass(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.primitiveType(class0);
      System.setCurrentTimeMillis(752L);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      int int0 = 675;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = '\"';
      charArray0[2] = '2';
      charArray0[3] = 'm';
      charArray0[4] = 'j';
      charArray0[5] = 'v';
      charArray0[6] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, (Reader) null, objectReader0, charsToNameCanonicalizer0, charArray0, 3, 1, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, (String) null);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Class<Module> class1 = Module.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Method method0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasClass((Object) null, class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("_Z<NP", "_Z<NP", 1700);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte byte0 = (byte)10;
      Byte byte1 = new Byte((byte)10);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte1, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      objectMapper1.readerFor(class0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("_Z<NP", "_Z<NP");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // _Z<NP
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      DataTruncation dataTruncation0 = new DataTruncation(9, false, false, 9, 9, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isLocalType(class1, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.node.NullNode", "org.hibernate.proxy.com.fasterxml.jackson.databind.node.NullNode");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'org.hibernate.proxy.com.fasterxml.jackson.databind.node.NullNode' as a subtype of null: org.hibernate.proxy.com.fasterxml.jackson.databind.node.NullNode
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "ALLOW_NON_NUMERIC_NUMBERS";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("ALLOW_NON_NUMERIC_NUMBERS");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*Vvi^5y<`'");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "ALLOW_NON_NUMERIC_NUMBERS";
      objectArray0[1] = (Object) "*Vvi^5y<`'";
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_CREATORS;
      mapperFeatureArray0[1] = mapperFeature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException("ALLOW_NON_NUMERIC_NUMBERS", mockRuntimeException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ALLOW_NON_NUMERIC_NUMBERS
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      objectIdGenerators_UUIDGenerator0.key(class0);
      objectIdGenerators_UUIDGenerator0.key(class0);
      ClassUtil.nullOrToString(objectIdGenerators_UUIDGenerator0);
      Double double0 = new Double(0.0);
      objectIdGenerators_UUIDGenerator0.key(double0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
      ClassUtil.getDeclaredMethods(class1);
      Class<Object> class3 = Object.class;
      ClassUtil.primitiveType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.getConstructors(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class1 = Annotation.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class1);
      ClassUtil.rawClass(mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.findSuperTypes(class1, class0, list0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLException sQLException0 = new SQLException("non-static member class", "non-static member class", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.findClassAnnotations(class0);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory1.enable(jsonGenerator_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      JsonMappingException.from(jsonGenerator0, "Class ");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Character> class3 = Character.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(0, class3, "JSON");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) objectOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Character` from number 0: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("org.hibernate.proxy.java.io.IOException");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, ";N? !=");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ;N? !=
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      enumSet0.clone();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isLocalType(class0, false);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getDeclaredFields(class3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Long> class4 = Long.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class4, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.defaultValue(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getOuterClass(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.isConcrete(class2);
      Class<Character> class3 = Character.class;
      Class<SequenceInputStream> class4 = SequenceInputStream.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1512867866));
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class4, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[0], javaTypeArray0[0]);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class3, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) placeholderForType0);
      // Undeclared exception!
      try { 
        collectionType0.withContentTypeHandler(class2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy)PropertyNamingStrategy.LOWER_CASE;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<ArrayType> class1 = ArrayType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      Class<Double> class2 = Double.TYPE;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("yMOxRr=x");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      ClassUtil.isProxyType(class0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getClassMethods(class1);
      Class<String> class2 = String.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.findSuperClasses((Class<?>) null, class3, false);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class4);
      MockException mockException0 = new MockException("AUTO_CLOSE_JSON_CONTENT");
      ClassUtil.getRootCause(mockException0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ClassUtil.getConstructors(class0);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MockException mockException0 = new MockException("MM");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("+|Oo7+G#+Wa$w,", "+3XXm|+q&T");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      jsonFactory2.createGenerator((Writer) outputStreamWriter0);
      Throwable throwable0 = ClassUtil.getRootCause(mockException0);
      ClassUtil.findEnumType((Enum<?>) jsonGenerator_Feature0);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      ClassUtil.hasClass(mockPrintStream0, class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) null);
      Class<NoClass> class1 = NoClass.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "(");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: (
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.hasClass(class0, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Constructor<ObjectIdGenerators.UUIDGenerator> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockIOException mockIOException0 = new MockIOException("[reIGfSp+&\"\"9{95S");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockIOException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, (AnnotationIntrospector) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[reIGfSp+&\"\"9{95S");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, 2652);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isLocalType(class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.emptyIterator();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON", "JSON", 193);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: java.sql.SQLFeatureNotSupportedException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      TypeBindings.emptyBindings();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("RS#g(v<9BqIo", "RS#g(v<9BqIo");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isConcrete(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.createInstance(class1, true);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getPackageName(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Long> class2 = Long.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      ClassUtil.getDeclaredFields(class3);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      Class<NullNode> class1 = NullNode.class;
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TimeZone timeZone0 = TimeZone.getTimeZone("Ty`R[n8?NP9byT45");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper1, (OutputStream) null, byteArray0, (byte)48, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Ty`R[n8?NP9byT45", "Ty`R[n8?NP9byT45");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: Ty`R[n8?NP9byT45
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Z8dQjZN<U", "2c+5\"DLyZ>._p=3jc");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      sQLTransientConnectionException0.fillInStackTrace();
      sQLTransientConnectionException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLTransientConnectionException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Z8dQjZN<U", "Z8dQjZN<U", 388, sQLIntegrityConstraintViolationException0);
      sQLTransientConnectionException1.getLocalizedMessage();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTransientConnectionException1);
      Class<MapLikeType> class0 = MapLikeType.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)1;
      byteArrayBuilder0.write(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0);
      sQLTransientConnectionException1.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.isConcrete(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaringClass(class1);
      Float float0 = new Float((-3701.52430867227));
      ClassUtil.nullOrToString(float0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isConcrete(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.throwIfRTE(throwable0);
      Class<SequenceInputStream> class4 = SequenceInputStream.class;
      ClassUtil.isNonStaticInnerClass(class4);
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, false);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getPackageName(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes(class2, class2);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.getDeclaredFields(class0);
      Class<Short> class3 = Short.class;
      ClassUtil.getDeclaredFields(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Character character0 = new Character('I');
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute("com.fasterxml.jackson.databind.type", character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<String> class0 = String.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.findRawSuperTypes(class1, class3, true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.primitiveType(class0);
      ClassUtil.getGenericInterfaces(class0);
      Short short0 = new Short((short)2676);
      Short short1 = new Short((short) (-2));
      ClassUtil.nonNull(short0, short1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Character character0 = new Character('V');
      ClassUtil.nonNull(character0, character0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, class0, "f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<String> class0 = String.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1744674775);
      intArray0[1] = 4;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">&hcp*m#(34=Yc", intArray0);
      batchUpdateException0.getNextException();
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.getGenericSuperclass(class1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.getClassMethods(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getDeclaredFields(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      TypeFactory.defaultInstance();
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getClassDescription(boolean0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getClassDescription(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Void> class0 = Void.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, simpleType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(referenceType0, ", problem: ", "elementType");
      ClassUtil.throwIfError(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      System.setCurrentTimeMillis(0L);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLTimeoutException: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id ', problem: ' as a subtype of [reference type, class java.lang.Void<java.lang.Void><[simple type, class java.lang.Void]>]: elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory((TypeFactory) null);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper4 = objectMapper3.setSerializationInclusion(jsonInclude_Include0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectMapper objectMapper5 = objectMapper4.setDefaultMergeable(boolean0);
      ObjectMapper objectMapper6 = objectMapper5.enableDefaultTyping(objectMapper_DefaultTyping0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      objectMapper6.configure(serializationFeature0, false);
      DeserializationContext deserializationContext0 = objectMapper5.getDeserializationContext();
      Double double0 = new Double(0.0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      defaultDeserializationContext_Impl0.weirdNumberException(double0, class0, "com.fasterxml.jackson.core.JsonParser$NumberType");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredFields(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.isProxyType(class0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaredFields(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      Double double0 = new Double(0.0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(double0, class0, "yVU{~ ");
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from number 0.0: yVU{~ 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      String string0 = "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<List> class0 = List.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.findConstructor(class2, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement(")\u0000b3-y7oLHrW>Wq2'", "\"dpT[OwxXg5w([HR", ")\u0000b3-y7oLHrW>Wq2'", (-841));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("com.fasterxml.jackson.databind.introspect.ClassIntrospector", "\"dpT[OwxXg5w([HR", "\"dpT[OwxXg5w([HR", (-698));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("\"dpT[OwxXg5w([HR", ")\u0000b3-y7oLHrW>Wq2'", "com.fasterxml.jackson.databind.introspect.ClassIntrospector", 3);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("${Z.l;DT>lj<$b|I", "\"dpT[OwxXg5w([HR", "${Z.l;DT>lj<$b|I", 3);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("\"dpT[OwxXg5w([HR", "*|M1})Rn1l\"CVw", "\"dpT[OwxXg5w([HR", 3);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("\"dpT[OwxXg5w([HR", "N", (String) null, (-267));
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<String> class0 = String.class;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findBackReferences();
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      typeFactory0.constructCollectionType(class1, class0);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "[null]");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "[null]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      SQLException sQLException0 = new SQLException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      ClassUtil.throwRootCauseIfIOE(sQLException0);
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "enum");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericSuperclass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getPackageName(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Throwable throwable0 = ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(throwable0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      ClassUtil.throwIfIOE(sQLTimeoutException0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.isProxyType(class3);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.getDeclaredFields(class4);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Float> class2 = Float.class;
      ClassUtil.hasClass(class0, class2);
      System.setCurrentTimeMillis((-1L));
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.isLocalType(class0, false);
      Class<Error> class1 = Error.class;
      ClassUtil.findConstructor(class1, true);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      Class<Float> class4 = Float.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) sequenceInputStream0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(sequenceInputStream0, "net.sf.cglib.proxy.java.lang.reflect.AccessibleObject");
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, (String) null, jsonMappingException0);
      ClassUtil.hasClass(jsonMappingException1, class4);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, (String) null, collectionType0);
      virtualAnnotatedMember0.getAnnotated();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isBogusClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      TypeFactory.defaultInstance();
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.findSuperTypes((JavaType) null, class3, false);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(typeBindings0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      SQLDataException sQLDataException0 = new SQLDataException("isi", "'>s");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      sQLDataException0.addSuppressed(sQLNonTransientConnectionException0);
      SQLDataException sQLDataException1 = new SQLDataException("'>s", "'>s", 4, sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException1, "'>s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // '>s
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      String string0 = "elementType";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("elementType");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class3, class3);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class5);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<AccessPattern> class0 = AccessPattern.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "com.fasterxml.jackson.databind.type.MapLikeType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.type.MapLikeType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.backticked("");
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.nameOf(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("S)o:GfomqL");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      sQLRecoverableException0.initCause(sQLTimeoutException0);
      sQLRecoverableException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "``");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ``
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isLocalType(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<String> class3 = String.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getDeclaredFields(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getPackageName(class1);
      Short short0 = new Short((short)1);
      ClassUtil.nullOrToString(short0);
      ClassUtil.getClassDescription("java.lang.Short@0000000001");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1213);
      pipedInputStream0.mark((short)1);
      ClassUtil.hasClass(pipedInputStream0, class1);
      ClassUtil.getOuterClass(class1);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getDeclaredMethods(class3);
      Class<Void> class4 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getDeclaredFields(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      Class<Character> class1 = Character.class;
      ClassUtil.isProxyType(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getPackageName(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      Class<String> class1 = String.class;
      Class<Long> class2 = Long.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.nonNullString("BmMhdO1.[_gAm''Y,");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.backticked("serialVersionUID");
      ClassUtil.primitiveType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.classOf(class0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getGenericSuperclass(class0);
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.quotedOr(boolean0, "%?>K)\\&");
      ClassUtil.classOf(boolean0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("%?>K)\\&", "\"true\"", hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: %?>K)\\&
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.getClassMethods(class1);
      try { 
        Double.valueOf("java.io");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getPackageName(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.hasClass(class0, class2);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<NoClass> class3 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class3, true);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[8];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      accessibleObjectArray0[3] = (AccessibleObject) constructor0;
      accessibleObjectArray0[4] = (AccessibleObject) constructor0;
      accessibleObjectArray0[5] = (AccessibleObject) constructor0;
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleModule> class1 = SimpleModule.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, false);
      assertNotNull(object0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType0, collectionType0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SimpleType simpleType0 = referenceType0.withTypeHandler(mockRuntimeException0);
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class0, false);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<AccessPattern> class1 = AccessPattern.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      referenceType0.getTypeName();
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(javaType0);
      SimpleType simpleType0 = referenceType1.withValueHandler((Object) null);
      Class<NoClass> class0 = NoClass.class;
      simpleType0.findTypeParameters(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      simpleType0.withStaticTyping();
      referenceType1.getSuperClass();
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.findSuperTypes(javaType0, class0, true);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "keyUniverse");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.backticked("serialVersionUID");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper2 = objectMapper1.setMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProviderInstance();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      objectMapper2.configure(deserializationFeature0, true);
      DataTruncation dataTruncation0 = new DataTruncation((-1807324828), false, true, (-1807324828), (-3431));
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("}NU(I+AMj[i`", (Object) "serialVersionUID");
      objectMapper1.reader((InjectableValues) injectableValues_Std1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON", (Throwable) dataTruncation0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isBogusClass(class0);
      Random.setNextRandom((-614630275));
      Throwable throwable0 = null;
      MockIOException mockIOException0 = new MockIOException((String) null, (Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getPackageName(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Throwable throwable0 = ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      throwable0.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(throwable0);
      ClassUtil.throwIfIOE(sQLTimeoutException0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.getConstructors(class1);
      Class<Error> class2 = Error.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.hasEnclosingMethod(class2);
      Class<Integer> class3 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.getDeclaringClass(class1);
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      ClassUtil.canBeABeanType(class0);
      Class<Character> class1 = Character.class;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = 69;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 69;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("NULL", "NULL", 69);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("mLko-fUCojaF)", "pC", sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[$}wzDQc),#*S;cp", "size", 69, longArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateException0.getSuppressed();
      batchUpdateException0.getLocalizedMessage();
      ClassUtil.throwIfRTE(batchUpdateException0);
      MockFile mockFile0 = new MockFile("mLko-fUCojaF)", "8ypa?&bPUG8XI^K4~`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('Y');
      sQLSyntaxErrorException0.printStackTrace(printStream0);
      ClassUtil.emptyIterator();
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, long0, "K~l0|C9D#B");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Long (of class java.lang.RuntimeException) must override method 'K~l0|C9D#B'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      ClassUtil.hasClass(class0, class0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "String \"%s\"");
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.printStackTrace();
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.backticked("keyUniverse");
      ClassUtil.classNameOf((Object) null);
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "Iu`QH3-L>3E*");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<SequenceInputStream> class3 = SequenceInputStream.class;
      ClassUtil.hasEnclosingMethod(class3);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-184);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("G", "_F(vz!xWDp/i^}b6.zS", 876, intArray0);
      batchUpdateException0.getNextException();
      ClassUtil.throwIfRTE((Throwable) null);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.getDeclaredFields(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.nonNullString((String) null);
      ClassUtil.nullOrToString(class1);
      Class<Integer> class2 = Integer.class;
      boolean boolean0 = true;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getPackageName(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Throwable throwable0 = ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(throwable0);
      ClassUtil.throwIfIOE(sQLTimeoutException0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.isProxyType(class3);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.getDeclaredFields(class4);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.wrapperType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "java.lang.Character");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Character
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.quotedOr(list0, " in a value");
      MockError mockError0 = new MockError("\"[]\"");
      mockError0.getSuppressed();
      mockError0.toString();
      ClassUtil.classNameOf(mockError0);
      ClassUtil.throwIfIOE(mockError0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.backticked(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",f");
      boolean boolean0 = true;
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.hasEnclosingMethod(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.isJacksonStdImpl(class3);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.isLocalType(class0, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isBogusClass(class2);
      Double double0 = new Double(1337.2961020013556);
      ClassUtil.hasClass(double0, class0);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9c% iV~B4Db7i\"8", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ClassUtil.backticked((String) null);
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ClassUtil.backticked("K");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getConstructors(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1657);
      TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      try { 
        typeFactory1.constructFromCanonical("K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type 'K' (remaining: ''): Cannot locate class 'K', problem: Class 'K.class' should be in target project, but could not be found!
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float((-1265.7033218294998));
      String string0 = "unknown";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "unknown");
      jsonMappingException0.getMessage();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, jsonMappingException0, " I[!;]NA54");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.exc.InvalidFormatException (of class com.fasterxml.jackson.databind.type.SimpleType) must override method ' I[!;]NA54'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "net.sf.cglib.proxy.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.JsonMappingException) must override method 'net.sf.cglib.proxy.'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.nullOrToString(class0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      ClassUtil.isJacksonStdImpl((Object) objectIdGenerators_UUIDGenerator0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getGenericSuperclass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.nullOrToString(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      SimpleType simpleType2 = simpleType1.withTypeHandler(class0);
      simpleType2.getInterfaces();
      simpleType2.getSuperClass();
      simpleType0.getGenericSignature();
      simpleType2.getGenericSignature();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lcom/fasterxml/jackson/databind/type/CollectionLikeType;");
      ClassUtil.nullOrToString((Object) null);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getDeclaredFields(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isJacksonStdImpl(class1);
      int int0 = (-206);
      Integer integer0 = new Integer((-206));
      ClassUtil.nullOrToString(integer0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      // Undeclared exception!
      try { 
        simpleType0.withContentValueHandler("java.lang.Integer@0000000001");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Simple types have no content types; cannot call withContenValueHandler()
         //
         verifyException("com.fasterxml.jackson.databind.type.SimpleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "w|QL[}SN8";
      MockIOException mockIOException0 = new MockIOException("w|QL[}SN8");
      mockIOException0.getCause();
      mockIOException0.getStackTrace();
      mockIOException0.initCause((Throwable) null);
      Throwable throwable0 = ClassUtil.getRootCause(mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // w|QL[}SN8
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      ClassUtil.canBeABeanType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.java.lang.Integer", "com.fasterxml.jackson.databind.deser.impl.MethodProperty");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "java.lang.Integer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      IOException iOException0 = constructor0.newInstance(annotationArray0);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.throwIfError(iOException0);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.primitiveType(class4);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2199);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl", "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl", intArray0);
      batchUpdateException0.getNextException();
      batchUpdateException0.addSuppressed(iOException0);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("UnwrappingBeanSerializer for ", "UnwrappingBeanSerializer for ", "non-static member class", (-284));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("non-static member class", "UnwrappingBeanSerializer for ", "keyType", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("UnwrappingBeanSerializer for ", "keyType", "[]", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Cannot access contents of TextNode as binary due to broken Base64 encoding: %s", "UnwrappingBeanSerializer for ", "Z$&wmNsEQgOw,", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("UnwrappingBeanSerializer for ", " has no default (no arg) constructor", (String) null, 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement(".zLm[+Oa+", "Cannot access contents of TextNode as binary due to broken Base64 encoding: %s", "keyType", 977);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("yv-rHF?Xu", "phMl3oT.u*G`kLP$k@.", "Cannot access contents of TextNode as binary due to broken Base64 encoding: %s", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("[]", "NULL", "yv-rHF?Xu", (-284));
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "w;=&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // w;=&
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findSuperTypes(class0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("~ uTjyTcy|");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0, "<Y6's1g]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // <Y6's1g]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Class<Void> class0 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Float> class1 = Float.class;
      ClassUtil.hasClass(class0, class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class0 = Annotation.class;
      annotationMap1.get(class0);
      ClassUtil.hasClass((Object) null, class0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getPackageName(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isProxyType(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.hasClass(class0, class3);
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.primitiveType(class1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) class0, (-658));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(jsonMappingException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("localizedMessage", "localizedMessage", "localizedMessage", (-658));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("at", "at", "localizedMessage", (-658));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.hibernate.proxy.", "vals", "localizedMessage", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("serialVersionUID", "at", "serialVersionUID", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Class<NullNode> class0 = NullNode.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getConstructors(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaringClass(class3);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      typeFactory0.constructCollectionType(class1, class1);
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.isProxyType(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaredFields(class3);
      System.setCurrentTimeMillis(0L);
      ClassUtil.isLocalType(class3, false);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = "%?>K)\\\\&";
      ClassUtil.quotedOr((Object) null, (String) null);
      JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[2];
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      jsonFormat_FeatureArray0[0] = jsonFormat_Feature0;
      JsonFormat.Feature jsonFormat_Feature1 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      jsonFormat_FeatureArray0[1] = jsonFormat_Feature1;
      // Undeclared exception!
      try { 
        JsonFormat.Features.construct(jsonFormat_FeatureArray0, (JsonFormat.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.annotation.JsonFormat$Features", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ClassUtil.quotedOr("2_0Rk_Ti7ZzMZ'jh'(B", "java.lang.RuntimeExc");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.getClassDescription(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.nameOf(class0);
      ClassUtil.quotedOr(class0, "`java.lang.RuntimeException`");
      ClassUtil.getClassMethods(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Float> class2 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class3, class1, list0);
      Class<Double> class4 = Double.class;
      ClassUtil.isObjectOrPrimitive(class4);
      ClassUtil.hasEnclosingMethod(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext0, true);
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Byte> class0 = Byte.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, (String) null, collectionType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "k", 380);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: k
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredFields(class0);
      boolean boolean0 = ClassUtil.isConcrete(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotationArray0);
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.node.LongNode", "ZERO_LENGTH_ENUM_ARRAY");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ZERO_LENGTH_ENUM_ARRAY", sQLRecoverableException0);
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: com.fasterxml.jackson.databind.node.LongNode
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("d58MiIa(t6m@c)5#");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      assertSame(throwable0, sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, (Class<?>) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) mockFileWriter0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", "java.io.IOException");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileWriter0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("IJ8/'Jd,ws(~\b#");
      assertEquals("IJ8/'Jd,ws(~\b#", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaringClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = Long.valueOf((long) 0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value.from(jsonInclude0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      objectMapper1.getVisibilityChecker();
      String string0 = "x;r&Hr8;/(j*nGx5~";
      MockException mockException0 = new MockException("x;r&Hr8;/(j*nGx5~");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: x;r&Hr8;/(j*nGx5~
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
