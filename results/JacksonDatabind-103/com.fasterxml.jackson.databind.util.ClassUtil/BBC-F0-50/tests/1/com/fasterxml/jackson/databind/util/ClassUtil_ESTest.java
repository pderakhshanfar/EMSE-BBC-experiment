/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 06:48:51 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1981));
      placeholderForType0.containedTypeOrUnknown((-1981));
      ClassUtil.getClassDescription(placeholderForType0);
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("wM:u.*EiAZLgo");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MAX_VALUE, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1666, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      MockIOException mockIOException0 = new MockIOException((String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1744094291), true, true, 1334, (-1744094291));
      dataTruncation0.fillInStackTrace();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      byte[] byteArray0 = new byte[2];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      dataTruncation0.getLocalizedMessage();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Data truncation");
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLClientInfoException0.initCause(dataTruncation0);
      sQLClientInfoException0.getSuppressed();
      dataTruncation0.initCause(sQLClientInfoException0);
      dataTruncation0.getSuppressed();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0, ":^@jzch");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      JavaType[] javaTypeArray1 = new JavaType[6];
      javaTypeArray1[0] = (JavaType) simpleType0;
      javaTypeArray1[1] = (JavaType) simpleType0;
      javaTypeArray1[2] = (JavaType) simpleType0;
      javaTypeArray1[3] = (JavaType) simpleType0;
      javaTypeArray1[4] = (JavaType) simpleType0;
      javaTypeArray1[5] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray1, javaTypeArray1[0]);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) collectionType0);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, javaTypeArray1[4]);
      Character character0 = Character.valueOf('#');
      ReferenceType referenceType2 = referenceType1.withValueHandler(character0);
      Long long0 = new Long(0L);
      SimpleType simpleType1 = referenceType2.withContentValueHandler(long0);
      SimpleType simpleType2 = simpleType1.withValueHandler(referenceType2);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) simpleType2, (Class<?>) class1, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(list0, class0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidFormatException): Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.util.ArrayList`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.lang.Long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      enumSet0.clear();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(13, 13);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      // Undeclared exception!
      try { 
        typeFactory1.constructFromCanonical((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "m?%wBTaxncj");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot detect format from input, does not look like any of detectable formats ", "+c;y#<,GoU|1Bfu", sQLFeatureNotSupportedException0);
      MockError mockError0 = new MockError(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      PipedReader pipedReader0 = new PipedReader(115);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = 'I';
      charArray0[2] = '+';
      charArray0[3] = 'R';
      charArray0[4] = 'Y';
      charArray0[5] = 'x';
      charArray0[6] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, (-2391), (-88), false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, byteArrayBuilder0, byteArray0, 999, false);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      MockError mockError0 = new MockError();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockError0, (Object) jsonGenerator0, "('true', 'false' or 'null')");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(jsonMappingException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      SQLException sQLException0 = new SQLException("('true', 'false' or 'null')", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) pipedReader0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: ('true', 'false' or 'null')
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.verifyMustOverride(class0, accessPattern1, "Cannot add mapping from class to itself");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      SimpleType.constructUnsafe(class0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
      Class<Double> class0 = Double.class;
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassDescription(class0);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Module> class0 = Module.class;
      SimpleType.constructUnsafe(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class0);
      Byte byte0 = new Byte((byte)26);
      MapType mapType1 = mapType0.withContentTypeHandler(byte0);
      mapType1.withTypeHandler(class0);
      Float float0 = new Float(428.51651067697173);
      ClassUtil.findSuperTypes((JavaType) mapType1, (Class<?>) class1, false);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern1, accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.emptyIterator();
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module");
      ClassUtil.emptyIterator();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getConstructors(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module", true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-85);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1536, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 28, (byte)77, false);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8StreamJsonParser0, (Class<?>) class0, jsonToken0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Float> class0 = Float.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader1 = objectReader0.forType(javaType0);
      Version version0 = objectReader1.version();
      SimpleModule simpleModule0 = new SimpleModule("net.sf.cglib.proxy.java.io.IOException", version0);
      JsonSerializer<CollectionLikeType> jsonSerializer0 = (JsonSerializer<CollectionLikeType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonSerializer0).handledType();
      // Undeclared exception!
      try { 
        simpleModule0.addSerializer(jsonSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // JsonSerializer of type com.fasterxml.jackson.databind.JsonSerializer$MockitoMock$1175315987 does not define valid handledType() -- must either register with method that takes type argument  or make serializer extend 'com.fasterxml.jackson.databind.ser.std.StdSerializer'
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleSerializers", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<IOException> class2 = IOException.class;
      boolean boolean0 = true;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      constructor0.newInstance(annotatedTypeArray0);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      constructor0.getParameterCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.nameOf(class4);
      Class<?> class5 = ClassUtil.classOf(class1);
      Class<Object> class6 = Object.class;
      ClassUtil.getClassMethods(class6);
      ClassUtil.getEnclosingClass(class5);
      MockError mockError0 = new MockError((String) null, (Throwable) null);
      mockError0.printStackTrace();
      mockError0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" has no default (no arg) constructor", "`java.lang.reflect.AccessibleObject`", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "`java.lang.reflect.AccessibleObject`");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "non-static member class");
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "x)9PVuM3i)m!,^_17I";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "x)9PVuM3i)m!,^_17I");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): x)9PVuM3i)m!,^_17I
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.clear();
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", mapLikeType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, mapLikeType0, (PropertyName) null, annotatedField0, (PropertyMetadata) null);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, javaType0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f*g^Tv;");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.emptyIterator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Long");
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.nameOf((Named) null);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Long> class1 = Long.TYPE;
      List<Class<?>> list0 = new ArrayList<Class<IOException>>();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findConstructor(class3, true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("UvW|\"<z$xzDw)qqW", "W;I`(}o-{2'@N", sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLFeatureNotSupportedException0);
      sQLTimeoutException0.addSuppressed(sQLFeatureNotSupportedException0);
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.isJacksonStdImpl((Object) accessPattern0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<String> class0 = String.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      ClassUtil.backticked("net.sf.cglib.proxy.java.lang.Float");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.findSuperClasses(class0, class0, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'N", "QR[)p*A2e2np^X7u4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientException0);
      batchUpdateException0.spliterator();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(batchUpdateException0);
      String string0 = "7!fp|4v0vp!";
      ClassUtil.quotedOr(mockRuntimeException0, "7!fp|4v0vp!");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getMessage();
      ClassUtil.isJacksonStdImpl((Object) mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Character> class1 = Character.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<NoClass> class3 = NoClass.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class0, class3);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.removeAll();
      MapType mapType1 = mapType0.withContentTypeHandler(objectNode1);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) mapType1;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) mapType1, javaTypeArray0, javaTypeArray0[0]);
      Class<Double> class4 = Double.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class4, true);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findEnumType(class0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, (String) null);
      String string0 = ", problem: ";
      jsonMappingException0.getPath();
      JsonMappingException.from((JsonGenerator) null, ", problem: ", (Throwable) jsonMappingException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.lang.Long", "x<GSw", 0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: java.lang.Long
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1);
      enumSet0.clear();
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockError0);
      mockError0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Error> class0 = Error.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.sf.cglib.proxy.java.lang.Object");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper0, mockPrintStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      MockIOException mockIOException0 = new MockIOException((String) null, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", (String) null, (Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isBogusClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<CollectionType> class2 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class1);
      ClassUtil.quotedOr(class0, "; failed to set access: ");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.hasClass(class0, class0);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "`g}8%LIo ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<ArrayType> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short)1715);
      ClassUtil.hasClass(short0, class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<NoClass>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Character character0 = Character.valueOf('~');
      ClassUtil.nullOrToString(character0);
      Class<String> class0 = String.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nameOf((Named) null);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "org.hibernate.proxy.java.lang.Boolean");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.java.lang.Boolean
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isConcrete(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "\":3q jwn";
      MockIOException mockIOException0 = new MockIOException("\":3q jwn");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      mockIOException0.addSuppressed(batchUpdateException0);
      mockIOException0.getSuppressed();
      mockIOException0.getStackTrace();
      int[] intArray0 = new int[1];
      intArray0[0] = (-56);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("\":3q jwn", intArray0, mockIOException0);
      mockIOException0.initCause(batchUpdateException1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\":3q jwn");
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.isConcrete((Member) constructor0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<CollectionType>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(",HwU");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@4[so3#p<L%5^(?$@:");
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("@4[so3#p<L%5^(?$@:");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("7:'s<**yrD/X~my", "net.sf.cglib.proxy.int", "7:'s<**yrD/X~my", 5700);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("L^PQ6|b)BG'gHiO", "v=sPz{S>.r,", "7:'s<**yrD/X~my", 5700);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("L^PQ6|b)BG'gHiO", "@4[so3#p<L%5^(?$@:", "\"", 5700);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("9iW,FYs'jk", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "9iW,FYs'jk", (-5));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("7:'s<**yrD/X~my", "7:'s<**yrD/X~my", "net.sf.cglib.proxy.", (-1));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "annotation", "java.lang.annotation", (-3359));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("java.lang.annotation", "FK&T_8Jvwi?'#", "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", 5700);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("S%t='Y->Ov7LR)vp\"", "\"", "java.lang.Long", (-5));
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "net.sf.cglib.proxy.java.io.IOException", "h%,J9~7", (-2693));
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.findSuperClasses(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
      File file0 = MockFile.createTempFile("java.lang.Long", "java.lang.Long");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang.Long");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "JSON", (Throwable) sQLTransientConnectionException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.nullOrToString("java.lang");
      ClassUtil.primitiveType(class0);
      ClassUtil.quotedOr("java.lang", "java.lang.String@0000000003");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Locale locale0 = Locale.KOREAN;
      MockDateFormat.getDateTimeInstance(0, 3, locale0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", "net.sf.Mglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Float> class1 = Float.class;
      ClassUtil.isLocalType(class1, false);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) typeBindings0, (Object) null);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class1, false);
      TypeBindings typeBindings1 = TypeBindings.create(class1, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      ClassUtil.isJacksonStdImpl((Object) resolvedRecursiveType0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.canBeABeanType(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.findClassAnnotations(class3);
      Class<Byte> class4 = Byte.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<ObjectNode> class1 = ObjectNode.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.hasClass(class0, class1);
      ClassUtil.primitiveType(class0);
      Class<Float> class2 = Float.class;
      ClassUtil.nameOf(class2);
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedHashSet<AccessPattern> linkedHashSet0 = new LinkedHashSet<AccessPattern>();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      linkedHashSet0.add(accessPattern0);
      EnumSet<AccessPattern> enumSet0 = EnumSet.copyOf((Collection<AccessPattern>) linkedHashSet0);
      Class<Object> class0 = Object.class;
      enumSet0.clear();
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.findEnumType(enumSet0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("2%[>tC~o~i", "2%[>tC~o~i", 78);
      SQLException sQLException0 = new SQLException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getDeclaredFields(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<CollectionType> class1 = CollectionType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.nonNullString("Cannot figure out type for EnumMap (odd JDK platform?)");
      Class<Byte> class1 = Byte.class;
      ClassUtil.hasClass(class0, class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Long");
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.nameOf((Named) null);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[null]");
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      Class<Void> class3 = Void.TYPE;
      ClassUtil.findRawSuperTypes((Class<?>) null, class3, false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getParameters();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Object> class0 = Object.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.nonNullString("Cannot figure out type for EnumMap (odd JDK platform?)");
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.nameOf((Named) null);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-61));
      ClassUtil.nullOrToString(byte0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getConstructors(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",|m]tY=xi&Q");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper1, mockPrintStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      MockIOException mockIOException0 = new MockIOException((String) null, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "org.hibernate.proxy.java.lang.Double", mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintStream0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Error> class0 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      Class<Void> class1 = Void.TYPE;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassUtil.nonNullString("vo-id");
      Class<Character> class0 = Character.TYPE;
      LinkedList<Class<String>> linkedList0 = new LinkedList<Class<String>>();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("Cannot access ");
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "vo-id", false);
      jsonFactory0.setCodec((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "vo-id");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vo-id", "JSON", 3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLSyntaxErrorException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.java.lang.Float", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", throwable0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet.of(accessPattern0, accessPattern0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.isJacksonStdImpl((Object) classUtil_Ctor0);
      Class<Object> class1 = Object.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      HashSet<ReferenceType> hashSet0 = new HashSet<ReferenceType>();
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>(hashSet0);
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Integer> class3 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class3, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0, (JavaType) referenceType0);
      referenceType0.toCanonical();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class4 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class4);
      MapLikeType mapLikeType0 = mapType0.withContentTypeHandler(collectionType0);
      Integer integer0 = new Integer(4000);
      MapLikeType mapLikeType1 = mapLikeType0.withContentValueHandler(integer0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType1, (Class<?>) class4, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Byte> class1 = Byte.class;
      Class<Long> class2 = Long.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(class1);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperTypes(javaType0, class3, true);
      ClassUtil.nonNullString("dB-SkGQpGz%;=.");
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.nameOf(class4);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Cannot update object of type ");
      SQLException sQLException0 = new SQLException("Failed to instantiate class ", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "],5}|XqMaw488(\"y/f8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-5);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockThrowable mockThrowable0 = new MockThrowable("Cannot figure out type for EnumMap (odd JDK platform?)", (Throwable) null);
      Throwable throwable0 = ClassUtil.getRootCause(mockThrowable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot figure out type for EnumMap (odd JDK platform?)", "Cannot figure out type for EnumMap (odd JDK platform?)", (-2028), throwable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Cannot figure out type for EnumMap (odd JDK platform?)", (Throwable) sQLTransientConnectionException0);
      JsonMappingException.from((JsonGenerator) null, "4?FA4YH`<l!fjTO");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Cannot figure out type for EnumMap (odd JDK platform?)", "Attempted to unwrap '%s' value", hashMap0, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0, "\"g`n+Ab=0OP*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"g`n+Ab=0OP*
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class1);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      enumMap0.putIfAbsent(accessPattern0, noClass0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      enumMap0.put(accessPattern0, (NoClass) null);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No native support for writing Type Ids");
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Tpe%SE");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        ClassUtil.quotedOr(jsonMappingException0, "Cannot figure out type for EnumMap (odd JDK platform?)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("email");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Unmatched first part of surrogate pair (0x", "&Uq|YQ4,=");
      SQLDataException sQLDataException1 = new SQLDataException("Unmatched first part of surrogate pair (0x", "&Uq|YQ4,=", 300, sQLDataException0);
      sQLDataException1.spliterator();
      ClassUtil.quotedOr((Object) null, "Unmatched first part of surrogate pair (0x");
      ClassUtil.nonNullString("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Long> class0 = Long.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1008));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(referenceType0, placeholderForType0, referenceType0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(typeResolutionContext_Basic0);
      MapLikeType mapLikeType2 = mapLikeType0.withContentTypeHandler(mapLikeType1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "5E0Elp C^+eP", mapLikeType2);
      virtualAnnotatedMember0.getAnnotated();
      ClassUtil.classNameOf((Object) null);
      ClassUtil.backticked("5E0Elp C^+eP");
      Class<Short> class1 = Short.TYPE;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.getDeclaringClass(class4);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "local/anonymous");
      resolvedRecursiveType0.getSelfReferencedType();
      resolvedRecursiveType0.toCanonical();
      Class<ReferenceType> class1 = ReferenceType.class;
      resolvedRecursiveType0.isThrowable();
      typeBindings0.toString();
      TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) resolvedRecursiveType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.getClassDescription(class0);
      ClassUtil.nonNull((String) null, "M4-%I,l");
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("FAIL_ON_MISSING_CREATOR_PROPERTIES", "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase");
      sQLIntegrityConstraintViolationException0.spliterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockError mockError0 = new MockError("b@7*bNJc");
      ClassUtil.nonNullString("b@7*bNJc");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getConstructors(class0);
      Byte byte0 = new Byte((byte) (-105));
      ClassUtil.getClassDescription(byte0);
      ClassUtil.nonNull((String) null, (String) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Class<Double> class0 = Double.class;
      ClassUtil.hasClass(float0, class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.getConstructors(class1);
      ClassUtil.isProxyType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockError mockError0 = new MockError("b@7*bNJc");
      ClassUtil.nonNullString("b@7*bNJc");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getConstructors(class0);
      Byte byte0 = new Byte((byte) (-105));
      ClassUtil.getClassDescription(byte0);
      ClassUtil.nonNull((String) null, (String) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.canBeABeanType(class2);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.findConstructor(class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockError mockError0 = new MockError("b@7*bNJc");
      ClassUtil.nonNullString("b@7*bNJc");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getConstructors(class0);
      Byte byte0 = new Byte((byte) (-105));
      ClassUtil.getClassDescription(byte0);
      ClassUtil.nonNull((String) null, (String) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.canBeABeanType(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class3);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.nonNullString("w@P0<Q?on(<a[Wr29a");
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Short short0 = new Short((short) (-835));
      ClassUtil.quotedOr(short0, "(Piu 3\"7nwRH=;z");
      ClassUtil.getClassDescription("\"-835\"");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findConstructor(class1, true);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.createInstance(class3, true);
      LinkedHashSet<AccessPattern> linkedHashSet0 = new LinkedHashSet<AccessPattern>();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      linkedHashSet0.add(accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      linkedHashSet0.add(accessPattern1);
      linkedHashSet0.add(accessPattern0);
      EnumSet<AccessPattern> enumSet0 = EnumSet.copyOf((Collection<AccessPattern>) linkedHashSet0);
      ClassUtil.findEnumType(enumSet0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(3366.8F);
      Class<Double> class0 = Double.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.hasClass((Object) null, class1);
      ClassUtil.getConstructors(class1);
      ClassUtil.getClassDescription(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      Class<Void> class1 = Void.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getGenericInterfaces(class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory(jsonNodeFactory0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("EUDg");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, (byte)16, sQLRecoverableException0);
      MockIOException mockIOException0 = new MockIOException(sQLTransientConnectionException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("k(vrL:x#)o3?~ y");
      Byte byte0 = new Byte((byte) (-61));
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockError mockError0 = new MockError("b@7*bNJc");
      mockError0.getLocalizedMessage();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getConstructors(class0);
      Byte byte0 = new Byte((byte) (-105));
      ClassUtil.getClassDescription(byte0);
      ClassUtil.nonNull((String) null, (String) null);
      ClassUtil.isProxyType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.KeyDeserializer");
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.KeyDeserializer");
      ClassUtil.nonNullString("w@P0<Q?on(<a[Wr29a");
      Class<?> class0 = ClassUtil.classOf(mockError0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class2, class0, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class3);
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.canBeABeanType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findClassAnnotations(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(2283L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      ClassUtil.hasClass((Object) null, class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class1 = CollectionType.class;
      typeFactory0.constructArrayType(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      Class<Void> class1 = Void.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class2);
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "it+xX/bx8G|@{v(b8'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // it+xX/bx8G|@{v(b8'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isObjectOrPrimitive(class0);
      String string0 = "xAxB/AzE";
      ClassUtil.quotedOr(class0, "xAxB/AzE");
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.KeyDeserializer");
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.databind.KeyDeserializer", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory3 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("w@P0<Q?on(<a[Wr29a", "r");
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", "", sQLFeatureNotSupportedException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":");
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonParser jsonParser0 = jsonFactory1.createParser(":");
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (Class<?>) null, jsonToken0, (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT
         //  at [Source: (String)\":\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Class<Module> class0 = Module.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getClassDescription(class0);
      ClassUtil.nonNull("kn2>I)A}M9Bx", "`com.fasterxml.jackson.databind.Module`");
      ClassUtil.isProxyType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findConstructor(class2, false);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.createInstance(class1, true);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getDeclaredFields(class2);
      SQLDataException sQLDataException0 = new SQLDataException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      ClassUtil.throwIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float float0 = new Float(1.592863F);
      Class<Double> class0 = Double.class;
      ClassUtil.hasClass(float0, class0);
      Class<Integer> class1 = Integer.class;
      Class<Double> class2 = Double.class;
      ClassUtil.getConstructors(class2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getClassDescription(class1);
      ClassUtil.nonNull("`java.lang.Integer`", "ZERO_LENGTH_ENUM_ARRAY");
      ClassUtil.isProxyType(class2);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "dU3D>lk^oZovf%r", false);
      iOContext0.allocBase64Buffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.getDeclaredMethods(class0);
      Class<Object> class3 = Object.class;
      ClassUtil.getGenericSuperclass(class3);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(1.592863F);
      Class<Double> class0 = Double.class;
      ClassUtil.hasClass(float0, class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getClassDescription(class1);
      ClassUtil.nonNull("`java.lang.Integer`", "`java.lang.Integer`");
      ClassUtil.isProxyType(class0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.findConstructor(class3, false);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.primitiveType(class4);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassUtil.nonNullString("6B hK-(=+l>9O2");
      Class<NoClass> class0 = NoClass.class;
      Class<Character> class1 = Character.TYPE;
      Stack<Class<Character>> stack0 = new Stack<Class<Character>>();
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.nullOrToString(stack0);
      Class<Double> class3 = Double.class;
      TypeBindings.createIfNeeded(class3, (JavaType[]) null);
      ClassUtil.throwIfRTE((Throwable) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "6B hK-(=+l>9O2", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("6B hK-(=+l>9O2");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassUtil.nonNullString("void");
      Class<Character> class0 = Character.TYPE;
      LinkedList<Class<String>> linkedList0 = new LinkedList<Class<String>>();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("Cannot access ");
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "void", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory3 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getClassMethods(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "void");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(throwable0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLSyntaxErrorException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("vals", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", throwable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("size", throwable0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: size
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<SimpleType> class0 = SimpleType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "enum");
      MockException mockException0 = new MockException("CgZUeB.", jsonMappingException0);
      ClassUtil.throwIfError(mockException0);
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "keyType");
      MockException mockException0 = new MockException("com.fasterxml.jackson.databind.JsonSerializable$Base", jsonMappingException0);
      ClassUtil.throwIfError(mockException0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findSuperTypes(class0, class0);
      Long long0 = new Long((-2147483648L));
      ClassUtil.isJacksonStdImpl((Object) long0);
      ClassUtil.nullOrToString(long0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.isConcrete(class1);
      ClassUtil.findSuperTypes(class1, class1);
      Iterator<Annotation> iterator0 = ClassUtil.emptyIterator();
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getDeclaringClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<String> class4 = String.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      ClassUtil.nullOrToString(class0);
      ClassUtil.quotedOr(iterator0, "");
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      iOContext0.allocBase64Buffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.getDeclaredMethods(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.getGenericSuperclass(class3);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isLocalType(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(36);
      ClassUtil.classNameOf(integer0);
      ClassUtil.nonNullString("`java.lang.Integer`");
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl((Object) "`java.lang.Integer`");
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ClassUtil.classNameOf(integer0);
      ClassUtil.nonNullString("`java.lang.Integer`");
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.nonNullString("6B hK-(=+l>9O2");
      Class<Character> class0 = Character.TYPE;
      List<Class<?>> list0 = new LinkedList<Class<String>>();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "6B hK-(=+l>9O2", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory3 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.getClassMethods(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("6B hK-(=+l>9O2", "JSON");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("vals", "JSON", throwable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vals", sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Short short0 = new Short((short) (-835));
      ClassUtil.quotedOr(short0, "(Piu 3\"7nwRH=;z");
      ClassUtil.getClassDescription("\"-835\"");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" and ", (String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.io.IOException", "java.io.IOException", sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class1, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassUtil.backticked("|IkIEzjg0SIwT65tu)U");
      Class<ArrayType> class0 = ArrayType.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<String> class2 = String.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.nonNullString("java.lang.Double");
      ClassUtil.getPackageName(class2);
      ClassUtil.getConstructors(class0);
      Integer.getInteger("net.sf.cglib.proxy.java.io.IOException");
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.nonNull("|IkIEzjg0SIwT65tu)U", "-*w.Yv_VL*ER[Y`");
      Class<Long> class3 = Long.class;
      ClassUtil.isProxyType(class3);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      Class<String> class3 = String.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.classOf(jsonEncoding0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Short short0 = new Short((short) (-835));
      ClassUtil.quotedOr(short0, "(Piu 3\"7nwRH=;z");
      ClassUtil.getClassDescription("\"-835\"");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.KeyDeserializer");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("w@P0<Q?on(<a[Wr29a", "NULL");
      sQLFeatureNotSupportedException0.setNextException(sQLTransientConnectionException0);
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.KeyDeserializer");
      sQLTransientConnectionException0.printStackTrace();
      mockError0.getLocalizedMessage();
      Class<?> class0 = ClassUtil.classOf(mockError0);
      mockError0.addSuppressed(sQLTransientConnectionException0);
      ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackson.databind.KeyDeserializer");
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findClassAnnotations(class0);
      mockError0.getCause();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "com.fasterxml.jackson.databind.KeyDeserializer", (-101));
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.KeyDeserializer", "8=>F", "vals", (-101));
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      MockError mockError0 = new MockError("size");
      mockError0.getLocalizedMessage();
      Class<NoClass> class1 = NoClass.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      ClassUtil.getDeclaringClass(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Double> class0 = Double.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isBogusClass(class2);
      ClassUtil.getOuterClass(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLWarning sQLWarning0 = new SQLWarning("d*A9,R,t<N", "T", 0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "f@~=1HRd", throwable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // d*A9,R,t<N
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-11));
      ClassUtil.quotedOr(byte0, "$UmCG");
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isConcrete(class1);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      Object object0 = new Object();
      ReferenceType referenceType1 = referenceType0.withTypeHandler(object0);
      ReferenceType referenceType2 = referenceType1.withValueHandler(referenceType0);
      referenceType1.withValueHandler(referenceType0);
      ReferenceType referenceType3 = referenceType2.withContentValueHandler(javaType0);
      JavaType javaType1 = referenceType3.getAnchorType();
      ClassUtil.rawClass(javaType1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.isProxyType(class1);
      Class<Character> class3 = Character.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      try { 
        ClassUtil.createInstance(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClassUtil.nonNullString("6B hK-(=+l>9O2");
      Class<NoClass> class0 = NoClass.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class2);
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.nullOrToString(list0);
      Class<Double> class3 = Double.class;
      JavaType[] javaTypeArray0 = null;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, (JavaType[]) null);
      JavaType[] javaTypeArray1 = new JavaType[0];
      // Undeclared exception!
      try { 
        MapType.construct(class2, typeBindings0, (JavaType) null, javaTypeArray1, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      ClassUtil.classNameOf(integer0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.backticked(" is not a primitive type");
      Class<Short> class1 = Short.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.isJacksonStdImpl((Object) "`java.lang.Integer`");
      ClassUtil.isObjectOrPrimitive(class1);
      Class<NoClass> class3 = NoClass.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("keyType", "keyType", 1206, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-102);
      try { 
        objectReader1.readValues(byteArray0, (int) 0, (int)  (-102));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\uFFFD\u0002~\uFFFD\u0000D\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ClassUtil.classNameOf(integer0);
      Class<Short> class0 = Short.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl((Object) "`java.lang.Integer`");
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.getDeclaringClass(class1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      String string0 = "com.fasterxml.jackson.databind.util.ClassUtil";
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "com.fasterxml.jackson.databind.util.ClassUtil");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.getOuterClass(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.isObjectOrPrimitive(class2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      MockException mockException0 = new MockException(sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation((-203), false, false, (-203), (-203), sQLIntegrityConstraintViolationException0);
      MockFile mockFile0 = new MockFile("q", "arDJ^~7i=(");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "O=~oV ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // O=~oV 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      iOContext0.allocBase64Buffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor1.getConstructor();
      ClassUtil.getDeclaredMethods(class2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      Class<Character> class3 = Character.class;
      ClassUtil.getGenericSuperclass(class3);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor1._ctor, true);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class4, "JSON", "jNQbPI~/\"U,^i");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` from String \"JSON\": jNQbPI~/\"U,^i
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.nameOf(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isBogusClass(class2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`float`");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      Class<RuntimeException> class3 = RuntimeException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class2, typeBindings0);
      Class<Double> class4 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.backticked("|IkIEzjg0SIwT65tu)U");
      Class<ArrayType> class0 = ArrayType.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<String> class2 = String.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.nonNullString("4.ZvVjY',L");
      ClassUtil.getPackageName(class2);
      Class<Void> class3 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class3, true);
      Class<Annotation> class4 = Annotation.class;
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      constructor0.isAnnotationPresent(class4);
      ClassUtil.isConcrete((Member) constructor0);
      Class<AccessPattern> class6 = AccessPattern.class;
      ClassUtil.nameOf(class6);
      ClassUtil.isBogusClass(class6);
      ClassUtil.findEnumType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class6, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      Class<ReferenceType> class7 = ReferenceType.class;
      TypeBindings typeBindings1 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class7, typeBindings1);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(resolvedRecursiveType1);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(javaType0, "%H/", "Sub-class %s (of class %s) must override method '%s'");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '%H/' as a subtype of [recursive type; UNRESOLVED: Sub-class %s (of class %s) must override method '%s'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.reflect.AccessibleObject` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.findSuperClasses(class0, class0, true);
      MockError mockError0 = new MockError("size");
      mockError0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, mockError0, "2A3{}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class org.evosuite.runtime.mock.java.lang.MockError (of class java.lang.Integer) must override method '2A3{}'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ghk96", "ghk96", (Map<String, ClientInfoStatus>) null, (Throwable) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLClientInfoException0.setNextException(sQLDataException0);
      ClassUtil.getRootCause(sQLClientInfoException0);
      ClassUtil.throwIfRTE((Throwable) null);
      Byte byte0 = new Byte((byte)125);
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasClass(byte0, class0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientException0);
      ClassUtil.getRootCause(batchUpdateException0);
      ClassUtil.classNameOf(sQLNonTransientException0);
      ClassUtil.quotedOr(batchUpdateException0, "entrySet");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("", "&Uq|YQ4,=");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0, "&Uq|YQ4,=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // &Uq|YQ4,=
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Short short0 = new Short((short) (-835));
      ClassUtil.quotedOr(short0, "(Piu 3\"7nwRH=;z");
      ClassUtil.getClassDescription("\"-835\"");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findConstructor(class1, true);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.createInstance(class3, true);
      LinkedHashSet<AccessPattern> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<AccessPattern>((short) (-835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -835
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.emptyIterator();
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getParameterCount();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(48);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, placeholderForType0, "q7T%0D_5Z8bwj");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.type.PlaceholderForType (of class java.lang.RuntimeException) must override method 'q7T%0D_5Z8bwj'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Class<Double> class0 = Double.class;
      ClassUtil.hasClass(float0, class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getClassDescription(class1);
      ClassUtil.nonNull("`java.lang.Integer`", "`java.lang.Integer`");
      ClassUtil.isProxyType(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.getClassDescription((Object) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "unknown");
      int[] intArray0 = new int[6];
      sQLNonTransientException0.getSuppressed();
      intArray0[0] = (-2472);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 580;
      MockFile mockFile0 = new MockFile(":#`.`^=E");
      mockFile0.setExecutable(false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print((-1.0F));
      mockPrintWriter0.print((long) 580);
      mockPrintWriter0.println("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      sQLNonTransientException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLNonTransientException0.printStackTrace();
      intArray0[4] = (-2750);
      intArray0[5] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("unknown", intArray0, sQLNonTransientException0);
      batchUpdateException0.setNextException(sQLNonTransientException0);
      sQLNonTransientException0.setNextException(batchUpdateException0);
      ClassUtil.throwIfIOE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ClassUtil.backticked("size");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleType> class0 = SimpleType.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      CollectionLikeType collectionLikeType0 = collectionType0.withContentValueHandler(class1);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler("size");
      javaTypeArray0[0] = (JavaType) collectionLikeType1;
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapType mapType1 = mapType0.withTypeHandler("`size`");
      javaTypeArray0[1] = (JavaType) mapType1;
      // Undeclared exception!
      try { 
        typeFactory0.constructParametricType(class2, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.util.HashMap with 4 type parameters: class expects 2
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.KeyDeserializer");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("w@P0<Q?on(<a[Wr29a", "NULL");
      sQLFeatureNotSupportedException0.setNextException(sQLTransientConnectionException0);
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.KeyDeserializer");
      mockError0.getLocalizedMessage();
      Class<?> class0 = ClassUtil.classOf(mockError0);
      mockError0.addSuppressed(sQLTransientConnectionException0);
      ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackson.databind.KeyDeserializer");
      ClassUtil.isCollectionMapOrArray(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.getContentType();
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperTypes(class0, class0);
      String string0 = "!";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("size", "[]", "size", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("size", "y", "]O\"]&CQl|\"cmQ#6", 96);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("size", "[]", ")o|!Ef;-", 1168);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y", "[]", 96, sQLTransientException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTransientException0);
      // Undeclared exception!
      try { 
        sQLInvalidAuthorizationSpecException0.initCause(sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLNonTransientConnectionException: !
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "keyUniverse";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "keyUniverse");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
