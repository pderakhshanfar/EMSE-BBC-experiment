/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 06:54:38 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.classNameOf("pr{dM\"");
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      EnumMap<AccessPattern, Double> enumMap1 = enumMap0.clone();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Double double0 = new Double((-1.0));
      enumMap1.put(accessPattern0, double0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      ClassUtil.findEnumType(enumSet1);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class1);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Double double0 = new Double((-1.0));
      enumMap0.put(accessPattern0, double0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.canBeABeanType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      jsonFactory0.copy();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      MockFile mockFile0 = new MockFile("d^{:0,5hfF)ai!T", "Ignored field \"%s\" (class %s) encountered; mapper configured not to allow this");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MapType> class1 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("xdz|-N5r", class1, "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapType` from String \"xdz|-N5r\": com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern[] accessPatternArray0 = new AccessPattern[2];
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      accessPatternArray0[0] = accessPattern1;
      accessPatternArray0[1] = accessPattern0;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Void> class0 = Void.class;
      ClassUtil.findConstructor(class0, true);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("9.^");
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("org.hibernate.proxy.java.lang.Void");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((File) mockFile0, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "|m0rMtZk8");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: |m0rMtZk8
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      typeFactory0.constructRawMapLikeType(class0);
      Class<NoClass> class1 = NoClass.class;
      typeFactory0.constructArrayType(class1);
      ClassUtil.isLocalType(class0, false);
      Class<MapType> class2 = MapType.class;
      ClassUtil.isJacksonStdImpl(class2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isBogusClass(class0);
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      Class<Module> class3 = Module.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class3, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Long> class1 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(javaType0);
      Boolean boolean0 = Boolean.valueOf(true);
      ReferenceType referenceType3 = referenceType2.withTypeHandler(boolean0);
      ClassUtil.findSuperTypes((JavaType) referenceType3, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class1);
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, (-7));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isNonStaticInnerClass(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(5, (-2095));
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class1 = HashMap.class;
      Class<NoClass> class2 = NoClass.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MapType mapType0 = typeFactory1.constructMapType(class1, class1, class2);
      JavaType[] javaTypeArray0 = new JavaType[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaTypeArray0[0] = (JavaType) mapType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, javaTypeArray0, (JavaType) mapType0);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "Y'";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y'");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Y'");
      SQLDataException sQLDataException0 = new SQLDataException("Y'", "Y'", sQLSyntaxErrorException0);
      MockError mockError0 = new MockError("Y'", sQLDataException0);
      String string1 = "[null]";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "[null]");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[Dm0", (String) null, intArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateException0.spliterator();
      sQLIntegrityConstraintViolationException0.initCause(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(" (from class ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockIOException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Short> class0 = Short.class;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      ClassUtil.isBogusClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class0 = NoClass.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Double double0 = new Double((-2.0));
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(double0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isConcrete(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.nameOf(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, " (of type ", " (of type ");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id ' (of type ' as a subtype of null:  (of type 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BeZ|?<,#0;");
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("g!");
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, false);
      ClassUtil.verifyMustOverride(class0, object0, "java.lang.annotation");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("HI4$:y|pW)2}h'FB", "HI4$:y|pW)2}h'FB", 65);
      mockError0.initCause(sQLTimeoutException0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findSuperTypes(class0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.emptyIterator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class1, "HdW<XubXel<9Y$k");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from number 10: HdW<XubXel<9Y$k
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLTransientConnectionException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) mockPrintStream0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.primitiveType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      MockError mockError0 = new MockError("com.fasterxml.jackson.core.json.UTF8JsonGenerator", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.nonNullString((String) null);
      ClassUtil.quotedOr((Object) null, "");
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getConstructors(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "[]");
      Throwable throwable0 = ClassUtil.getRootCause(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // []
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Object");
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      ClassUtil.throwIfError((Throwable) null);
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      ClassUtil.hasClass(error0, class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaringClass(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 7);
      Class<Long> class2 = Long.class;
      classArray0[0] = class2;
      Class<Long> class3 = Long.class;
      classArray0[1] = class3;
      Class<Long> class4 = Long.class;
      classArray0[2] = class4;
      Class<Long> class5 = Long.class;
      classArray0[3] = class5;
      Class<Long> class6 = Long.class;
      classArray0[4] = class6;
      Class<Long> class7 = Long.class;
      classArray0[5] = class7;
      Class<Long> class8 = Long.class;
      classArray0[6] = class8;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      DataTruncation dataTruncation0 = new DataTruncation(2705, true, true, 2705, 1470, sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", (String) null, dataTruncation0);
      sQLDataException0.initCause(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "primitive", (Throwable) sQLRecoverableException0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // primitive
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isBogusClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1131), objectMapper1, (OutputStream) null, byteArray0, (-737), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "net.sf.cglib.proxy.java.lang.Float");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null KeyDeserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(18);
      placeholderForType0.toCanonical();
      ClassUtil.hasClass(placeholderForType0, class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findClassAnnotations(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      Locale locale0 = Locale.FRANCE;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "JSON", (Object[]) deserializationFeatureArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2415, objectReader0, printStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("JSON", class0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapType` from String \"JSON\": JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "HV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getOuterClass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getConstructors(class0);
      MockError mockError0 = new MockError("~g[d<VZ6WE{@a");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Boolean boolean0 = Boolean.TRUE;
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getConstructors(class0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, (String) null, (Throwable) sQLIntegrityConstraintViolationException0);
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("com.fsterxml.jckso", (String) null, 8, throwable0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(" (expected type: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) mockPrintWriter0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
          String string0 = null;
          SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 65280, sQLSyntaxErrorException0);
          IOContext iOContext0 = new IOContext((BufferRecycler) null, "com.fsterxml.jckso", true);
          int int0 = 3;
          ObjectMapper objectMapper0 = new ObjectMapper();
          JavaType javaType0 = TypeFactory.unknownType();
          objectMapper0.readerFor(javaType0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.hasClass(sQLTimeoutException0, class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) null, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) filteringParserDelegate0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'X';
      charArray0[2] = 'A';
      charArray0[3] = 'k';
      charArray0[4] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1165, charArrayReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "&!2*s,I,s;[YiN=p;");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fsterxml.jckso", "BINARY", jsonMappingException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" is not a primitive type", "exx]96}$nOO%v<", (-407), sQLSyntaxErrorException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) charArrayReader0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // &!2*s,I,s;[YiN=p;
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperTypes(javaType0, class1, false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("cJ<(bo/Cb<AwjV");
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper4 = objectMapper3.configure(serializationFeature0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)100;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper4, byteArrayOutputStream0, byteArray0, (-1), false);
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("cJ<(bo/Cb<AwjV", "JSON");
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      CharacterEscapes.standardAsciiEscapesForJSON();
      uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator jsonGenerator0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<IOException>[] classArray0 = (Class<IOException>[]) Array.newInstance(Class.class, 0);
      JavaType javaType0 = typeFactory1.constructParametricType(class0, classArray0);
      Class<Long> class1 = Long.class;
      boolean boolean0 = false;
      ClassUtil.findSuperTypes(javaType0, class1, false);
      Class<IOException> class2 = IOException.class;
      String string0 = "Q#Bk?()+kas";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q>E-4b@1R>?+Au5");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, classLoader0, "Q#Bk?()+kas");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class sun.misc.Launcher$AppClassLoader (of class java.io.IOException) must override method 'Q#Bk?()+kas'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<String> class1 = String.class;
      ClassUtil.isProxyType(class1);
      Boolean boolean0 = new Boolean(false);
      ClassUtil.isConcrete(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findConstructor(class2, true);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.isLocalType(class3, false);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findConstructor(class2, true);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.isConcrete(class3);
      Short short0 = null;
      Short short1 = new Short((short)149);
      ClassUtil.nonNull((Short) null, short1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findConstructor(class2, true);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.isConcrete(class3);
      ClassUtil.nonNull((Short) null, (Short) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Boolean boolean0 = new Boolean(false);
      Class<Double> class1 = Double.class;
      ClassUtil.nameOf(class1);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "`java.lang.Double`");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Stack<Class<AccessibleObject>> stack0 = new Stack<Class<AccessibleObject>>();
      ClassUtil.getDeclaredFields(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
      MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
      mapperFeatureArray0[0] = mapperFeature0;
      objectMapper0.writeValueAsString(mapperFeature0);
      MapperFeature mapperFeature1 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[6] = mapperFeature6;
      MapperFeature mapperFeature7 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      mapperFeatureArray0[7] = mapperFeature7;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.hibernate.proxy.java.io.IOException", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 341, objectMapper2, mockFileOutputStream0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockFileOutputStream0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class1, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      List<Class<?>> list0 = new LinkedList<Class<CollectionLikeType>>();
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findConstructor(class2, true);
      Character character0 = new Character('6');
      Class<Float> class3 = Float.class;
      ClassUtil.findConstructor(class3, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getEnclosingClass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.backticked("java.lang");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassUtil.nonNullString("enum");
      Boolean boolean0 = Boolean.FALSE;
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getDeclaredFields(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, false);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Short> class0 = Short.class;
      ClassUtil.getConstructors(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.findSuperTypes(class0, class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("key deserializer");
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "JSON", 2);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLRecoverableException0);
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.java.lang.Float", throwable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLException: org.hibernate.proxy.java.lang.Float
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      List<Class<?>> list0 = new Stack<Class<AccessibleObject>>();
      ClassUtil.getDeclaredFields(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
      MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[6] = mapperFeature6;
      MapperFeature mapperFeature7 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      mapperFeatureArray0[7] = mapperFeature7;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.hibernate.proxy.java.io.IOException", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 341, objectMapper2, mockFileOutputStream0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockFileOutputStream0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Module> class0 = Module.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isProxyType(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isBogusClass(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.hasEnclosingMethod(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findRawSuperTypes(class4, class1, false);
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "6p]9?fP%120#Z");
      sQLTransientException0.spliterator();
      sQLTransientException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<h2\"MB>\u0006EF");
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.getClassDescription(constructor1);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      Boolean boolean0 = new Boolean(false);
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Class<ReferenceType> class0 = ReferenceType.class;
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Boolean boolean1 = new Boolean((boolean) boolean0);
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class0, (boolean) boolean0);
      ClassUtil.isJacksonStdImpl(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("7|YHQ5I;7KOv\"", "BNOIOiVo:~vRZz,\bZ");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter", (Throwable) sQLRecoverableException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.core.filter.JsonPointerBasedFilter
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.primitiveType(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getClassDescription((Object) null);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassUtil.getEnclosingClass(class1);
      DataTruncation dataTruncation0 = new DataTruncation(186, false, false, 186, 186);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer");
      Locale locale0 = new Locale("IJm!8@^sHL'?DqkZxZ|", "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) constructor0;
      objectArray0[4] = (Object) "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern";
      objectArray0[5] = (Object) class1;
      objectArray0[6] = (Object) "IJm!8@^sHL'?DqkZxZ|";
      objectArray0[7] = (Object) class1;
      objectArray0[8] = (Object) "IJm!8@^sHL'?DqkZxZ|";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", objectArray0);
      dataTruncation0.printStackTrace(printStream0);
      ClassUtil.throwRootCauseIfIOE(dataTruncation0);
      ClassUtil.getClassDescription(dataTruncation0);
      ClassUtil.throwIfIOE(dataTruncation0);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.primitiveType(class1);
      Character.valueOf(':');
      String string0 = " in a String value";
      String string1 = "java.io.IOException";
      String string2 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType";
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil.emptyIterator();
      Throwable throwable0 = null;
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("java.io.IOException", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      Boolean boolean0 = new Boolean("ZERO_LENGTH_ENUM_ARRAY");
      Boolean boolean1 = new Boolean(true);
      Class<Character> class2 = Character.TYPE;
      Class<Integer> class3 = Integer.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<Float> class4 = Float.class;
      ClassUtil.isJacksonStdImpl(class4);
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.hasEnclosingMethod(class4);
      Class<Integer> class5 = Integer.class;
      ClassUtil.canBeABeanType(class5);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) iterator0);
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaredFields(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class3);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean(true);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.backticked("com.fasterxml.jackson.databind.ser.std.CollectionSerializer");
      ClassUtil.isBogusClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("NULL", "size", (-1244651605));
      sQLTransientConnectionException0.initCause(sQLInvalidAuthorizationSpecException0);
      sQLTransientConnectionException0.setNextException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0, "M}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // M}
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getClassDescription((Object) null);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassUtil.getEnclosingClass(class1);
      DataTruncation dataTruncation0 = new DataTruncation(186, false, false, 186, 186);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer");
      Locale locale0 = new Locale("IJm!8@^sHL'?DqkZxZ|", "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) constructor0;
      objectArray0[4] = (Object) "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern";
      objectArray0[5] = (Object) class1;
      objectArray0[6] = (Object) "unknown";
      objectArray0[7] = (Object) class1;
      objectArray0[8] = (Object) "IJm!8@^sHL'?DqkZxZ|";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", objectArray0);
      dataTruncation0.printStackTrace(printStream0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaredMethods(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForSerialization((Annotated) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = Boolean.TRUE;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_DEFAULT;
      Class<MapType> class2 = MapType.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include1, class0, class2);
      JsonInclude.Value jsonInclude_Value1 = basicBeanDescription0.findPropertyInclusion(jsonInclude_Value0);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition((AnnotationIntrospector) null, (AnnotatedMember) null, (PropertyName) null, propertyMetadata1, jsonInclude_Value1);
      simpleBeanPropertyDefinition0.withInclusion(jsonInclude_Value1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1087);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) objectOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/Iy`6", "KQGtjo8%M!]]P>_", 671);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: /Iy`6
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class1 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, (JavaType) null, (JavaType) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapLikeType0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" has no default (no arg) constructor", "net.sf.cglib.proxy.");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException:  has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.nameOf(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("KI4>?z-%MH[; z.<rT", (Throwable) null);
      Class<String> class2 = String.class;
      ClassUtil.primitiveType(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.isLocalType(class3, false);
      ClassUtil.throwIfError((Throwable) null);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findConstructor(class4, false);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getDeclaredFields(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", sQLIntegrityConstraintViolationException0);
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      SimpleModule simpleModule0 = new SimpleModule();
      ObjectMapper objectMapper2 = objectMapper1.registerModule(simpleModule0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      objectMapper2.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Boolean boolean0 = new Boolean(false);
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.nameOf(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.nameOf((Named) null);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaredMethods(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForSerialization((Annotated) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = Boolean.TRUE;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_DEFAULT;
      Class<MapType> class2 = MapType.class;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include1, class0, class2);
      JsonInclude.Value jsonInclude_Value1 = basicBeanDescription0.findPropertyInclusion(jsonInclude_Value0);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition((AnnotationIntrospector) null, (AnnotatedMember) null, (PropertyName) null, propertyMetadata1, jsonInclude_Value1);
      BeanPropertyDefinition beanPropertyDefinition0 = simpleBeanPropertyDefinition0.withInclusion(jsonInclude_Value1);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanPropertyDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.hasClass((Object) null, class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getGenericSuperclass(class3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getEnclosingClass(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Long> class3 = Long.class;
      ClassUtil.findRawSuperTypes(class3, class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Boolean boolean0 = new Boolean("*[F_a");
      Boolean boolean1 = new Boolean(false);
      Class<Annotation> class1 = Annotation.class;
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "java.io.IOException";
      ClassUtil.nonNullString("java.io.IOException");
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.isJacksonStdImpl(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      deserializerFactoryConfig0.valueInstantiators();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      Boolean boolean0 = new Boolean(false);
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getConstructors(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.canBeABeanType(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) iterator0);
      Float float0 = new Float(0.8F);
      ClassUtil.getClassDescription(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isConcrete(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.nullOrToString(float0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) null);
      Float float0 = new Float(0.8F);
      Byte byte0 = new Byte((byte) (-2));
      ClassUtil.getClassDescription(byte0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor2.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findEnumType(class2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("enum", sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassUtil.nonNullString("^~PJs?^");
      Class<Double> class0 = Double.TYPE;
      ClassUtil.backticked("^~PJs?^");
      Class<Double> class1 = Double.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.createInstance(class2, false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Long> class0 = Long.class;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<SimpleType> class1 = SimpleType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SimpleModule simpleModule0 = new SimpleModule();
      ObjectMapper objectMapper2 = objectMapper1.registerModule(simpleModule0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException(sQLRecoverableException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLRecoverableException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getEnclosingClass(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isConcrete(class2);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Float float0 = new Float(0.8F);
      ClassUtil.getClassDescription(float0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, true);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getExceptionTypes();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, false);
      Float float0 = new Float(0.8F);
      ClassUtil.getClassDescription((Object) null);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.classOf(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericInterfaces(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.nonNullString("ko:|F$Wz_=Ni Tc");
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getGenericSuperclass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "leg*|^~$Egu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredMethods(class0);
      Float float0 = new Float(0.0F);
      ClassUtil.nonNull(float0, (Float) null);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<CollectionType> class2 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) iterator0);
      Float float0 = new Float(0.8F);
      ClassUtil.getClassDescription(class0);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.classNameOf(constructor1);
      ClassUtil.nonNullString("`java.lang.reflect.Constructor`");
      Class<Byte> class1 = Byte.TYPE;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Float> class2 = Float.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      ClassUtil.getClassMethods(class3);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class1, true);
      constructor1.toGenericString();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor1.getExceptionTypes();
      constructor1.getExceptionTypes();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      ClassUtil.classNameOf(class1);
      ClassUtil.nonNullString(":=2S");
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class3);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class0 = NoClass.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Double double0 = new Double((-0.5535330261255091));
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(double0);
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class0, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ef8P.BM:[69l", "ef8P.BM:[69l", sQLClientInfoException0);
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor1.getParameterAnnotations();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.nameOf(class2);
      Short short0 = new Short((short)0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ClassUtil.quotedOr(placeholderForType0, "`java.lang.reflect.AccessibleObject`");
      Class<MapType> class3 = MapType.class;
      ClassUtil.isProxyType(class3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      Boolean boolean0 = new Boolean(false);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<IOException> class2 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class3, list0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassUtil.backticked("keyUniverse");
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = new Boolean("`keyUniverse`");
      ClassUtil.getClassMethods(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ClassUtil.throwIfRTE(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      boolean boolean0 = new Boolean(false);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isBogusClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getClassMethods(class2);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ClassUtil.throwIfRTE(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.classNameOf(constructor1);
      ClassUtil.nonNullString("`java.lang.reflect.Constructor`");
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isJacksonStdImpl(class2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.getExceptionTypes();
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.nonNullString("serialVersionUID");
      ClassUtil.findRawSuperTypes(class1, class0, true);
      ClassUtil.quotedOr((Object) null, "serialVersionUID");
      ClassUtil.isNonStaticInnerClass(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("serialVersionUID", "Sgh@WG|`Fh3");
      MockException mockException0 = new MockException(sQLTransientConnectionException0);
      ClassUtil.throwIfError(mockException0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassUtil.nonNullString("r~PJs?^");
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
      Class<Double> class1 = Double.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("<VO<Lv3$j:J", sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, (TypeBindings) null);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.hasClass(resolvedRecursiveType0, class3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getConstructors(class0);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredFields(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.classNameOf(list0);
      ClassUtil.nonNullString("0&7oy5");
      Class<Integer> class4 = Integer.class;
      Class<Object> class5 = Object.class;
      ClassUtil.findRawSuperTypes(class4, class5, false);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.classOf(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y", "MSIQX.u");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "1U&b|y7", 8);
      sQLNonTransientConnectionException0.fillInStackTrace();
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.classOf(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, list0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.util.LinkedList (of class java.lang.Short) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.hasEnclosingMethod(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonFactory3.createGenerator((DataOutput) null, jsonEncoding0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "JSON", 2381);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2381);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3779, false, false, 2475, 3779);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("unknown", "keyUniverse", "keyUniverse", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("SUW", "`#sZX0B", "`#sZX0B", 632);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("keyUniverse", "s8`eavG6e{_", "A3F^4'o2p7", 2475);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("|nUmnl~yM#EVU_=", "NULL", "A3F^4'o2p7", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "NULL", "ofxh+b", (-2348));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement(":1\"BX8oy#VZ", "ofxh+b", "-X9vr[+jy<4PR`v8", 3);
      stackTraceElementArray0[5] = stackTraceElement5;
      dataTruncation0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0, "m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // m
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      TypeBindings.createIfNeeded(class0, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.hasGenericTypes();
      resolvedRecursiveType0.toCanonical();
      ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) class0);
      Float float0 = new Float(0.8F);
      ClassUtil.getClassDescription(float0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer((-2932));
      ClassUtil.getClassDescription(integer0);
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory2.disable(jsonGenerator_Feature0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, ".Voeqjf$b|RBO1%U(X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \".Voeqjf$b|RBO1%U(X\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.emptyIterator();
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
      Class<Long> class2 = Long.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.classNameOf(list0);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getConstructors(class3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Void> class1 = Void.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.nameOf(class1);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.classOf(class1);
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassUtil.nonNullString("]wa#");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findEnumType(class0);
      Float float0 = new Float(0.0);
      ClassUtil.nonNull(float0, float0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "~42gr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"~42gr\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ObjectReader objectReader1 = objectReader0.forType(class1);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class2);
      ClassUtil.nullOrToString(collectionType0);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class2);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultConstructor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class2);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.backticked(",kr#ET4#>BAM");
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      Float float0 = new Float(3019.805F);
      ClassUtil.nonNull(float0, float0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getGenericInterfaces(class0);
      String string0 = "Sub-class %s (of class %s) must override method '%s'";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "Sub-class %s (of class %s) must override method '%s'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Error) must override method 'Sub-class %s (of class %s) must override method '%s''
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.backticked("Jdg*TT.eY");
      ClassUtil.isJacksonStdImpl(class0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 787;
      intArray0[3] = 0;
      intArray0[4] = (-1435);
      intArray0[5] = 544;
      intArray0[6] = 3;
      intArray0[7] = 871;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`Jdg*TT.eY`", "Jdg*TT.eY", intArray0, (Throwable) null);
      Throwable throwable0 = ClassUtil.throwIfError(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `Jdg*TT.eY`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter");
      Boolean boolean1 = new Boolean((boolean) boolean0);
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isJacksonStdImpl((Object) "java.lang.annotation");
      Float float0 = new Float(0.8F);
      ClassUtil.getClassDescription("&)2%");
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      String string0 = "[]";
      ClassUtil.backticked("[]");
      ClassUtil.getGenericSuperclass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      Class<Long> class2 = Long.class;
      typeFactory0.constructCollectionLikeType(class2, class1);
      collectionType0.getSuperClass();
      String string1 = "vals";
      try { 
        typeFactory0.findClass("vals");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class 'vals.class' should be in target project, but could not be found!
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1, (-1202));
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<LinkedList> class1 = LinkedList.class;
      Class<CollectionType> class2 = CollectionType.class;
      typeFactory2.constructCollectionType(class1, class2);
      Object object0 = null;
      String string0 = "keyType";
      try { 
        typeFactory2.constructFromCanonical("keyType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type 'keyType' (remaining: ''): Cannot locate class 'keyType', problem: keyType
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      ClassUtil classUtil0 = new ClassUtil();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class0);
      SQLException sQLException0 = new SQLException("11uGUbc*Y%\"'fp");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "v3|m`cB:+{x}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // v3|m`cB:+{x}
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&)2%", (Throwable) null);
      sQLTransactionRollbackException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // &)2%
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ena;kC");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class0 = NoClass.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Double double0 = new Double(0.0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(double0);
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class0, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ef8P.BM:[69l", "ef8P.BM:[69l", sQLClientInfoException0);
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.getExceptionTypes();
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.nonNullString("serialVersionUID");
      ClassUtil.findRawSuperTypes(class1, class0, true);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isBogusClass(class0);
      Float float0 = new Float((-2166.2205303));
      ClassUtil.quotedOr(float0, " ew1zUm~cY3QlMfJqI");
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.nameOf(class1);
      ClassUtil.quotedOr(class1, "\"-2166.2205\"");
      ClassUtil.getGenericSuperclass(class0);
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(29, methodArray0.length);
  }
}
