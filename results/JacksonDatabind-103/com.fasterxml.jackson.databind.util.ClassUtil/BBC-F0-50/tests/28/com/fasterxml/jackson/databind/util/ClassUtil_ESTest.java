/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:53:44 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<Byte> class1 = Byte.TYPE;
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Float float0 = new Float((-1000.90137F));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) float0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      batchUpdateException0.initCause(jsonMappingException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, ">u3Nfkv^b2v6-");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper1.readerFor(javaType0);
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      ObjectReader objectReader1 = objectReader0.forType(typeReference0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5464), objectReader1, mockFileOutputStream0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("NKcMBecB]MsNWnZ[>2");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", "&9", 1, sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackso", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: com.fasterxml.jackso
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", ":*%2", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Integer> class1 = Integer.class;
      Class<SimpleModule> class2 = SimpleModule.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      MapType mapType1 = mapType0.withKeyValueHandler(class1);
      String string0 = "\\nL3";
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapType1, "\nL3", "\nL3");
      jsonMappingException0.toString();
      ClassUtil.getRootCause(jsonMappingException0);
      ClassUtil.classNameOf(defaultSerializerProvider_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<Character> class3 = Character.class;
      typeFactory0.constructRawCollectionLikeType(class3);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-96);
      jsonFactory3.createParser(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) byteArrayOutputStream0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '
         // L3' as a subtype of [map type; class java.util.HashMap, [simple type, class java.lang.Integer] -> [simple type, class com.fasterxml.jackson.databind.module.SimpleModule]]: 
         // L3
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put((String) null, 938.64F);
      // Undeclared exception!
      try { 
        ClassUtil.quotedOr(objectNode1, "EsHZ/xiD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.CharTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.");
      SQLDataException sQLDataException0 = new SQLDataException("`typeFromId(DatabindContext,String)", "X(", mockIOException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      TypeBindings.createIfNeeded(class0, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      resolvedRecursiveType0.isReferenceType();
      resolvedRecursiveType0.hasGenericTypes();
      resolvedRecursiveType0.toCanonical();
      ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Integer> class1 = Integer.TYPE;
      Class<?> class2 = ClassUtil.wrapperType(class1);
      ClassUtil.isConcrete(class2);
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("Gb", "java.lang.Void");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MapLikeType> class2 = MapLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, "class name used as type id", "java.lang.Void");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.MapLikeType` from String \"class name used as type id\": java.lang.Void
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonFactory_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("v", "net.sf.cglib.proxy.java.lang.Error", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) jsonEncoding0, (-65281));
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // v (through reference chain: com.fasterxml.jackson.core.JsonEncoding[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.", "1xAq[Y^^5/42]vL|");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ky6", "org.hibernate.proxy.", 8, hashMap0, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLClientInfoException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<String> class0 = String.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1422);
      intArray0[1] = 2;
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.java.io.IOException", "-%|s_1Aq?*=y=Mtz1");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.java.lang.Boolean", "org.hibernate.proxy.java.lang.Boolean", 2, intArray0, sQLDataException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.lang.Boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      Class<ArrayType>[] classArray0 = (Class<ArrayType>[]) Array.newInstance(Class.class, 0);
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) simpleType0);
      simpleType0.isTypeOrSubTypeOf(class2);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(class1);
      CollectionType collectionType2 = collectionType0.withContentTypeHandler(collectionType1);
      CollectionType collectionType3 = collectionType2.withStaticTyping();
      ClassUtil.rawClass(collectionType3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      enumSet0.clone();
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet.allOf(class1);
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.io.IOException");
      MockError mockError0 = new MockError(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "java.io.IOException");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      int int0 = (-5464);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper1.readerFor(javaType0);
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      objectMapper1.readerFor(javaType0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeFactory.defaultInstance();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern0, accessPattern1, accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet1);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      ClassUtil.getClassDescription((Object) null);
      Class<NoClass> class0 = NoClass.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 479);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      ClassUtil.isJacksonStdImpl(object0);
      Class<Float> class1 = Float.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory5 = jsonFactory4.setOutputDecorator(outputDecorator0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON", "[null]", (-1810600065));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Null constructor not allowed", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      sQLTimeoutException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.initCause(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializerModifiers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1807672430));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(placeholderForType0, (String) null, (String) null);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'null' as a subtype of $-1807672429
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      Object object0 = new Object();
      Class<IOException> class1 = IOException.class;
      ClassUtil.getConstructors(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class2, class2, list0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      Object object0 = new Object();
      Class<IOException> class1 = IOException.class;
      ClassUtil.getConstructors(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findConstructor(class2, true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern[] accessPatternArray0 = new AccessPattern[3];
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      accessPatternArray0[0] = accessPattern0;
      accessPatternArray0[1] = accessPattern0;
      accessPatternArray0[2] = accessPattern0;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      enumSet0.add(accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) jsonGeneratorDelegate0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lB IXmXsIh6-");
      ClassUtil.nameOf((Named) null);
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.getDeclaringClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[8];
      annotationMapArray0[0] = null;
      annotationMapArray0[1] = null;
      annotationMapArray0[2] = null;
      annotationMapArray0[3] = null;
      annotationMapArray0[4] = null;
      annotationMapArray0[5] = null;
      annotationMapArray0[6] = null;
      annotationMapArray0[7] = null;
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, (Constructor<?>) null, (AnnotationMap) null, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.classNameOf(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      Boolean boolean0 = Boolean.TRUE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", (Integer) null, "org.hibernate.proxy.java.io.IOException");
      Nulls nulls0 = Nulls.DEFAULT;
      propertyMetadata0.withNulls(nulls0, nulls0);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      propertyMetadata0.withIndex((Integer) null);
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector1, (AnnotatedMember) null, (PropertyName) null, propertyMetadata0, jsonInclude_Value0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) simpleBeanPropertyDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.nameOf(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 573;
      intArray0[1] = (-22);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      MockError mockError0 = new MockError(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperTypes(class0, class1);
      int[] intArray0 = new int[0];
      MockError mockError0 = new MockError("java.util.LinkedLis");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("$@q'gh*", "b!<EW}];+rj X\"*<qj?", (-3329), intArray0, mockError0);
      SQLWarning sQLWarning0 = new SQLWarning("$@q'gh*", "b!<EW}];+rj X\"*<qj?", (-3329), batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "2VS#A>");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Class<Void> class1 = Void.TYPE;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.core.util.BufferRecycler", "org.hibernate.proxy.com.fasterxml.jackson.core.util.BufferRecycler", 8);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.", sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Double double0 = Double.valueOf((double) 0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(double0, class0);
      ClassUtil.classOf(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Void> class1 = Void.class;
      ClassUtil.findClassAnnotations(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("UTF-16BE");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isLocalType(class0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      SQLDataException sQLDataException0 = new SQLDataException("Current token (");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 15, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      iOContext0.allocTokenBuffer(57343);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) pipedOutputStream0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: Current token (
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isLocalType(class0, true);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      Class<Double> class2 = Double.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isLocalType(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-708825413));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.hasClass(accessPattern0, class2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ocCeW^7Txs");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      Class<NoClass> class0 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(double0, class0, ")~\"SL2HA/");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ClassUtil.classNameOf(jsonMappingException0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getOuterClass(class0);
      Class<CollectionType> class2 = CollectionType.class;
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class2, class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class4);
      ClassUtil.classNameOf(class1);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from number -Infinity: )~\"SL2HA/
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class0 = NoClass.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Double double0 = new Double(1.0);
      arrayType0.withStaticTyping();
      Class<ObjectNode> class1 = ObjectNode.class;
      ClassUtil.hasClass(class0, class1);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isLocalType(class0, true);
      Class<Float> class1 = Float.class;
      ClassUtil.hasClass((Object) null, class1);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.java.lang.Float", "net.sf.cglib.proxy.");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang.RuntimeExc", sQLTransactionRollbackException0);
      Throwable throwable0 = sQLTransactionRollbackException0.initCause(sQLNonTransientException0);
      ClassUtil.throwIfError(throwable0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE(throwable0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "om_");
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getOuterClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(84);
      placeholderForType0.isReferenceType();
      ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
      SQLException sQLException0 = new SQLException("java.lang.annotation", (Throwable) null);
      ClassUtil.getRootCause(sQLException0);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getClassDescription((Object) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.quotedOr((Object) null, "net.sf.cglib.proxy.java.lang.Short");
      SQLDataException sQLDataException0 = new SQLDataException("unknown", "Cannot access ", 3997);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLRecoverableException0);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.lang.Short", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.toGenericString();
      constructor0.getExceptionTypes();
      Class<Short> class1 = Short.TYPE;
      ClassUtil.getConstructors(class1);
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaringClass(class0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.findSuperTypes(class0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassUtil.backticked("BZ,f6FBFMS");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float((-675.2872F));
      ClassUtil.getClassDescription(float0);
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "com.fasterxml.jackson.databind.deser.AbstractDeserializer";
      String string1 = "2tlevl";
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(508);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(placeholderForType0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      ObjectReader objectReader2 = objectReader1.without(jsonParser_Feature0);
      Class<Integer> class1 = Integer.class;
      ObjectReader objectReader3 = objectReader2.forType(class1);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader4 = objectReader3.withHandler(deserializationProblemHandler0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      BigInteger bigInteger0 = BigInteger.TEN;
      ObjectNode objectNode1 = objectNode0.put("$BZ9ifuavx3'`Qc7o?'", bigInteger0);
      JsonParser jsonParser0 = objectReader4.treeAsTokens(objectNode1);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      try { 
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class0, jsonParser0, jsonToken0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_NUMBER_FLOAT) found after value (bound as `java.lang.RuntimeException`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = (MapType)mapType1.withKeyTypeHandler(typeFactory0);
      MapType mapType3 = (MapType)mapType2.withStaticTyping();
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class2, false);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isLocalType(class0, false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, "Kf=o/g{QizU", (Map<String, ClientInfoStatus>) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLClientInfoException2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ObjectNode objectNode1 = objectNode0.put("RA3K2e[u4o(052", byteArray0);
      ObjectNode objectNode2 = objectNode1.findParent("RA3K2e[u4o(052");
      ObjectNode objectNode3 = objectNode2.put((String) null, (long) (byte) (-60));
      ObjectNode objectNode4 = objectNode3.put("niFtCZk@~F", (BigInteger) null);
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.hasClass(objectNode4, class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Default constructor for ", "Default constructor for ", (-888), (Throwable) null);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      System.setCurrentTimeMillis(1118L);
      Class<ObjectNode> class0 = ObjectNode.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-42);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      // Undeclared exception!
      try { 
        typeFactory0.constructFromCanonical((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<String> class0 = String.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("net.sf.cglib.proxy.java.lang.reflect.AccessibleObject");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectReader0, (OutputStream) null, byteArray0, (-1), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" has no default (no arg) constructor", sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      System.setCurrentTimeMillis(1118L);
      Class<ObjectNode> class0 = ObjectNode.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.quotedOr((Object) null, ")]PnnXdnb");
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper1, (OutputStream) null, byteArray0, (byte)8, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("DoA", sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: DoA
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isLocalType(class0, false);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isLocalType(class0, false);
      Class<NoClass> class1 = NoClass.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Float> class3 = Float.class;
      ClassUtil.findEnumType(class3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Long> class0 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      javaTypeArray0[7] = (JavaType) simpleType0;
      javaTypeArray0[8] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaTypeArray0[8], simpleType0, javaTypeArray0[8]);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapLikeType0, javaTypeArray0, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withValueHandler(referenceType0);
      CollectionLikeType collectionLikeType0 = collectionType1.withContentValueHandler(javaTypeArray0[1]);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(collectionLikeType0, "net.sf.cglib.proxy.java.lang.String", (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'net.sf.cglib.proxy.java.lang.String' as a subtype of [collection type; class java.lang.Long, contains [simple type, class java.lang.Long]]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isBogusClass(class1);
      BeanDescription beanDescription0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = null;
      try {
        beanPropertyMap0 = new BeanPropertyMap(false, (Collection<SettableBeanProperty>) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(1925.0F);
      ClassUtil.getClassDescription(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.wrapperType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getClassMethods(class2);
      SQLException sQLException0 = new SQLException("`java.lang.RuntimeException`", "`java.lang.RuntimeException`", (Throwable) null);
      ClassUtil.throwRootCauseIfIOE(sQLException0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.toGenericString();
      constructor0.getExceptionTypes();
      constructor0.getExceptionTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Boolean boolean0 = new Boolean(false);
      ClassUtil.isCollectionMapOrArray(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "Gm/c]*MBTq90", (JavaType) null);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<Error> class0 = Error.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.defaultValue(class1);
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.getRootCause(mockIOException0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isBogusClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Float float0 = new Float(1925.0F);
      ClassUtil.getClassDescription(class0);
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.canBeABeanType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isProxyType(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(559);
      ClassUtil.nullOrToString(placeholderForType0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.throwIfError((Throwable) null);
      Double double0 = new Double(0.0);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.classOf((Object) null);
      ClassUtil.isNonStaticInnerClass(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Default constructor for ", "", 182);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("#nJVGHU/2_C\"|t[dh");
      mockRuntimeException0.printStackTrace();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.getStackTrace();
      ClassUtil.getRootCause(mockRuntimeException0);
      mockRuntimeException0.toString();
      mockRuntimeException0.fillInStackTrace();
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "#nJVGHU/2_C\"|t[dh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class2, true);
      constructor1.toGenericString();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor1.getExceptionTypes();
      constructor1.getExceptionTypes();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isBogusClass(class3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, false);
      Float float0 = new Float((-264.85780717372));
      Float float1 = new Float((-264.85780717372));
      Float float2 = new Float(1957.0F);
      ClassUtil.nonNull(float2, float1);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findEnumType(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Class<Annotation> class4 = Annotation.class;
      ClassUtil.getConstructors(class4);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.nonNullString("net.sf.cglib.proxy.");
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getConstructors(class0);
      Byte byte0 = new Byte((byte)2);
      ClassUtil.classOf(byte0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      sQLFeatureNotSupportedException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLFeatureNotSupportedException0.printStackTrace();
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.findEnumType(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-598));
      ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
      Class<?> class2 = ClassUtil.rawClass(placeholderForType0);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.canBeABeanType(class3);
      ClassUtil.quotedOr(class3, (String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "net.sf.cglib.proxy.");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getEnclosingClass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.canBeABeanType(class4);
      Class<Object> class5 = Object.class;
      ClassUtil.findSuperClasses(class5, class0, false);
      Byte byte0 = new Byte((byte) (-119));
      ClassUtil.classOf(byte0);
      Class<CollectionType> class6 = CollectionType.class;
      ClassUtil.nameOf(class6);
      Object object0 = new Object();
      Class<CollectionType> class7 = CollectionType.class;
      ClassUtil.isConcrete(class7);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.canBeABeanType(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isConcrete(class2);
      Float float0 = new Float((-2036.62865));
      ClassUtil.nonNull((Object) class2, (Object) float0);
      ClassUtil.isNonStaticInnerClass(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("&xJ%}#8f");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("%QAb", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.canBeABeanType(class1);
      Float float0 = new Float(2.147483647E9);
      Float float1 = new Float(2.147483647E9);
      ClassUtil.nonNull((Float) null, float1);
      ClassUtil.findEnumType(class0);
      ClassUtil.canBeABeanType(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, false);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(simpleType0);
      Class<Byte> class1 = Byte.TYPE;
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(class1);
      ReferenceType referenceType3 = referenceType2.withStaticTyping();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector0.isIgnorableType((AnnotatedClass) null);
      SimpleType simpleType1 = referenceType3.withValueHandler((Object) null);
      StringBuilder stringBuilder0 = new StringBuilder(1);
      referenceType2.getGenericSignature(stringBuilder0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class2, false);
      ClassUtil.nonNullString("[]");
      Class<String> class3 = String.class;
      ClassUtil.findConstructor(class3, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.classNameOf((Object) null);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isBogusClass(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]...[", ".,~q|Gq4Cq$P.+SB/U", 2);
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SimpleType> class0 = SimpleType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.isTypeOrSuperTypeOf(class0);
      ClassUtil.isJacksonStdImpl((Object) resolvedRecursiveType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      TypeFactory typeFactory2 = typeFactory1.withClassLoader((ClassLoader) null);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(10, (-485));
      TypeFactory typeFactory3 = typeFactory2.withCache(lRUMap0);
      typeFactory1.withClassLoader((ClassLoader) null);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ArrayType arrayType0 = typeFactory3.constructArrayType(class1);
      ClassUtil.classNameOf(arrayType0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getDeclaredFields(class2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("b>HbX?{", "com.fasterxml.jackson.databind.util.ClassUtil", sQLNonTransientConnectionException0);
      SQLException sQLException0 = new SQLException(")Xu>[(H,VMKB{v &", ")Xu>[(H,VMKB{v &", (-485), sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLException0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m");
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isLocalType(class2, true);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class1, class3, false);
      Class<Character> class4 = Character.class;
      ClassUtil.findEnumType(class4);
      ClassUtil.isNonStaticInnerClass(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "@v[>hE Mp|^T", (Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // @v[>hE Mp|^T
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m");
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.isLocalType(class1, true);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findEnumType(class3);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1258, 2342);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<Float> class0 = Float.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, javaTypeArray0[0], javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[1]);
      MapType mapType2 = mapType1.withStaticTyping();
      Class<Object> class1 = Object.class;
      Class<Module> class2 = Module.class;
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) mapType1);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class1, typeBindings1);
      MapType mapType3 = mapType2.withKeyValueHandler(resolvedRecursiveType1);
      MapType mapType4 = mapType3.withContentValueHandler(resolvedRecursiveType1);
      MapLikeType mapLikeType0 = mapType4.withKeyType(mapType3);
      javaTypeArray0[2] = (JavaType) mapLikeType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) mapType2);
      CollectionLikeType collectionLikeType1 = typeFactory1.constructCollectionLikeType((Class<?>) class0, (JavaType) collectionLikeType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType1, resolvedRecursiveType0);
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      constructor0.getTypeParameters();
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.nonNullString("serialVersionUID");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.isLocalType(class0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(")gg25^c@7{vO7", (Throwable) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-579));
      ClassUtil.classOf((Object) null);
      Class<Error> class1 = Error.class;
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class2, false);
      constructor1.toGenericString();
      constructor1.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor1.getExceptionTypes();
      constructor1.getExceptionTypes();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.classNameOf(constructor1);
      ClassUtil.nonNullString("q;*nF5aSIyU\"Z?xAN");
      Class<ObjectNode> class3 = ObjectNode.class;
      Class<String> class4 = String.class;
      ClassUtil.findRawSuperTypes(class3, class4, true);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getEnclosingClass(class1);
      Class<Double> class2 = Double.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      ClassUtil.getPackageName(class3);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.findSuperClasses(class4, class1, false);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.createInstance(class1, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      StringWriter stringWriter0 = new StringWriter(8);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectMapper1, stringWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, false);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", 1536);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.canBeABeanType(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isConcrete(class2);
      Float float0 = new Float((-2036.62865));
      ClassUtil.nonNull((Object) class2, (Object) float0);
      ClassUtil.isNonStaticInnerClass(class1);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 0, intArray0, sQLSyntaxErrorException0);
      ClassUtil.throwIfRTE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.getExceptionTypes();
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.nonNullString("serialVersionUID");
      ClassUtil.getGenericInterfaces(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("annotation", (Throwable) null);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.findEnumType(class0);
      Class<Void> class2 = Void.class;
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.getExceptionTypes();
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.nonNullString("serialVersionUID");
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.isJacksonStdImpl(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isBogusClass(class0);
      Float float0 = new Float((-1909.4084929));
      Float float1 = new Float(0.0);
      ClassUtil.nonNull(float1, float1);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.canBeABeanType(class1);
      Class<String> class2 = String.class;
      ClassUtil.hasEnclosingMethod(class2);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("coq6d1j/m/", "com.fasterxml.jackson.annotation.JacksonInject$Value", sQLTransientException0);
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      Float float2 = new Float(534.31F);
      ClassUtil.nonNull(float0, float2);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.hasEnclosingMethod(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getEnclosingClass(class1);
      Class<Double> class2 = Double.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      ClassUtil.getPackageName(class3);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.findSuperClasses(class4, class1, false);
      ClassUtil.classOf((Object) null);
      ClassUtil.nameOf((Class<?>) null);
      Class<String> class5 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getEnclosingClass(class1);
      Class<Double> class3 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getEnclosingClass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.canBeABeanType(class4);
      Class<Object> class5 = Object.class;
      ClassUtil.findSuperClasses(class5, class0, false);
      Byte byte0 = new Byte((byte) (-119));
      ClassUtil.classOf(byte0);
      Class<CollectionType> class6 = CollectionType.class;
      ClassUtil.nameOf(class6);
      Class<Short> class7 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.nonNullString("r~PJsos;?^");
      Class<Double> class0 = Double.class;
      ClassUtil.getEnclosingClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1764));
      ClassUtil.classOf(placeholderForType0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.canBeABeanType(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.createInstance(class2, true);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      Class<?> class2 = ClassUtil.classOf(class1);
      ClassUtil.isConcrete(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class1, class3);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class4);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "]wa#";
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      Float float0 = new Float(0.0);
      ClassUtil.canBeABeanType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      SimpleModule simpleModule0 = new SimpleModule();
      ClassUtil.classOf(simpleModule0);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.nameOf(class3);
      Class<ObjectNode> class4 = ObjectNode.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.node.ObjectNode is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getEnclosingClass(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericSuperclass(class2);
      Float float0 = new Float(673.0099F);
      ClassUtil.nonNull(float0, float0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.findEnumType(class0);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class4);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassUtil.backticked("&mz$><mW5ZP4b}yT-vj");
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class2 = Object.class;
      classArray0[0] = class2;
      Class<Object> class3 = Object.class;
      // Undeclared exception!
      try { 
        basicBeanDescription0.instantiateBean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isProxyType(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1744094291));
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getPackageName(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassUtil.nonNullString("r~PJsos;?^");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.nonNull((IOException) null, (IOException) null);
      ClassUtil.emptyIterator();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getEnclosingClass(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericSuperclass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = null;
      Class<Void> class1 = Void.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<RuntimeException> class1 = RuntimeException.class;
      classUtil_Ctor0.getParameterAnnotations();
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor1.getDeclaredAnnotations();
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      Boolean boolean0 = new Boolean(false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("' (code 0x", "ena;kC");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' (code 0x
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      Class<String> class1 = String.class;
      ClassUtil.isJacksonStdImpl(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Z&;", "b51\"", (-128));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%", "6}E", (Throwable) null);
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.findSuperTypes(class1, (Class<?>) null);
      ClassUtil.emptyIterator();
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.classOf(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("USE_BIG_DECIMAL_FOR_FLOATS", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "^B>iz0VdKX\"", sQLIntegrityConstraintViolationException0);
      sQLTimeoutException0.spliterator();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLTimeoutException0.printStackTrace();
      ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.getExceptionTypes();
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.classNameOf((Object) null);
      ClassUtil.nonNullString("serialVersionUID");
      Class<MapLikeType> class2 = MapLikeType.class;
      Class<Integer> class3 = Integer.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class0 = NoClass.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Double double0 = Double.valueOf(0.0);
      arrayType0.withContentTypeHandler(double0);
      arrayType0.toString();
      Double double1 = new Double(0.0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(double1);
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class0, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getEnclosingClass(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericSuperclass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getParameters();
      constructor0.getAnnotations();
      constructor0.getDeclaredAnnotations();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<Error> class4 = Error.class;
      ClassUtil.findClassAnnotations(class4);
      Class<IOException> class5 = IOException.class;
      ClassUtil.getDeclaredFields(class5);
      Class<RuntimeException> class6 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class6);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      ClassUtil.quotedOr(class5, "w7cy}lfOTK|3&sD\"~m");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IOException iOException0 = null;
      ClassUtil.nonNull((IOException) null, (IOException) null);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3779, false, false, 2475, 3779);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("unknown", "keyUniverse", "keyUniverse", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("SUW", "`#sZX0B", "`#sZX0B", 632);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("keyUniverse", "s8`eavG6e{_", "A3F^4'o2p7", 2475);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("|nUmnl~yM#EVU_=", "NULL", "A3F^4'o2p7", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      Class<Short> class0 = Short.class;
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Class<?> class3 = ClassUtil.classOf(class1);
      assertNotNull(class3);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Class", class3.toString());
      assertFalse(class3.isAnnotation());
      
      String string0 = ClassUtil.nameOf(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.Short`", string0);
      
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isBogusClass(class0);
      Float float0 = new Float((-2166.2205303));
      ClassUtil.quotedOr(float0, " ew1zUm~cY3QlMfJqI");
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.nameOf(class1);
      ClassUtil.quotedOr(class1, "\"-2166.2205\"");
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.nullOrToString(float0);
      Class<Float> class3 = Float.class;
      ClassUtil.getDeclaringClass(class3);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassUtil.nonNullString("]wa#");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findEnumType(class0);
      Float float0 = new Float(0.0);
      ClassUtil.nonNull(float0, float0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      String string0 = "com.fasterxml.jackson.databind.util.ClassUtil$Ctor";
      String string1 = "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty";
      Class<Double> class2 = Double.class;
      ClassUtil.findEnumType(class2);
      SQLWarning sQLWarning0 = new SQLWarning("keyUniverse", "8jh*%M", 1536);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]wa#", "]wa#", 1536, sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "unable to parse key as Class");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unable to parse key as Class
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3779, false, false, 2475, 3779);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("unknown", "keyUniverse", "keyUniverse", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("SUW", "`#sZX0B", "`#sZX0B", 632);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("keyUniverse", "s8`eavG6e{_", "A3F^4'o2p7", 2475);
      stackTraceElementArray0[2] = stackTraceElement2;
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.quotedOr((Object) null, "serialization type ");
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.nameOf(class1);
      ClassUtil.quotedOr(stackTraceElement0, (String) null);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      boolean boolean0 = new Boolean(false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ena;kC");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, list0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.util.LinkedList (of class java.lang.Short) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Constructor<RuntimeException> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory0.enable(jsonParser_Feature0);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotNull(jsonFactory3);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory4 = jsonFactory3.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory4);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory4.createGenerator((DataOutput) null, jsonEncoding0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(287, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "JSON", 2381);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("JSON", sQLNonTransientConnectionException0.getMessage());
      assertEquals(2381, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("JSON", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: JSON", sQLNonTransientConnectionException0.toString());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2381);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3779, false, false, 2475, 3779);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("unknown", "keyUniverse", "keyUniverse", 0);
      assertNotNull(stackTraceElement0);
      assertEquals("unknown.keyUniverse(keyUniverse:0)", stackTraceElement0.toString());
      assertEquals("keyUniverse", stackTraceElement0.getMethodName());
      assertEquals("keyUniverse", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("unknown", stackTraceElement0.getClassName());
      assertEquals(0, stackTraceElement0.getLineNumber());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("SUW", "`#sZX0B", "`#sZX0B", 632);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      assertEquals("SUW", stackTraceElement1.getClassName());
      assertEquals("`#sZX0B", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("`#sZX0B", stackTraceElement1.getMethodName());
      assertEquals("SUW.`#sZX0B(`#sZX0B:632)", stackTraceElement1.toString());
      assertEquals(632, stackTraceElement1.getLineNumber());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("keyUniverse", "s8`eavG6e{_", "A3F^4'o2p7", 2475);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement2);
      assertEquals("A3F^4'o2p7", stackTraceElement2.getFileName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("s8`eavG6e{_", stackTraceElement2.getMethodName());
      assertEquals("keyUniverse.s8`eavG6e{_(A3F^4'o2p7:2475)", stackTraceElement2.toString());
      assertEquals("keyUniverse", stackTraceElement2.getClassName());
      assertEquals(2475, stackTraceElement2.getLineNumber());
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("|nUmnl~yM#EVU_=", "NULL", "A3F^4'o2p7", 0);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement3);
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals(0, stackTraceElement3.getLineNumber());
      assertEquals("NULL", stackTraceElement3.getMethodName());
      assertEquals("|nUmnl~yM#EVU_=", stackTraceElement3.getClassName());
      assertEquals("|nUmnl~yM#EVU_=.NULL(A3F^4'o2p7:0)", stackTraceElement3.toString());
      assertEquals("A3F^4'o2p7", stackTraceElement3.getFileName());
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "NULL", "ofxh+b", (-2348));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertNotNull(stackTraceElement4);
      assertEquals("ofxh+b", stackTraceElement4.getFileName());
      assertEquals((-2348), stackTraceElement4.getLineNumber());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("NULL", stackTraceElement4.getMethodName());
      assertEquals(".NULL(ofxh+b)", stackTraceElement4.toString());
      assertEquals("", stackTraceElement4.getClassName());
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement(":1\"BX8oy#VZ", "ofxh+b", "-X9vr[+jy<4PR`v8", 3);
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement5);
      assertEquals("ofxh+b", stackTraceElement5.getMethodName());
      assertEquals(3, stackTraceElement5.getLineNumber());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertEquals(":1\"BX8oy#VZ", stackTraceElement5.getClassName());
      assertEquals(":1\"BX8oy#VZ.ofxh+b(-X9vr[+jy<4PR`v8:3)", stackTraceElement5.toString());
      assertEquals("-X9vr[+jy<4PR`v8", stackTraceElement5.getFileName());
      
      stackTraceElementArray0[5] = stackTraceElement5;
      dataTruncation0.setStackTrace(stackTraceElementArray0);
      assertEquals(6, stackTraceElementArray0.length);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0, "m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // m
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("r~PJsos;?^");
      assertNotNull(string0);
      assertEquals("r~PJsos;?^", string0);
      
      Class<Double> class0 = Double.class;
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Module> class0 = Module.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Character character0 = new Character('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      String string0 = ClassUtil.nullOrToString(character0);
      assertNotNull(string0);
      
      Class<Character> class2 = Character.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(31, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      assertNotNull(typeBindings0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded(class0, javaType0);
      assertNotNull(typeBindings1);
      assertSame(typeBindings1, typeBindings0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      
      JavaType javaType1 = resolvedRecursiveType0.getSuperClass();
      assertNull(javaType1);
      assertSame(typeBindings0, typeBindings1);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      
      boolean boolean0 = resolvedRecursiveType0.hasGenericTypes();
      assertSame(typeBindings0, typeBindings1);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(boolean0);
      
      String string0 = resolvedRecursiveType0.toCanonical();
      assertNotNull(string0);
      assertSame(typeBindings0, typeBindings1);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertEquals("com.fasterxml.jackson.databind.type.PlaceholderForType", string0);
      
      ResolvedRecursiveType resolvedRecursiveType1 = ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
      assertNotNull(resolvedRecursiveType1);
      assertSame(typeBindings0, typeBindings1);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isContainerType());
      
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("double", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      Float float0 = new Float(0.8F);
      assertNotNull(float0);
      assertEquals(0.8F, (float)float0, 0.01F);
      
      String string0 = ClassUtil.getClassDescription(float0);
      assertNotNull(string0);
      assertEquals("`java.lang.Float`", string0);
      
      Class<String> class2 = String.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertEquals(16, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNotNull(constructor0);
      assertSame(class3, class2);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Class<?> class4 = classUtil_Ctor0.getDeclaringClass();
      assertFalse(class4.equals((Object)class1));
      assertNotNull(class4);
      assertSame(class3, class2);
      assertNotSame(class4, class1);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(class4.isAnnotation());
      assertEquals("class java.lang.String", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isEnum());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(17, class4.getModifiers());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<Double> class1 = Double.class;
      boolean boolean1 = ClassUtil.isBogusClass(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer integer0 = new Integer((-2932));
      assertNotNull(integer0);
      assertEquals((-2932), (int)integer0);
      
      String string0 = ClassUtil.getClassDescription(integer0);
      assertNotNull(string0);
      assertEquals("`java.lang.Integer`", string0);
      
      Class<String> class0 = String.class;
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotNull(jsonFactory1);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertNotNull(jsonFactory2);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory3);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, ".Voeqjf$b|RBO1%U(X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \".Voeqjf$b|RBO1%U(X\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Iterator<Integer> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Float> class1 = Float.class;
      Constructor<Float> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      Class<Long> class2 = Long.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class2);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.classNameOf(list0);
      assertNotNull(string0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("`java.util.Collections$EmptyList`", string0);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class3);
      assertEquals(5, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Void> class1 = Void.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      String string0 = ClassUtil.nameOf(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.Void`", string0);
      
      String string1 = ClassUtil.classNameOf((Object) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[null]", string1);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("]wa#");
      assertNotNull(string0);
      assertEquals("]wa#", string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = ClassUtil.nonNull(float0, float0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Class<Integer> class2 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class2);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertEquals("class java.lang.Error", class2.toString());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "~42gr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"~42gr\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      Class<SimpleModule> class0 = SimpleModule.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(typeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      Class<Error> class1 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(arrayType0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotNull(arrayType1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.hasValueHandler());
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class2, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertNotNull(list0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(arrayType0, arrayType1);
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(2, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertEquals(4, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<IOException> class2 = IOException.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultConstructor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(5, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<NoClass> class3 = NoClass.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class3, list0);
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(class3, class1);
      assertSame(list1, list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      assertNotNull(typeBindings0);
      assertSame(class1, class3);
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(referenceType0);
      assertSame(class1, class3);
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(javaTypeArray0[0]);
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(referenceType1);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertSame(class1, class3);
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType1, javaTypeArray0, (JavaType) referenceType0);
      assertEquals(2, javaTypeArray0.length);
      assertNotNull(collectionLikeType0);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertSame(class1, class3);
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(javaType0);
      assertEquals(2, javaTypeArray0.length);
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertNotNull(collectionLikeType1);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertSame(class1, class3);
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertTrue(collectionLikeType1.isContainerType());
      assertTrue(collectionLikeType1.isFinal());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertFalse(collectionLikeType1.isArrayType());
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isAbstract());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isEnumType());
      assertTrue(collectionLikeType1.hasContentType());
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      
      String string0 = ClassUtil.getClassDescription(collectionLikeType1);
      assertEquals(2, javaTypeArray0.length);
      assertTrue(collectionLikeType0.equals((Object)collectionLikeType1));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertNotNull(string0);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertSame(class1, class3);
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertTrue(collectionLikeType1.isContainerType());
      assertTrue(collectionLikeType1.isFinal());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertFalse(collectionLikeType1.isArrayType());
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isAbstract());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isEnumType());
      assertTrue(collectionLikeType1.hasContentType());
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals("`com.fasterxml.jackson.databind.type.CollectionLikeType`", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
      
      Float float0 = new Float(3019.805F);
      assertNotNull(float0);
      assertEquals(3019.805F, (float)float0, 0.01F);
      
      Float float1 = ClassUtil.nonNull(float0, float0);
      assertNotNull(float1);
      assertEquals(3019.805F, (float)float1, 0.01F);
      
      Class<Integer> class1 = Integer.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      String string0 = "Sub-class %s (of class %s) must override method '%s'";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "Sub-class %s (of class %s) must override method '%s'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Error) must override method 'Sub-class %s (of class %s) must override method '%s''
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.backticked("Jdg*TT.eY");
      assertNotNull(string0);
      assertEquals("`Jdg*TT.eY`", string0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 787;
      intArray0[3] = 0;
      intArray0[4] = (-1435);
      intArray0[5] = 544;
      intArray0[6] = 3;
      intArray0[7] = 871;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`Jdg*TT.eY`", "Jdg*TT.eY", intArray0, (Throwable) null);
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException: `Jdg*TT.eY`", batchUpdateException0.toString());
      assertEquals("Jdg*TT.eY", batchUpdateException0.getSQLState());
      assertEquals("`Jdg*TT.eY`", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 787, 0, (-1435), 544, 3, 871}, intArray0);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwIfError(batchUpdateException0);
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException1);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException: `Jdg*TT.eY`", batchUpdateException0.toString());
      assertEquals("Jdg*TT.eY", batchUpdateException0.getSQLState());
      assertEquals("`Jdg*TT.eY`", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("`Jdg*TT.eY`", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: `Jdg*TT.eY`", batchUpdateException1.toString());
      assertEquals("Jdg*TT.eY", batchUpdateException1.getSQLState());
      assertArrayEquals(new int[] {0, 0, 787, 0, (-1435), 544, 3, 871}, intArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `Jdg*TT.eY`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      String string0 = ClassUtil.getPackageName(class0);
      assertNull(string0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("java.lang.annotation", string0);
      
      String string1 = ClassUtil.isLocalType(class0, false);
      assertNull(string1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&)2%", (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: &)2%", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&)2%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      String string2 = sQLTransactionRollbackException0.getLocalizedMessage();
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("java.sql.SQLTransactionRollbackException: &)2%", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&)2%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("&)2%", string2);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTransactionRollbackException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.sql.SQLTransactionRollbackException: &)2%", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&)2%", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      Class<Boolean> class1 = Boolean.class;
      Constructor<Boolean> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      String string0 = "[]";
      String string1 = ClassUtil.backticked("[]");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`[]`", string1);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isAnnotation());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class2);
      assertNotNull(collectionType0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      
      Class<Long> class3 = Long.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class3, class2);
      assertNotNull(collectionLikeType0);
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      
      CollectionType collectionType1 = (CollectionType)collectionType0.getSuperClass();
      assertFalse(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isMapLikeType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isContainerType());
      
      String string2 = "vals";
      try { 
        typeFactory0.findClass("vals");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // vals
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1, (-1202));
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertNotNull(typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(typeFactory2, typeFactory0);
      
      Class<LinkedList> class2 = LinkedList.class;
      Class<CollectionType> class3 = CollectionType.class;
      CollectionType collectionType0 = typeFactory2.constructCollectionType(class2, class3);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertNotNull(collectionType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(typeFactory2, typeFactory0);
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      
      Object object0 = null;
      String string0 = "keyType";
      try { 
        typeFactory2.constructFromCanonical("keyType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type 'keyType' (remaining: ''): Cannot locate class 'keyType', problem: keyType
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      assertNotNull(collectionLikeType0);
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      
      Class<?> class1 = ClassUtil.rawClass(collectionLikeType0);
      assertNotNull(class1);
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<Double> class1 = Double.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      
      SQLException sQLException0 = new SQLException("11uGUbc*Y%\"'fp");
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException: 11uGUbc*Y%\"'fp", sQLException0.toString());
      assertEquals("11uGUbc*Y%\"'fp", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "v3|m`cB:+{x}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // v3|m`cB:+{x}
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("java.lang.annotation", string0);
      
      String string1 = ClassUtil.isLocalType(class0, false);
      assertNull(string1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&)2%", (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: &)2%", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("&)2%", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLTransactionRollbackException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.sql.SQLTransactionRollbackException: &)2%", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("&)2%", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // &)2%
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
      assertNotNull(annotatedType0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, int0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, int1);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      assertTrue(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ena;kC");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("ena;kC", sQLNonTransientConnectionException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<NoClass> class0 = NoClass.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertNotNull(arrayType0);
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(double0);
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotNull(arrayType1);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.hasValueHandler());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class0, true);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotNull(list0);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ef8P.BM:[69l", "ef8P.BM:[69l", sQLClientInfoException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: ef8P.BM:[69l", sQLNonTransientConnectionException0.toString());
      assertEquals("ef8P.BM:[69l", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ef8P.BM:[69l", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: ef8P.BM:[69l", sQLNonTransientConnectionException0.toString());
      assertEquals("ef8P.BM:[69l", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ef8P.BM:[69l", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("ef8P.BM:[69l", sQLNonTransientConnectionException1.getMessage());
      assertEquals("ef8P.BM:[69l", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ef8P.BM:[69l", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(3, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      String string0 = constructor0.toGenericString();
      assertNotNull(string0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals("public java.lang.RuntimeException()", string0);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
      assertNotNull(annotatedType0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      Class<?>[] classArray1 = constructor0.getExceptionTypes();
      assertEquals(0, classArray1.length);
      assertFalse(classArray1.equals((Object)classArray0));
      assertNotNull(classArray1);
      assertNotSame(classArray1, classArray0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class1);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.RuntimeException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      String string1 = ClassUtil.classNameOf((Object) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[null]", string1);
      
      String string2 = ClassUtil.nonNullString("serialVersionUID");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("serialVersionUID", string2);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      assertNotNull(list0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.RuntimeException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(class1));
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.RuntimeException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isBogusClass(class0);
      Float float0 = new Float((-2166.2205303));
      ClassUtil.quotedOr(float0, " ew1zUm~cY3QlMfJqI");
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.nameOf(class1);
      ClassUtil.quotedOr(class1, "\"-2166.2205\"");
      ClassUtil.getGenericSuperclass(class0);
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(29, methodArray0.length);
  }
}
