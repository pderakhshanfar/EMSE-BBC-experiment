/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:48:22 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class0);
      ClassUtil.findEnumType(enumMap0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{x`-&X&^@@sMI9:", "{x`-&X&^@@sMI9:");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Cannot upgrade from an instance of ", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLNonTransientException0);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getOuterClass(class1);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class3, class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class1, class1, false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class1, list0);
      Class<Module> class2 = Module.class;
      Class<CreatorProperty> class3 = CreatorProperty.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      JavaType[] javaTypeArray1 = new JavaType[1];
      javaTypeArray1[0] = (JavaType) collectionType1;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings1, (JavaType) collectionType1, javaTypeArray1, (JavaType) collectionType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(list0);
      ClassUtil.rawClass(referenceType1);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getStackTrace();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      PropertyName propertyName0 = PropertyName.construct("E6#JuVo?!Vun?DJA", "E6#JuVo?!Vun?DJA");
      stack0.add(propertyName0);
      ClassUtil.isJacksonStdImpl((Object) stack0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = 'T';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '*';
      charArray0[5] = 'S';
      charArray0[6] = 'o';
      charArray0[7] = '#';
      charArray0[8] = '=';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      Class<AccessPattern> class0 = AccessPattern.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "ce=N+[5M_/f");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: ce=N+[5M_/f
         //  at [Source: (char[])\"?T--*So#=\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      String string0 = "java.lang.Long";
      int int0 = 115;
      String string1 = "1#<Q/GWY3RqV/p/p";
      String string2 = " has no default (no arg) constructor";
      int int1 = 385;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonLocation jsonLocation0 = new JsonLocation("1#<Q/GWY3RqV/p/p", 115, 0, 115);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", jsonLocation0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "java.io.IOException");
      ClassUtil.nameOf((Named) null);
      Class<Module> class0 = Module.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SimpleModule simpleModule0 = new SimpleModule(" has no default (no arg) constructor");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " has no default (no arg) constructor");
      deserializerFactoryConfig0.deserializerModifiers();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      Class<NoClass> class0 = NoClass.class;
      JsonSerializer<NoClass> jsonSerializer0 = (JsonSerializer<NoClass>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      simpleModule0.addKeySerializer((Class<? extends NoClass>) class0, jsonSerializer0);
      SimpleModule simpleModule1 = simpleModule0.setDeserializerModifier(beanDeserializerModifier0);
      Class<String> class1 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleModule1, class1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.module.SimpleModule`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(49);
      Class<IOException> class1 = IOException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "!<0", placeholderForType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, arrayType0, (PropertyName) null, virtualAnnotatedMember0, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, arrayType0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isProxyType(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.node.IntNode", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.node.IntNode");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("DD(", "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl", sQLFeatureNotSupportedException0);
      sQLRecoverableException0.getLocalizedMessage();
      sQLRecoverableException0.spliterator();
      sQLFeatureNotSupportedException0.setNextException(sQLRecoverableException0);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.com.fasterxml.jackson.databind.node.IntNode", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.initCause(mockError0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, (String) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isLocalType(class1, true);
      Class<Object> class2 = Object.class;
      boolean boolean0 = true;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.findConstructor(class0, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLRecoverableException0);
      ClassUtil.getClassDescription(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "no int/Int-argument constructor/factory method to deserialize from Number value (%s)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gwR8dA`");
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1961);
      intArray0[1] = (-4);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.spliterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.defaultValue(class1);
      System.setCurrentTimeMillis((-92L));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature0, false);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory4, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      objectMapper1.configure(deserializationFeature0, false);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(defaultSerializerProvider_Impl1);
      objectReader0.getTypeFactory();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, false);
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(deserializationFeature0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      Class<String> class2 = String.class;
      Class<SequenceInputStream> class3 = SequenceInputStream.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      int int0 = 1;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      objectMapper1.copy();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.hibernate.proxy.", "org.hibernate.proxy.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.hibernate.proxy.
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.canBeABeanType(class0);
      MockIOException mockIOException0 = new MockIOException((String) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.hasClass((Object) null, class1);
      Short short0 = new Short((short)11);
      ClassUtil.classOf(short0);
      List<JavaType> list0 = new Vector<JavaType>();
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1536;
      intArray0[1] = 1536;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{Z?[");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{Z?[", "{Z?[", 1536, intArray0, sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) list0, 1536);
      ClassUtil.getRootCause(jsonMappingException0);
      Class<List> class2 = List.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      LinkedList<NoClass> linkedList0 = new LinkedList<NoClass>();
      enumSet0.retainAll(linkedList0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      ClassUtil.nameOf((Named) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.verifyMustOverride(class0, runtimeException0, "[null]");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) runtimeException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeFactory.defaultInstance();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2);
      enumSet0.add(accessPattern2);
      enumSet0.add(accessPattern0);
      ClassUtil.classOf(accessPattern0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<List> class1 = List.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructRawCollectionType(class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 1054598314 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$557730087) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      MockIOException mockIOException0 = new MockIOException("tz[s");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("tz[s", "tz[s", mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<List> class0 = List.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.createInstance(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SequenceInputStream> class1 = SequenceInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReader0.withFormatDetection(objectReaderArray0);
      String string0 = "Cannot figure out type for EnumSet (odd JDK platform?)";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(9, "Cannot figure out type for EnumSet (odd JDK platform?)", 96, 0, 96, (-1460), 0, (-1235), 9, (-1807771059), (-1235));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end time -1807771059
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isLocalType(class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)18;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 1, 2022);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "f$I(R^ CmnfM|");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NULL: f$I(R^ CmnfM|
         //  at [Source: (byte[])\"\u001F\uFFFD\uFFFD)\uFFFD\uFFFD\u0012\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.defaultValue(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
      ClassUtil.getConstructors(class0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class2, true);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<RuntimeException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedParameterTypes();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeFactory.defaultInstance();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet.of(accessPattern0, accessPattern1, accessPattern2);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      typeFactory0.constructMapType(class0, class0, class1);
      Class<CreatorProperty> class2 = CreatorProperty.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ClassUtil.hasClass(resolvedRecursiveType0, class1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.hasClass(typeFactory0, class1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      Iterator<MapLikeType> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr(iterator0, (String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactory0, (Class<?>) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAttribute(beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "Fp");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Fp
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.hasClass(class0, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-o_$y:ZYE#w,vyMv", "q!5i:C;H");
      MockError mockError0 = new MockError(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(mockError0);
      MockError mockError1 = new MockError("O8-kjXu$y-.U", sQLRecoverableException1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError1, "xn&)");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=il'/");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockPrintStream1, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0, "hJne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", (-1744674775));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.annotatio", ";\"_", 3, sQLNonTransientException0);
      sQLTimeoutException0.getSuppressed();
      sQLNonTransientException0.initCause(sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Short> class2 = Short.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.isLocalType(class1, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, (Throwable) null);
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.getStackTrace();
      mockRuntimeException0.getSuppressed();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = null;
      Class<Double> class0 = Double.class;
      ClassUtil.hasClass((Object) null, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      Class<Long> class1 = Long.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      ClassUtil.classNameOf(class2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<CollectionType> class0 = CollectionType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.defaultValue(class0);
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      System.setCurrentTimeMillis(1000000000L);
      Class<NoClass> class0 = NoClass.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<HashMap> class0 = HashMap.class;
      Class<Long> class1 = Long.TYPE;
      Class<Double> class2 = Double.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      Object object0 = new Object();
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Short");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError("org.hibernate.proxy.java.lang.Short");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.hibernate.proxy.java.lang.Short");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-778), objectMapper1, mockFileOutputStream0, byteArray0, (byte)0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      MockIOException mockIOException0 = new MockIOException("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockError0, (Object) mockIOException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.hibernate.proxy.java.lang.Short (through reference chain: org.evosuite.runtime.mock.java.io.MockIOException[\"net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Byte byte0 = new Byte((byte)126);
      enumMap0.put(accessPattern0, byte0);
      ClassUtil.findEnumType(enumMap0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Long> class2 = Long.class;
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isBogusClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "no int/Int-argument constructor/factory method to deserialize from Number value (%s)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gwR8dA`");
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1961);
      intArray0[1] = (-4);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.spliterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.emptyIterator();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.quotedOr(class2, "org.hibernate.proxy.java.io.IOException");
      System.setCurrentTimeMillis(0L);
      ClassUtil.backticked("com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase");
      Class<Character> class3 = Character.class;
      ClassUtil.getGenericInterfaces(class3);
      System.setCurrentTimeMillis(1889L);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<IOException>[] classArray0 = (Class<IOException>[]) Array.newInstance(Class.class, 7);
      Class<IOException> class4 = IOException.class;
      classArray0[0] = class4;
      Class<IOException> class5 = IOException.class;
      classArray0[1] = class5;
      Class<IOException> class6 = IOException.class;
      classArray0[2] = class6;
      Class<IOException> class7 = IOException.class;
      classArray0[3] = class7;
      Class<IOException> class8 = IOException.class;
      classArray0[4] = class8;
      Class<IOException> class9 = IOException.class;
      classArray0[5] = class9;
      Class<IOException> class10 = IOException.class;
      classArray0[6] = class10;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Double> class2 = Double.class;
      ClassUtil.primitiveType(class2);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = null;
      try {
        beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.copy();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", (String) null, (-1807672430));
      MockIOException mockIOException0 = new MockIOException((String) null, sQLRecoverableException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findEnumType(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.findClassAnnotations(class0);
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperTypes(class2, class2, list0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      String string0 = "<";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) runtimeException0, "<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<Character> class0 = Character.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) mapLikeType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, javaType0, (JavaType[]) null, (JavaType) mapLikeType0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) mapLikeType0, (JavaType[]) null, javaType0);
      SimpleType simpleType0 = referenceType0.withStaticTyping();
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(simpleType0);
      ClassUtil.findSuperTypes((JavaType) collectionType1, (Class<?>) class1, false);
      ClassUtil.findSuperTypes(javaType0, class1, false);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (Byte) null);
      EnumMap<AccessPattern, Byte> enumMap1 = null;
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      Class<IntNode> class2 = IntNode.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(class0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(collectionType1, ",");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [collection type; class java.util.LinkedList, contains [simple type, class com.fasterxml.jackson.databind.node.IntNode]]: ,
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      Boolean boolean0 = new Boolean(true);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getNextException();
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "e44.e[{Fq|,Ku)%qZ,{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // e44.e[{Fq|,Ku)%qZ,{
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      JsonSetter jsonSetter0 = mock(JsonSetter.class, new ViolatedAssumptionAnswer());
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultSetterInfo(jsonSetter_Value0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper4 = objectMapper3.enable(serializationFeature0);
      ObjectReader objectReader0 = objectMapper4.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      Class<Character> class2 = Character.class;
      Class<HashMap> class3 = HashMap.class;
      Class<RuntimeException> class4 = RuntimeException.class;
      MapType mapType0 = typeFactory0.constructMapType(class3, class1, class4);
      Object object0 = new Object();
      Class<Byte> class5 = Byte.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class5, (JavaType) mapType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      MapType mapType1 = (MapType)mapType0.withTypeHandler(resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType1, mapType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class4);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ReferenceType referenceType2 = referenceType1.withTypeHandler(mockRuntimeException0);
      mapType1.withTypeHandler(referenceType2);
      Class<PlaceholderForType> class6 = PlaceholderForType.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class6, false);
      Class<AccessPattern> class7 = AccessPattern.class;
      ClassUtil.canBeABeanType(class7);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(";Y&iBo4Q6yeyN0F*a&", ";Y&iBo4Q6yeyN0F*a&");
      Class<Object> class0 = Object.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findEnumType(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "unknown";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unknown");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      Method method0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassUtil.backticked("Strange Map type ");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotations();
      constructor0.getDeclaredAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.backticked("`Strange Map type `");
      ClassUtil.emptyIterator();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Strange Map type ", "Mk;,V!)u8E+`1HBI");
      MockError mockError0 = new MockError(sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.hasClass(class0, class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct((Collection<SettableBeanProperty>) arrayList0, true, (Map<String, List<PropertyName>>) hashMap0);
      HashMap<String, SettableBeanProperty> hashMap1 = new HashMap<String, SettableBeanProperty>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("gb");
      BeanDeserializer beanDeserializer0 = null;
      try {
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBuilder) null, basicBeanDescription0, beanPropertyMap0, hashMap1, linkedHashSet0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.isLocalType(class3, false);
      Class<String> class4 = String.class;
      ClassUtil.canBeABeanType(class4);
      Class<Long> class5 = Long.class;
      ClassUtil.isConcrete(class5);
      Class<Integer> class6 = Integer.class;
      ClassUtil.primitiveType(class6);
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) stack0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      Class<Byte> class7 = Byte.class;
      ClassUtil.findConstructor(class7, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[5];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      annotationMapArray0[2] = annotationMap0;
      annotationMapArray0[3] = annotationMap0;
      annotationMapArray0[4] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, (Constructor<?>) null, annotationMap0, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Throwable throwable0 = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classOf(class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.nullOrToString(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, (InputStream) null, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (-2630), 3, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      Class<Integer> class1 = Integer.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) jsonParserSequence0, (Class<?>) class1, jsonToken0, "java.lang.Class@0000000001");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected NOT_AVAILABLE: java.lang.Class@0000000001
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.quotedOr(class1, "O~ZqlU,i,3g<");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 108, objectMapper1, mockFileOutputStream0, byteArray0, 2578, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassUtil.nonNullString(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      TypeBindings.emptyBindings();
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      Class<Float> class2 = Float.class;
      Class<MapType> class3 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.getGenericInterfaces(class2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassUtil.nonNullString(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      TypeBindings.emptyBindings();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      sQLTransactionRollbackException0.printStackTrace();
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.setAccessible(false);
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = new SQLException((String) null, (String) null, sQLException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[0];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(X/0|E]N");
      ClassUtil.throwIfIOE(sQLException0);
      ClassUtil.nonNull((MapType) null, (MapType) null);
      ClassUtil.getConstructors(class0);
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap1 = new EnumMap<AccessPattern, Byte>(class3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.setAccessible(true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class1);
      Object object0 = new Object();
      mapType0.withTypeHandler(object0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.classOf(objectReader0);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getPackageName(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[0];
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, constructor0, annotationMap0, annotationMapArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition((AnnotationIntrospector) null, annotatedConstructor0, propertyName0, (PropertyMetadata) null, jsonInclude_Value0);
      ClassUtil.nameOf((Named) simpleBeanPropertyDefinition0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ClassUtil.throwIfError(batchUpdateException0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<AccessPattern> class1 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.hasClass((Object) null, class1);
      Short short0 = new Short((short)11);
      ClassUtil.classOf(short0);
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("7]=k`NmPOBRnr.U3");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.nullOrToString(constructor1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.throwIfError((Throwable) null);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.nameOf(class3);
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
      PropertyName propertyName0 = new PropertyName("java.lang.reflect.Constructor@0000000002");
      ObjectIdGenerator<Void> objectIdGenerator0 = (ObjectIdGenerator<Void>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<AccessibleObject> jsonDeserializer0 = (JsonDeserializer<AccessibleObject>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      objectIdReader0.getIdType();
      // Undeclared exception!
      try { 
        ReferenceType.construct(class2, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      ClassUtil.backticked(";\"dha KFt8s1G/6qEt");
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.findEnumType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2524;
      longArray0[1] = (long) 2524;
      longArray0[2] = (long) 2524;
      longArray0[3] = (long) 2524;
      longArray0[4] = (long) 2524;
      longArray0[5] = (long) 2524;
      SQLException sQLException0 = new SQLException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.java.lang.Integer", (String) null, 2524, longArray0, sQLException0);
      batchUpdateException0.getNextException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.java.lang.Integer", "org.hibernate.proxy.java.lang.Integer", (Throwable) null);
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, true);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericSuperclass(class1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Integer> class1 = Integer.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.getOuterClass(class0);
      ClassUtil.getOuterClass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.isJacksonStdImpl(class4);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperClasses((Class<?>) null, class2, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxycomfasterxml.jackson.databind.type.SimpleType", "org.hibernate.proxycomfasterxml.jackson.databind.type.SimpleType");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxycomfasterxml.jackson.databind.type.SimpleType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Byte> class1 = Byte.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.findEnumType(class0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getGenericInterfaces(class3);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0, ", array size ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // , array size 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isBogusClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.getGenericInterfaces(class0);
      Character character0 = new Character('\\');
      ClassUtil.nonNull((Character) null, character0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isBogusClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class1);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Byte byte0 = new Byte((byte) (-1));
      enumMap0.put(accessPattern0, byte0);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.primitiveType(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "!xVp: '");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, "!xVp: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // !xVp: '
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Cannot figure out type for EnumSet (odd JDK platform?)");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!3f2|Q>V", "!3f2|Q>V");
      sQLTransactionRollbackException0.printStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("b", "fn\"gpmY;lmy6", (-1));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(0.0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("fn\"gpmY;lmy6");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'Z';
      charArray0[2] = '^';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 3, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1), false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) readerBasedJsonParser0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: !3f2|Q>V
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.getDeclaringClass(class0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      System.setCurrentTimeMillis((-1L));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ClassUtil.findClassAnnotations(class0);
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes((Class<?>) null, class2);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class3, "; id-resolver: ", (JavaType) null);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes.getEmpty();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class1);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class1, false);
      constructor1.setAccessible(false);
      Class<ReferenceType> class2 = ReferenceType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      objectReader0.at(jsonPointer0);
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<HashMap> class3 = HashMap.class;
      Class<Object> class4 = Object.class;
      Class<AccessPattern> class5 = AccessPattern.class;
      MapType mapType0 = typeFactory0.constructMapType(class3, class4, class5);
      MapLikeType mapLikeType0 = mapType0.withTypeHandler(constructor0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class2, false);
      Class<?> class6 = ClassUtil.rawClass(mapLikeType0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.util.HashMap is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassUtil.nonNull((String) null, (String) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class1, false);
      constructor1.setAccessible(false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      objectReader1.getTypeFactory();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Short> class0 = Short.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleValueInstantiators0, class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.hasClass(jsonMappingException0, class1);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      Class<?> class3 = ClassUtil.classOf(class2);
      ClassUtil.findSuperTypes(class3, class1);
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Short> class0 = Short.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleValueInstantiators0, class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.hasClass(jsonMappingException0, class1);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `short` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.module.SimpleValueInstantiators`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<String> class1 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isConcrete(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<MapType> class2 = MapType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = objectMapper0.constructType(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, (String) null, javaType0);
      virtualAnnotatedMember0.toString();
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassUtil.backticked(",z");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getConstructors(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isBogusClass(class1);
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, false);
      ClassUtil.nullOrToString("");
      System.setCurrentTimeMillis((-1L));
      Class<Character> class3 = Character.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper2, (OutputStream) null, byteArray0, (byte)24, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 2;
      intArray0[4] = 56320;
      intArray0[5] = 2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.RuntimeEx");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: java.sql.SQLTimeoutException: java.lang.RuntimeEx
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class1, false);
      constructor1.setAccessible(false);
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = new SQLException((String) null, (String) null, sQLException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassUtil.getRootCause(sQLException1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (Byte) null);
      ClassUtil.findEnumType(enumMap0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotationsByType(class1);
      constructor0.setAccessible(false);
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = new SQLException((String) null, (String) null, sQLException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Throwable throwable0 = ClassUtil.getRootCause(sQLException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null, throwable0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper1 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = 'b';
      charArray0[2] = 'B';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-5), pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, (-2426), 3, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2538), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(true);
      Class<ReferenceType> class1 = ReferenceType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class2 = HashMap.class;
      Class<Object> class3 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      MapType mapType0 = typeFactory1.constructMapType(class2, class1, class1);
      mapType0.withTypeHandler(objectReader1);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class3, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=ov", "QC)/X", 801);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0, "Attempted to unwrap '%s' value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempted to unwrap '%s' value
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ClassUtil.quotedOr((Object) null, (String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException.from((JsonGenerator) null, "PROPAGATE_TRANSIENT_MARKER", (Throwable) sQLSyntaxErrorException0);
      ClassUtil.getClassDescription(beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Boolean boolean0 = new Boolean(false);
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findConstructor(class1, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("TFmp{$Rb)e'8", "net.sf.cglib.proxy.java.lang.Character");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) class1, "ntU&]q0pjeom^QI");
      sQLFeatureNotSupportedException0.initCause(jsonMappingException0);
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[collection-like type; class ", "TFmp{$Rb)e'8");
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      Class<Object> class2 = Object.class;
      ClassUtil.isJacksonStdImpl(class2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.java.lang.Character", "class to register value instantiator for", 1536);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.java.lang.Character
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Boolean boolean0 = new Boolean(false);
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.findEnumType(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Integer> class1 = Integer.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperTypes(class1, class2);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor1.getDeclaredAnnotationsByType(class2);
      constructor1.setAccessible(false);
      constructor0.getTypeParameters();
      classUtil_Ctor0.getParamCount();
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = new SQLException((String) null, (String) null, sQLException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassUtil.getRootCause(sQLException0);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.nameOf((Named) null);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.quotedOr(constructor0, "[Ik3bg%#/}?&Yk{9II.");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "keyUniverse", (Throwable) sQLSyntaxErrorException0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializerModifiers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.emptyIterator();
      ClassUtil.findSuperClasses(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vals", "p6P8P(", (Throwable) null);
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedException0.spliterator();
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<Double> class1 = Double.class;
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl1.getContextualType();
      Stack<JavaType> stack0 = new Stack<JavaType>();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isLocalType(class0, false);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getConstructors(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class2 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class2);
      Long long0 = new Long(738L);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.hasClass(long0, class3);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class1, false);
      constructor1.setAccessible(false);
      Class<ReferenceType> class2 = ReferenceType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<HashMap> class3 = HashMap.class;
      Class<Object> class4 = Object.class;
      Class<AccessPattern> class5 = AccessPattern.class;
      MapType mapType0 = typeFactory0.constructMapType(class3, class4, class5);
      MapLikeType mapLikeType0 = mapType0.withTypeHandler(constructor0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class2, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("serialVersionUID", "Attempted to unwrap '%s' value", 801);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0, "Attempted to unwrap '%s' value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempted to unwrap '%s' value
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getClassDescription((Object) null);
      Class<String> class2 = String.class;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unknown");
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperTypes(class2, class3);
      // Undeclared exception!
      try { 
        SimpleType.constructUnsafe((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class1, false);
      constructor1.setAccessible(false);
      Class<ReferenceType> class2 = ReferenceType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<HashMap> class3 = HashMap.class;
      Class<Object> class4 = Object.class;
      Class<AccessPattern> class5 = AccessPattern.class;
      MapType mapType0 = typeFactory0.constructMapType(class3, class4, class5);
      MapLikeType mapLikeType0 = mapType0.withTypeHandler(constructor0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class2, false);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!3f2|Q>V", "!3f2|Q>V");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("b");
      sQLTransactionRollbackException0.setNextException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("b", "!3f2|Q>V", intArray0, sQLTransactionRollbackException0);
      MockError mockError0 = new MockError("[]");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "!3f2|Q>V");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      ObjectReader objectReader2 = objectReader1.withoutRootName();
      Double double0 = new Double(3);
      ObjectReader objectReader3 = objectReader2.withAttribute(double0, mockError0);
      objectReader3.withoutAttribute("ZERO_LENGTH_ENUM_ARRAY");
      ObjectReader objectReader4 = objectReader0.with(deserializationFeature0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "JSON");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1003, objectReader4, charArrayWriter1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = false;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class1, false);
      constructor1.setAccessible(false);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getTypeParameters();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
      classUtil_Ctor0.getDeclaringClass();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isBogusClass(class0);
      MockThrowable mockThrowable0 = new MockThrowable("$H~6z0!");
      SQLWarning sQLWarning0 = new SQLWarning("$H~6z0!", mockThrowable0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-2377L);
      longArray0[1] = (-1L);
      longArray0[2] = (long) 253;
      longArray0[3] = (-2377L);
      longArray0[4] = (long) 253;
      longArray0[5] = (-2377L);
      longArray0[6] = 0L;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("K7,MIkcD", "&m.P~?tOp6b&+S", 253, longArray0, mockThrowable0);
      SQLException sQLException0 = new SQLException("K7,MIkcD", (String) null, batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("+e{~Xz?w:q", "FIELD_NAME", mockThrowable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",/");
      ClassUtil.throwIfIOE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Short short0 = new Short((short) (-1362));
      ClassUtil.classNameOf(short0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getPackageName(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Boolean.valueOf((String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-1);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations", "com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations", (-684));
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLException0);
      MockError mockError0 = new MockError("");
      sQLIntegrityConstraintViolationException0.addSuppressed(mockError0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations", "cyLUs^sIYOXpi", "cyLUs^sIYOXpi", 1235);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations", "cyLUs^sIYOXpi", "Orm_VBDi+>s ", 3);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("net.sf.cglib.proxy.", "Class ", "`DlH]M\"2TL", 1536);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      sQLIntegrityConstraintViolationException0.getStackTrace();
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "`DlH]M\"2TL");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vals", "p6P8P(", (Throwable) null);
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedException0.spliterator();
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<Double> class1 = Double.class;
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl1.getContextualType();
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      Class<Error> class4 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      ClassUtil.quotedOr(placeholderForType0, " is not a primitive type");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "*w#&nlBd,{/4$b>OV", (Throwable) sQLSyntaxErrorException0);
      ClassUtil.getClassDescription(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      placeholderForType0.toCanonical();
      ClassUtil.quotedOr(placeholderForType0, " is not a primitive type");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!3f2|Q>V", "!3f2|Q>V");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("b");
      sQLTransactionRollbackException0.setNextException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("b", "!3f2|Q>V", intArray0, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // b
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getPackageName(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      boolean boolean0 = true;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = "local/anonymous";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "local/anonymous");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local/anonymous
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor1.getDeclaredAnnotationsByType(class2);
      constructor1.setAccessible(false);
      constructor0.getTypeParameters();
      classUtil_Ctor0.getParamCount();
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = new SQLException((String) null, (String) null, sQLException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[0];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(X/0|E]N");
      ClassUtil.throwIfIOE(sQLException0);
      ClassUtil.nonNull((MapType) null, (MapType) null);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassUtil.nonNull("No native support for writing Type Ids", "WsY#kSZs`");
      ClassUtil.nullOrToString("No native support for writing Type Ids");
      Short short0 = new Short((short) (-1362));
      ClassUtil.classNameOf(short0);
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      ClassUtil.isJacksonStdImpl(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAttribute((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil.nonNull("No native support for writing Type Ids", "WsY#kSZs`");
      ClassUtil.nullOrToString("No native support for writing Type Ids");
      Short short0 = new Short((short) (-1362));
      ClassUtil.classNameOf(short0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getPackageName(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Boolean boolean0 = Boolean.valueOf((String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, boolean0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 1658, dataInputStream0, objectMapper0, byteQuadsCanonicalizer0, (byte) (-1));
      Class<ReferenceType> class2 = ReferenceType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8DataInputJsonParser0, (Class<?>) class2, jsonToken0, "java.lang");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, "entrySet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // entrySet
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isLocalType(class0, false);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Long> class2 = Long.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class2);
      MockFile mockFile0 = new MockFile("vals");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)18;
      mockFile0.getAbsolutePath();
      byteArray0[3] = (byte)23;
      mockPrintStream0.write(byteArray0, (int) (byte)0, (int) (byte)18);
      PrintStream printStream0 = mockPrintStream0.format("vbd", (Object[]) classUtil_CtorArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader0, printStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLDataException sQLDataException0 = new SQLDataException("M 0b~-~ 017&1A~+ ", "enum");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) printStream0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: M 0b~-~ 017&1A~+ 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Character> class0 = Character.class;
      String string0 = "keyType";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "keyType");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Character) must override method 'keyType'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      sQLSyntaxErrorException0.getLocalizedMessage();
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, (String) null, (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.util.ClassUtil", "com.fasterxml.jackson.databind.util.ClassUtil", "com.fasterxml.jackson.databind.util.ClassUtil", (-2510));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("com.fasterxml.jackson.databind.util.ClassUtil", "com.fasterxml.jackson.databind.util.ClassUtil", " (from class ", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement(" (from class ", " (from class ", " (from class ", 1301);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("p", "n-eL_4G#", "n-eL_4G#", 1301);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement(":k5</\"N'36W.#>j7Bm", "l>I#7V\"VTAM?~", "com.fasterxml.jackson.databind.util.ClassUtil", 1301);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("n-eL_4G#", "tM,8zrAoTx380]N", "p", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("aLd*:PUK", "", "2Pg_0<", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("=9S9Pxz~=y7", "", 0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1070);
      intArray0[1] = 0;
      intArray0[2] = 1518;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "y#x><1^ckKiHt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // y#x><1^ckKiHt
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Integer> class1 = Integer.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperTypes(class1, class2);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1003;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      ObjectReader objectReader2 = objectReader1.withoutRootName();
      Double double0 = new Double(3);
      ObjectReader objectReader3 = objectReader2.withAttribute(double0, mockError0);
      ObjectReader objectReader4 = objectReader3.withoutAttribute("ZERO_LENGTH_ENUM_ARRAY");
      // Undeclared exception!
      try { 
        objectReader4.at("ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"ZERO_LENGTH_ENUM_ARRAY\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ClassUtil.nonNullString(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      Class<Float> class0 = Float.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.nullOrToString(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("7]=k`NmPOBRnr.U3");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      sQLRecoverableException0.addSuppressed(sQLRecoverableException1);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, "Cannot figure out type for EnumSet (odd JDK platform?)", (-1776), sQLRecoverableException0);
      sQLRecoverableException2.fillInStackTrace();
      ClassUtil.throwIfRTE(sQLRecoverableException2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Float float0 = new Float(75.199);
      Class<?> class0 = ClassUtil.classOf(float0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.primitiveType(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.printStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException("elementType", "elementType", (-756), sQLClientInfoException0);
      sQLClientInfoException0.getSuppressed();
      sQLClientInfoException0.getSuppressed();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      sQLFeatureNotSupportedException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLDataException: elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class1, false);
      constructor1.setAccessible(false);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isConcrete(class1);
      ClassUtil.isJacksonStdImpl(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Float float0 = new Float(75.199);
      Class<?> class0 = ClassUtil.classOf(float0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.primitiveType(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.printStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException("elementType", "elementType", (-756), sQLClientInfoException0);
      sQLClientInfoException0.getSuppressed();
      sQLClientInfoException0.getSuppressed();
      sQLClientInfoException0.fillInStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      sQLFeatureNotSupportedException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLDataException: elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.primitiveType(class0);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vals", "p6P8P(", (Throwable) null);
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedException0.spliterator();
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<Double> class1 = Double.class;
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      float float0 = 0.0F;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl1.getContextualType();
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(e", "(e", 15);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) null, ":akn&;iOE}vo ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("serialVersionUID");
      sQLNonTransientConnectionException0.setNextException(sQLIntegrityConstraintViolationException0);
      jsonMappingException0.prependPath((Object) "(e", 0);
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      ClassUtil.classOf(throwable0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Short> class0 = Short.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleValueInstantiators0, class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.hasClass(jsonMappingException0, class1);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Short` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.module.SimpleValueInstantiators`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Short> class0 = Short.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleValueInstantiators0, class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.setNextException(sQLTransactionRollbackException0);
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      ClassUtil.classOf(jsonMappingException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P", "l3<n0n(t", (-1246572939));
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "nxfY@Li14qQDV{rA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nxfY@Li14qQDV{rA
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.quotedOr(constructor0, "[Ik3bg%#/}?&Yk{9II.");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException.from((JsonGenerator) null, "keyUniverse", (Throwable) sQLSyntaxErrorException0);
      ClassUtil.nullOrToString("keyUniverse");
      ClassUtil.nameOf(class0);
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.isConcrete(class2);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor1.getParameterAnnotations();
      constructor0.setAccessible(true);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) classUtil_Ctor1._ctor);
      classUtil_Ctor0.getDeclaringClass();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, true);
      Class<String> class2 = String.class;
      ClassUtil.isBogusClass(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.isCollectionMapOrArray(class3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<MapType> class2 = MapType.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.emptyIterator();
      ClassUtil.primitiveType(class3);
      ClassUtil.getGenericSuperclass(class2);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (-2377L);
      MockThrowable mockThrowable0 = new MockThrowable("&m.P~?tOp6b&+S");
      SQLWarning sQLWarning0 = new SQLWarning("$H~6z0!", mockThrowable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.lang.reflect", "serialVersionUID", 0, longArray0, sQLWarning0);
      SQLException sQLException0 = new SQLException("serialVersionUID", "serialVersionUID", batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("serialVersionUID", "serialVersionUID", sQLException0);
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.canBeABeanType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      String string0 = "B&K`q(%";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("B&K`q(%", "NON_FINAL", 483, sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("B&K`q(%", "primitive", sQLClientInfoException0);
      sQLTransientConnectionException0.setNextException(sQLFeatureNotSupportedException0);
      sQLClientInfoException0.addSuppressed(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        sQLClientInfoException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      Class<String> class2 = String.class;
      ClassUtil.isConcrete(class2);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.setAccessible(true);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
      classUtil_Ctor0.getDeclaringClass();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      sQLNonTransientException0.setNextException((SQLException) null);
      sQLNonTransientException0.getLocalizedMessage();
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.nameOf(class0);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.nonNullString("`java.lang.Integer`");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLWarning sQLWarning0 = new SQLWarning("s[3E2L6e\nesg_/>ak", "s[3E2L6e\nesg_/>ak", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "s[3E2L6e\nesg_/>ak", (Throwable) sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s[3E2L6e
         // esg_/>ak
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.getConstructors(class0);
      Short short0 = new Short((short)40);
      ClassUtil.isJacksonStdImpl((Object) short0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) arrayList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(624);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, (Class<?>) null, "com.fasterxml.jackson.databind.annotation", placeholderForType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.nameOf(class0);
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      
      SQLException sQLException0 = new SQLException((String) null, "`com.fasterxml.jackson.databind.type.PlaceholderForType`");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase");
      sQLException0.addSuppressed(mockRuntimeException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      sQLException0.printStackTrace();
      ClassUtil.throwIfError(sQLException0);
      ClassUtil.nonNullString("");
      ClassUtil classUtil0 = new ClassUtil();
      Class<Void> class2 = Void.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.nameOf(class0);
      boolean boolean1 = ClassUtil.isProxyType(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getGenericInterfaces(class1);
      boolean boolean2 = ClassUtil.isConcrete(class0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = ClassUtil.nameOf(class0);
      assertEquals("`com.fasterxml.jackson.databind.type.PlaceholderForType`", string1);
  }
}
